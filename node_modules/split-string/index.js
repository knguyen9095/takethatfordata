/*!
 * split-string <https://github.com/jonschlinkert/split-string>
 *
 * Copyright (c) 2015-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

'use strict';

var extend = require('extend-shallow');

module.exports = function(str, options, fn) ***REMOVED***
  if (typeof str !== 'string') ***REMOVED***
    throw new TypeError('expected a string');
  ***REMOVED***

  if (typeof options === 'function') ***REMOVED***
    fn = options;
    options = null;
  ***REMOVED***

  // allow separator to be defined as a string
  if (typeof options === 'string') ***REMOVED***
    options = ***REMOVED*** sep: options ***REMOVED***;
  ***REMOVED***

  var opts = extend(***REMOVED***sep: '.'***REMOVED***, options);
  var quotes = opts.quotes || ['"', "'", '`'];
  var brackets;

  if (opts.brackets === true) ***REMOVED***
    brackets = ***REMOVED***
      '<': '>',
      '(': ')',
      '[': ']',
      '***REMOVED***': '***REMOVED***'
    ***REMOVED***;
  ***REMOVED*** else if (opts.brackets) ***REMOVED***
    brackets = opts.brackets;
  ***REMOVED***

  var tokens = [];
  var stack = [];
  var arr = [''];
  var sep = opts.sep;
  var len = str.length;
  var idx = -1;
  var closeIdx;

  function expected() ***REMOVED***
    if (brackets && stack.length) ***REMOVED***
      return brackets[stack[stack.length - 1]];
    ***REMOVED***
  ***REMOVED***

  while (++idx < len) ***REMOVED***
    var ch = str[idx];
    var next = str[idx + 1];
    var tok = ***REMOVED*** val: ch, idx: idx, arr: arr, str: str ***REMOVED***;
    tokens.push(tok);

    if (ch === '\\') ***REMOVED***
      tok.val = keepEscaping(opts, str, idx) === true ? (ch + next) : next;
      tok.escaped = true;
      if (typeof fn === 'function') ***REMOVED***
        fn(tok);
      ***REMOVED***
      arr[arr.length - 1] += tok.val;
      idx++;
      continue;
    ***REMOVED***

    if (brackets && brackets[ch]) ***REMOVED***
      stack.push(ch);
      var e = expected();
      var i = idx + 1;

      if (str.indexOf(e, i + 1) !== -1) ***REMOVED***
        while (stack.length && i < len) ***REMOVED***
          var s = str[++i];
          if (s === '\\') ***REMOVED***
            s++;
            continue;
          ***REMOVED***

          if (quotes.indexOf(s) !== -1) ***REMOVED***
            i = getClosingQuote(str, s, i + 1);
            continue;
          ***REMOVED***

          e = expected();
          if (stack.length && str.indexOf(e, i + 1) === -1) ***REMOVED***
            break;
          ***REMOVED***

          if (brackets[s]) ***REMOVED***
            stack.push(s);
            continue;
          ***REMOVED***

          if (e === s) ***REMOVED***
            stack.pop();
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

      closeIdx = i;
      if (closeIdx === -1) ***REMOVED***
        arr[arr.length - 1] += ch;
        continue;
      ***REMOVED***

      ch = str.slice(idx, closeIdx + 1);
      tok.val = ch;
      tok.idx = idx = closeIdx;
    ***REMOVED***

    if (quotes.indexOf(ch) !== -1) ***REMOVED***
      closeIdx = getClosingQuote(str, ch, idx + 1);
      if (closeIdx === -1) ***REMOVED***
        arr[arr.length - 1] += ch;
        continue;
      ***REMOVED***

      if (keepQuotes(ch, opts) === true) ***REMOVED***
        ch = str.slice(idx, closeIdx + 1);
      ***REMOVED*** else ***REMOVED***
        ch = str.slice(idx + 1, closeIdx);
      ***REMOVED***

      tok.val = ch;
      tok.idx = idx = closeIdx;
    ***REMOVED***

    if (typeof fn === 'function') ***REMOVED***
      fn(tok, tokens);
      ch = tok.val;
      idx = tok.idx;
    ***REMOVED***

    if (tok.val === sep && tok.split !== false) ***REMOVED***
      arr.push('');
      continue;
    ***REMOVED***

    arr[arr.length - 1] += tok.val;
  ***REMOVED***

  return arr;
***REMOVED***;

function getClosingQuote(str, ch, i, brackets) ***REMOVED***
  var idx = str.indexOf(ch, i);
  if (str.charAt(idx - 1) === '\\') ***REMOVED***
    return getClosingQuote(str, ch, idx + 1);
  ***REMOVED***
  return idx;
***REMOVED***

function keepQuotes(ch, opts) ***REMOVED***
  if (opts.keepDoubleQuotes === true && ch === '"') return true;
  if (opts.keepSingleQuotes === true && ch === "'") return true;
  return opts.keepQuotes;
***REMOVED***

function keepEscaping(opts, str, idx) ***REMOVED***
  if (typeof opts.keepEscaping === 'function') ***REMOVED***
    return opts.keepEscaping(str, idx);
  ***REMOVED***
  return opts.keepEscaping === true || str[idx + 1] === '\\';
***REMOVED***
