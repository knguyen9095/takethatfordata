'use strict';

var isExtendable = require('is-extendable');
var assignSymbols = require('assign-symbols');

module.exports = Object.assign || function(obj/*, objects*/) ***REMOVED***
  if (obj === null || typeof obj === 'undefined') ***REMOVED***
    throw new TypeError('Cannot convert undefined or null to object');
  ***REMOVED***
  if (!isObject(obj)) ***REMOVED***
    obj = ***REMOVED******REMOVED***;
  ***REMOVED***
  for (var i = 1; i < arguments.length; i++) ***REMOVED***
    var val = arguments[i];
    if (isString(val)) ***REMOVED***
      val = toObject(val);
    ***REMOVED***
    if (isObject(val)) ***REMOVED***
      assign(obj, val);
      assignSymbols(obj, val);
    ***REMOVED***
  ***REMOVED***
  return obj;
***REMOVED***;

function assign(a, b) ***REMOVED***
  for (var key in b) ***REMOVED***
    if (hasOwn(b, key)) ***REMOVED***
      a[key] = b[key];
    ***REMOVED***
  ***REMOVED***
***REMOVED***

function isString(val) ***REMOVED***
  return (val && typeof val === 'string');
***REMOVED***

function toObject(str) ***REMOVED***
  var obj = ***REMOVED******REMOVED***;
  for (var i in str) ***REMOVED***
    obj[i] = str[i];
  ***REMOVED***
  return obj;
***REMOVED***

function isObject(val) ***REMOVED***
  return (val && typeof val === 'object') || isExtendable(val);
***REMOVED***

/**
 * Returns true if the given `key` is an own property of `obj`.
 */

function hasOwn(obj, key) ***REMOVED***
  return Object.prototype.hasOwnProperty.call(obj, key);
***REMOVED***

function isEnum(obj, key) ***REMOVED***
  return Object.prototype.propertyIsEnumerable.call(obj, key);
***REMOVED***
