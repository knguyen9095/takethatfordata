exports.read = function (buffer, offset, isLE, mLen, nBytes) ***REMOVED***
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) ***REMOVED******REMOVED***

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) ***REMOVED******REMOVED***

  if (e === 0) ***REMOVED***
    e = 1 - eBias
  ***REMOVED*** else if (e === eMax) ***REMOVED***
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  ***REMOVED*** else ***REMOVED***
    m = m + Math.pow(2, mLen)
    e = e - eBias
  ***REMOVED***
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
***REMOVED***

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) ***REMOVED***
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) ***REMOVED***
    m = isNaN(value) ? 1 : 0
    e = eMax
  ***REMOVED*** else ***REMOVED***
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) ***REMOVED***
      e--
      c *= 2
    ***REMOVED***
    if (e + eBias >= 1) ***REMOVED***
      value += rt / c
    ***REMOVED*** else ***REMOVED***
      value += rt * Math.pow(2, 1 - eBias)
    ***REMOVED***
    if (value * c >= 2) ***REMOVED***
      e++
      c /= 2
    ***REMOVED***

    if (e + eBias >= eMax) ***REMOVED***
      m = 0
      e = eMax
    ***REMOVED*** else if (e + eBias >= 1) ***REMOVED***
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    ***REMOVED*** else ***REMOVED***
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    ***REMOVED***
  ***REMOVED***

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) ***REMOVED******REMOVED***

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) ***REMOVED******REMOVED***

  buffer[offset + i - d] |= s * 128
***REMOVED***
