'use strict';
const url = require('url');
const got = require('got');
const registryUrl = require('registry-url');
const registryAuthToken = require('registry-auth-token');
const semver = require('semver');

module.exports = (name, opts) => ***REMOVED***
	const scope = name.split('/')[0];
	const regUrl = registryUrl(scope);
	const pkgUrl = url.resolve(regUrl, encodeURIComponent(name).replace(/^%40/, '@'));
	const authInfo = registryAuthToken(regUrl, ***REMOVED***recursive: true***REMOVED***);

	opts = Object.assign(***REMOVED***
		version: 'latest'
	***REMOVED***, opts);

	const headers = ***REMOVED***
		accept: 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'
	***REMOVED***;

	if (opts.fullMetadata) ***REMOVED***
		delete headers.accept;
	***REMOVED***

	if (authInfo) ***REMOVED***
		headers.authorization = `$***REMOVED***authInfo.type***REMOVED*** $***REMOVED***authInfo.token***REMOVED***`;
	***REMOVED***

	return got(pkgUrl, ***REMOVED***json: true, headers***REMOVED***)
		.then(res => ***REMOVED***
			let data = res.body;
			let version = opts.version;

			if (opts.allVersions) ***REMOVED***
				return data;
			***REMOVED***

			if (data['dist-tags'][version]) ***REMOVED***
				data = data.versions[data['dist-tags'][version]];
			***REMOVED*** else if (version) ***REMOVED***
				if (!data.versions[version]) ***REMOVED***
					const versions = Object.keys(data.versions);
					version = semver.maxSatisfying(versions, version);

					if (!version) ***REMOVED***
						throw new Error('Version doesn\'t exist');
					***REMOVED***
				***REMOVED***

				data = data.versions[version];

				if (!data) ***REMOVED***
					throw new Error('Version doesn\'t exist');
				***REMOVED***
			***REMOVED***

			return data;
		***REMOVED***)
		.catch(err => ***REMOVED***
			if (err.statusCode === 404) ***REMOVED***
				throw new Error(`Package \`$***REMOVED***name***REMOVED***\` doesn't exist`);
			***REMOVED***

			throw err;
		***REMOVED***);
***REMOVED***;
