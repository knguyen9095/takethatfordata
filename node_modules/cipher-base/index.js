var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) ***REMOVED***
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) ***REMOVED***
    this[hashMode] = this._finalOrDigest
  ***REMOVED*** else ***REMOVED***
    this.final = this._finalOrDigest
  ***REMOVED***
  if (this._final) ***REMOVED***
    this.__final = this._final
    this._final = null
  ***REMOVED***
  this._decoder = null
  this._encoding = null
***REMOVED***
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) ***REMOVED***
  if (typeof data === 'string') ***REMOVED***
    data = Buffer.from(data, inputEnc)
  ***REMOVED***

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) ***REMOVED***
    outData = this._toString(outData, outputEnc)
  ***REMOVED***

  return outData
***REMOVED***

CipherBase.prototype.setAutoPadding = function () ***REMOVED******REMOVED***
CipherBase.prototype.getAuthTag = function () ***REMOVED***
  throw new Error('trying to get auth tag in unsupported state')
***REMOVED***

CipherBase.prototype.setAuthTag = function () ***REMOVED***
  throw new Error('trying to set auth tag in unsupported state')
***REMOVED***

CipherBase.prototype.setAAD = function () ***REMOVED***
  throw new Error('trying to set aad in unsupported state')
***REMOVED***

CipherBase.prototype._transform = function (data, _, next) ***REMOVED***
  var err
  try ***REMOVED***
    if (this.hashMode) ***REMOVED***
      this._update(data)
    ***REMOVED*** else ***REMOVED***
      this.push(this._update(data))
    ***REMOVED***
  ***REMOVED*** catch (e) ***REMOVED***
    err = e
  ***REMOVED*** finally ***REMOVED***
    next(err)
  ***REMOVED***
***REMOVED***
CipherBase.prototype._flush = function (done) ***REMOVED***
  var err
  try ***REMOVED***
    this.push(this.__final())
  ***REMOVED*** catch (e) ***REMOVED***
    err = e
  ***REMOVED***

  done(err)
***REMOVED***
CipherBase.prototype._finalOrDigest = function (outputEnc) ***REMOVED***
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) ***REMOVED***
    outData = this._toString(outData, outputEnc, true)
  ***REMOVED***
  return outData
***REMOVED***

CipherBase.prototype._toString = function (value, enc, fin) ***REMOVED***
  if (!this._decoder) ***REMOVED***
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  ***REMOVED***

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) ***REMOVED***
    out += this._decoder.end()
  ***REMOVED***

  return out
***REMOVED***

module.exports = CipherBase
