/* eslint-disable no-underscore-dangle */

export default function injectDynamicImport(acorn) ***REMOVED***
  const tt = acorn.tokTypes;

  // NOTE: This allows `yield import()` to parse correctly.
  tt._import.startsExpr = true;

  function parseDynamicImport() ***REMOVED***
    const node = this.startNode();
    this.next();
    if (this.type !== tt.parenL) ***REMOVED***
      this.unexpected();
    ***REMOVED***
    return this.finishNode(node, 'Import');
  ***REMOVED***

  function peekNext() ***REMOVED***
    return this.input[this.pos];
  ***REMOVED***

  // eslint-disable-next-line no-param-reassign
  acorn.plugins.dynamicImport = function dynamicImportPlugin(instance) ***REMOVED***
    instance.extend('parseStatement', nextMethod => (
      function parseStatement(...args) ***REMOVED***
        const node = this.startNode();
        if (this.type === tt._import) ***REMOVED***
          const nextToken = peekNext.call(this);
          if (nextToken === tt.parenL.label) ***REMOVED***
            const expr = this.parseExpression();
            return this.parseExpressionStatement(node, expr);
          ***REMOVED***
        ***REMOVED***

        return nextMethod.apply(this, args);
      ***REMOVED***
    ));

    instance.extend('parseExprAtom', nextMethod => (
      function parseExprAtom(refDestructuringErrors) ***REMOVED***
        if (this.type === tt._import) ***REMOVED***
          return parseDynamicImport.call(this);
        ***REMOVED***
        return nextMethod.call(this, refDestructuringErrors);
      ***REMOVED***
    ));
  ***REMOVED***;

  return acorn;
***REMOVED***
