'use strict'
var gitHosts = require('./git-host-info.js')
var extend = Object.assign || require('util')._extend

var GitHost = module.exports = function (type, user, auth, project, committish, defaultRepresentation, opts) ***REMOVED***
  var gitHostInfo = this
  gitHostInfo.type = type
  Object.keys(gitHosts[type]).forEach(function (key) ***REMOVED***
    gitHostInfo[key] = gitHosts[type][key]
  ***REMOVED***)
  gitHostInfo.user = user
  gitHostInfo.auth = auth
  gitHostInfo.project = project
  gitHostInfo.committish = committish
  gitHostInfo.default = defaultRepresentation
  gitHostInfo.opts = opts || ***REMOVED******REMOVED***
***REMOVED***
GitHost.prototype = ***REMOVED******REMOVED***

GitHost.prototype.hash = function () ***REMOVED***
  return this.committish ? '#' + this.committish : ''
***REMOVED***

GitHost.prototype._fill = function (template, opts) ***REMOVED***
  if (!template) return
  var vars = extend(***REMOVED******REMOVED***, opts)
  opts = extend(extend(***REMOVED******REMOVED***, this.opts), opts)
  var self = this
  Object.keys(this).forEach(function (key) ***REMOVED***
    if (self[key] != null && vars[key] == null) vars[key] = self[key]
  ***REMOVED***)
  var rawAuth = vars.auth
  var rawComittish = vars.committish
  Object.keys(vars).forEach(function (key) ***REMOVED***
    vars[key] = encodeURIComponent(vars[key])
  ***REMOVED***)
  vars['auth@'] = rawAuth ? rawAuth + '@' : ''
  if (opts.noCommittish) ***REMOVED***
    vars['#committish'] = ''
    vars['/tree/committish'] = ''
    vars['/comittish'] = ''
    vars.comittish = ''
  ***REMOVED*** else ***REMOVED***
    vars['#committish'] = rawComittish ? '#' + rawComittish : ''
    vars['/tree/committish'] = vars.committish
                            ? '/' + vars.treepath + '/' + vars.committish
                            : ''
    vars['/committish'] = vars.committish ? '/' + vars.committish : ''
    vars.committish = vars.committish || 'master'
  ***REMOVED***
  var res = template
  Object.keys(vars).forEach(function (key) ***REMOVED***
    res = res.replace(new RegExp('[***REMOVED***]' + key + '[***REMOVED***]', 'g'), vars[key])
  ***REMOVED***)
  if (opts.noGitPlus) ***REMOVED***
    return res.replace(/^git[+]/, '')
  ***REMOVED*** else ***REMOVED***
    return res
  ***REMOVED***
***REMOVED***

GitHost.prototype.ssh = function (opts) ***REMOVED***
  return this._fill(this.sshtemplate, opts)
***REMOVED***

GitHost.prototype.sshurl = function (opts) ***REMOVED***
  return this._fill(this.sshurltemplate, opts)
***REMOVED***

GitHost.prototype.browse = function (opts) ***REMOVED***
  return this._fill(this.browsetemplate, opts)
***REMOVED***

GitHost.prototype.docs = function (opts) ***REMOVED***
  return this._fill(this.docstemplate, opts)
***REMOVED***

GitHost.prototype.bugs = function (opts) ***REMOVED***
  return this._fill(this.bugstemplate, opts)
***REMOVED***

GitHost.prototype.https = function (opts) ***REMOVED***
  return this._fill(this.httpstemplate, opts)
***REMOVED***

GitHost.prototype.git = function (opts) ***REMOVED***
  return this._fill(this.gittemplate, opts)
***REMOVED***

GitHost.prototype.shortcut = function (opts) ***REMOVED***
  return this._fill(this.shortcuttemplate, opts)
***REMOVED***

GitHost.prototype.path = function (opts) ***REMOVED***
  return this._fill(this.pathtemplate, opts)
***REMOVED***

GitHost.prototype.tarball = function (opts) ***REMOVED***
  return this._fill(this.tarballtemplate, opts)
***REMOVED***

GitHost.prototype.file = function (P, opts) ***REMOVED***
  return this._fill(this.filetemplate, extend(***REMOVED***
    path: P.replace(/^[/]+/g, '')
  ***REMOVED***, opts))
***REMOVED***

GitHost.prototype.getDefaultRepresentation = function () ***REMOVED***
  return this.default
***REMOVED***

GitHost.prototype.toString = function (opts) ***REMOVED***
  return (this[this.default] || this.sshurl).call(this, opts)
***REMOVED***
