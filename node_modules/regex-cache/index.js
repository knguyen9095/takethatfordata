/*!
 * regex-cache <https://github.com/jonschlinkert/regex-cache>
 *
 * Copyright (c) 2015-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

'use strict';

var equal = require('is-equal-shallow');
var basic = ***REMOVED******REMOVED***;
var cache = ***REMOVED******REMOVED***;

/**
 * Expose `regexCache`
 */

module.exports = regexCache;

/**
 * Memoize the results of a call to the new RegExp constructor.
 *
 * @param  ***REMOVED***Function***REMOVED*** fn [description]
 * @param  ***REMOVED***String***REMOVED*** str [description]
 * @param  ***REMOVED***Options***REMOVED*** options [description]
 * @param  ***REMOVED***Boolean***REMOVED*** nocompare [description]
 * @return ***REMOVED***RegExp***REMOVED***
 */

function regexCache(fn, str, opts) ***REMOVED***
  var key = '_default_', regex, cached;

  if (!str && !opts) ***REMOVED***
    if (typeof fn !== 'function') ***REMOVED***
      return fn;
    ***REMOVED***
    return basic[key] || (basic[key] = fn(str));
  ***REMOVED***

  var isString = typeof str === 'string';
  if (isString) ***REMOVED***
    if (!opts) ***REMOVED***
      return basic[str] || (basic[str] = fn(str));
    ***REMOVED***
    key = str;
  ***REMOVED*** else ***REMOVED***
    opts = str;
  ***REMOVED***

  cached = cache[key];
  if (cached && equal(cached.opts, opts)) ***REMOVED***
    return cached.regex;
  ***REMOVED***

  memo(key, opts, (regex = fn(str, opts)));
  return regex;
***REMOVED***

function memo(key, opts, regex) ***REMOVED***
  cache[key] = ***REMOVED***regex: regex, opts: opts***REMOVED***;
***REMOVED***

/**
 * Expose `cache`
 */

module.exports.cache = cache;
module.exports.basic = basic;
