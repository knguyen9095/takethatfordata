var Transform = require('readable-stream/transform')
  , inherits  = require('util').inherits
  , xtend     = require('xtend')

function DestroyableTransform(opts) ***REMOVED***
  Transform.call(this, opts)
  this._destroyed = false
***REMOVED***

inherits(DestroyableTransform, Transform)

DestroyableTransform.prototype.destroy = function(err) ***REMOVED***
  if (this._destroyed) return
  this._destroyed = true
  
  var self = this
  process.nextTick(function() ***REMOVED***
    if (err)
      self.emit('error', err)
    self.emit('close')
  ***REMOVED***)
***REMOVED***

// a noop _transform function
function noop (chunk, enc, callback) ***REMOVED***
  callback(null, chunk)
***REMOVED***


// create a new export function, used by both the main export and
// the .ctor export, contains common logic for dealing with arguments
function through2 (construct) ***REMOVED***
  return function (options, transform, flush) ***REMOVED***
    if (typeof options == 'function') ***REMOVED***
      flush     = transform
      transform = options
      options   = ***REMOVED******REMOVED***
    ***REMOVED***

    if (typeof transform != 'function')
      transform = noop

    if (typeof flush != 'function')
      flush = null

    return construct(options, transform, flush)
  ***REMOVED***
***REMOVED***


// main export, just make me a transform stream!
module.exports = through2(function (options, transform, flush) ***REMOVED***
  var t2 = new DestroyableTransform(options)

  t2._transform = transform

  if (flush)
    t2._flush = flush

  return t2
***REMOVED***)


// make me a reusable prototype that I can `new`, or implicitly `new`
// with a constructor call
module.exports.ctor = through2(function (options, transform, flush) ***REMOVED***
  function Through2 (override) ***REMOVED***
    if (!(this instanceof Through2))
      return new Through2(override)

    this.options = xtend(options, override)

    DestroyableTransform.call(this, this.options)
  ***REMOVED***

  inherits(Through2, DestroyableTransform)

  Through2.prototype._transform = transform

  if (flush)
    Through2.prototype._flush = flush

  return Through2
***REMOVED***)


module.exports.obj = through2(function (options, transform, flush) ***REMOVED***
  var t2 = new DestroyableTransform(xtend(***REMOVED*** objectMode: true, highWaterMark: 16 ***REMOVED***, options))

  t2._transform = transform

  if (flush)
    t2._flush = flush

  return t2
***REMOVED***)
