'use strict';

module.exports = function (req, time) ***REMOVED***
	if (req.timeoutTimer) ***REMOVED***
		return req;
	***REMOVED***

	var delays = isNaN(time) ? time : ***REMOVED***socket: time, connect: time***REMOVED***;
	var host = req._headers ? (' to ' + req._headers.host) : '';

	if (delays.connect !== undefined) ***REMOVED***
		req.timeoutTimer = setTimeout(function timeoutHandler() ***REMOVED***
			req.abort();
			var e = new Error('Connection timed out on request' + host);
			e.code = 'ETIMEDOUT';
			req.emit('error', e);
		***REMOVED***, delays.connect);
	***REMOVED***

	// Clear the connection timeout timer once a socket is assigned to the
	// request and is connected.
	req.on('socket', function assign(socket) ***REMOVED***
		// Socket may come from Agent pool and may be already connected.
		if (!(socket.connecting || socket._connecting)) ***REMOVED***
			connect();
			return;
		***REMOVED***

		socket.once('connect', connect);
	***REMOVED***);

	function clear() ***REMOVED***
		if (req.timeoutTimer) ***REMOVED***
			clearTimeout(req.timeoutTimer);
			req.timeoutTimer = null;
		***REMOVED***
	***REMOVED***

	function connect() ***REMOVED***
		clear();

		if (delays.socket !== undefined) ***REMOVED***
			// Abort the request if there is no activity on the socket for more
			// than `delays.socket` milliseconds.
			req.setTimeout(delays.socket, function socketTimeoutHandler() ***REMOVED***
				req.abort();
				var e = new Error('Socket timed out on request' + host);
				e.code = 'ESOCKETTIMEDOUT';
				req.emit('error', e);
			***REMOVED***);
		***REMOVED***
	***REMOVED***

	return req.on('error', clear);
***REMOVED***;
