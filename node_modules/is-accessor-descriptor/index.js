/*!
 * is-accessor-descriptor <https://github.com/jonschlinkert/is-accessor-descriptor>
 *
 * Copyright (c) 2015-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

'use strict';

var typeOf = require('kind-of');

// accessor descriptor properties
var accessor = ***REMOVED***
  get: 'function',
  set: 'function',
  configurable: 'boolean',
  enumerable: 'boolean'
***REMOVED***;

function isAccessorDescriptor(obj, prop) ***REMOVED***
  if (typeof prop === 'string') ***REMOVED***
    var val = Object.getOwnPropertyDescriptor(obj, prop);
    return typeof val !== 'undefined';
  ***REMOVED***

  if (typeOf(obj) !== 'object') ***REMOVED***
    return false;
  ***REMOVED***

  if (has(obj, 'value') || has(obj, 'writable')) ***REMOVED***
    return false;
  ***REMOVED***

  if (!has(obj, 'get') || typeof obj.get !== 'function') ***REMOVED***
    return false;
  ***REMOVED***

  // tldr: it's valid to have "set" be undefined
  // "set" might be undefined if `Object.getOwnPropertyDescriptor`
  // was used to get the value, and only `get` was defined by the user
  if (has(obj, 'set') && typeof obj[key] !== 'function' && typeof obj[key] !== 'undefined') ***REMOVED***
    return false;
  ***REMOVED***

  for (var key in obj) ***REMOVED***
    if (!accessor.hasOwnProperty(key)) ***REMOVED***
      continue;
    ***REMOVED***

    if (typeOf(obj[key]) === accessor[key]) ***REMOVED***
      continue;
    ***REMOVED***

    if (typeof obj[key] !== 'undefined') ***REMOVED***
      return false;
    ***REMOVED***
  ***REMOVED***
  return true;
***REMOVED***

function has(obj, key) ***REMOVED***
  return ***REMOVED******REMOVED***.hasOwnProperty.call(obj, key);
***REMOVED***

/**
 * Expose `isAccessorDescriptor`
 */

module.exports = isAccessorDescriptor;
