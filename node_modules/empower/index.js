/**
 * empower - Power Assert feature enhancer for assert function/object.
 *
 * https://github.com/power-assert-js/empower
 *
 * Copyright (c) 2013-2017 Takuto Wada
 * Licensed under the MIT license.
 *   https://github.com/power-assert-js/empower/blob/master/MIT-LICENSE.txt
 */
var empowerCore = require('empower-core');
var defaultOptions = require('./lib/default-options');
var capturable = require('./lib/capturable');
var assign = require('core-js/library/fn/object/assign');
var define = require('./lib/define-properties');

/**
 * Enhance Power Assert feature to assert function/object.
 * @param assert target assert function or object to enhance
 * @param formatter power assert format function
 * @param options enhancement options
 * @return enhanced assert function/object
 */
function empower (assert, formatter, options) ***REMOVED***
    var config = assign(defaultOptions(), options);
    var eagerEvaluation = !(config.modifyMessageOnRethrow || config.saveContextOnRethrow);
    var shouldRecreateAssertionError = (function isStackUnchanged () ***REMOVED***
        if (typeof assert !== 'function') ***REMOVED***
            return false;
        ***REMOVED***
        if (typeof assert.AssertionError !== 'function') ***REMOVED***
            return false;
        ***REMOVED***
        var ae = new assert.AssertionError(***REMOVED***
            actual: 123,
            expected: 456,
            operator: '==='
        ***REMOVED***);
        ae.message = '[REPLACED MESSAGE]';
        return !(/REPLACED MESSAGE/.test(ae.stack)) && /123 === 456/.test(ae.stack);
    ***REMOVED***)();

    var empowerCoreConfig = assign(config, ***REMOVED***
        modifyMessageBeforeAssert: function (beforeAssertEvent) ***REMOVED***
            var message = beforeAssertEvent.originalMessage;
            if (!eagerEvaluation) ***REMOVED***
                return message;
            ***REMOVED***
            return buildPowerAssertText(formatter, message, beforeAssertEvent.powerAssertContext);
        ***REMOVED***,
        onError: function (errorEvent) ***REMOVED***
            var e = errorEvent.error;
            if (!/^AssertionError/.test(e.name)) ***REMOVED***
                throw e;
            ***REMOVED***
            if (!errorEvent.powerAssertContext) ***REMOVED***
                throw e;
            ***REMOVED***
            var poweredMessage;
            if (config.modifyMessageOnRethrow || config.saveContextOnRethrow) ***REMOVED***
                poweredMessage = buildPowerAssertText(formatter, errorEvent.originalMessage, errorEvent.powerAssertContext);
                if (shouldRecreateAssertionError) ***REMOVED***
                    e = new assert.AssertionError(***REMOVED***
                        message: poweredMessage,
                        actual: e.actual,
                        expected: e.expected,
                        operator: e.operator,
                        stackStartFunction: e.stackStartFunction
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
            if (config.modifyMessageOnRethrow && !shouldRecreateAssertionError) ***REMOVED***
                e.message = poweredMessage;
            ***REMOVED***
            if (config.saveContextOnRethrow) ***REMOVED***
                e.powerAssertContext = errorEvent.powerAssertContext;
            ***REMOVED***
            throw e;
        ***REMOVED***
    ***REMOVED***);
    var enhancedAssert = empowerCore(assert, empowerCoreConfig);
    define(enhancedAssert, capturable());
    return enhancedAssert;
***REMOVED***

function buildPowerAssertText (formatter, message, context) ***REMOVED***
    // console.log(message);
    var powerAssertText = formatter(context);
    return message ? message + ' ' + powerAssertText : powerAssertText;
***REMOVED***;

empower.defaultOptions = defaultOptions;
module.exports = empower;
