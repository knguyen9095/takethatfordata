***REMOVED******REMOVED***# def.definitions ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.errors ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.defaults ***REMOVED******REMOVED***
***REMOVED******REMOVED***# def.coerce ***REMOVED******REMOVED***

***REMOVED******REMOVED*** /**
    * schema compilation (render) time:
    * it = ***REMOVED*** schema, RULES, _validate, opts ***REMOVED***
    * it.validate - this template function,
    *   it is used recursively to generate code for subschemas
    *
    * runtime:
    * "validate" is a variable name to which this function will be assigned
    * validateRef etc. are defined in the parent scope in index.js
    */ ***REMOVED******REMOVED***

***REMOVED******REMOVED*** var $async = it.schema.$async === true; ***REMOVED******REMOVED***

***REMOVED******REMOVED***? it.isTop***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    var $top = it.isTop
      , $lvl = it.level = 0
      , $dataLvl = it.dataLevel = 0
      , $data = 'data';
    it.rootId = it.resolve.fullPath(it.root.schema.id);
    it.baseId = it.baseId || it.rootId;
    if ($async) ***REMOVED***
      it.async = true;
      var $es7 = it.opts.async == 'es7';
      it.yieldAwait = $es7 ? 'await' : 'yield';
    ***REMOVED***
    delete it.isTop;

    it.dataPathArr = [undefined];
  ***REMOVED******REMOVED***

  var validate =
  ***REMOVED******REMOVED***? $async ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? $es7 ***REMOVED******REMOVED***
      (async function
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? it.opts.async == 'co*'***REMOVED******REMOVED***co.wrap***REMOVED******REMOVED***?***REMOVED******REMOVED***(function*
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED******REMOVED***??***REMOVED******REMOVED***
    (function
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    (data, dataPath, parentData, parentDataProperty, rootData) ***REMOVED***
    'use strict';
    var vErrors = null; ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
    var errors = 0;     ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
    if (rootData === undefined) rootData = data;
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    var $lvl = it.level
      , $dataLvl = it.dataLevel
      , $data = 'data' + ($dataLvl || '');

    if (it.schema.id) it.baseId = it.resolve.url(it.baseId, it.schema.id);

    if ($async && !it.async) throw new Error('async schema in sync schema');
  ***REMOVED******REMOVED***

  var errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED*** = errors;
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***
  var $valid = 'valid' + $lvl
    , $breakOnError = !it.opts.allErrors
    , $closingBraces1 = ''
    , $closingBraces2 = '';

  var $errorKeyword;
  var $typeSchema = it.schema.type
    , $typeIsArray = Array.isArray($typeSchema);
***REMOVED******REMOVED***

***REMOVED******REMOVED***## def.checkType:
  ***REMOVED******REMOVED***
    var $schemaPath = it.schemaPath + '.type'
      , $errSchemaPath = it.errSchemaPath + '/type'
      , $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
  ***REMOVED******REMOVED***

  if (***REMOVED******REMOVED***= it.util[$method]($typeSchema, $data, true) ***REMOVED******REMOVED***) ***REMOVED***
#***REMOVED******REMOVED***

***REMOVED******REMOVED***? $typeSchema && it.opts.coerceTypes ***REMOVED******REMOVED***
  ***REMOVED******REMOVED*** var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema); ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? $coerceToTypes ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.checkType ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***# def.coerceType ***REMOVED******REMOVED***
    ***REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED*** var $refKeywords; ***REMOVED******REMOVED***
***REMOVED******REMOVED***? it.schema.$ref && ($refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref')) ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? it.opts.extendRefs == 'fail' ***REMOVED******REMOVED***
    ***REMOVED******REMOVED*** throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '"'); ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?? it.opts.extendRefs == 'ignore' ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***
      $refKeywords = false;
      console.log('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?? it.opts.extendRefs !== true ***REMOVED******REMOVED***
    ***REMOVED******REMOVED*** console.log('$ref: all keywords used in schema at path "' + it.errSchemaPath + '". It will change in the next major version, see issue #260. Use option ***REMOVED*** extendRefs: true ***REMOVED*** to keep current behaviour'); ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? it.schema.$ref && !$refKeywords ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***= it.RULES.all.$ref.code(it, '$ref') ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
    ***REMOVED***
    if (errors === ***REMOVED******REMOVED***?$top***REMOVED******REMOVED***0***REMOVED******REMOVED***??***REMOVED******REMOVED***errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED******REMOVED***) ***REMOVED***
    ***REMOVED******REMOVED*** $closingBraces2 += '***REMOVED***'; ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***?***REMOVED******REMOVED***
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  ***REMOVED******REMOVED***~ it.RULES:$rulesGroup ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? $shouldUseGroup($rulesGroup) ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $rulesGroup.type ***REMOVED******REMOVED***
        if (***REMOVED******REMOVED***= it.util.checkDataType($rulesGroup.type, $data) ***REMOVED******REMOVED***) ***REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***? it.opts.useDefaults && !it.compositeRule ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***? $rulesGroup.type == 'object' && it.schema.properties ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***# def.defaultProperties ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***?? $rulesGroup.type == 'array' && Array.isArray(it.schema.items) ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***# def.defaultItems ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***~ $rulesGroup.rules:$rule ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***? $shouldUseRule($rule) ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***= $rule.code(it, $rule.keyword) ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
              ***REMOVED******REMOVED*** $closingBraces1 += '***REMOVED***'; ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***?***REMOVED******REMOVED***
          ***REMOVED******REMOVED***?***REMOVED******REMOVED***
        ***REMOVED******REMOVED***~***REMOVED******REMOVED***
        ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
          ***REMOVED******REMOVED***= $closingBraces1 ***REMOVED******REMOVED***
          ***REMOVED******REMOVED*** $closingBraces1 = ''; ***REMOVED******REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
      ***REMOVED******REMOVED***? $rulesGroup.type ***REMOVED******REMOVED***
        ***REMOVED***
        ***REMOVED******REMOVED***? $typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes ***REMOVED******REMOVED***
          ***REMOVED******REMOVED*** var $typeChecked = true; ***REMOVED******REMOVED***
          else ***REMOVED***
            ***REMOVED******REMOVED***
              var $schemaPath = it.schemaPath + '.type'
                , $errSchemaPath = it.errSchemaPath + '/type';
            ***REMOVED******REMOVED***
            ***REMOVED******REMOVED***# def.error:'type' ***REMOVED******REMOVED***
          ***REMOVED***
        ***REMOVED******REMOVED***?***REMOVED******REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***

      ***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED***
        if (errors === ***REMOVED******REMOVED***?$top***REMOVED******REMOVED***0***REMOVED******REMOVED***??***REMOVED******REMOVED***errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED******REMOVED***) ***REMOVED***
        ***REMOVED******REMOVED*** $closingBraces2 += '***REMOVED***'; ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***?***REMOVED******REMOVED***
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED******REMOVED***~***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $typeSchema && !$typeChecked && !$coerceToTypes ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.checkType ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***# def.error:'type' ***REMOVED******REMOVED***
  ***REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $breakOnError ***REMOVED******REMOVED*** ***REMOVED******REMOVED***= $closingBraces2 ***REMOVED******REMOVED*** ***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***? $top ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***? $async ***REMOVED******REMOVED***
      if (errors === 0) return true;           ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
      else throw new ValidationError(vErrors); ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***??***REMOVED******REMOVED***
      validate.errors = vErrors; ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
      return errors === 0;       ***REMOVED******REMOVED*** /* don't edit, used in replace */ ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***?***REMOVED******REMOVED***
  ***REMOVED***);

  return validate;
***REMOVED******REMOVED***??***REMOVED******REMOVED***
  var ***REMOVED******REMOVED***=$valid***REMOVED******REMOVED*** = errors === errs_***REMOVED******REMOVED***=$lvl***REMOVED******REMOVED***;
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***# def.cleanUp ***REMOVED******REMOVED***

***REMOVED******REMOVED***? $top && $breakOnError ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***# def.cleanUpVarErrors ***REMOVED******REMOVED***
***REMOVED******REMOVED***?***REMOVED******REMOVED***

***REMOVED******REMOVED***
  function $shouldUseGroup($rulesGroup) ***REMOVED***
    for (var i=0; i < $rulesGroup.rules.length; i++)
      if ($shouldUseRule($rulesGroup.rules[i]))
        return true;
  ***REMOVED***

  function $shouldUseRule($rule) ***REMOVED***
    return it.schema[$rule.keyword] !== undefined ||
           ( $rule.keyword == 'properties' &&
             ( it.schema.additionalProperties === false ||
               typeof it.schema.additionalProperties == 'object'
               || ( it.schema.patternProperties &&
                    Object.keys(it.schema.patternProperties).length )
               || ( it.opts.v5 && it.schema.patternGroups &&
                    Object.keys(it.schema.patternGroups).length )));
  ***REMOVED***
***REMOVED******REMOVED***
