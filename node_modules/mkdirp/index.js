var path = require('path');
var fs = require('fs');
var _0777 = parseInt('0777', 8);

module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

function mkdirP (p, opts, f, made) ***REMOVED***
    if (typeof opts === 'function') ***REMOVED***
        f = opts;
        opts = ***REMOVED******REMOVED***;
    ***REMOVED***
    else if (!opts || typeof opts !== 'object') ***REMOVED***
        opts = ***REMOVED*** mode: opts ***REMOVED***;
    ***REMOVED***
    
    var mode = opts.mode;
    var xfs = opts.fs || fs;
    
    if (mode === undefined) ***REMOVED***
        mode = _0777 & (~process.umask());
    ***REMOVED***
    if (!made) made = null;
    
    var cb = f || function () ***REMOVED******REMOVED***;
    p = path.resolve(p);
    
    xfs.mkdir(p, mode, function (er) ***REMOVED***
        if (!er) ***REMOVED***
            made = made || p;
            return cb(null, made);
        ***REMOVED***
        switch (er.code) ***REMOVED***
            case 'ENOENT':
                mkdirP(path.dirname(p), opts, function (er, made) ***REMOVED***
                    if (er) cb(er, made);
                    else mkdirP(p, opts, cb, made);
                ***REMOVED***);
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                xfs.stat(p, function (er2, stat) ***REMOVED***
                    // if the stat fails, then that's super weird.
                    // let the original error be the failure reason.
                    if (er2 || !stat.isDirectory()) cb(er, made)
                    else cb(null, made);
                ***REMOVED***);
                break;
        ***REMOVED***
    ***REMOVED***);
***REMOVED***

mkdirP.sync = function sync (p, opts, made) ***REMOVED***
    if (!opts || typeof opts !== 'object') ***REMOVED***
        opts = ***REMOVED*** mode: opts ***REMOVED***;
    ***REMOVED***
    
    var mode = opts.mode;
    var xfs = opts.fs || fs;
    
    if (mode === undefined) ***REMOVED***
        mode = _0777 & (~process.umask());
    ***REMOVED***
    if (!made) made = null;

    p = path.resolve(p);

    try ***REMOVED***
        xfs.mkdirSync(p, mode);
        made = made || p;
    ***REMOVED***
    catch (err0) ***REMOVED***
        switch (err0.code) ***REMOVED***
            case 'ENOENT' :
                made = sync(path.dirname(p), opts, made);
                sync(p, opts, made);
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                var stat;
                try ***REMOVED***
                    stat = xfs.statSync(p);
                ***REMOVED***
                catch (err1) ***REMOVED***
                    throw err0;
                ***REMOVED***
                if (!stat.isDirectory()) throw err0;
                break;
        ***REMOVED***
    ***REMOVED***

    return made;
***REMOVED***;
