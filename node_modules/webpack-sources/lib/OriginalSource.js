/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

var SourceNode = require("source-map").SourceNode;
var SourceMapConsumer = require("source-map").SourceMapConsumer;
var SourceListMap = require("source-list-map").SourceListMap;
var Source = require("./Source");

function isSplitter(c) ***REMOVED***
	switch(c) ***REMOVED***
		case 10: // \n
		case 13: // \r
		case 59: // ;
		case 123: // ***REMOVED***
		case 125: // ***REMOVED***
			return true;
	***REMOVED***
	return false;
***REMOVED***

function _splitCode(code) ***REMOVED***
	var result = [];
	var i = 0;
	var j = 0;
	for(; i < code.length; i++) ***REMOVED***
		if(isSplitter(code.charCodeAt(i))) ***REMOVED***
			while(isSplitter(code.charCodeAt(++i)));
			result.push(code.substring(j, i));
			j = i;
		***REMOVED***
	***REMOVED***
	if(j < code.length)
		result.push(code.substr(j));
	return result;
***REMOVED***

class OriginalSource extends Source ***REMOVED***
	constructor(value, name) ***REMOVED***
		super();
		this._value = value;
		this._name = name;
	***REMOVED***

	source() ***REMOVED***
		return this._value;
	***REMOVED***

	node(options) ***REMOVED***
		options = options || ***REMOVED******REMOVED***;
		var sourceMap = this._sourceMap;
		var value = this._value;
		var name = this._name;
		var lines = value.split("\n");
		var node = new SourceNode(null, null, null,
			lines.map(function(line, idx) ***REMOVED***
				var pos = 0;
				if(options.columns === false) ***REMOVED***
					var content = line + (idx != lines.length - 1 ? "\n" : "");
					return new SourceNode(idx + 1, 0, name, content);
				***REMOVED***
				return new SourceNode(null, null, null,
					_splitCode(line + (idx != lines.length - 1 ? "\n" : "")).map(function(item) ***REMOVED***
						if(/^\s*$/.test(item)) return item;
						var res = new SourceNode(idx + 1, pos, name, item);
						pos += item.length;
						return res;
					***REMOVED***)
				);
			***REMOVED***)
		);
		node.setSourceContent(name, value);
		return node;
	***REMOVED***

	listMap(options) ***REMOVED***
		return new SourceListMap(this._value, this._name, this._value)
	***REMOVED***

	updateHash(hash) ***REMOVED***
		hash.update(this._value);
	***REMOVED***
***REMOVED***

require("./SourceAndMapMixin")(OriginalSource.prototype);

module.exports = OriginalSource;
