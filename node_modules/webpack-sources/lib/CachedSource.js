/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const Source = require("./Source");

class CachedSource extends Source ***REMOVED***
	constructor(source) ***REMOVED***
		super();
		this._source = source;
		this._cachedSource = undefined;
		this._cachedSize = undefined;
		this._cachedMaps = ***REMOVED******REMOVED***;

		if(source.node) this.node = function(options) ***REMOVED***
			return this._source.node(options);
		***REMOVED***;

		if(source.listMap) this.listMap = function(options) ***REMOVED***
			return this._source.listMap(options);
		***REMOVED***;
	***REMOVED***

	source() ***REMOVED***
		if(typeof this._cachedSource !== "undefined") return this._cachedSource;
		return this._cachedSource = this._source.source();
	***REMOVED***

	size() ***REMOVED***
		if(typeof this._cachedSize !== "undefined") return this._cachedSize;
		if(typeof this._cachedSource !== "undefined")
			return this._cachedSize = this._cachedSource.length;
		return this._cachedSize = this._source.size();
	***REMOVED***

	sourceAndMap(options) ***REMOVED***
		const key = JSON.stringify(options);
		if(typeof this._cachedSource !== "undefined" && key in this._cachedMaps)
			return ***REMOVED***
				source: this._cachedSource,
				map: this._cachedMaps[key]
			***REMOVED***;
		else if(typeof this._cachedSource !== "undefined") ***REMOVED***
			return ***REMOVED***
				source: this._cachedSource,
				map: this._cachedMaps[key] = this._source.map(options)
			***REMOVED***;
		***REMOVED*** else if(key in this._cachedMaps) ***REMOVED***
			return ***REMOVED***
				source: this._cachedSource = this._source.source(),
				map: this._cachedMaps[key]
			***REMOVED***;
		***REMOVED***
		const result = this._source.sourceAndMap(options);
		this._cachedSource = result.source;
		this._cachedMaps[key] = result.map;
		return ***REMOVED***
			source: this._cachedSource,
			map: this._cachedMaps[key]
		***REMOVED***;
	***REMOVED***

	map(options) ***REMOVED***
		if(!options) options = ***REMOVED******REMOVED***;
		const key = JSON.stringify(options);
		if(key in this._cachedMaps)
			return this._cachedMaps[key];
		return this._cachedMaps[key] = this._source.map();
	***REMOVED***

	updateHash(hash) ***REMOVED***
		this._source.updateHash(hash);
	***REMOVED***
***REMOVED***

module.exports = CachedSource;
