'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call(***REMOVED*** toString: null ***REMOVED***, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () ***REMOVED******REMOVED***, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) ***REMOVED***
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
***REMOVED***;
var excludedKeys = ***REMOVED***
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
***REMOVED***;
var hasAutomationEqualityBug = (function () ***REMOVED***
	/* global window */
	if (typeof window === 'undefined') ***REMOVED*** return false; ***REMOVED***
	for (var k in window) ***REMOVED***
		try ***REMOVED***
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') ***REMOVED***
				try ***REMOVED***
					equalsConstructorPrototype(window[k]);
				***REMOVED*** catch (e) ***REMOVED***
					return true;
				***REMOVED***
			***REMOVED***
		***REMOVED*** catch (e) ***REMOVED***
			return true;
		***REMOVED***
	***REMOVED***
	return false;
***REMOVED***());
var equalsConstructorPrototypeIfNotBuggy = function (o) ***REMOVED***
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) ***REMOVED***
		return equalsConstructorPrototype(o);
	***REMOVED***
	try ***REMOVED***
		return equalsConstructorPrototype(o);
	***REMOVED*** catch (e) ***REMOVED***
		return false;
	***REMOVED***
***REMOVED***;

var keysShim = function keys(object) ***REMOVED***
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) ***REMOVED***
		throw new TypeError('Object.keys called on a non-object');
	***REMOVED***

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) ***REMOVED***
		for (var i = 0; i < object.length; ++i) ***REMOVED***
			theKeys.push(String(i));
		***REMOVED***
	***REMOVED***

	if (isArguments && object.length > 0) ***REMOVED***
		for (var j = 0; j < object.length; ++j) ***REMOVED***
			theKeys.push(String(j));
		***REMOVED***
	***REMOVED*** else ***REMOVED***
		for (var name in object) ***REMOVED***
			if (!(skipProto && name === 'prototype') && has.call(object, name)) ***REMOVED***
				theKeys.push(String(name));
			***REMOVED***
		***REMOVED***
	***REMOVED***

	if (hasDontEnumBug) ***REMOVED***
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) ***REMOVED***
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) ***REMOVED***
				theKeys.push(dontEnums[k]);
			***REMOVED***
		***REMOVED***
	***REMOVED***
	return theKeys;
***REMOVED***;

keysShim.shim = function shimObjectKeys() ***REMOVED***
	if (Object.keys) ***REMOVED***
		var keysWorksWithArguments = (function () ***REMOVED***
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		***REMOVED***(1, 2));
		if (!keysWorksWithArguments) ***REMOVED***
			var originalKeys = Object.keys;
			Object.keys = function keys(object) ***REMOVED***
				if (isArgs(object)) ***REMOVED***
					return originalKeys(slice.call(object));
				***REMOVED*** else ***REMOVED***
					return originalKeys(object);
				***REMOVED***
			***REMOVED***;
		***REMOVED***
	***REMOVED*** else ***REMOVED***
		Object.keys = keysShim;
	***REMOVED***
	return Object.keys || keysShim;
***REMOVED***;

module.exports = keysShim;
