// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

"use strict";

// test using assert
var qs = require('../');

// folding block, commented to pass gjslint
// ***REMOVED******REMOVED******REMOVED***
// [ wonkyQS, canonicalQS, obj ]
var qsTestCases = [
  ['foo=918854443121279438895193',
   'foo=918854443121279438895193',
   ***REMOVED***'foo': '918854443121279438895193'***REMOVED***],
  ['foo=bar', 'foo=bar', ***REMOVED***'foo': 'bar'***REMOVED***],
  ['foo=bar&foo=quux', 'foo=bar&foo=quux', ***REMOVED***'foo': ['bar', 'quux']***REMOVED***],
  ['foo=1&bar=2', 'foo=1&bar=2', ***REMOVED***'foo': '1', 'bar': '2'***REMOVED***],
  ['my+weird+field=q1%212%22%27w%245%267%2Fz8%29%3F',
  'my%20weird%20field=q1!2%22\'w%245%267%2Fz8)%3F',
  ***REMOVED***'my weird field': 'q1!2"\'w$5&7/z8)?' ***REMOVED***],
  ['foo%3Dbaz=bar', 'foo%3Dbaz=bar', ***REMOVED***'foo=baz': 'bar'***REMOVED***],
  ['foo=baz=bar', 'foo=baz%3Dbar', ***REMOVED***'foo': 'baz=bar'***REMOVED***],
  ['str=foo&arr=1&arr=2&arr=3&somenull=&undef=',
   'str=foo&arr=1&arr=2&arr=3&somenull=&undef=',
   ***REMOVED*** 'str': 'foo',
     'arr': ['1', '2', '3'],
     'somenull': '',
     'undef': ''***REMOVED***],
  [' foo = bar ', '%20foo%20=%20bar%20', ***REMOVED***' foo ': ' bar '***REMOVED***],
  // disable test that fails ['foo=%zx', 'foo=%25zx', ***REMOVED***'foo': '%zx'***REMOVED***],
  ['foo=%EF%BF%BD', 'foo=%EF%BF%BD', ***REMOVED***'foo': '\ufffd' ***REMOVED***],
  // See: https://github.com/joyent/node/issues/1707
  ['hasOwnProperty=x&toString=foo&valueOf=bar&__defineGetter__=baz',
    'hasOwnProperty=x&toString=foo&valueOf=bar&__defineGetter__=baz',
    ***REMOVED*** hasOwnProperty: 'x',
      toString: 'foo',
      valueOf: 'bar',
      __defineGetter__: 'baz' ***REMOVED***],
  // See: https://github.com/joyent/node/issues/3058
  ['foo&bar=baz', 'foo=&bar=baz', ***REMOVED*** foo: '', bar: 'baz' ***REMOVED***]
];

// [ wonkyQS, canonicalQS, obj ]
var qsColonTestCases = [
  ['foo:bar', 'foo:bar', ***REMOVED***'foo': 'bar'***REMOVED***],
  ['foo:bar;foo:quux', 'foo:bar;foo:quux', ***REMOVED***'foo': ['bar', 'quux']***REMOVED***],
  ['foo:1&bar:2;baz:quux',
   'foo:1%26bar%3A2;baz:quux',
   ***REMOVED***'foo': '1&bar:2', 'baz': 'quux'***REMOVED***],
  ['foo%3Abaz:bar', 'foo%3Abaz:bar', ***REMOVED***'foo:baz': 'bar'***REMOVED***],
  ['foo:baz:bar', 'foo:baz%3Abar', ***REMOVED***'foo': 'baz:bar'***REMOVED***]
];

// [wonkyObj, qs, canonicalObj]
var extendedFunction = function() ***REMOVED******REMOVED***;
extendedFunction.prototype = ***REMOVED***a: 'b'***REMOVED***;
var qsWeirdObjects = [
  [***REMOVED***regexp: /./g***REMOVED***, 'regexp=', ***REMOVED***'regexp': ''***REMOVED***],
  [***REMOVED***regexp: new RegExp('.', 'g')***REMOVED***, 'regexp=', ***REMOVED***'regexp': ''***REMOVED***],
  [***REMOVED***fn: function() ***REMOVED******REMOVED******REMOVED***, 'fn=', ***REMOVED***'fn': ''***REMOVED***],
  [***REMOVED***fn: new Function('')***REMOVED***, 'fn=', ***REMOVED***'fn': ''***REMOVED***],
  [***REMOVED***math: Math***REMOVED***, 'math=', ***REMOVED***'math': ''***REMOVED***],
  [***REMOVED***e: extendedFunction***REMOVED***, 'e=', ***REMOVED***'e': ''***REMOVED***],
  [***REMOVED***d: new Date()***REMOVED***, 'd=', ***REMOVED***'d': ''***REMOVED***],
  [***REMOVED***d: Date***REMOVED***, 'd=', ***REMOVED***'d': ''***REMOVED***],
  [***REMOVED***f: new Boolean(false), t: new Boolean(true)***REMOVED***, 'f=&t=', ***REMOVED***'f': '', 't': ''***REMOVED***],
  [***REMOVED***f: false, t: true***REMOVED***, 'f=false&t=true', ***REMOVED***'f': 'false', 't': 'true'***REMOVED***],
  [***REMOVED***n: null***REMOVED***, 'n=', ***REMOVED***'n': ''***REMOVED***],
  [***REMOVED***nan: NaN***REMOVED***, 'nan=', ***REMOVED***'nan': ''***REMOVED***],
  [***REMOVED***inf: Infinity***REMOVED***, 'inf=', ***REMOVED***'inf': ''***REMOVED***]
];
// ***REMOVED******REMOVED******REMOVED***

var qsNoMungeTestCases = [
  ['', ***REMOVED******REMOVED***],
  ['foo=bar&foo=baz', ***REMOVED***'foo': ['bar', 'baz']***REMOVED***],
  ['blah=burp', ***REMOVED***'blah': 'burp'***REMOVED***],
  ['gragh=1&gragh=3&goo=2', ***REMOVED***'gragh': ['1', '3'], 'goo': '2'***REMOVED***],
  ['frappucino=muffin&goat%5B%5D=scone&pond=moose',
   ***REMOVED***'frappucino': 'muffin', 'goat[]': 'scone', 'pond': 'moose'***REMOVED***],
  ['trololol=yes&lololo=no', ***REMOVED***'trololol': 'yes', 'lololo': 'no'***REMOVED***]
];

exports['test basic'] = function(assert) ***REMOVED***
  assert.strictEqual('918854443121279438895193',
                   qs.parse('id=918854443121279438895193').id,
                   'prase id=918854443121279438895193');
***REMOVED***;

exports['test that the canonical qs is parsed properly'] = function(assert) ***REMOVED***
  qsTestCases.forEach(function(testCase) ***REMOVED***
    assert.deepEqual(testCase[2], qs.parse(testCase[0]),
                     'parse ' + testCase[0]);
  ***REMOVED***);
***REMOVED***;


exports['test that the colon test cases can do the same'] = function(assert) ***REMOVED***
  qsColonTestCases.forEach(function(testCase) ***REMOVED***
    assert.deepEqual(testCase[2], qs.parse(testCase[0], ';', ':'),
                     'parse ' + testCase[0] + ' -> ; :');
  ***REMOVED***);
***REMOVED***;

exports['test the weird objects, that they get parsed properly'] = function(assert) ***REMOVED***
  qsWeirdObjects.forEach(function(testCase) ***REMOVED***
    assert.deepEqual(testCase[2], qs.parse(testCase[1]),
                     'parse ' + testCase[1]);
  ***REMOVED***);
***REMOVED***;

exports['test non munge test cases'] = function(assert) ***REMOVED***
  qsNoMungeTestCases.forEach(function(testCase) ***REMOVED***
    assert.deepEqual(testCase[0], qs.stringify(testCase[1], '&', '=', false),
                     'stringify ' + JSON.stringify(testCase[1]) + ' -> & =');
  ***REMOVED***);
***REMOVED***;

exports['test the nested qs-in-qs case'] = function(assert) ***REMOVED***
  var f = qs.parse('a=b&q=x%3Dy%26y%3Dz');
  f.q = qs.parse(f.q);
  assert.deepEqual(f, ***REMOVED*** a: 'b', q: ***REMOVED*** x: 'y', y: 'z' ***REMOVED*** ***REMOVED***,
                   'parse a=b&q=x%3Dy%26y%3Dz');
***REMOVED***;

exports['test nested in colon'] = function(assert) ***REMOVED***
  var f = qs.parse('a:b;q:x%3Ay%3By%3Az', ';', ':');
  f.q = qs.parse(f.q, ';', ':');
  assert.deepEqual(f, ***REMOVED*** a: 'b', q: ***REMOVED*** x: 'y', y: 'z' ***REMOVED*** ***REMOVED***,
                   'parse a:b;q:x%3Ay%3By%3Az -> ; :');
***REMOVED***;

exports['test stringifying'] = function(assert) ***REMOVED***
  qsTestCases.forEach(function(testCase) ***REMOVED***
    assert.equal(testCase[1], qs.stringify(testCase[2]),
                 'stringify ' + JSON.stringify(testCase[2]));
  ***REMOVED***);

  qsColonTestCases.forEach(function(testCase) ***REMOVED***
    assert.equal(testCase[1], qs.stringify(testCase[2], ';', ':'),
                 'stringify ' + JSON.stringify(testCase[2]) + ' -> ; :');
  ***REMOVED***);

  qsWeirdObjects.forEach(function(testCase) ***REMOVED***
    assert.equal(testCase[1], qs.stringify(testCase[0]),
                 'stringify ' + JSON.stringify(testCase[0]));
  ***REMOVED***);
***REMOVED***;

exports['test stringifying nested'] = function(assert) ***REMOVED***
  var f = qs.stringify(***REMOVED***
    a: 'b',
    q: qs.stringify(***REMOVED***
      x: 'y',
      y: 'z'
    ***REMOVED***)
  ***REMOVED***);
  assert.equal(f, 'a=b&q=x%3Dy%26y%3Dz',
               JSON.stringify(***REMOVED***
                  a: 'b',
                  'qs.stringify -> q': ***REMOVED***
                    x: 'y',
                    y: 'z'
                  ***REMOVED***
                ***REMOVED***));

  var threw = false;
  try ***REMOVED*** qs.parse(undefined); ***REMOVED*** catch(error) ***REMOVED*** threw = true; ***REMOVED***
  assert.ok(!threw, "does not throws on undefined");
***REMOVED***;

exports['test nested in colon'] = function(assert) ***REMOVED***
  var f = qs.stringify(***REMOVED***
    a: 'b',
    q: qs.stringify(***REMOVED***
      x: 'y',
      y: 'z'
    ***REMOVED***, ';', ':')
  ***REMOVED***, ';', ':');
  assert.equal(f, 'a:b;q:x%3Ay%3By%3Az',
               'stringify ' + JSON.stringify(***REMOVED***
                  a: 'b',
                  'qs.stringify -> q': ***REMOVED***
                    x: 'y',
                    y: 'z'
                  ***REMOVED***
                ***REMOVED***) + ' -> ; : ');


  assert.deepEqual(***REMOVED******REMOVED***, qs.parse(), 'parse undefined');
***REMOVED***;
