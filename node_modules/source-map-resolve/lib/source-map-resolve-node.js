// Copyright 2014, 2015, 2016, 2017 Simon Lydell
// X11 (“MIT”) Licensed. (See LICENSE.)

var sourceMappingURL   = require("source-map-url")
var resolveUrl         = require("./resolve-url")
var decodeUriComponent = require("./decode-uri-component")
var urix               = require("urix")
var atob               = require("atob")



function callbackAsync(callback, error, result) ***REMOVED***
  setImmediate(function() ***REMOVED*** callback(error, result) ***REMOVED***)
***REMOVED***

function parseMapToJSON(string, data) ***REMOVED***
  try ***REMOVED***
    return JSON.parse(string.replace(/^\)\]\***REMOVED***'/, ""))
  ***REMOVED*** catch (error) ***REMOVED***
    error.sourceMapData = data
    throw error
  ***REMOVED***
***REMOVED***

function readSync(read, url, data) ***REMOVED***
  var readUrl = decodeUriComponent(url)
  try ***REMOVED***
    return String(read(readUrl))
  ***REMOVED*** catch (error) ***REMOVED***
    error.sourceMapData = data
    throw error
  ***REMOVED***
***REMOVED***



function resolveSourceMap(code, codeUrl, read, callback) ***REMOVED***
  var mapData
  try ***REMOVED***
    mapData = resolveSourceMapHelper(code, codeUrl)
  ***REMOVED*** catch (error) ***REMOVED***
    return callbackAsync(callback, error)
  ***REMOVED***
  if (!mapData || mapData.map) ***REMOVED***
    return callbackAsync(callback, null, mapData)
  ***REMOVED***
  var readUrl = decodeUriComponent(mapData.url)
  read(readUrl, function(error, result) ***REMOVED***
    if (error) ***REMOVED***
      error.sourceMapData = mapData
      return callback(error)
    ***REMOVED***
    mapData.map = String(result)
    try ***REMOVED***
      mapData.map = parseMapToJSON(mapData.map, mapData)
    ***REMOVED*** catch (error) ***REMOVED***
      return callback(error)
    ***REMOVED***
    callback(null, mapData)
  ***REMOVED***)
***REMOVED***

function resolveSourceMapSync(code, codeUrl, read) ***REMOVED***
  var mapData = resolveSourceMapHelper(code, codeUrl)
  if (!mapData || mapData.map) ***REMOVED***
    return mapData
  ***REMOVED***
  mapData.map = readSync(read, mapData.url, mapData)
  mapData.map = parseMapToJSON(mapData.map, mapData)
  return mapData
***REMOVED***

var dataUriRegex = /^data:([^,;]*)(;[^,;]*)*(?:,(.*))?$/
var jsonMimeTypeRegex = /^(?:application|text)\/json$/

function resolveSourceMapHelper(code, codeUrl) ***REMOVED***
  codeUrl = urix(codeUrl)

  var url = sourceMappingURL.getFrom(code)
  if (!url) ***REMOVED***
    return null
  ***REMOVED***

  var dataUri = url.match(dataUriRegex)
  if (dataUri) ***REMOVED***
    var mimeType = dataUri[1]
    var lastParameter = dataUri[2] || ""
    var encoded = dataUri[3] || ""
    var data = ***REMOVED***
      sourceMappingURL: url,
      url: null,
      sourcesRelativeTo: codeUrl,
      map: encoded
    ***REMOVED***
    if (!jsonMimeTypeRegex.test(mimeType)) ***REMOVED***
      var error = new Error("Unuseful data uri mime type: " + (mimeType || "text/plain"))
      error.sourceMapData = data
      throw error
    ***REMOVED***
    data.map = parseMapToJSON(
      lastParameter === ";base64" ? atob(encoded) : decodeURIComponent(encoded),
      data
    )
    return data
  ***REMOVED***

  var mapUrl = resolveUrl(codeUrl, url)
  return ***REMOVED***
    sourceMappingURL: url,
    url: mapUrl,
    sourcesRelativeTo: mapUrl,
    map: null
  ***REMOVED***
***REMOVED***



function resolveSources(map, mapUrl, read, options, callback) ***REMOVED***
  if (typeof options === "function") ***REMOVED***
    callback = options
    options = ***REMOVED******REMOVED***
  ***REMOVED***
  var pending = map.sources ? map.sources.length : 0
  var result = ***REMOVED***
    sourcesResolved: [],
    sourcesContent:  []
  ***REMOVED***

  if (pending === 0) ***REMOVED***
    callbackAsync(callback, null, result)
    return
  ***REMOVED***

  var done = function() ***REMOVED***
    pending--
    if (pending === 0) ***REMOVED***
      callback(null, result)
    ***REMOVED***
  ***REMOVED***

  resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) ***REMOVED***
    result.sourcesResolved[index] = fullUrl
    if (typeof sourceContent === "string") ***REMOVED***
      result.sourcesContent[index] = sourceContent
      callbackAsync(done, null)
    ***REMOVED*** else ***REMOVED***
      var readUrl = decodeUriComponent(fullUrl)
      read(readUrl, function(error, source) ***REMOVED***
        result.sourcesContent[index] = error ? error : String(source)
        done()
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***)
***REMOVED***

function resolveSourcesSync(map, mapUrl, read, options) ***REMOVED***
  var result = ***REMOVED***
    sourcesResolved: [],
    sourcesContent:  []
  ***REMOVED***

  if (!map.sources || map.sources.length === 0) ***REMOVED***
    return result
  ***REMOVED***

  resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) ***REMOVED***
    result.sourcesResolved[index] = fullUrl
    if (read !== null) ***REMOVED***
      if (typeof sourceContent === "string") ***REMOVED***
        result.sourcesContent[index] = sourceContent
      ***REMOVED*** else ***REMOVED***
        var readUrl = decodeUriComponent(fullUrl)
        try ***REMOVED***
          result.sourcesContent[index] = String(read(readUrl))
        ***REMOVED*** catch (error) ***REMOVED***
          result.sourcesContent[index] = error
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***)

  return result
***REMOVED***

var endingSlash = /\/?$/

function resolveSourcesHelper(map, mapUrl, options, fn) ***REMOVED***
  options = options || ***REMOVED******REMOVED***
  mapUrl = urix(mapUrl)
  var fullUrl
  var sourceContent
  var sourceRoot
  for (var index = 0, len = map.sources.length; index < len; index++) ***REMOVED***
    sourceRoot = null
    if (typeof options.sourceRoot === "string") ***REMOVED***
      sourceRoot = options.sourceRoot
    ***REMOVED*** else if (typeof map.sourceRoot === "string" && options.sourceRoot !== false) ***REMOVED***
      sourceRoot = map.sourceRoot
    ***REMOVED***
    // If the sourceRoot is the empty string, it is equivalent to not setting
    // the property at all.
    if (sourceRoot === null || sourceRoot === '') ***REMOVED***
      fullUrl = resolveUrl(mapUrl, map.sources[index])
    ***REMOVED*** else ***REMOVED***
      // Make sure that the sourceRoot ends with a slash, so that `/scripts/subdir` becomes
      // `/scripts/subdir/<source>`, not `/scripts/<source>`. Pointing to a file as source root
      // does not make sense.
      fullUrl = resolveUrl(mapUrl, sourceRoot.replace(endingSlash, "/"), map.sources[index])
    ***REMOVED***
    sourceContent = (map.sourcesContent || [])[index]
    fn(fullUrl, sourceContent, index)
  ***REMOVED***
***REMOVED***



function resolve(code, codeUrl, read, options, callback) ***REMOVED***
  if (typeof options === "function") ***REMOVED***
    callback = options
    options = ***REMOVED******REMOVED***
  ***REMOVED***
  if (code === null) ***REMOVED***
    var mapUrl = codeUrl
    var data = ***REMOVED***
      sourceMappingURL: null,
      url: mapUrl,
      sourcesRelativeTo: mapUrl,
      map: null
    ***REMOVED***
    var readUrl = decodeUriComponent(mapUrl)
    read(readUrl, function(error, result) ***REMOVED***
      if (error) ***REMOVED***
        error.sourceMapData = data
        return callback(error)
      ***REMOVED***
      data.map = String(result)
      try ***REMOVED***
        data.map = parseMapToJSON(data.map, data)
      ***REMOVED*** catch (error) ***REMOVED***
        return callback(error)
      ***REMOVED***
      _resolveSources(data)
    ***REMOVED***)
  ***REMOVED*** else ***REMOVED***
    resolveSourceMap(code, codeUrl, read, function(error, mapData) ***REMOVED***
      if (error) ***REMOVED***
        return callback(error)
      ***REMOVED***
      if (!mapData) ***REMOVED***
        return callback(null, null)
      ***REMOVED***
      _resolveSources(mapData)
    ***REMOVED***)
  ***REMOVED***

  function _resolveSources(mapData) ***REMOVED***
    resolveSources(mapData.map, mapData.sourcesRelativeTo, read, options, function(error, result) ***REMOVED***
      if (error) ***REMOVED***
        return callback(error)
      ***REMOVED***
      mapData.sourcesResolved = result.sourcesResolved
      mapData.sourcesContent  = result.sourcesContent
      callback(null, mapData)
    ***REMOVED***)
  ***REMOVED***
***REMOVED***

function resolveSync(code, codeUrl, read, options) ***REMOVED***
  var mapData
  if (code === null) ***REMOVED***
    var mapUrl = codeUrl
    mapData = ***REMOVED***
      sourceMappingURL: null,
      url: mapUrl,
      sourcesRelativeTo: mapUrl,
      map: null
    ***REMOVED***
    mapData.map = readSync(read, mapUrl, mapData)
    mapData.map = parseMapToJSON(mapData.map, mapData)
  ***REMOVED*** else ***REMOVED***
    mapData = resolveSourceMapSync(code, codeUrl, read)
    if (!mapData) ***REMOVED***
      return null
    ***REMOVED***
  ***REMOVED***
  var result = resolveSourcesSync(mapData.map, mapData.sourcesRelativeTo, read, options)
  mapData.sourcesResolved = result.sourcesResolved
  mapData.sourcesContent  = result.sourcesContent
  return mapData
***REMOVED***



module.exports = ***REMOVED***
  resolveSourceMap:     resolveSourceMap,
  resolveSourceMapSync: resolveSourceMapSync,
  resolveSources:       resolveSources,
  resolveSourcesSync:   resolveSourcesSync,
  resolve:              resolve,
  resolveSync:          resolveSync,
  parseMapToJSON:       parseMapToJSON
***REMOVED***
