/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) ***REMOVED*** return typeof obj; ***REMOVED*** : function (obj) ***REMOVED*** return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; ***REMOVED***;

var _createClass = function () ***REMOVED*** function defineProperties(target, props) ***REMOVED*** for (var i = 0; i < props.length; i++) ***REMOVED*** var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); ***REMOVED*** ***REMOVED*** return function (Constructor, protoProps, staticProps) ***REMOVED*** if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; ***REMOVED***; ***REMOVED***();

function _classCallCheck(instance, Constructor) ***REMOVED*** if (!(instance instanceof Constructor)) ***REMOVED*** throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***

var SourceMapConsumer = require("source-map").SourceMapConsumer;
var SourceMapSource = require("webpack-sources").SourceMapSource;
var RawSource = require("webpack-sources").RawSource;
var ConcatSource = require("webpack-sources").ConcatSource;
var RequestShortener = require("webpack/lib/RequestShortener");
var ModuleFilenameHelpers = require("webpack/lib/ModuleFilenameHelpers");
var uglify = require("uglify-js");

var UglifyJsPlugin = function () ***REMOVED***
	function UglifyJsPlugin(options) ***REMOVED***
		_classCallCheck(this, UglifyJsPlugin);

		if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object" || Array.isArray(options)) options = ***REMOVED******REMOVED***;
		if (typeof options.compressor !== "undefined") options.compress = options.compressor;
		this.options = options;
	***REMOVED***

	_createClass(UglifyJsPlugin, [***REMOVED***
		key: "apply",
		value: function apply(compiler) ***REMOVED***
			var options = this.options;
			options.test = options.test || /\.js($|\?)/i;
			var warningsFilter = options.warningsFilter || function () ***REMOVED***
				return true;
			***REMOVED***;

			var requestShortener = new RequestShortener(compiler.context);
			compiler.plugin("compilation", function (compilation) ***REMOVED***
				if (options.sourceMap) ***REMOVED***
					compilation.plugin("build-module", function (module) ***REMOVED***
						// to get detailed location info about errors
						module.useSourceMap = true;
					***REMOVED***);
				***REMOVED***
				compilation.plugin("optimize-chunk-assets", function (chunks, callback) ***REMOVED***
					var files = [];
					chunks.forEach(function (chunk) ***REMOVED***
						return files.push.apply(files, chunk.files);
					***REMOVED***);
					files.push.apply(files, compilation.additionalChunkAssets);
					var filteredFiles = files.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options));
					filteredFiles.forEach(function (file) ***REMOVED***
						var oldWarnFunction = uglify.AST_Node.warn_function;
						var warnings = [];
						var sourceMap = void 0;
						try ***REMOVED***
							var asset = compilation.assets[file];
							if (asset.__UglifyJsPlugin) ***REMOVED***
								compilation.assets[file] = asset.__UglifyJsPlugin;
								return;
							***REMOVED***
							var input = void 0;
							var inputSourceMap = void 0;
							if (options.sourceMap) ***REMOVED***
								if (asset.sourceAndMap) ***REMOVED***
									var sourceAndMap = asset.sourceAndMap();
									inputSourceMap = sourceAndMap.map;
									input = sourceAndMap.source;
								***REMOVED*** else ***REMOVED***
									inputSourceMap = asset.map();
									input = asset.source();
								***REMOVED***
								sourceMap = new SourceMapConsumer(inputSourceMap);
								uglify.AST_Node.warn_function = function (warning) ***REMOVED***
									// eslint-disable-line camelcase
									var match = /\[.+:([0-9]+),([0-9]+)\]/.exec(warning);
									var line = +match[1];
									var column = +match[2];
									var original = sourceMap.originalPositionFor(***REMOVED***
										line: line,
										column: column
									***REMOVED***);
									if (!original || !original.source || original.source === file) return;
									if (!warningsFilter(original.source)) return;
									warnings.push(warning.replace(/\[.+:([0-9]+),([0-9]+)\]/, "") + "[" + requestShortener.shorten(original.source) + ":" + original.line + "," + original.column + "]");
								***REMOVED***;
							***REMOVED*** else ***REMOVED***
								input = asset.source();
								uglify.AST_Node.warn_function = function (warning) ***REMOVED***
									// eslint-disable-line camelcase
									warnings.push(warning);
								***REMOVED***;
							***REMOVED***
							uglify.base54.reset();
							var ast = uglify.parse(input, ***REMOVED***
								filename: file
							***REMOVED***);
							if (options.compress !== false) ***REMOVED***
								ast.figure_out_scope();
								var compress = uglify.Compressor(options.compress || ***REMOVED***
									warnings: false
								***REMOVED***); // eslint-disable-line new-cap
								ast = compress.compress(ast);
							***REMOVED***
							if (options.mangle !== false) ***REMOVED***
								ast.figure_out_scope(options.mangle || ***REMOVED******REMOVED***);
								ast.compute_char_frequency(options.mangle || ***REMOVED******REMOVED***);
								ast.mangle_names(options.mangle || ***REMOVED******REMOVED***);
								if (options.mangle && options.mangle.props) ***REMOVED***
									uglify.mangle_properties(ast, options.mangle.props);
								***REMOVED***
							***REMOVED***
							var output = ***REMOVED******REMOVED***;
							output.comments = Object.prototype.hasOwnProperty.call(options, "comments") ? options.comments : /^\**!|@preserve|@license/;
							output.beautify = options.beautify;
							for (var k in options.output) ***REMOVED***
								output[k] = options.output[k];
							***REMOVED***
							var extractedComments = [];
							if (options.extractComments) ***REMOVED***
								var condition = ***REMOVED******REMOVED***;
								if (typeof options.extractComments === "string" || options.extractComments instanceof RegExp) ***REMOVED***
									// extractComments specifies the extract condition and output.comments specifies the preserve condition
									condition.preserve = output.comments;
									condition.extract = options.extractComments;
								***REMOVED*** else if (Object.prototype.hasOwnProperty.call(options.extractComments, "condition")) ***REMOVED***
									// Extract condition is given in extractComments.condition
									condition.preserve = output.comments;
									condition.extract = options.extractComments.condition;
								***REMOVED*** else ***REMOVED***
									// No extract condition is given. Extract comments that match output.comments instead of preserving them
									condition.preserve = false;
									condition.extract = output.comments;
								***REMOVED***

								// Ensure that both conditions are functions
								["preserve", "extract"].forEach(function (key) ***REMOVED***
									switch (_typeof(condition[key])) ***REMOVED***
										case "boolean":
											var b = condition[key];
											condition[key] = function () ***REMOVED***
												return b;
											***REMOVED***;
											break;
										case "function":
											break;
										case "string":
											if (condition[key] === "all") ***REMOVED***
												condition[key] = function () ***REMOVED***
													return true;
												***REMOVED***;
												break;
											***REMOVED***
											var regex = new RegExp(condition[key]);
											condition[key] = function (astNode, comment) ***REMOVED***
												return regex.test(comment.value);
											***REMOVED***;
											break;
										default:
											regex = condition[key];
											condition[key] = function (astNode, comment) ***REMOVED***
												return regex.test(comment.value);
											***REMOVED***;
									***REMOVED***
								***REMOVED***);

								// Redefine the comments function to extract and preserve
								// comments according to the two conditions
								output.comments = function (astNode, comment) ***REMOVED***
									if (condition.extract(astNode, comment)) ***REMOVED***
										extractedComments.push(comment.type === "comment2" ? "/*" + comment.value + "*/" : "//" + comment.value);
									***REMOVED***
									return condition.preserve(astNode, comment);
								***REMOVED***;
							***REMOVED***
							var map = void 0;
							if (options.sourceMap) ***REMOVED***
								map = uglify.SourceMap(***REMOVED*** // eslint-disable-line new-cap
									file: file,
									root: ""
								***REMOVED***);
								output.source_map = map; // eslint-disable-line camelcase
							***REMOVED***
							var stream = uglify.OutputStream(output); // eslint-disable-line new-cap
							ast.print(stream);
							if (map) map = map + "";
							var stringifiedStream = stream + "";
							var outputSource = map ? new SourceMapSource(stringifiedStream, file, JSON.parse(map), input, inputSourceMap) : new RawSource(stringifiedStream);
							if (extractedComments.length > 0) ***REMOVED***
								var commentsFile = options.extractComments.filename || file + ".LICENSE";
								if (typeof commentsFile === "function") ***REMOVED***
									commentsFile = commentsFile(file);
								***REMOVED***

								// Write extracted comments to commentsFile
								var commentsSource = new RawSource(extractedComments.join("\n\n") + "\n");
								if (commentsFile in compilation.assets) ***REMOVED***
									// commentsFile already exists, append new comments...
									if (compilation.assets[commentsFile] instanceof ConcatSource) ***REMOVED***
										compilation.assets[commentsFile].add("\n");
										compilation.assets[commentsFile].add(commentsSource);
									***REMOVED*** else ***REMOVED***
										compilation.assets[commentsFile] = new ConcatSource(compilation.assets[commentsFile], "\n", commentsSource);
									***REMOVED***
								***REMOVED*** else ***REMOVED***
									compilation.assets[commentsFile] = commentsSource;
								***REMOVED***

								// Add a banner to the original file
								if (options.extractComments.banner !== false) ***REMOVED***
									var banner = options.extractComments.banner || "For license information please see " + commentsFile;
									if (typeof banner === "function") ***REMOVED***
										banner = banner(commentsFile);
									***REMOVED***
									if (banner) ***REMOVED***
										outputSource = new ConcatSource("/*! " + banner + " */\n", outputSource);
									***REMOVED***
								***REMOVED***
							***REMOVED***
							asset.__UglifyJsPlugin = compilation.assets[file] = outputSource;
							if (warnings.length > 0) ***REMOVED***
								compilation.warnings.push(new Error(file + " from UglifyJs\n" + warnings.join("\n")));
							***REMOVED***
						***REMOVED*** catch (err) ***REMOVED***
							if (err.line) ***REMOVED***
								var original = sourceMap && sourceMap.originalPositionFor(***REMOVED***
									line: err.line,
									column: err.col
								***REMOVED***);
								if (original && original.source) ***REMOVED***
									compilation.errors.push(new Error(file + " from UglifyJs\n" + err.message + " [" + requestShortener.shorten(original.source) + ":" + original.line + "," + original.column + "][" + file + ":" + err.line + "," + err.col + "]"));
								***REMOVED*** else ***REMOVED***
									compilation.errors.push(new Error(file + " from UglifyJs\n" + err.message + " [" + file + ":" + err.line + "," + err.col + "]"));
								***REMOVED***
							***REMOVED*** else if (err.msg) ***REMOVED***
								compilation.errors.push(new Error(file + " from UglifyJs\n" + err.msg));
							***REMOVED*** else compilation.errors.push(new Error(file + " from UglifyJs\n" + err.stack));
						***REMOVED*** finally ***REMOVED***
							uglify.AST_Node.warn_function = oldWarnFunction; // eslint-disable-line camelcase
						***REMOVED***
					***REMOVED***);
					callback();
				***REMOVED***);
			***REMOVED***);
		***REMOVED***
	***REMOVED***]);

	return UglifyJsPlugin;
***REMOVED***();

module.exports = UglifyJsPlugin;