var parse = require('spdx-expression-parse');
var correct = require('spdx-correct');

var genericWarning = (
  'license should be ' +
  'a valid SPDX license expression (without "LicenseRef"), ' +
  '"UNLICENSED", or ' +
  '"SEE LICENSE IN <filename>"'
);

var fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;

function startsWith(prefix, string) ***REMOVED***
  return string.slice(0, prefix.length) === prefix;
***REMOVED***

function usesLicenseRef(ast) ***REMOVED***
  if (ast.hasOwnProperty('license')) ***REMOVED***
    var license = ast.license;
    return (
      startsWith('LicenseRef', license) ||
      startsWith('DocumentRef', license)
    );
  ***REMOVED*** else ***REMOVED***
    return (
      usesLicenseRef(ast.left) ||
      usesLicenseRef(ast.right)
    );
  ***REMOVED***
***REMOVED***

module.exports = function(argument) ***REMOVED***
  var ast;

  try ***REMOVED***
    ast = parse(argument);
  ***REMOVED*** catch (e) ***REMOVED***
    var match
    if (
      argument === 'UNLICENSED' ||
      argument === 'UNLICENCED'
    ) ***REMOVED***
      return ***REMOVED***
        validForOldPackages: true,
        validForNewPackages: true,
        unlicensed: true
      ***REMOVED***;
    ***REMOVED*** else if (match = fileReferenceRE.exec(argument)) ***REMOVED***
      return ***REMOVED***
        validForOldPackages: true,
        validForNewPackages: true,
        inFile: match[1]
      ***REMOVED***;
    ***REMOVED*** else ***REMOVED***
      var result = ***REMOVED***
        validForOldPackages: false,
        validForNewPackages: false,
        warnings: [genericWarning]
      ***REMOVED***;
      var corrected = correct(argument);
      if (corrected) ***REMOVED***
        result.warnings.push(
          'license is similar to the valid expression "' + corrected + '"'
        );
      ***REMOVED***
      return result;
    ***REMOVED***
  ***REMOVED***

  if (usesLicenseRef(ast)) ***REMOVED***
    return ***REMOVED***
      validForNewPackages: false,
      validForOldPackages: false,
      spdx: true,
      warnings: [genericWarning]
    ***REMOVED***;
  ***REMOVED*** else ***REMOVED***
    return ***REMOVED***
      validForNewPackages: true,
      validForOldPackages: true,
      spdx: true
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
