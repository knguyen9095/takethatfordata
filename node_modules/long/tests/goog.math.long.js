// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

// goog.provide('goog.math.Long');
var goog = ***REMOVED******REMOVED***; goog.math = ***REMOVED******REMOVED***;



/**
 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
 * values as *signed* integers.  See the from* functions below for more
 * convenient ways of constructing Longs.
 *
 * The internal representation of a long is the two given signed, 32-bit values.
 * We use 32-bit pieces because these are the size of integers on which
 * Javascript performs bit-operations.  For operations like addition and
 * multiplication, we split each number into 16-bit pieces, which can easily be
 * multiplied within Javascript's floating-point representation without overflow
 * or change in sign.
 *
 * In the algorithms below, we frequently reduce the negative case to the
 * positive case by negating the input(s) and then post-processing the result.
 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
 * a positive number, it overflows back into a negative).  Not handling this
 * case would often result in infinite recursion.
 *
 * @param ***REMOVED***number***REMOVED*** low  The low (signed) 32 bits of the long.
 * @param ***REMOVED***number***REMOVED*** high  The high (signed) 32 bits of the long.
 * @constructor
 * @final
 */
goog.math.Long = function(low, high) ***REMOVED***
    /**
     * @type ***REMOVED***number***REMOVED***
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type ***REMOVED***number***REMOVED***
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
***REMOVED***;


// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
// from* methods on which they depend.


/**
 * A cache of the Long representations of small integer values.
 * @type ***REMOVED***!Object***REMOVED***
 * @private
 */
goog.math.Long.IntCache_ = ***REMOVED******REMOVED***;


/**
 * Returns a Long representing the given (32-bit) integer value.
 * @param ***REMOVED***number***REMOVED*** value The 32-bit integer in question.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The corresponding Long value.
 */
goog.math.Long.fromInt = function(value) ***REMOVED***
    if (-128 <= value && value < 128) ***REMOVED***
        var cachedObj = goog.math.Long.IntCache_[value];
        if (cachedObj) ***REMOVED***
            return cachedObj;
        ***REMOVED***
    ***REMOVED***

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) ***REMOVED***
        goog.math.Long.IntCache_[value] = obj;
    ***REMOVED***
    return obj;
***REMOVED***;


/**
 * Returns a Long representing the given value, provided that it is a finite
 * number.  Otherwise, zero is returned.
 * @param ***REMOVED***number***REMOVED*** value The number in question.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The corresponding Long value.
 */
goog.math.Long.fromNumber = function(value) ***REMOVED***
    if (isNaN(value) || !isFinite(value)) ***REMOVED***
        return goog.math.Long.ZERO;
    ***REMOVED*** else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) ***REMOVED***
        return goog.math.Long.MIN_VALUE;
    ***REMOVED*** else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) ***REMOVED***
        return goog.math.Long.MAX_VALUE;
    ***REMOVED*** else if (value < 0) ***REMOVED***
        return goog.math.Long.fromNumber(-value).negate();
    ***REMOVED*** else ***REMOVED***
        return new goog.math.Long(
            (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
            (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    ***REMOVED***
***REMOVED***;


/**
 * Returns a Long representing the 64-bit integer that comes by concatenating
 * the given high and low bits.  Each is assumed to use 32 bits.
 * @param ***REMOVED***number***REMOVED*** lowBits The low 32-bits.
 * @param ***REMOVED***number***REMOVED*** highBits The high 32-bits.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The corresponding Long value.
 */
goog.math.Long.fromBits = function(lowBits, highBits) ***REMOVED***
    return new goog.math.Long(lowBits, highBits);
***REMOVED***;


/**
 * Returns a Long representation of the given string, written using the given
 * radix.
 * @param ***REMOVED***string***REMOVED*** str The textual representation of the Long.
 * @param ***REMOVED***number=***REMOVED*** opt_radix The radix in which the text is written.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The corresponding Long value.
 */
goog.math.Long.fromString = function(str, opt_radix) ***REMOVED***
    if (str.length == 0) ***REMOVED***
        throw Error('number format error: empty string');
    ***REMOVED***

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) ***REMOVED***
        throw Error('radix out of range: ' + radix);
    ***REMOVED***

    if (str.charAt(0) == '-') ***REMOVED***
        return goog.math.Long.fromString(str.substring(1), radix).negate();
    ***REMOVED*** else if (str.indexOf('-') >= 0) ***REMOVED***
        throw Error('number format error: interior "-" character: ' + str);
    ***REMOVED***

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) ***REMOVED***
        var size = Math.min(8, str.length - i);
        var value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) ***REMOVED***
            var power = goog.math.Long.fromNumber(Math.pow(radix, size));
            result = result.multiply(power).add(goog.math.Long.fromNumber(value));
        ***REMOVED*** else ***REMOVED***
            result = result.multiply(radixToPower);
            result = result.add(goog.math.Long.fromNumber(value));
        ***REMOVED***
    ***REMOVED***
    return result;
***REMOVED***;


// NOTE: the compiler should inline these constant values below and then remove
// these variables, so there should be no runtime penalty for these.


/**
 * Number used repeated below in calculations.  This must appear before the
 * first call to any from* function below.
 * @type ***REMOVED***number***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


/**
 * @type ***REMOVED***number***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


/**
 * @type ***REMOVED***number***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_32_DBL_ =
    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type ***REMOVED***number***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_31_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ / 2;


/**
 * @type ***REMOVED***number***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_48_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type ***REMOVED***number***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_64_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


/**
 * @type ***REMOVED***number***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_63_DBL_ =
    goog.math.Long.TWO_PWR_64_DBL_ / 2;


/** @type ***REMOVED***!goog.math.Long***REMOVED*** */
goog.math.Long.ZERO = goog.math.Long.fromInt(0);


/** @type ***REMOVED***!goog.math.Long***REMOVED*** */
goog.math.Long.ONE = goog.math.Long.fromInt(1);


/** @type ***REMOVED***!goog.math.Long***REMOVED*** */
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


/** @type ***REMOVED***!goog.math.Long***REMOVED*** */
goog.math.Long.MAX_VALUE =
    goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


/** @type ***REMOVED***!goog.math.Long***REMOVED*** */
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


/**
 * @type ***REMOVED***!goog.math.Long***REMOVED***
 * @private
 */
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


/** @return ***REMOVED***number***REMOVED*** The value, assuming it is a 32-bit integer. */
goog.math.Long.prototype.toInt = function() ***REMOVED***
    return this.low_;
***REMOVED***;


/** @return ***REMOVED***number***REMOVED*** The closest floating-point representation to this value. */
goog.math.Long.prototype.toNumber = function() ***REMOVED***
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
        this.getLowBitsUnsigned();
***REMOVED***;


/**
 * @param ***REMOVED***number=***REMOVED*** opt_radix The radix in which the text should be written.
 * @return ***REMOVED***string***REMOVED*** The textual representation of this value.
 * @override
 */
goog.math.Long.prototype.toString = function(opt_radix) ***REMOVED***
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) ***REMOVED***
        throw Error('radix out of range: ' + radix);
    ***REMOVED***

    if (this.isZero()) ***REMOVED***
        return '0';
    ***REMOVED***

    if (this.isNegative()) ***REMOVED***
        if (this.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = goog.math.Long.fromNumber(radix);
            var div = this.div(radixLong);
            var rem = div.multiply(radixLong).subtract(this);
            return div.toString(radix) + rem.toInt().toString(radix);
        ***REMOVED*** else ***REMOVED***
            return '-' + this.negate().toString(radix);
        ***REMOVED***
    ***REMOVED***

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) ***REMOVED***
        var remDiv = rem.div(radixToPower);
        var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0; // wraps around for base 36 (dcode)
        console.log(intval);
        var digits = intval.toString(radix);

        rem = remDiv;
        if (rem.isZero()) ***REMOVED***
            return digits + result;
        ***REMOVED*** else ***REMOVED***
            while (digits.length < 6) ***REMOVED***
                digits = '0' + digits;
            ***REMOVED***
            result = '' + digits + result;
        ***REMOVED***
    ***REMOVED***
***REMOVED***;


/** @return ***REMOVED***number***REMOVED*** The high 32-bits as a signed value. */
goog.math.Long.prototype.getHighBits = function() ***REMOVED***
    return this.high_;
***REMOVED***;


/** @return ***REMOVED***number***REMOVED*** The low 32-bits as a signed value. */
goog.math.Long.prototype.getLowBits = function() ***REMOVED***
    return this.low_;
***REMOVED***;


/** @return ***REMOVED***number***REMOVED*** The low 32-bits as an unsigned value. */
goog.math.Long.prototype.getLowBitsUnsigned = function() ***REMOVED***
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
***REMOVED***;


/**
 * @return ***REMOVED***number***REMOVED*** Returns the number of bits needed to represent the absolute
 *     value of this Long.
 */
goog.math.Long.prototype.getNumBitsAbs = function() ***REMOVED***
    if (this.isNegative()) ***REMOVED***
        if (this.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
            return 64;
        ***REMOVED*** else ***REMOVED***
            return this.negate().getNumBitsAbs();
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        var val = this.high_ != 0 ? this.high_ : this.low_;
        for (var bit = 31; bit > 0; bit--) ***REMOVED***
            if ((val & (1 << bit)) != 0) ***REMOVED***
                break;
            ***REMOVED***
        ***REMOVED***
        return this.high_ != 0 ? bit + 33 : bit + 1;
    ***REMOVED***
***REMOVED***;


/** @return ***REMOVED***boolean***REMOVED*** Whether this value is zero. */
goog.math.Long.prototype.isZero = function() ***REMOVED***
    return this.high_ == 0 && this.low_ == 0;
***REMOVED***;


/** @return ***REMOVED***boolean***REMOVED*** Whether this value is negative. */
goog.math.Long.prototype.isNegative = function() ***REMOVED***
    return this.high_ < 0;
***REMOVED***;


/** @return ***REMOVED***boolean***REMOVED*** Whether this value is odd. */
goog.math.Long.prototype.isOdd = function() ***REMOVED***
    return (this.low_ & 1) == 1;
***REMOVED***;


/**
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to compare against.
 * @return ***REMOVED***boolean***REMOVED*** Whether this Long equals the other.
 */
goog.math.Long.prototype.equals = function(other) ***REMOVED***
    return (this.high_ == other.high_) && (this.low_ == other.low_);
***REMOVED***;


/**
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to compare against.
 * @return ***REMOVED***boolean***REMOVED*** Whether this Long does not equal the other.
 */
goog.math.Long.prototype.notEquals = function(other) ***REMOVED***
    return (this.high_ != other.high_) || (this.low_ != other.low_);
***REMOVED***;


/**
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to compare against.
 * @return ***REMOVED***boolean***REMOVED*** Whether this Long is less than the other.
 */
goog.math.Long.prototype.lessThan = function(other) ***REMOVED***
    return this.compare(other) < 0;
***REMOVED***;


/**
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to compare against.
 * @return ***REMOVED***boolean***REMOVED*** Whether this Long is less than or equal to the other.
 */
goog.math.Long.prototype.lessThanOrEqual = function(other) ***REMOVED***
    return this.compare(other) <= 0;
***REMOVED***;


/**
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to compare against.
 * @return ***REMOVED***boolean***REMOVED*** Whether this Long is greater than the other.
 */
goog.math.Long.prototype.greaterThan = function(other) ***REMOVED***
    return this.compare(other) > 0;
***REMOVED***;


/**
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to compare against.
 * @return ***REMOVED***boolean***REMOVED*** Whether this Long is greater than or equal to the other.
 */
goog.math.Long.prototype.greaterThanOrEqual = function(other) ***REMOVED***
    return this.compare(other) >= 0;
***REMOVED***;


/**
 * Compares this Long with the given one.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to compare against.
 * @return ***REMOVED***number***REMOVED*** 0 if they are the same, 1 if the this is greater, and -1
 *     if the given one is greater.
 */
goog.math.Long.prototype.compare = function(other) ***REMOVED***
    if (this.equals(other)) ***REMOVED***
        return 0;
    ***REMOVED***

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) ***REMOVED***
        return -1;
    ***REMOVED***
    if (!thisNeg && otherNeg) ***REMOVED***
        return 1;
    ***REMOVED***

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) ***REMOVED***
        return -1;
    ***REMOVED*** else ***REMOVED***
        return 1;
    ***REMOVED***
***REMOVED***;


/** @return ***REMOVED***!goog.math.Long***REMOVED*** The negation of this value. */
goog.math.Long.prototype.negate = function() ***REMOVED***
    if (this.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
        return goog.math.Long.MIN_VALUE;
    ***REMOVED*** else ***REMOVED***
        return this.not().add(goog.math.Long.ONE);
    ***REMOVED***
***REMOVED***;


/**
 * Returns the sum of this and the given Long.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to add to this one.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The sum of this and the given Long.
 */
goog.math.Long.prototype.add = function(other) ***REMOVED***
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
***REMOVED***;


/**
 * Returns the difference of this and the given Long.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to subtract from this.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The difference of this and the given Long.
 */
goog.math.Long.prototype.subtract = function(other) ***REMOVED***
    return this.add(other.negate());
***REMOVED***;


/**
 * Returns the product of this and the given long.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long to multiply with this.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The product of this and the other.
 */
goog.math.Long.prototype.multiply = function(other) ***REMOVED***
    if (this.isZero()) ***REMOVED***
        return goog.math.Long.ZERO;
    ***REMOVED*** else if (other.isZero()) ***REMOVED***
        return goog.math.Long.ZERO;
    ***REMOVED***

    if (this.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
        return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    ***REMOVED*** else if (other.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
        return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    ***REMOVED***

    if (this.isNegative()) ***REMOVED***
        if (other.isNegative()) ***REMOVED***
            return this.negate().multiply(other.negate());
        ***REMOVED*** else ***REMOVED***
            return this.negate().multiply(other).negate();
        ***REMOVED***
    ***REMOVED*** else if (other.isNegative()) ***REMOVED***
        return this.multiply(other.negate()).negate();
    ***REMOVED***

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) ***REMOVED***
        return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    ***REMOVED***

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
***REMOVED***;


/**
 * Returns this Long divided by the given one.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long by which to divide.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** This Long divided by the given one.
 */
goog.math.Long.prototype.div = function(other) ***REMOVED***
    if (other.isZero()) ***REMOVED***
        throw Error('division by zero');
    ***REMOVED*** else if (this.isZero()) ***REMOVED***
        return goog.math.Long.ZERO;
    ***REMOVED***

    if (this.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
        if (other.equals(goog.math.Long.ONE) ||
            other.equals(goog.math.Long.NEG_ONE)) ***REMOVED***
            return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
        ***REMOVED*** else if (other.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
            return goog.math.Long.ONE;
        ***REMOVED*** else ***REMOVED***
            // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
            var halfThis = this.shiftRight(1);
            var approx = halfThis.div(other).shiftLeft(1);
            if (approx.equals(goog.math.Long.ZERO)) ***REMOVED***
                return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
            ***REMOVED*** else ***REMOVED***
                var rem = this.subtract(other.multiply(approx));
                var result = approx.add(rem.div(other));
                return result;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED*** else if (other.equals(goog.math.Long.MIN_VALUE)) ***REMOVED***
        return goog.math.Long.ZERO;
    ***REMOVED***

    if (this.isNegative()) ***REMOVED***
        if (other.isNegative()) ***REMOVED***
            return this.negate().div(other.negate());
        ***REMOVED*** else ***REMOVED***
            return this.negate().div(other).negate();
        ***REMOVED***
    ***REMOVED*** else if (other.isNegative()) ***REMOVED***
        return this.div(other.negate()).negate();
    ***REMOVED***

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) ***REMOVED***
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2);
        var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
        var approxRes = goog.math.Long.fromNumber(approx);
        var approxRem = approxRes.multiply(other);
        while (approxRem.isNegative() || approxRem.greaterThan(rem)) ***REMOVED***
            approx -= delta;
            approxRes = goog.math.Long.fromNumber(approx);
            approxRem = approxRes.multiply(other);
        ***REMOVED***

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero()) ***REMOVED***
            approxRes = goog.math.Long.ONE;
        ***REMOVED***

        res = res.add(approxRes);
        rem = rem.subtract(approxRem);
    ***REMOVED***
    return res;
***REMOVED***;


/**
 * Returns this Long modulo the given one.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other Long by which to mod.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** This Long modulo the given one.
 */
goog.math.Long.prototype.modulo = function(other) ***REMOVED***
    return this.subtract(this.div(other).multiply(other));
***REMOVED***;


/** @return ***REMOVED***!goog.math.Long***REMOVED*** The bitwise-NOT of this value. */
goog.math.Long.prototype.not = function() ***REMOVED***
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
***REMOVED***;


/**
 * Returns the bitwise-AND of this Long and the given one.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other The Long with which to AND.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The bitwise-AND of this and the other.
 */
goog.math.Long.prototype.and = function(other) ***REMOVED***
    return goog.math.Long.fromBits(this.low_ & other.low_,
        this.high_ & other.high_);
***REMOVED***;


/**
 * Returns the bitwise-OR of this Long and the given one.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other The Long with which to OR.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The bitwise-OR of this and the other.
 */
goog.math.Long.prototype.or = function(other) ***REMOVED***
    return goog.math.Long.fromBits(this.low_ | other.low_,
        this.high_ | other.high_);
***REMOVED***;


/**
 * Returns the bitwise-XOR of this Long and the given one.
 * @param ***REMOVED***goog.math.Long***REMOVED*** other The Long with which to XOR.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** The bitwise-XOR of this and the other.
 */
goog.math.Long.prototype.xor = function(other) ***REMOVED***
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
        this.high_ ^ other.high_);
***REMOVED***;


/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param ***REMOVED***number***REMOVED*** numBits The number of bits by which to shift.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** This shifted to the left by the given amount.
 */
goog.math.Long.prototype.shiftLeft = function(numBits) ***REMOVED***
    numBits &= 63;
    if (numBits == 0) ***REMOVED***
        return this;
    ***REMOVED*** else ***REMOVED***
        var low = this.low_;
        if (numBits < 32) ***REMOVED***
            var high = this.high_;
            return goog.math.Long.fromBits(
                low << numBits,
                (high << numBits) | (low >>> (32 - numBits)));
        ***REMOVED*** else ***REMOVED***
            return goog.math.Long.fromBits(0, low << (numBits - 32));
        ***REMOVED***
    ***REMOVED***
***REMOVED***;


/**
 * Returns this Long with bits shifted to the right by the given amount.
 * @param ***REMOVED***number***REMOVED*** numBits The number of bits by which to shift.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** This shifted to the right by the given amount.
 */
goog.math.Long.prototype.shiftRight = function(numBits) ***REMOVED***
    numBits &= 63;
    if (numBits == 0) ***REMOVED***
        return this;
    ***REMOVED*** else ***REMOVED***
        var high = this.high_;
        if (numBits < 32) ***REMOVED***
            var low = this.low_;
            return goog.math.Long.fromBits(
                (low >>> numBits) | (high << (32 - numBits)),
                high >> numBits);
        ***REMOVED*** else ***REMOVED***
            return goog.math.Long.fromBits(
                high >> (numBits - 32),
                high >= 0 ? 0 : -1);
        ***REMOVED***
    ***REMOVED***
***REMOVED***;


/**
 * Returns this Long with bits shifted to the right by the given amount, with
 * zeros placed into the new leading bits.
 * @param ***REMOVED***number***REMOVED*** numBits The number of bits by which to shift.
 * @return ***REMOVED***!goog.math.Long***REMOVED*** This shifted to the right by the given amount, with
 *     zeros placed into the new leading bits.
 */
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) ***REMOVED***
    numBits &= 63;
    if (numBits == 0) ***REMOVED***
        return this;
    ***REMOVED*** else ***REMOVED***
        var high = this.high_;
        if (numBits < 32) ***REMOVED***
            var low = this.low_;
            return goog.math.Long.fromBits(
                (low >>> numBits) | (high << (32 - numBits)),
                high >>> numBits);
        ***REMOVED*** else if (numBits == 32) ***REMOVED***
            return goog.math.Long.fromBits(high, 0);
        ***REMOVED*** else ***REMOVED***
            return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
        ***REMOVED***
    ***REMOVED***
***REMOVED***;

module.exports = goog.math.Long;
