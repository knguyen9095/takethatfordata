var test = require('tape');
var traverse = require('../');
var deepEqual = require('./lib/deep_equal');
var util = require('util');

test('circular', function (t) ***REMOVED***
    t.plan(1);
    
    var obj = ***REMOVED*** x : 3 ***REMOVED***;
    obj.y = obj;
    traverse(obj).forEach(function (x) ***REMOVED***
        if (this.path.join('') == 'y') ***REMOVED***
            t.equal(
                util.inspect(this.circular.node),
                util.inspect(obj)
            );
        ***REMOVED***
    ***REMOVED***);
***REMOVED***);

test('deepCirc', function (t) ***REMOVED***
    t.plan(2);
    var obj = ***REMOVED*** x : [ 1, 2, 3 ], y : [ 4, 5 ] ***REMOVED***;
    obj.y[2] = obj;
    
    var times = 0;
    traverse(obj).forEach(function (x) ***REMOVED***
        if (this.circular) ***REMOVED***
            t.same(this.circular.path, []);
            t.same(this.path, [ 'y', 2 ]);
        ***REMOVED***
    ***REMOVED***);
***REMOVED***);

test('doubleCirc', function (t) ***REMOVED***
    var obj = ***REMOVED*** x : [ 1, 2, 3 ], y : [ 4, 5 ] ***REMOVED***;
    obj.y[2] = obj;
    obj.x.push(obj.y);
    
    var circs = [];
    traverse(obj).forEach(function (x) ***REMOVED***
        if (this.circular) ***REMOVED***
            circs.push(***REMOVED*** circ : this.circular, self : this, node : x ***REMOVED***);
        ***REMOVED***
    ***REMOVED***);
    
    t.same(circs[0].self.path, [ 'x', 3, 2 ]);
    t.same(circs[0].circ.path, []);
     
    t.same(circs[1].self.path, [ 'y', 2 ]);
    t.same(circs[1].circ.path, []);
    
    t.same(circs.length, 2);
    t.end();
***REMOVED***);

test('circDubForEach', function (t) ***REMOVED***
    var obj = ***REMOVED*** x : [ 1, 2, 3 ], y : [ 4, 5 ] ***REMOVED***;
    obj.y[2] = obj;
    obj.x.push(obj.y);
    
    traverse(obj).forEach(function (x) ***REMOVED***
        if (this.circular) this.update('...');
    ***REMOVED***);
    
    t.same(obj, ***REMOVED*** x : [ 1, 2, 3, [ 4, 5, '...' ] ], y : [ 4, 5, '...' ] ***REMOVED***);
    t.end();
***REMOVED***);

test('circDubMap', function (t) ***REMOVED***
    var obj = ***REMOVED*** x : [ 1, 2, 3 ], y : [ 4, 5 ] ***REMOVED***;
    obj.y[2] = obj;
    obj.x.push(obj.y);
    
    var c = traverse(obj).map(function (x) ***REMOVED***
        if (this.circular) ***REMOVED***
            this.update('...');
        ***REMOVED***
    ***REMOVED***);
    
    t.same(c, ***REMOVED*** x : [ 1, 2, 3, [ 4, 5, '...' ] ], y : [ 4, 5, '...' ] ***REMOVED***);
    t.end();
***REMOVED***);

test('circClone', function (t) ***REMOVED***
    var obj = ***REMOVED*** x : [ 1, 2, 3 ], y : [ 4, 5 ] ***REMOVED***;
    obj.y[2] = obj;
    obj.x.push(obj.y);
    
    var clone = traverse.clone(obj);
    t.ok(obj !== clone);
    
    t.ok(clone.y[2] === clone);
    t.ok(clone.y[2] !== obj);
    t.ok(clone.x[3][2] === clone);
    t.ok(clone.x[3][2] !== obj);
    t.same(clone.x.slice(0,3), [1,2,3]);
    t.same(clone.y.slice(0,2), [4,5]);
    t.end();
***REMOVED***);

test('circMapScrub', function (t) ***REMOVED***
    var obj = ***REMOVED*** a : 1, b : 2 ***REMOVED***;
    obj.c = obj;
    
    var scrubbed = traverse(obj).map(function (node) ***REMOVED***
        if (this.circular) this.remove();
    ***REMOVED***);
    t.same(
        Object.keys(scrubbed).sort(),
        [ 'a', 'b' ]
    );
    t.ok(deepEqual(scrubbed, ***REMOVED*** a : 1, b : 2 ***REMOVED***));
    
    t.equal(obj.c, obj);
    t.end();
***REMOVED***);
