var traverse = module.exports = function (obj) ***REMOVED***
    return new Traverse(obj);
***REMOVED***;

function Traverse (obj) ***REMOVED***
    this.value = obj;
***REMOVED***

Traverse.prototype.get = function (ps) ***REMOVED***
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) ***REMOVED***
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) ***REMOVED***
            node = undefined;
            break;
        ***REMOVED***
        node = node[key];
    ***REMOVED***
    return node;
***REMOVED***;

Traverse.prototype.has = function (ps) ***REMOVED***
    var node = this.value;
    for (var i = 0; i < ps.length; i ++) ***REMOVED***
        var key = ps[i];
        if (!node || !hasOwnProperty.call(node, key)) ***REMOVED***
            return false;
        ***REMOVED***
        node = node[key];
    ***REMOVED***
    return true;
***REMOVED***;

Traverse.prototype.set = function (ps, value) ***REMOVED***
    var node = this.value;
    for (var i = 0; i < ps.length - 1; i ++) ***REMOVED***
        var key = ps[i];
        if (!hasOwnProperty.call(node, key)) node[key] = ***REMOVED******REMOVED***;
        node = node[key];
    ***REMOVED***
    node[ps[i]] = value;
    return value;
***REMOVED***;

Traverse.prototype.map = function (cb) ***REMOVED***
    return walk(this.value, cb, true);
***REMOVED***;

Traverse.prototype.forEach = function (cb) ***REMOVED***
    this.value = walk(this.value, cb, false);
    return this.value;
***REMOVED***;

Traverse.prototype.reduce = function (cb, init) ***REMOVED***
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function (x) ***REMOVED***
        if (!this.isRoot || !skip) ***REMOVED***
            acc = cb.call(this, acc, x);
        ***REMOVED***
    ***REMOVED***);
    return acc;
***REMOVED***;

Traverse.prototype.paths = function () ***REMOVED***
    var acc = [];
    this.forEach(function (x) ***REMOVED***
        acc.push(this.path); 
    ***REMOVED***);
    return acc;
***REMOVED***;

Traverse.prototype.nodes = function () ***REMOVED***
    var acc = [];
    this.forEach(function (x) ***REMOVED***
        acc.push(this.node);
    ***REMOVED***);
    return acc;
***REMOVED***;

Traverse.prototype.clone = function () ***REMOVED***
    var parents = [], nodes = [];
    
    return (function clone (src) ***REMOVED***
        for (var i = 0; i < parents.length; i++) ***REMOVED***
            if (parents[i] === src) ***REMOVED***
                return nodes[i];
            ***REMOVED***
        ***REMOVED***
        
        if (typeof src === 'object' && src !== null) ***REMOVED***
            var dst = copy(src);
            
            parents.push(src);
            nodes.push(dst);
            
            forEach(objectKeys(src), function (key) ***REMOVED***
                dst[key] = clone(src[key]);
            ***REMOVED***);
            
            parents.pop();
            nodes.pop();
            return dst;
        ***REMOVED***
        else ***REMOVED***
            return src;
        ***REMOVED***
    ***REMOVED***)(this.value);
***REMOVED***;

function walk (root, cb, immutable) ***REMOVED***
    var path = [];
    var parents = [];
    var alive = true;
    
    return (function walker (node_) ***REMOVED***
        var node = immutable ? copy(node_) : node_;
        var modifiers = ***REMOVED******REMOVED***;
        
        var keepGoing = true;
        
        var state = ***REMOVED***
            node : node,
            node_ : node_,
            path : [].concat(path),
            parent : parents[parents.length - 1],
            parents : parents,
            key : path.slice(-1)[0],
            isRoot : path.length === 0,
            level : path.length,
            circular : null,
            update : function (x, stopHere) ***REMOVED***
                if (!state.isRoot) ***REMOVED***
                    state.parent.node[state.key] = x;
                ***REMOVED***
                state.node = x;
                if (stopHere) keepGoing = false;
            ***REMOVED***,
            'delete' : function (stopHere) ***REMOVED***
                delete state.parent.node[state.key];
                if (stopHere) keepGoing = false;
            ***REMOVED***,
            remove : function (stopHere) ***REMOVED***
                if (isArray(state.parent.node)) ***REMOVED***
                    state.parent.node.splice(state.key, 1);
                ***REMOVED***
                else ***REMOVED***
                    delete state.parent.node[state.key];
                ***REMOVED***
                if (stopHere) keepGoing = false;
            ***REMOVED***,
            keys : null,
            before : function (f) ***REMOVED*** modifiers.before = f ***REMOVED***,
            after : function (f) ***REMOVED*** modifiers.after = f ***REMOVED***,
            pre : function (f) ***REMOVED*** modifiers.pre = f ***REMOVED***,
            post : function (f) ***REMOVED*** modifiers.post = f ***REMOVED***,
            stop : function () ***REMOVED*** alive = false ***REMOVED***,
            block : function () ***REMOVED*** keepGoing = false ***REMOVED***
        ***REMOVED***;
        
        if (!alive) return state;
        
        function updateState() ***REMOVED***
            if (typeof state.node === 'object' && state.node !== null) ***REMOVED***
                if (!state.keys || state.node_ !== state.node) ***REMOVED***
                    state.keys = objectKeys(state.node)
                ***REMOVED***
                
                state.isLeaf = state.keys.length == 0;
                
                for (var i = 0; i < parents.length; i++) ***REMOVED***
                    if (parents[i].node_ === node_) ***REMOVED***
                        state.circular = parents[i];
                        break;
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
            else ***REMOVED***
                state.isLeaf = true;
                state.keys = null;
            ***REMOVED***
            
            state.notLeaf = !state.isLeaf;
            state.notRoot = !state.isRoot;
        ***REMOVED***
        
        updateState();
        
        // use return values to update if defined
        var ret = cb.call(state, state.node);
        if (ret !== undefined && state.update) state.update(ret);
        
        if (modifiers.before) modifiers.before.call(state, state.node);
        
        if (!keepGoing) return state;
        
        if (typeof state.node == 'object'
        && state.node !== null && !state.circular) ***REMOVED***
            parents.push(state);
            
            updateState();
            
            forEach(state.keys, function (key, i) ***REMOVED***
                path.push(key);
                
                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
                
                var child = walker(state.node[key]);
                if (immutable && hasOwnProperty.call(state.node, key)) ***REMOVED***
                    state.node[key] = child.node;
                ***REMOVED***
                
                child.isLast = i == state.keys.length - 1;
                child.isFirst = i == 0;
                
                if (modifiers.post) modifiers.post.call(state, child);
                
                path.pop();
            ***REMOVED***);
            parents.pop();
        ***REMOVED***
        
        if (modifiers.after) modifiers.after.call(state, state.node);
        
        return state;
    ***REMOVED***)(root).node;
***REMOVED***

function copy (src) ***REMOVED***
    if (typeof src === 'object' && src !== null) ***REMOVED***
        var dst;
        
        if (isArray(src)) ***REMOVED***
            dst = [];
        ***REMOVED***
        else if (isDate(src)) ***REMOVED***
            dst = new Date(src.getTime ? src.getTime() : src);
        ***REMOVED***
        else if (isRegExp(src)) ***REMOVED***
            dst = new RegExp(src);
        ***REMOVED***
        else if (isError(src)) ***REMOVED***
            dst = ***REMOVED*** message: src.message ***REMOVED***;
        ***REMOVED***
        else if (isBoolean(src)) ***REMOVED***
            dst = new Boolean(src);
        ***REMOVED***
        else if (isNumber(src)) ***REMOVED***
            dst = new Number(src);
        ***REMOVED***
        else if (isString(src)) ***REMOVED***
            dst = new String(src);
        ***REMOVED***
        else if (Object.create && Object.getPrototypeOf) ***REMOVED***
            dst = Object.create(Object.getPrototypeOf(src));
        ***REMOVED***
        else if (src.constructor === Object) ***REMOVED***
            dst = ***REMOVED******REMOVED***;
        ***REMOVED***
        else ***REMOVED***
            var proto =
                (src.constructor && src.constructor.prototype)
                || src.__proto__
                || ***REMOVED******REMOVED***
            ;
            var T = function () ***REMOVED******REMOVED***;
            T.prototype = proto;
            dst = new T;
        ***REMOVED***
        
        forEach(objectKeys(src), function (key) ***REMOVED***
            dst[key] = src[key];
        ***REMOVED***);
        return dst;
    ***REMOVED***
    else return src;
***REMOVED***

var objectKeys = Object.keys || function keys (obj) ***REMOVED***
    var res = [];
    for (var key in obj) res.push(key)
    return res;
***REMOVED***;

function toS (obj) ***REMOVED*** return Object.prototype.toString.call(obj) ***REMOVED***
function isDate (obj) ***REMOVED*** return toS(obj) === '[object Date]' ***REMOVED***
function isRegExp (obj) ***REMOVED*** return toS(obj) === '[object RegExp]' ***REMOVED***
function isError (obj) ***REMOVED*** return toS(obj) === '[object Error]' ***REMOVED***
function isBoolean (obj) ***REMOVED*** return toS(obj) === '[object Boolean]' ***REMOVED***
function isNumber (obj) ***REMOVED*** return toS(obj) === '[object Number]' ***REMOVED***
function isString (obj) ***REMOVED*** return toS(obj) === '[object String]' ***REMOVED***

var isArray = Array.isArray || function isArray (xs) ***REMOVED***
    return Object.prototype.toString.call(xs) === '[object Array]';
***REMOVED***;

var forEach = function (xs, fn) ***REMOVED***
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) ***REMOVED***
        fn(xs[i], i, xs);
    ***REMOVED***
***REMOVED***;

forEach(objectKeys(Traverse.prototype), function (key) ***REMOVED***
    traverse[key] = function (obj) ***REMOVED***
        var args = [].slice.call(arguments, 1);
        var t = new Traverse(obj);
        return t[key].apply(t, args);
    ***REMOVED***;
***REMOVED***);

var hasOwnProperty = Object.hasOwnProperty || function (obj, key) ***REMOVED***
    return key in obj;
***REMOVED***;
