'use strict';
const lazy = (mod, fn, id) => mod === undefined ? fn(id) : mod;

module.exports = fn => ***REMOVED***
	return id => ***REMOVED***
		let mod;

		return function () ***REMOVED***
			if (arguments.length === 0) ***REMOVED***
				mod = lazy(mod, fn, id);
				return mod;
			***REMOVED***

			const ret = ***REMOVED******REMOVED***;

			[].forEach.call(arguments, prop => ***REMOVED***
				Object.defineProperty(ret, prop, ***REMOVED***
					get: () => ***REMOVED***
						mod = lazy(mod, fn, id);
						if (typeof mod[prop] === 'function') ***REMOVED***
							return function () ***REMOVED***
								return mod[prop].apply(mod, arguments);
							***REMOVED***;
						***REMOVED***

						return mod[prop];
					***REMOVED***
				***REMOVED***);
			***REMOVED***);

			return ret;
		***REMOVED***;
	***REMOVED***;
***REMOVED***;

module.exports.proxy = fn => ***REMOVED***
	return id => ***REMOVED***
		let mod;

		const handler = ***REMOVED***
			get: (target, property) => ***REMOVED***
				mod = lazy(mod, fn, id);
				return Reflect.get(mod, property);
			***REMOVED***,
			apply: (target, thisArg, argumentsList) => ***REMOVED***
				mod = lazy(mod, fn, id);
				return Reflect.apply(mod, thisArg, argumentsList);
			***REMOVED***
		***REMOVED***;

		return new Proxy(() => ***REMOVED******REMOVED***, handler);
	***REMOVED***;
***REMOVED***;
