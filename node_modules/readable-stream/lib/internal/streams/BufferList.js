'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) ***REMOVED*** if (!(instance instanceof Constructor)) ***REMOVED*** throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) ***REMOVED***
  src.copy(target, offset);
***REMOVED***

module.exports = function () ***REMOVED***
  function BufferList() ***REMOVED***
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  ***REMOVED***

  BufferList.prototype.push = function push(v) ***REMOVED***
    var entry = ***REMOVED*** data: v, next: null ***REMOVED***;
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  ***REMOVED***;

  BufferList.prototype.unshift = function unshift(v) ***REMOVED***
    var entry = ***REMOVED*** data: v, next: this.head ***REMOVED***;
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  ***REMOVED***;

  BufferList.prototype.shift = function shift() ***REMOVED***
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  ***REMOVED***;

  BufferList.prototype.clear = function clear() ***REMOVED***
    this.head = this.tail = null;
    this.length = 0;
  ***REMOVED***;

  BufferList.prototype.join = function join(s) ***REMOVED***
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) ***REMOVED***
      ret += s + p.data;
    ***REMOVED***return ret;
  ***REMOVED***;

  BufferList.prototype.concat = function concat(n) ***REMOVED***
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) ***REMOVED***
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    ***REMOVED***
    return ret;
  ***REMOVED***;

  return BufferList;
***REMOVED***();