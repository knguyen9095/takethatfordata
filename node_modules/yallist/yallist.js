module.exports = Yallist

Yallist.Node = Node
Yallist.create = Yallist

function Yallist (list) ***REMOVED***
  var self = this
  if (!(self instanceof Yallist)) ***REMOVED***
    self = new Yallist()
  ***REMOVED***

  self.tail = null
  self.head = null
  self.length = 0

  if (list && typeof list.forEach === 'function') ***REMOVED***
    list.forEach(function (item) ***REMOVED***
      self.push(item)
    ***REMOVED***)
  ***REMOVED*** else if (arguments.length > 0) ***REMOVED***
    for (var i = 0, l = arguments.length; i < l; i++) ***REMOVED***
      self.push(arguments[i])
    ***REMOVED***
  ***REMOVED***

  return self
***REMOVED***

Yallist.prototype.removeNode = function (node) ***REMOVED***
  if (node.list !== this) ***REMOVED***
    throw new Error('removing node which does not belong to this list')
  ***REMOVED***

  var next = node.next
  var prev = node.prev

  if (next) ***REMOVED***
    next.prev = prev
  ***REMOVED***

  if (prev) ***REMOVED***
    prev.next = next
  ***REMOVED***

  if (node === this.head) ***REMOVED***
    this.head = next
  ***REMOVED***
  if (node === this.tail) ***REMOVED***
    this.tail = prev
  ***REMOVED***

  node.list.length--
  node.next = null
  node.prev = null
  node.list = null
***REMOVED***

Yallist.prototype.unshiftNode = function (node) ***REMOVED***
  if (node === this.head) ***REMOVED***
    return
  ***REMOVED***

  if (node.list) ***REMOVED***
    node.list.removeNode(node)
  ***REMOVED***

  var head = this.head
  node.list = this
  node.next = head
  if (head) ***REMOVED***
    head.prev = node
  ***REMOVED***

  this.head = node
  if (!this.tail) ***REMOVED***
    this.tail = node
  ***REMOVED***
  this.length++
***REMOVED***

Yallist.prototype.pushNode = function (node) ***REMOVED***
  if (node === this.tail) ***REMOVED***
    return
  ***REMOVED***

  if (node.list) ***REMOVED***
    node.list.removeNode(node)
  ***REMOVED***

  var tail = this.tail
  node.list = this
  node.prev = tail
  if (tail) ***REMOVED***
    tail.next = node
  ***REMOVED***

  this.tail = node
  if (!this.head) ***REMOVED***
    this.head = node
  ***REMOVED***
  this.length++
***REMOVED***

Yallist.prototype.push = function () ***REMOVED***
  for (var i = 0, l = arguments.length; i < l; i++) ***REMOVED***
    push(this, arguments[i])
  ***REMOVED***
  return this.length
***REMOVED***

Yallist.prototype.unshift = function () ***REMOVED***
  for (var i = 0, l = arguments.length; i < l; i++) ***REMOVED***
    unshift(this, arguments[i])
  ***REMOVED***
  return this.length
***REMOVED***

Yallist.prototype.pop = function () ***REMOVED***
  if (!this.tail) ***REMOVED***
    return undefined
  ***REMOVED***

  var res = this.tail.value
  this.tail = this.tail.prev
  if (this.tail) ***REMOVED***
    this.tail.next = null
  ***REMOVED*** else ***REMOVED***
    this.head = null
  ***REMOVED***
  this.length--
  return res
***REMOVED***

Yallist.prototype.shift = function () ***REMOVED***
  if (!this.head) ***REMOVED***
    return undefined
  ***REMOVED***

  var res = this.head.value
  this.head = this.head.next
  if (this.head) ***REMOVED***
    this.head.prev = null
  ***REMOVED*** else ***REMOVED***
    this.tail = null
  ***REMOVED***
  this.length--
  return res
***REMOVED***

Yallist.prototype.forEach = function (fn, thisp) ***REMOVED***
  thisp = thisp || this
  for (var walker = this.head, i = 0; walker !== null; i++) ***REMOVED***
    fn.call(thisp, walker.value, i, this)
    walker = walker.next
  ***REMOVED***
***REMOVED***

Yallist.prototype.forEachReverse = function (fn, thisp) ***REMOVED***
  thisp = thisp || this
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) ***REMOVED***
    fn.call(thisp, walker.value, i, this)
    walker = walker.prev
  ***REMOVED***
***REMOVED***

Yallist.prototype.get = function (n) ***REMOVED***
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) ***REMOVED***
    // abort out of the list early if we hit a cycle
    walker = walker.next
  ***REMOVED***
  if (i === n && walker !== null) ***REMOVED***
    return walker.value
  ***REMOVED***
***REMOVED***

Yallist.prototype.getReverse = function (n) ***REMOVED***
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) ***REMOVED***
    // abort out of the list early if we hit a cycle
    walker = walker.prev
  ***REMOVED***
  if (i === n && walker !== null) ***REMOVED***
    return walker.value
  ***REMOVED***
***REMOVED***

Yallist.prototype.map = function (fn, thisp) ***REMOVED***
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.head; walker !== null;) ***REMOVED***
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.next
  ***REMOVED***
  return res
***REMOVED***

Yallist.prototype.mapReverse = function (fn, thisp) ***REMOVED***
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.tail; walker !== null;) ***REMOVED***
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.prev
  ***REMOVED***
  return res
***REMOVED***

Yallist.prototype.reduce = function (fn, initial) ***REMOVED***
  var acc
  var walker = this.head
  if (arguments.length > 1) ***REMOVED***
    acc = initial
  ***REMOVED*** else if (this.head) ***REMOVED***
    walker = this.head.next
    acc = this.head.value
  ***REMOVED*** else ***REMOVED***
    throw new TypeError('Reduce of empty list with no initial value')
  ***REMOVED***

  for (var i = 0; walker !== null; i++) ***REMOVED***
    acc = fn(acc, walker.value, i)
    walker = walker.next
  ***REMOVED***

  return acc
***REMOVED***

Yallist.prototype.reduceReverse = function (fn, initial) ***REMOVED***
  var acc
  var walker = this.tail
  if (arguments.length > 1) ***REMOVED***
    acc = initial
  ***REMOVED*** else if (this.tail) ***REMOVED***
    walker = this.tail.prev
    acc = this.tail.value
  ***REMOVED*** else ***REMOVED***
    throw new TypeError('Reduce of empty list with no initial value')
  ***REMOVED***

  for (var i = this.length - 1; walker !== null; i--) ***REMOVED***
    acc = fn(acc, walker.value, i)
    walker = walker.prev
  ***REMOVED***

  return acc
***REMOVED***

Yallist.prototype.toArray = function () ***REMOVED***
  var arr = new Array(this.length)
  for (var i = 0, walker = this.head; walker !== null; i++) ***REMOVED***
    arr[i] = walker.value
    walker = walker.next
  ***REMOVED***
  return arr
***REMOVED***

Yallist.prototype.toArrayReverse = function () ***REMOVED***
  var arr = new Array(this.length)
  for (var i = 0, walker = this.tail; walker !== null; i++) ***REMOVED***
    arr[i] = walker.value
    walker = walker.prev
  ***REMOVED***
  return arr
***REMOVED***

Yallist.prototype.slice = function (from, to) ***REMOVED***
  to = to || this.length
  if (to < 0) ***REMOVED***
    to += this.length
  ***REMOVED***
  from = from || 0
  if (from < 0) ***REMOVED***
    from += this.length
  ***REMOVED***
  var ret = new Yallist()
  if (to < from || to < 0) ***REMOVED***
    return ret
  ***REMOVED***
  if (from < 0) ***REMOVED***
    from = 0
  ***REMOVED***
  if (to > this.length) ***REMOVED***
    to = this.length
  ***REMOVED***
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) ***REMOVED***
    walker = walker.next
  ***REMOVED***
  for (; walker !== null && i < to; i++, walker = walker.next) ***REMOVED***
    ret.push(walker.value)
  ***REMOVED***
  return ret
***REMOVED***

Yallist.prototype.sliceReverse = function (from, to) ***REMOVED***
  to = to || this.length
  if (to < 0) ***REMOVED***
    to += this.length
  ***REMOVED***
  from = from || 0
  if (from < 0) ***REMOVED***
    from += this.length
  ***REMOVED***
  var ret = new Yallist()
  if (to < from || to < 0) ***REMOVED***
    return ret
  ***REMOVED***
  if (from < 0) ***REMOVED***
    from = 0
  ***REMOVED***
  if (to > this.length) ***REMOVED***
    to = this.length
  ***REMOVED***
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) ***REMOVED***
    walker = walker.prev
  ***REMOVED***
  for (; walker !== null && i > from; i--, walker = walker.prev) ***REMOVED***
    ret.push(walker.value)
  ***REMOVED***
  return ret
***REMOVED***

Yallist.prototype.reverse = function () ***REMOVED***
  var head = this.head
  var tail = this.tail
  for (var walker = head; walker !== null; walker = walker.prev) ***REMOVED***
    var p = walker.prev
    walker.prev = walker.next
    walker.next = p
  ***REMOVED***
  this.head = tail
  this.tail = head
  return this
***REMOVED***

function push (self, item) ***REMOVED***
  self.tail = new Node(item, self.tail, null, self)
  if (!self.head) ***REMOVED***
    self.head = self.tail
  ***REMOVED***
  self.length++
***REMOVED***

function unshift (self, item) ***REMOVED***
  self.head = new Node(item, null, self.head, self)
  if (!self.tail) ***REMOVED***
    self.tail = self.head
  ***REMOVED***
  self.length++
***REMOVED***

function Node (value, prev, next, list) ***REMOVED***
  if (!(this instanceof Node)) ***REMOVED***
    return new Node(value, prev, next, list)
  ***REMOVED***

  this.list = list
  this.value = value

  if (prev) ***REMOVED***
    prev.next = this
    this.prev = prev
  ***REMOVED*** else ***REMOVED***
    this.prev = null
  ***REMOVED***

  if (next) ***REMOVED***
    next.prev = this
    this.next = next
  ***REMOVED*** else ***REMOVED***
    this.next = null
  ***REMOVED***
***REMOVED***
