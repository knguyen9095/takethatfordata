var Buffer = require('buffer').Buffer
var fs = require('fs')
var test = require('tape')

var http = require('../..')

test('abort before response', function (t) ***REMOVED***
	var req = http.get('/basic.txt', function (res) ***REMOVED***
		t.fail('unexpected response')
	***REMOVED***)
	req.abort()
	t.end()
***REMOVED***)

test('abort on response', function (t) ***REMOVED***
	var req = http.get('/basic.txt', function (res) ***REMOVED***
		req.abort()
		t.end()

		res.on('end', function () ***REMOVED***
			t.fail('unexpected end')
		***REMOVED***)

		res.on('data', function (data) ***REMOVED***
			t.fail('unexpected data')
		***REMOVED***)
	***REMOVED***)
***REMOVED***)

test('abort on data', function (t) ***REMOVED***
	var req = http.get('/browserify.png?copies=5', function (res) ***REMOVED***
		var firstData = true
		var failOnData = false

		res.on('end', function () ***REMOVED***
			t.fail('unexpected end')
		***REMOVED***)

		res.on('data', function (data) ***REMOVED***
			if (failOnData)
				t.fail('unexpected data')
			else if (firstData) ***REMOVED***
				firstData = false
				req.abort()
				t.end()
				process.nextTick(function () ***REMOVED***
					// Wait for any data that may have been queued
					// in the stream before considering data events
					// as errors
					failOnData = true
				***REMOVED***)
			***REMOVED***
		***REMOVED***)
	***REMOVED***)
***REMOVED***)