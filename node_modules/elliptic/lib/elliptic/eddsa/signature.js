'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param ***REMOVED***EDDSA***REMOVED*** eddsa - eddsa instance
* @param ***REMOVED***Array<Bytes>|Object***REMOVED*** sig -
* @param ***REMOVED***Array<Bytes>|Point***REMOVED*** [sig.R] - R point as Point or bytes
* @param ***REMOVED***Array<Bytes>|bn***REMOVED*** [sig.S] - S scalar as bn or bytes
* @param ***REMOVED***Array<Bytes>***REMOVED*** [sig.Rencoded] - R point encoded
* @param ***REMOVED***Array<Bytes>***REMOVED*** [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) ***REMOVED***
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) ***REMOVED***
    sig = ***REMOVED***
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    ***REMOVED***;
  ***REMOVED***

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
***REMOVED***

cachedProperty(Signature, 'S', function S() ***REMOVED***
  return this.eddsa.decodeInt(this.Sencoded());
***REMOVED***);

cachedProperty(Signature, 'R', function R() ***REMOVED***
  return this.eddsa.decodePoint(this.Rencoded());
***REMOVED***);

cachedProperty(Signature, 'Rencoded', function Rencoded() ***REMOVED***
  return this.eddsa.encodePoint(this.R());
***REMOVED***);

cachedProperty(Signature, 'Sencoded', function Sencoded() ***REMOVED***
  return this.eddsa.encodeInt(this.S());
***REMOVED***);

Signature.prototype.toBytes = function toBytes() ***REMOVED***
  return this.Rencoded().concat(this.Sencoded());
***REMOVED***;

Signature.prototype.toHex = function toHex() ***REMOVED***
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
***REMOVED***;

module.exports = Signature;
