'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate(***REMOVED*** level: 3***REMOVED***);
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) ***REMOVED*** throw new Error(inflate.err); ***REMOVED***
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) ***REMOVED***
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign(***REMOVED***
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  ***REMOVED***, options || ***REMOVED******REMOVED***);

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) ***REMOVED***
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) ***REMOVED*** opt.windowBits = -15; ***REMOVED***
  ***REMOVED***

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) ***REMOVED***
    opt.windowBits += 32;
  ***REMOVED***

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) ***REMOVED***
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) ***REMOVED***
      opt.windowBits |= 15;
    ***REMOVED***
  ***REMOVED***

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) ***REMOVED***
    throw new Error(msg[status]);
  ***REMOVED***

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
***REMOVED***

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) ***REMOVED***
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) ***REMOVED*** return false; ***REMOVED***
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') ***REMOVED***
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  ***REMOVED*** else if (toString.call(data) === '[object ArrayBuffer]') ***REMOVED***
    strm.input = new Uint8Array(data);
  ***REMOVED*** else ***REMOVED***
    strm.input = data;
  ***REMOVED***

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do ***REMOVED***
    if (strm.avail_out === 0) ***REMOVED***
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    ***REMOVED***

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) ***REMOVED***
      // Convert data if needed
      if (typeof dictionary === 'string') ***REMOVED***
        dict = strings.string2buf(dictionary);
      ***REMOVED*** else if (toString.call(dictionary) === '[object ArrayBuffer]') ***REMOVED***
        dict = new Uint8Array(dictionary);
      ***REMOVED*** else ***REMOVED***
        dict = dictionary;
      ***REMOVED***

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    ***REMOVED***

    if (status === c.Z_BUF_ERROR && allowBufError === true) ***REMOVED***
      status = c.Z_OK;
      allowBufError = false;
    ***REMOVED***

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) ***REMOVED***
      this.onEnd(status);
      this.ended = true;
      return false;
    ***REMOVED***

    if (strm.next_out) ***REMOVED***
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) ***REMOVED***

        if (this.options.to === 'string') ***REMOVED***

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) ***REMOVED*** utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); ***REMOVED***

          this.onData(utf8str);

        ***REMOVED*** else ***REMOVED***
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) ***REMOVED***
      allowBufError = true;
    ***REMOVED***

  ***REMOVED*** while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) ***REMOVED***
    _mode = c.Z_FINISH;
  ***REMOVED***

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) ***REMOVED***
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  ***REMOVED***

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) ***REMOVED***
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  ***REMOVED***

  return true;
***REMOVED***;


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) ***REMOVED***
  this.chunks.push(chunk);
***REMOVED***;


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) ***REMOVED***
  // On success - join
  if (status === c.Z_OK) ***REMOVED***
    if (this.options.to === 'string') ***REMOVED***
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    ***REMOVED*** else ***REMOVED***
      this.result = utils.flattenChunks(this.chunks);
    ***REMOVED***
  ***REMOVED***
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
***REMOVED***;


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try ***REMOVED***
 *   output = pako.inflate(input);
 * ***REMOVED*** catch (err)
 *   console.log(err);
 * ***REMOVED***
 * ```
 **/
function inflate(input, options) ***REMOVED***
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) ***REMOVED*** throw inflator.msg || msg[inflator.err]; ***REMOVED***

  return inflator.result;
***REMOVED***


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  options.raw = true;
  return inflate(input, options);
***REMOVED***


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;
