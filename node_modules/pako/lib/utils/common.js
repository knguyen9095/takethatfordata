'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) ***REMOVED***
  return Object.prototype.hasOwnProperty.call(obj, key);
***REMOVED***

exports.assign = function (obj /*from1, from2, from3, ...*/) ***REMOVED***
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) ***REMOVED***
    var source = sources.shift();
    if (!source) ***REMOVED*** continue; ***REMOVED***

    if (typeof source !== 'object') ***REMOVED***
      throw new TypeError(source + 'must be non-object');
    ***REMOVED***

    for (var p in source) ***REMOVED***
      if (_has(source, p)) ***REMOVED***
        obj[p] = source[p];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return obj;
***REMOVED***;


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) ***REMOVED***
  if (buf.length === size) ***REMOVED*** return buf; ***REMOVED***
  if (buf.subarray) ***REMOVED*** return buf.subarray(0, size); ***REMOVED***
  buf.length = size;
  return buf;
***REMOVED***;


var fnTyped = ***REMOVED***
  arraySet: function (dest, src, src_offs, len, dest_offs) ***REMOVED***
    if (src.subarray && dest.subarray) ***REMOVED***
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    ***REMOVED***
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) ***REMOVED***
      dest[dest_offs + i] = src[src_offs + i];
    ***REMOVED***
  ***REMOVED***,
  // Join array of chunks to single array.
  flattenChunks: function (chunks) ***REMOVED***
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) ***REMOVED***
      len += chunks[i].length;
    ***REMOVED***

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) ***REMOVED***
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    ***REMOVED***

    return result;
  ***REMOVED***
***REMOVED***;

var fnUntyped = ***REMOVED***
  arraySet: function (dest, src, src_offs, len, dest_offs) ***REMOVED***
    for (var i = 0; i < len; i++) ***REMOVED***
      dest[dest_offs + i] = src[src_offs + i];
    ***REMOVED***
  ***REMOVED***,
  // Join array of chunks to single array.
  flattenChunks: function (chunks) ***REMOVED***
    return [].concat.apply([], chunks);
  ***REMOVED***
***REMOVED***;


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) ***REMOVED***
  if (on) ***REMOVED***
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  ***REMOVED*** else ***REMOVED***
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  ***REMOVED***
***REMOVED***;

exports.setTyped(TYPED_OK);
