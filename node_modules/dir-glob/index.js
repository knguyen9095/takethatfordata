'use strict';
const path = require('path');
const arrify = require('arrify');
const pathType = require('path-type');

const getExtensions = extensions => extensions.length > 1 ? `***REMOVED***$***REMOVED***extensions.join(',')***REMOVED******REMOVED***` : extensions[0];
const getPath = filepath => filepath[0] === '!' ? filepath.slice(1) : filepath;

const addExtensions = (file, extensions) => ***REMOVED***
	if (path.extname(file)) ***REMOVED***
		return `**/$***REMOVED***file***REMOVED***`;
	***REMOVED***

	return `**/$***REMOVED***file***REMOVED***.$***REMOVED***getExtensions(extensions)***REMOVED***`;
***REMOVED***;

const getGlob = (dir, opts) => ***REMOVED***
	opts = Object.assign(***REMOVED******REMOVED***, opts);

	if (opts.files && !Array.isArray(opts.files)) ***REMOVED***
		throw new TypeError(`\`options.files\` must be an \`Array\`, not \`$***REMOVED***typeof opts.files***REMOVED***\``);
	***REMOVED***

	if (opts.extensions && !Array.isArray(opts.extensions)) ***REMOVED***
		throw new TypeError(`\`options.extensions\` must be an \`Array\`, not \`$***REMOVED***typeof opts.extensions***REMOVED***\``);
	***REMOVED***

	if (opts.files && opts.extensions) ***REMOVED***
		return opts.files.map(x => path.join(dir, addExtensions(x, opts.extensions)));
	***REMOVED*** else if (opts.files) ***REMOVED***
		return opts.files.map(x => path.join(dir, `**/$***REMOVED***x***REMOVED***`));
	***REMOVED*** else if (opts.extensions) ***REMOVED***
		return [path.join(dir, `**/*.$***REMOVED***getExtensions(opts.extensions)***REMOVED***`)];
	***REMOVED***

	return [path.join(dir, '**')];
***REMOVED***;

module.exports = (input, opts) => ***REMOVED***
	return Promise.all(arrify(input).map(x => pathType.dir(getPath(x))
		.then(isDir => isDir ? getGlob(x, opts) : x)))
		.then(globs => [].concat.apply([], globs));
***REMOVED***;

module.exports.sync = (input, opts) => ***REMOVED***
	const globs = arrify(input).map(x => pathType.dirSync(getPath(x)) ? getGlob(x, opts) : x);
	return [].concat.apply([], globs);
***REMOVED***;
