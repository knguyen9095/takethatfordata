const spawn = require('child_process').spawn;

module.exports = ***REMOVED*** tree, pidsForTree, getStat ***REMOVED***;

function getStat() ***REMOVED***
  return new Promise(resolve => ***REMOVED***
    const command = `ls /proc | grep -E '^[0-9]+$' | xargs -I***REMOVED******REMOVED*** cat /proc/***REMOVED******REMOVED***/stat`;
    const child = spawn('sh', ['-c', command], ***REMOVED***
      stdio: ['pipe', 'pipe', 'pipe'],
    ***REMOVED***);

    var res = '';
    child.stdout.on('data', data => (res += data));
    child.on('close', () => resolve(res));
  ***REMOVED***);
***REMOVED***

function template(s) ***REMOVED***
  var stat = null;
  // 'pid', 'comm', 'state', 'ppid', 'pgrp'
  // %d     (%s)    %c       %d      %d
  s.replace(
    /(\d+) \((.*?)\)\s(.+?)\s(\d+)\s/g,
    (all, PID, COMMAND, STAT, PPID) => ***REMOVED***
      stat = ***REMOVED*** PID, COMMAND, PPID, STAT ***REMOVED***;
    ***REMOVED***
  );

  return stat;
***REMOVED***

function tree(stats) ***REMOVED***
  const processes = stats
    .split('\n')
    .map(template)
    .filter(Boolean);

  return processes;
***REMOVED***

function pidsForTree(tree, pid) ***REMOVED***
  if (typeof pid === 'number') ***REMOVED***
    pid = pid.toString();
  ***REMOVED***
  const parents = [pid];
  const children = [];

  tree.forEach(proc => ***REMOVED***
    if (parents.indexOf(proc.PPID) !== -1) ***REMOVED***
      parents.push(proc.PID);
      children.push(proc);
    ***REMOVED***
  ***REMOVED***);

  return children;
***REMOVED***
