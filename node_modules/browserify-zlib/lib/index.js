'use strict';

var Buffer = require('buffer').Buffer;
var Transform = require('stream').Transform;
var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;
var kMaxLength = require('buffer').kMaxLength;
var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
var bkeys = Object.keys(binding);
for (var bk = 0; bk < bkeys.length; bk++) ***REMOVED***
  var bkey = bkeys[bk];
  if (bkey.match(/^Z/)) ***REMOVED***
    Object.defineProperty(exports, bkey, ***REMOVED***
      enumerable: true, value: binding[bkey], writable: false
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

// translation table for return codes.
var codes = ***REMOVED***
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
***REMOVED***;

var ckeys = Object.keys(codes);
for (var ck = 0; ck < ckeys.length; ck++) ***REMOVED***
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
***REMOVED***

Object.defineProperty(exports, 'codes', ***REMOVED***
  enumerable: true, value: Object.freeze(codes), writable: false
***REMOVED***);

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function (o) ***REMOVED***
  return new Deflate(o);
***REMOVED***;

exports.createInflate = function (o) ***REMOVED***
  return new Inflate(o);
***REMOVED***;

exports.createDeflateRaw = function (o) ***REMOVED***
  return new DeflateRaw(o);
***REMOVED***;

exports.createInflateRaw = function (o) ***REMOVED***
  return new InflateRaw(o);
***REMOVED***;

exports.createGzip = function (o) ***REMOVED***
  return new Gzip(o);
***REMOVED***;

exports.createGunzip = function (o) ***REMOVED***
  return new Gunzip(o);
***REMOVED***;

exports.createUnzip = function (o) ***REMOVED***
  return new Unzip(o);
***REMOVED***;

// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function (buffer, opts, callback) ***REMOVED***
  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  return zlibBuffer(new Deflate(opts), buffer, callback);
***REMOVED***;

exports.deflateSync = function (buffer, opts) ***REMOVED***
  return zlibBufferSync(new Deflate(opts), buffer);
***REMOVED***;

exports.gzip = function (buffer, opts, callback) ***REMOVED***
  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  return zlibBuffer(new Gzip(opts), buffer, callback);
***REMOVED***;

exports.gzipSync = function (buffer, opts) ***REMOVED***
  return zlibBufferSync(new Gzip(opts), buffer);
***REMOVED***;

exports.deflateRaw = function (buffer, opts, callback) ***REMOVED***
  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
***REMOVED***;

exports.deflateRawSync = function (buffer, opts) ***REMOVED***
  return zlibBufferSync(new DeflateRaw(opts), buffer);
***REMOVED***;

exports.unzip = function (buffer, opts, callback) ***REMOVED***
  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  return zlibBuffer(new Unzip(opts), buffer, callback);
***REMOVED***;

exports.unzipSync = function (buffer, opts) ***REMOVED***
  return zlibBufferSync(new Unzip(opts), buffer);
***REMOVED***;

exports.inflate = function (buffer, opts, callback) ***REMOVED***
  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  return zlibBuffer(new Inflate(opts), buffer, callback);
***REMOVED***;

exports.inflateSync = function (buffer, opts) ***REMOVED***
  return zlibBufferSync(new Inflate(opts), buffer);
***REMOVED***;

exports.gunzip = function (buffer, opts, callback) ***REMOVED***
  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  return zlibBuffer(new Gunzip(opts), buffer, callback);
***REMOVED***;

exports.gunzipSync = function (buffer, opts) ***REMOVED***
  return zlibBufferSync(new Gunzip(opts), buffer);
***REMOVED***;

exports.inflateRaw = function (buffer, opts, callback) ***REMOVED***
  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
    opts = ***REMOVED******REMOVED***;
  ***REMOVED***
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
***REMOVED***;

exports.inflateRawSync = function (buffer, opts) ***REMOVED***
  return zlibBufferSync(new InflateRaw(opts), buffer);
***REMOVED***;

function zlibBuffer(engine, buffer, callback) ***REMOVED***
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() ***REMOVED***
    var chunk;
    while (null !== (chunk = engine.read())) ***REMOVED***
      buffers.push(chunk);
      nread += chunk.length;
    ***REMOVED***
    engine.once('readable', flow);
  ***REMOVED***

  function onError(err) ***REMOVED***
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  ***REMOVED***

  function onEnd() ***REMOVED***
    var buf;
    var err = null;

    if (nread >= kMaxLength) ***REMOVED***
      err = new RangeError(kRangeErrorMessage);
    ***REMOVED*** else ***REMOVED***
      buf = Buffer.concat(buffers, nread);
    ***REMOVED***

    buffers = [];
    engine.close();
    callback(err, buf);
  ***REMOVED***
***REMOVED***

function zlibBufferSync(engine, buffer) ***REMOVED***
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);

  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');

  var flushFlag = engine._finishFlushFlag;

  return engine._processChunk(buffer, flushFlag);
***REMOVED***

// generic zlib
// minimal 2-byte header
function Deflate(opts) ***REMOVED***
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
***REMOVED***

function Inflate(opts) ***REMOVED***
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
***REMOVED***

// gzip - bigger header, same deflate compression
function Gzip(opts) ***REMOVED***
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
***REMOVED***

function Gunzip(opts) ***REMOVED***
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
***REMOVED***

// raw - no header
function DeflateRaw(opts) ***REMOVED***
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
***REMOVED***

function InflateRaw(opts) ***REMOVED***
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
***REMOVED***

// auto-detect header.
function Unzip(opts) ***REMOVED***
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
***REMOVED***

function isValidFlushFlag(flag) ***REMOVED***
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
***REMOVED***

// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) ***REMOVED***
  var _this = this;

  this._opts = opts = opts || ***REMOVED******REMOVED***;
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush && !isValidFlushFlag(opts.flush)) ***REMOVED***
    throw new Error('Invalid flush flag: ' + opts.flush);
  ***REMOVED***
  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) ***REMOVED***
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  ***REMOVED***

  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

  if (opts.chunkSize) ***REMOVED***
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) ***REMOVED***
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    ***REMOVED***
  ***REMOVED***

  if (opts.windowBits) ***REMOVED***
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) ***REMOVED***
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    ***REMOVED***
  ***REMOVED***

  if (opts.level) ***REMOVED***
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) ***REMOVED***
      throw new Error('Invalid compression level: ' + opts.level);
    ***REMOVED***
  ***REMOVED***

  if (opts.memLevel) ***REMOVED***
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) ***REMOVED***
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    ***REMOVED***
  ***REMOVED***

  if (opts.strategy) ***REMOVED***
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) ***REMOVED***
      throw new Error('Invalid strategy: ' + opts.strategy);
    ***REMOVED***
  ***REMOVED***

  if (opts.dictionary) ***REMOVED***
    if (!Buffer.isBuffer(opts.dictionary)) ***REMOVED***
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    ***REMOVED***
  ***REMOVED***

  this._handle = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._handle.onerror = function (message, errno) ***REMOVED***
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  ***REMOVED***;

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);

  Object.defineProperty(this, '_closed', ***REMOVED***
    get: function () ***REMOVED***
      return !_this._handle;
    ***REMOVED***,
    configurable: true,
    enumerable: true
  ***REMOVED***);
***REMOVED***

util.inherits(Zlib, Transform);

Zlib.prototype.params = function (level, strategy, callback) ***REMOVED***
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) ***REMOVED***
    throw new RangeError('Invalid compression level: ' + level);
  ***REMOVED***
  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) ***REMOVED***
    throw new TypeError('Invalid strategy: ' + strategy);
  ***REMOVED***

  if (this._level !== level || this._strategy !== strategy) ***REMOVED***
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () ***REMOVED***
      assert(self._handle, 'zlib binding closed');
      self._handle.params(level, strategy);
      if (!self._hadError) ***REMOVED***
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    process.nextTick(callback);
  ***REMOVED***
***REMOVED***;

Zlib.prototype.reset = function () ***REMOVED***
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
***REMOVED***;

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function (callback) ***REMOVED***
  this._transform(Buffer.alloc(0), '', callback);
***REMOVED***;

Zlib.prototype.flush = function (kind, callback) ***REMOVED***
  var _this2 = this;

  var ws = this._writableState;

  if (typeof kind === 'function' || kind === undefined && !callback) ***REMOVED***
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  ***REMOVED***

  if (ws.ended) ***REMOVED***
    if (callback) process.nextTick(callback);
  ***REMOVED*** else if (ws.ending) ***REMOVED***
    if (callback) this.once('end', callback);
  ***REMOVED*** else if (ws.needDrain) ***REMOVED***
    if (callback) ***REMOVED***
      this.once('drain', function () ***REMOVED***
        return _this2.flush(kind, callback);
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  ***REMOVED***
***REMOVED***;

Zlib.prototype.close = function (callback) ***REMOVED***
  _close(this, callback);
  process.nextTick(emitCloseNT, this);
***REMOVED***;

function _close(engine, callback) ***REMOVED***
  if (callback) process.nextTick(callback);

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) return;

  engine._handle.close();
  engine._handle = null;
***REMOVED***

function emitCloseNT(self) ***REMOVED***
  self.emit('close');
***REMOVED***

Zlib.prototype._transform = function (chunk, encoding, cb) ***REMOVED***
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));

  if (!this._handle) return cb(new Error('zlib binding closed'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last) flushFlag = this._finishFlushFlag;else ***REMOVED***
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) ***REMOVED***
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    ***REMOVED***
  ***REMOVED***

  this._processChunk(chunk, flushFlag, cb);
***REMOVED***;

Zlib.prototype._processChunk = function (chunk, flushFlag, cb) ***REMOVED***
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) ***REMOVED***
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function (er) ***REMOVED***
      error = er;
    ***REMOVED***);

    assert(this._handle, 'zlib binding closed');
    do ***REMOVED***
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    ***REMOVED*** while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) ***REMOVED***
      throw error;
    ***REMOVED***

    if (nread >= kMaxLength) ***REMOVED***
      _close(this);
      throw new RangeError(kRangeErrorMessage);
    ***REMOVED***

    var buf = Buffer.concat(buffers, nread);
    _close(this);

    return buf;
  ***REMOVED***

  assert(this._handle, 'zlib binding closed');
  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) ***REMOVED***
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) ***REMOVED***
      this.buffer = null;
      this.callback = null;
    ***REMOVED***

    if (self._hadError) return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) ***REMOVED***
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) ***REMOVED***
        self.push(out);
      ***REMOVED*** else ***REMOVED***
        buffers.push(out);
        nread += out.length;
      ***REMOVED***
    ***REMOVED***

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) ***REMOVED***
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    ***REMOVED***

    if (availOutAfter === 0) ***REMOVED***
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;

      if (!async) return true;

      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    ***REMOVED***

    if (!async) return false;

    // finished with the chunk.
    cb();
  ***REMOVED***
***REMOVED***;

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);