var it = require('it-is').style('colour')
  , split = require('..')

exports ['emit mapper exceptions as error events'] = function (test) ***REMOVED***
  var s = split(JSON.parse)
    , caughtError = false
    , rows = []
 
  s.on('error', function (err) ***REMOVED***
    caughtError = true
  ***REMOVED***)
 
  s.on('data', function (row) ***REMOVED*** rows.push(row) ***REMOVED***)

  s.write('***REMOVED***"a":1***REMOVED***\n***REMOVED***"')
  it(caughtError).equal(false)
  it(rows).deepEqual([ ***REMOVED*** a: 1 ***REMOVED*** ])

  s.write('b":2***REMOVED***\n***REMOVED***"c":***REMOVED***\n')
  it(caughtError).equal(true)
  it(rows).deepEqual([ ***REMOVED*** a: 1 ***REMOVED***, ***REMOVED*** b: 2 ***REMOVED*** ])

  s.end()
  test.done()
***REMOVED***

exports ['mapper error events on trailing chunks'] = function (test) ***REMOVED***
  var s = split(JSON.parse)
    , caughtError = false
    , rows = []
 
  s.on('error', function (err) ***REMOVED***
    caughtError = true
  ***REMOVED***)
 
  s.on('data', function (row) ***REMOVED*** rows.push(row) ***REMOVED***)

  s.write('***REMOVED***"a":1***REMOVED***\n***REMOVED***"')
  it(caughtError).equal(false)
  it(rows).deepEqual([ ***REMOVED*** a: 1 ***REMOVED*** ])

  s.write('b":2***REMOVED***\n***REMOVED***"c":***REMOVED***')
  it(caughtError).equal(false)
  it(rows).deepEqual([ ***REMOVED*** a: 1 ***REMOVED***, ***REMOVED*** b: 2 ***REMOVED*** ])

  s.end()
  it(caughtError).equal(true)
  it(rows).deepEqual([ ***REMOVED*** a: 1 ***REMOVED***, ***REMOVED*** b: 2 ***REMOVED*** ])

  test.done()
***REMOVED***
