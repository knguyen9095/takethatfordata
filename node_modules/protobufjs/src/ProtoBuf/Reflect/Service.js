/**
 * Constructs a new Service.
 * @exports ProtoBuf.Reflect.Service
 * @param ***REMOVED***!ProtoBuf.Builder***REMOVED*** builder Builder reference
 * @param ***REMOVED***!ProtoBuf.Reflect.Namespace***REMOVED*** root Root
 * @param ***REMOVED***string***REMOVED*** name Service name
 * @param ***REMOVED***Object.<string,*>=***REMOVED*** options Options
 * @constructor
 * @extends ProtoBuf.Reflect.Namespace
 */
var Service = function(builder, root, name, options) ***REMOVED***
    Namespace.call(this, builder, root, name, options);

    /**
     * @override
     */
    this.className = "Service";

    /**
     * Built runtime service class.
     * @type ***REMOVED***?function(new:ProtoBuf.Builder.Service)***REMOVED***
     */
    this.clazz = null;
***REMOVED***;

/**
 * @alias ProtoBuf.Reflect.Service.prototype
 * @inner
 */
var ServicePrototype = Service.prototype = Object.create(Namespace.prototype);

/**
 * Builds the service and returns the runtime counterpart, which is a fully functional class.
 * @see ProtoBuf.Builder.Service
 * @param ***REMOVED***boolean=***REMOVED*** rebuild Whether to rebuild or not
 * @return ***REMOVED***Function***REMOVED*** Service class
 * @throws ***REMOVED***Error***REMOVED*** If the message cannot be built
 * @expose
 */
ServicePrototype.build = function(rebuild) ***REMOVED***
    if (this.clazz && !rebuild)
        return this.clazz;

    // Create the runtime Service class in its own scope
    return this.clazz = (function(ProtoBuf, T) ***REMOVED***

        //? include("../Builder/Service.js");

        return Service;

    ***REMOVED***)(ProtoBuf, this);
***REMOVED***;
