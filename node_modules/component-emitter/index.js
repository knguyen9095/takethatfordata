
/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') ***REMOVED***
  module.exports = Emitter;
***REMOVED***

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) ***REMOVED***
  if (obj) return mixin(obj);
***REMOVED***;

/**
 * Mixin the emitter properties.
 *
 * @param ***REMOVED***Object***REMOVED*** obj
 * @return ***REMOVED***Object***REMOVED***
 * @api private
 */

function mixin(obj) ***REMOVED***
  for (var key in Emitter.prototype) ***REMOVED***
    obj[key] = Emitter.prototype[key];
  ***REMOVED***
  return obj;
***REMOVED***

/**
 * Listen on the given `event` with `fn`.
 *
 * @param ***REMOVED***String***REMOVED*** event
 * @param ***REMOVED***Function***REMOVED*** fn
 * @return ***REMOVED***Emitter***REMOVED***
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn)***REMOVED***
  this._callbacks = this._callbacks || ***REMOVED******REMOVED***;
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
***REMOVED***;

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param ***REMOVED***String***REMOVED*** event
 * @param ***REMOVED***Function***REMOVED*** fn
 * @return ***REMOVED***Emitter***REMOVED***
 * @api public
 */

Emitter.prototype.once = function(event, fn)***REMOVED***
  function on() ***REMOVED***
    this.off(event, on);
    fn.apply(this, arguments);
  ***REMOVED***

  on.fn = fn;
  this.on(event, on);
  return this;
***REMOVED***;

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param ***REMOVED***String***REMOVED*** event
 * @param ***REMOVED***Function***REMOVED*** fn
 * @return ***REMOVED***Emitter***REMOVED***
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn)***REMOVED***
  this._callbacks = this._callbacks || ***REMOVED******REMOVED***;

  // all
  if (0 == arguments.length) ***REMOVED***
    this._callbacks = ***REMOVED******REMOVED***;
    return this;
  ***REMOVED***

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) ***REMOVED***
    delete this._callbacks['$' + event];
    return this;
  ***REMOVED***

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) ***REMOVED***
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) ***REMOVED***
      callbacks.splice(i, 1);
      break;
    ***REMOVED***
  ***REMOVED***
  return this;
***REMOVED***;

/**
 * Emit `event` with the given args.
 *
 * @param ***REMOVED***String***REMOVED*** event
 * @param ***REMOVED***Mixed***REMOVED*** ...
 * @return ***REMOVED***Emitter***REMOVED***
 */

Emitter.prototype.emit = function(event)***REMOVED***
  this._callbacks = this._callbacks || ***REMOVED******REMOVED***;
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) ***REMOVED***
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) ***REMOVED***
      callbacks[i].apply(this, args);
    ***REMOVED***
  ***REMOVED***

  return this;
***REMOVED***;

/**
 * Return array of callbacks for `event`.
 *
 * @param ***REMOVED***String***REMOVED*** event
 * @return ***REMOVED***Array***REMOVED***
 * @api public
 */

Emitter.prototype.listeners = function(event)***REMOVED***
  this._callbacks = this._callbacks || ***REMOVED******REMOVED***;
  return this._callbacks['$' + event] || [];
***REMOVED***;

/**
 * Check if this emitter has `event` handlers.
 *
 * @param ***REMOVED***String***REMOVED*** event
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

Emitter.prototype.hasListeners = function(event)***REMOVED***
  return !! this.listeners(event).length;
***REMOVED***;
