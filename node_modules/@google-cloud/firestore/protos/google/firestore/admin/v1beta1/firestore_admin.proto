// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.firestore.admin.v1beta1;

import "google/api/annotations.proto";
import "google/firestore/admin/v1beta1/index.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Google.Cloud.Firestore.Admin.V1Beta1";
option go_package = "google.golang.org/genproto/googleapis/firestore/admin/v1beta1;admin";
option java_multiple_files = true;
option java_outer_classname = "FirestoreAdminProto";
option java_package = "com.google.firestore.admin.v1beta1";
option objc_class_prefix = "GCFS";


// The Cloud Firestore Admin API.
//
// This API provides several administrative services for Cloud Firestore.
//
// # Concepts
//
// Project, Database, Namespace, Collection, and Document are used as defined in
// the Google Cloud Firestore API.
//
// Operation: An Operation represents work being performed in the background.
//
//
// # Services
//
// ## Index
//
// The index service manages Cloud Firestore indexes.
//
// Index creation is performed asynchronously.
// An Operation resource is created for each such asynchronous operation.
// The state of the operation (including any errors encountered)
// may be queried via the Operation resource.
//
// ## Metadata
//
// Provides metadata and statistical information about data in Cloud Firestore.
// The data provided as part of this API may be stale.
//
// ## Operation
//
// The Operations collection provides a record of actions performed for the
// specified Project (including any Operations in progress). Operations are not
// created directly but through calls on other collections or resources.
//
// An Operation that is not yet done may be cancelled. The request to cancel is
// asynchronous and the Operation may continue to run for some time after the
// request to cancel is made.
//
// An Operation that is done may be deleted so that it is no longer listed as
// part of the Operation collection.
//
// Operations are created by service `FirestoreAdmin`, but are accessed via
// service `google.longrunning.Operations`.
service FirestoreAdmin ***REMOVED***
  // Creates the specified index.
  // A newly created index's initial state is `CREATING`. On completion of the
  // returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
  // If the index already exists, the call will return an `ALREADY_EXISTS`
  // status.
  //
  // During creation, the process could result in an error, in which case the
  // index will move to the `ERROR` state. The process can be recovered by
  // fixing the data that caused the error, removing the index with
  // [delete][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex], then re-creating the index with
  // [create][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
  //
  // Indexes with a single field cannot be created.
  rpc CreateIndex(CreateIndexRequest) returns (google.longrunning.Operation) ***REMOVED***
    option (google.api.http) = ***REMOVED*** post: "/v1beta1/***REMOVED***parent=projects/*/databases/****REMOVED***/indexes" body: "index" ***REMOVED***;
  ***REMOVED***

  // Lists the indexes that match the specified filters.
  rpc ListIndexes(ListIndexesRequest) returns (ListIndexesResponse) ***REMOVED***
    option (google.api.http) = ***REMOVED*** get: "/v1beta1/***REMOVED***parent=projects/*/databases/****REMOVED***/indexes" ***REMOVED***;
  ***REMOVED***

  // Gets an index.
  rpc GetIndex(GetIndexRequest) returns (Index) ***REMOVED***
    option (google.api.http) = ***REMOVED*** get: "/v1beta1/***REMOVED***name=projects/*/databases/*/indexes/****REMOVED***" ***REMOVED***;
  ***REMOVED***

  // Deletes an index.
  rpc DeleteIndex(DeleteIndexRequest) returns (google.protobuf.Empty) ***REMOVED***
    option (google.api.http) = ***REMOVED*** delete: "/v1beta1/***REMOVED***name=projects/*/databases/*/indexes/****REMOVED***" ***REMOVED***;
  ***REMOVED***
***REMOVED***

// Metadata for index operations. This metadata populates
// the metadata field of [google.longrunning.Operation][google.longrunning.Operation].
message IndexOperationMetadata ***REMOVED***
  // The type of index operation.
  enum OperationType ***REMOVED***
    // Unspecified. Never set by server.
    OPERATION_TYPE_UNSPECIFIED = 0;

    // The operation is creating the index. Initiated by a `CreateIndex` call.
    CREATING_INDEX = 1;
  ***REMOVED***

  // The time that work began on the operation.
  google.protobuf.Timestamp start_time = 1;

  // The time the operation ended, either successfully or otherwise. Unset if
  // the operation is still active.
  google.protobuf.Timestamp end_time = 2;

  // The index resource that this operation is acting on. For example:
  // `projects/***REMOVED***project_id***REMOVED***/databases/***REMOVED***database_id***REMOVED***/indexes/***REMOVED***index_id***REMOVED***`
  string index = 3;

  // The type of index operation.
  OperationType operation_type = 4;

  // True if the [google.longrunning.Operation] was cancelled. If the
  // cancellation is in progress, cancelled will be true but
  // [google.longrunning.Operation.done][google.longrunning.Operation.done] will be false.
  bool cancelled = 5;

  // Progress of the existing operation, measured in number of documents.
  Progress document_progress = 6;
***REMOVED***

// Measures the progress of a particular metric.
message Progress ***REMOVED***
  // An estimate of how much work has been completed. Note that this may be
  // greater than `work_estimated`.
  int64 work_completed = 1;

  // An estimate of how much work needs to be performed. Zero if the
  // work estimate is unavailable. May change as work progresses.
  int64 work_estimated = 2;
***REMOVED***

// The request for [FirestoreAdmin.CreateIndex][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
message CreateIndexRequest ***REMOVED***
  // The name of the database this index will apply to. For example:
  // `projects/***REMOVED***project_id***REMOVED***/databases/***REMOVED***database_id***REMOVED***`
  string parent = 1;

  // The index to create. The name and state should not be specified.
  // Certain single field indexes cannot be created or deleted.
  Index index = 2;
***REMOVED***

// The request for [FirestoreAdmin.GetIndex][google.firestore.admin.v1beta1.FirestoreAdmin.GetIndex].
message GetIndexRequest ***REMOVED***
  // The name of the index. For example:
  // `projects/***REMOVED***project_id***REMOVED***/databases/***REMOVED***database_id***REMOVED***/indexes/***REMOVED***index_id***REMOVED***`
  string name = 1;
***REMOVED***

// The request for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
message ListIndexesRequest ***REMOVED***
  // The database name. For example:
  // `projects/***REMOVED***project_id***REMOVED***/databases/***REMOVED***database_id***REMOVED***`
  string parent = 1;

  string filter = 2;

  // The standard List page size.
  int32 page_size = 3;

  // The standard List page token.
  string page_token = 4;
***REMOVED***

// The request for [FirestoreAdmin.DeleteIndex][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex].
message DeleteIndexRequest ***REMOVED***
  // The index name. For example:
  // `projects/***REMOVED***project_id***REMOVED***/databases/***REMOVED***database_id***REMOVED***/indexes/***REMOVED***index_id***REMOVED***`
  string name = 1;
***REMOVED***

// The response for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
message ListIndexesResponse ***REMOVED***
  // The indexes.
  repeated Index indexes = 1;

  // The standard List next-page token.
  string next_page_token = 2;
***REMOVED***
