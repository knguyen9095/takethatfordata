/**
 * Copyright 2016, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
'use strict';

/* This file describes the gRPC-streaming. */

var util = require('util');
var DuplexStream = require('readable-stream').Duplex;

/**
 * The type of gRPC streaming.
 * @enum ***REMOVED***number***REMOVED***
 */
var StreamType = ***REMOVED***
  /** Client sends a single request, server streams responses. */
  SERVER_STREAMING: 1,

  /** Client streams requests, server returns a single response. */
  CLIENT_STREAMING: 2,

  /** Both client and server stream objects. */
  BIDI_STREAMING: 3,
***REMOVED***;

exports.StreamType = StreamType;

/**
 * StreamProxy is a proxy to gRPC-streaming method.
 *
 * @private
 * @constructor
 * @param ***REMOVED***StreamType***REMOVED*** type - the type of gRPC stream.
 * @param ***REMOVED***ApiCallback***REMOVED*** callback - the callback for further API call.
 */
function StreamProxy(type, callback) ***REMOVED***
  DuplexStream.call(this, ***REMOVED***
    objectMode: true,
    readable: type !== StreamType.CLIENT_STREAMING,
    writable: type !== StreamType.SERVER_STREAMING,
  ***REMOVED***);
  this.type = type;
  this._callback = callback;
  this._writeQueue = [];
  this._isEndCalled = false;
  this._isCancelCalled = false;
  var self = this;
  this.on('finish', function() ***REMOVED***
    self._onFinish();
  ***REMOVED***);
***REMOVED***

util.inherits(StreamProxy, DuplexStream);

StreamProxy.prototype._read = function() ***REMOVED***
  if (this.type === StreamType.CLIENT_STREAMING) ***REMOVED***
    this.emit('error', new Error('stream is not readable'));
  ***REMOVED***
***REMOVED***;

StreamProxy.prototype._write = function(chunk, encoding, callback) ***REMOVED***
  if (this.type === StreamType.SERVER_STREAMING) ***REMOVED***
    this.emit('error', new Error('stream is not writable'));
    return;
  ***REMOVED***
  if (this.stream) ***REMOVED***
    this.stream.write(chunk);
  ***REMOVED*** else ***REMOVED***
    this._writeQueue.push(chunk);
  ***REMOVED***
  callback();
***REMOVED***;

StreamProxy.prototype._onFinish = function() ***REMOVED***
  if (this.stream) ***REMOVED***
    this.stream.end();
  ***REMOVED*** else ***REMOVED***
    this._isEndCalled = true;
  ***REMOVED***
***REMOVED***;

StreamProxy.prototype.cancel = function() ***REMOVED***
  if (this.stream) ***REMOVED***
    this.stream.cancel();
  ***REMOVED*** else ***REMOVED***
    this._isCancelCalled = true;
  ***REMOVED***
***REMOVED***;

/**
 * Specifies the target stream.
 * @param ***REMOVED***ApiCall***REMOVED*** apiCall - the API function to be called.
 * @param ***REMOVED***Object***REMOVED*** argument - the argument to be passed to the apiCall.
 */
StreamProxy.prototype.setStream = function(apiCall, argument) ***REMOVED***
  var stream = apiCall(argument, this._callback);
  this.stream = stream;
  var self = this;
  ['error', 'metadata', 'status'].forEach(function(event) ***REMOVED***
    stream.on(event, function() ***REMOVED***
      var args = Array.prototype.slice.call(arguments, 0);
      args.unshift(event);
      self.emit.apply(self, args);
    ***REMOVED***);
  ***REMOVED***);
  // We also want to supply the status data as 'response' event to support
  // the behavior of google-cloud-node expects.
  // see: https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029
  // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355
  stream.on('metadata', function(metadata) ***REMOVED***
    // Create a response object with succeeds.
    // TODO: unify this logic with the decoration of gRPC response when it's added.
    // see: https://github.com/googleapis/gax-nodejs/issues/65
    self.emit('response', ***REMOVED***
      code: 200,
      details: '',
      message: 'OK',
      metadata: metadata,
    ***REMOVED***);
  ***REMOVED***);
  if (this.type !== StreamType.CLIENT_STREAMING) ***REMOVED***
    stream.on('data', function() ***REMOVED***
      var args = Array.prototype.slice.call(arguments, 0);
      args.unshift('data');
      self.emit.apply(self, args);
    ***REMOVED***);
    // Pushing null causes an ending process of the readable stream.
    stream.on('end', function() ***REMOVED***
      self.push(null);
    ***REMOVED***);
    // This is required in case no 'data' handler exists.
    this.resume();
  ***REMOVED***
  if (this.type !== StreamType.SERVER_STREAMING) ***REMOVED***
    this._writeQueue.forEach(function(data) ***REMOVED***
      stream.write(data);
    ***REMOVED***);
    this._writeQueue = [];
    if (this._isEndCalled) ***REMOVED***
      stream.end();
    ***REMOVED***
    if (this._isCancelCalled) ***REMOVED***
      stream.cancel();
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/**
 * An API caller for methods of gRPC streaming.
 * @private
 * @constructor
 * @param ***REMOVED***StreamDescriptor***REMOVED*** descriptor - the descriptor of the method structure.
 */
function GrpcStreamable(descriptor) ***REMOVED***
  this.descriptor = descriptor;
***REMOVED***

GrpcStreamable.prototype.init = function(settings, callback) ***REMOVED***
  return new StreamProxy(this.descriptor.type, callback);
***REMOVED***;

GrpcStreamable.prototype.wrap = function(func) ***REMOVED***
  switch (this.descriptor.type) ***REMOVED***
    case StreamType.SERVER_STREAMING:
      return function(argument, metadata, options) ***REMOVED***
        return func(argument, metadata, options);
      ***REMOVED***;
    case StreamType.CLIENT_STREAMING:
      return function(argument, metadata, options, callback) ***REMOVED***
        return func(metadata, options, callback);
      ***REMOVED***;
    case StreamType.BIDI_STREAMING:
      return function(argument, metadata, options) ***REMOVED***
        return func(metadata, options);
      ***REMOVED***;
    default:
      console.error('Unknown stream type', this.descriptor.type);
  ***REMOVED***
  return func;
***REMOVED***;

GrpcStreamable.prototype.call = function(apiCall, argument, settings, stream) ***REMOVED***
  stream.setStream(apiCall, argument);
***REMOVED***;

GrpcStreamable.prototype.fail = function(stream, err) ***REMOVED***
  stream.emit('error', err);
***REMOVED***;

GrpcStreamable.prototype.result = function(stream) ***REMOVED***
  return stream;
***REMOVED***;

/**
 * Describes the structure of gRPC streaming call.
 * @constructor
 * @param ***REMOVED***StreamType***REMOVED*** streamType - the type of streaming.
 */
function StreamDescriptor(streamType) ***REMOVED***
  this.type = streamType;
***REMOVED***

StreamDescriptor.prototype.apiCaller = function(settings) ***REMOVED***
  // Right now retrying does not work with gRPC-streaming, because retryable
  // assumes an API call returns an event emitter while gRPC-streaming methods
  // return Stream.
  // TODO: support retrying.
  settings.retry = null;
  return new GrpcStreamable(this);
***REMOVED***;

exports.StreamDescriptor = StreamDescriptor;
