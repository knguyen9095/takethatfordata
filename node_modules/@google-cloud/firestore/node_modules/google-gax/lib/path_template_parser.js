/* eslint-disable */
module.exports = (function() ***REMOVED***
  'use strict';

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) ***REMOVED***
    function ctor() ***REMOVED***
      this.constructor = child;
    ***REMOVED***
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  ***REMOVED***

  function peg$SyntaxError(message, expected, found, location) ***REMOVED***
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';

    if (typeof Error.captureStackTrace === 'function') ***REMOVED***
      Error.captureStackTrace(this, peg$SyntaxError);
    ***REMOVED***
  ***REMOVED***

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) ***REMOVED***
    var options = arguments.length > 1 ? arguments[1] : ***REMOVED******REMOVED***,
      parser = this,
      peg$FAILED = ***REMOVED******REMOVED***,
      peg$startRuleFunctions = ***REMOVED***template: peg$parsetemplate***REMOVED***,
      peg$startRuleFunction = peg$parsetemplate,
      peg$c0 = '/',
      peg$c1 = ***REMOVED***type: 'literal', value: '/', description: '"/"'***REMOVED***,
      peg$c2 = function(segments) ***REMOVED***
        return segments;
      ***REMOVED***,
      peg$c3 = function(s, segments) ***REMOVED***
        return s.concat(segments);
      ***REMOVED***,
      peg$c4 = function(s) ***REMOVED***
        return s;
      ***REMOVED***,
      peg$c5 = '***REMOVED***',
      peg$c6 = ***REMOVED***type: 'literal', value: '***REMOVED***', description: '"***REMOVED***"'***REMOVED***,
      peg$c7 = '=',
      peg$c8 = ***REMOVED***type: 'literal', value: '=', description: '"="'***REMOVED***,
      peg$c9 = '***REMOVED***',
      peg$c10 = ***REMOVED***type: 'literal', value: '***REMOVED***', description: '"***REMOVED***"'***REMOVED***,
      peg$c11 = function(l, segments) ***REMOVED***
        return _.flatten([
          ***REMOVED***kind: extras.BINDING, literal: l***REMOVED***,
          segments,
          ***REMOVED***kind: extras.END_BINDING, literal: ''***REMOVED***,
        ]);
      ***REMOVED***,
      peg$c12 = function(l) ***REMOVED***
        return [
          ***REMOVED***kind: extras.BINDING, literal: l***REMOVED***,
          ***REMOVED***kind: extras.TERMINAL, literal: '*'***REMOVED***,
          ***REMOVED***kind: extras.END_BINDING, literal: ''***REMOVED***,
        ];
      ***REMOVED***,
      peg$c13 = function(t, segments) ***REMOVED***
        return t.concat(segments);
      ***REMOVED***,
      peg$c14 = function(t) ***REMOVED***
        if (t[0].literal === '*' || t[0].literal === '**') ***REMOVED***
          return [
            ***REMOVED***
              kind: extras.BINDING,
            ***REMOVED***,
            t[0],
            ***REMOVED***kind: extras.END_BINDING, literal: ''***REMOVED***,
          ];
        ***REMOVED*** else ***REMOVED***
          return t;
        ***REMOVED***
      ***REMOVED***,
      peg$c15 = '**',
      peg$c16 = ***REMOVED***type: 'literal', value: '**', description: '"**"'***REMOVED***,
      peg$c17 = '*',
      peg$c18 = ***REMOVED***type: 'literal', value: '*', description: '"*"'***REMOVED***,
      peg$c19 = function(l) ***REMOVED***
        return [***REMOVED***kind: extras.TERMINAL, literal: l***REMOVED***];
      ***REMOVED***,
      peg$c20 = /^[^*=***REMOVED******REMOVED***\/]/,
      peg$c21 = ***REMOVED***type: 'class', value: '[^*=***REMOVED******REMOVED***/]', description: '[^*=***REMOVED******REMOVED***/]'***REMOVED***,
      peg$c22 = function(cs) ***REMOVED***
        return cs.join('');
      ***REMOVED***,
      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [***REMOVED***line: 1, column: 1, seenCR: false***REMOVED***],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,
      peg$result;

    if ('startRule' in options) ***REMOVED***
      if (!(options.startRule in peg$startRuleFunctions)) ***REMOVED***
        throw new Error(
          'Can\'t start parsing from rule "' + options.startRule + '".'
        );
      ***REMOVED***

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    ***REMOVED***

    function text() ***REMOVED***
      return input.substring(peg$savedPos, peg$currPos);
    ***REMOVED***

    function location() ***REMOVED***
      return peg$computeLocation(peg$savedPos, peg$currPos);
    ***REMOVED***

    function expected(description) ***REMOVED***
      throw peg$buildException(
        null,
        [***REMOVED***type: 'other', description: description***REMOVED***],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    ***REMOVED***

    function error(message) ***REMOVED***
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    ***REMOVED***

    function peg$computePosDetails(pos) ***REMOVED***
      var details = peg$posDetailsCache[pos],
        p,
        ch;

      if (details) ***REMOVED***
        return details;
      ***REMOVED*** else ***REMOVED***
        p = pos - 1;
        while (!peg$posDetailsCache[p]) ***REMOVED***
          p--;
        ***REMOVED***

        details = peg$posDetailsCache[p];
        details = ***REMOVED***
          line: details.line,
          column: details.column,
          seenCR: details.seenCR,
        ***REMOVED***;

        while (p < pos) ***REMOVED***
          ch = input.charAt(p);
          if (ch === '\n') ***REMOVED***
            if (!details.seenCR) ***REMOVED***
              details.line++;
            ***REMOVED***
            details.column = 1;
            details.seenCR = false;
          ***REMOVED*** else if (ch === '\r' || ch === '\u2028' || ch === '\u2029') ***REMOVED***
            details.line++;
            details.column = 1;
            details.seenCR = true;
          ***REMOVED*** else ***REMOVED***
            details.column++;
            details.seenCR = false;
          ***REMOVED***

          p++;
        ***REMOVED***

        peg$posDetailsCache[pos] = details;
        return details;
      ***REMOVED***
    ***REMOVED***

    function peg$computeLocation(startPos, endPos) ***REMOVED***
      var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos);

      return ***REMOVED***
        start: ***REMOVED***
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column,
        ***REMOVED***,
        end: ***REMOVED***
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column,
        ***REMOVED***,
      ***REMOVED***;
    ***REMOVED***

    function peg$fail(expected) ***REMOVED***
      if (peg$currPos < peg$maxFailPos) ***REMOVED***
        return;
      ***REMOVED***

      if (peg$currPos > peg$maxFailPos) ***REMOVED***
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      ***REMOVED***

      peg$maxFailExpected.push(expected);
    ***REMOVED***

    function peg$buildException(message, expected, found, location) ***REMOVED***
      function cleanupExpected(expected) ***REMOVED***
        var i = 1;

        expected.sort(function(a, b) ***REMOVED***
          if (a.description < b.description) ***REMOVED***
            return -1;
          ***REMOVED*** else if (a.description > b.description) ***REMOVED***
            return 1;
          ***REMOVED*** else ***REMOVED***
            return 0;
          ***REMOVED***
        ***REMOVED***);

        while (i < expected.length) ***REMOVED***
          if (expected[i - 1] === expected[i]) ***REMOVED***
            expected.splice(i, 1);
          ***REMOVED*** else ***REMOVED***
            i++;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

      function buildMessage(expected, found) ***REMOVED***
        function stringEscape(s) ***REMOVED***
          function hex(ch) ***REMOVED***
            return ch
              .charCodeAt(0)
              .toString(16)
              .toUpperCase();
          ***REMOVED***

          return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\f/g, '\\f')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) ***REMOVED***
              return '\\x0' + hex(ch);
            ***REMOVED***)
            .replace(/[\x10-\x1F\x80-\xFF]/g, function(ch) ***REMOVED***
              return '\\x' + hex(ch);
            ***REMOVED***)
            .replace(/[\u0100-\u0FFF]/g, function(ch) ***REMOVED***
              return '\\u0' + hex(ch);
            ***REMOVED***)
            .replace(/[\u1000-\uFFFF]/g, function(ch) ***REMOVED***
              return '\\u' + hex(ch);
            ***REMOVED***);
        ***REMOVED***

        var expectedDescs = new Array(expected.length),
          expectedDesc,
          foundDesc,
          i;

        for (i = 0; i < expected.length; i++) ***REMOVED***
          expectedDescs[i] = expected[i].description;
        ***REMOVED***

        expectedDesc =
          expected.length > 1
            ? expectedDescs.slice(0, -1).join(', ') +
              ' or ' +
              expectedDescs[expected.length - 1]
            : expectedDescs[0];

        foundDesc = found ? '"' + stringEscape(found) + '"' : 'end of input';

        return 'Expected ' + expectedDesc + ' but ' + foundDesc + ' found.';
      ***REMOVED***

      if (expected !== null) ***REMOVED***
        cleanupExpected(expected);
      ***REMOVED***

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    ***REMOVED***

    function peg$parsetemplate() ***REMOVED***
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) ***REMOVED***
        s1 = peg$c0;
        peg$currPos++;
      ***REMOVED*** else ***REMOVED***
        s1 = peg$FAILED;
        if (peg$silentFails === 0) ***REMOVED***
          peg$fail(peg$c1);
        ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) ***REMOVED***
        s2 = peg$parsebound_segments();
        if (s2 !== peg$FAILED) ***REMOVED***
          peg$savedPos = s0;
          s1 = peg$c2(s2);
          s0 = s1;
        ***REMOVED*** else ***REMOVED***
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) ***REMOVED***
        s0 = peg$currPos;
        s1 = peg$parsebound_segments();
        if (s1 !== peg$FAILED) ***REMOVED***
          peg$savedPos = s0;
          s1 = peg$c2(s1);
        ***REMOVED***
        s0 = s1;
      ***REMOVED***

      return s0;
    ***REMOVED***

    function peg$parsebound_segments() ***REMOVED***
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsebound_segment();
      if (s1 !== peg$FAILED) ***REMOVED***
        if (input.charCodeAt(peg$currPos) === 47) ***REMOVED***
          s2 = peg$c0;
          peg$currPos++;
        ***REMOVED*** else ***REMOVED***
          s2 = peg$FAILED;
          if (peg$silentFails === 0) ***REMOVED***
            peg$fail(peg$c1);
          ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) ***REMOVED***
          s3 = peg$parsebound_segments();
          if (s3 !== peg$FAILED) ***REMOVED***
            peg$savedPos = s0;
            s1 = peg$c3(s1, s3);
            s0 = s1;
          ***REMOVED*** else ***REMOVED***
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) ***REMOVED***
        s0 = peg$parsebound_segment();
      ***REMOVED***

      return s0;
    ***REMOVED***

    function peg$parsebound_segment() ***REMOVED***
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsebound_terminal();
      if (s1 === peg$FAILED) ***REMOVED***
        s1 = peg$parsevariable();
      ***REMOVED***
      if (s1 !== peg$FAILED) ***REMOVED***
        peg$savedPos = s0;
        s1 = peg$c4(s1);
      ***REMOVED***
      s0 = s1;

      return s0;
    ***REMOVED***

    function peg$parsevariable() ***REMOVED***
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) ***REMOVED***
        s1 = peg$c5;
        peg$currPos++;
      ***REMOVED*** else ***REMOVED***
        s1 = peg$FAILED;
        if (peg$silentFails === 0) ***REMOVED***
          peg$fail(peg$c6);
        ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) ***REMOVED***
        s2 = peg$parseliteral();
        if (s2 !== peg$FAILED) ***REMOVED***
          if (input.charCodeAt(peg$currPos) === 61) ***REMOVED***
            s3 = peg$c7;
            peg$currPos++;
          ***REMOVED*** else ***REMOVED***
            s3 = peg$FAILED;
            if (peg$silentFails === 0) ***REMOVED***
              peg$fail(peg$c8);
            ***REMOVED***
          ***REMOVED***
          if (s3 !== peg$FAILED) ***REMOVED***
            s4 = peg$parseunbound_segments();
            if (s4 !== peg$FAILED) ***REMOVED***
              if (input.charCodeAt(peg$currPos) === 125) ***REMOVED***
                s5 = peg$c9;
                peg$currPos++;
              ***REMOVED*** else ***REMOVED***
                s5 = peg$FAILED;
                if (peg$silentFails === 0) ***REMOVED***
                  peg$fail(peg$c10);
                ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) ***REMOVED***
                peg$savedPos = s0;
                s1 = peg$c11(s2, s4);
                s0 = s1;
              ***REMOVED*** else ***REMOVED***
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) ***REMOVED***
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) ***REMOVED***
          s1 = peg$c5;
          peg$currPos++;
        ***REMOVED*** else ***REMOVED***
          s1 = peg$FAILED;
          if (peg$silentFails === 0) ***REMOVED***
            peg$fail(peg$c6);
          ***REMOVED***
        ***REMOVED***
        if (s1 !== peg$FAILED) ***REMOVED***
          s2 = peg$parseliteral();
          if (s2 !== peg$FAILED) ***REMOVED***
            if (input.charCodeAt(peg$currPos) === 125) ***REMOVED***
              s3 = peg$c9;
              peg$currPos++;
            ***REMOVED*** else ***REMOVED***
              s3 = peg$FAILED;
              if (peg$silentFails === 0) ***REMOVED***
                peg$fail(peg$c10);
              ***REMOVED***
            ***REMOVED***
            if (s3 !== peg$FAILED) ***REMOVED***
              peg$savedPos = s0;
              s1 = peg$c12(s2);
              s0 = s1;
            ***REMOVED*** else ***REMOVED***
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED***

      return s0;
    ***REMOVED***

    function peg$parseunbound_segments() ***REMOVED***
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseunbound_terminal();
      if (s1 !== peg$FAILED) ***REMOVED***
        if (input.charCodeAt(peg$currPos) === 47) ***REMOVED***
          s2 = peg$c0;
          peg$currPos++;
        ***REMOVED*** else ***REMOVED***
          s2 = peg$FAILED;
          if (peg$silentFails === 0) ***REMOVED***
            peg$fail(peg$c1);
          ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) ***REMOVED***
          s3 = peg$parseunbound_segments();
          if (s3 !== peg$FAILED) ***REMOVED***
            peg$savedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
          ***REMOVED*** else ***REMOVED***
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) ***REMOVED***
        s0 = peg$parseunbound_terminal();
      ***REMOVED***

      return s0;
    ***REMOVED***

    function peg$parsebound_terminal() ***REMOVED***
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseunbound_terminal();
      if (s1 !== peg$FAILED) ***REMOVED***
        peg$savedPos = s0;
        s1 = peg$c14(s1);
      ***REMOVED***
      s0 = s1;

      return s0;
    ***REMOVED***

    function peg$parseunbound_terminal() ***REMOVED***
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c15) ***REMOVED***
        s1 = peg$c15;
        peg$currPos += 2;
      ***REMOVED*** else ***REMOVED***
        s1 = peg$FAILED;
        if (peg$silentFails === 0) ***REMOVED***
          peg$fail(peg$c16);
        ***REMOVED***
      ***REMOVED***
      if (s1 === peg$FAILED) ***REMOVED***
        if (input.charCodeAt(peg$currPos) === 42) ***REMOVED***
          s1 = peg$c17;
          peg$currPos++;
        ***REMOVED*** else ***REMOVED***
          s1 = peg$FAILED;
          if (peg$silentFails === 0) ***REMOVED***
            peg$fail(peg$c18);
          ***REMOVED***
        ***REMOVED***
        if (s1 === peg$FAILED) ***REMOVED***
          s1 = peg$parseliteral();
        ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) ***REMOVED***
        peg$savedPos = s0;
        s1 = peg$c19(s1);
      ***REMOVED***
      s0 = s1;

      return s0;
    ***REMOVED***

    function peg$parseliteral() ***REMOVED***
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c20.test(input.charAt(peg$currPos))) ***REMOVED***
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      ***REMOVED*** else ***REMOVED***
        s2 = peg$FAILED;
        if (peg$silentFails === 0) ***REMOVED***
          peg$fail(peg$c21);
        ***REMOVED***
      ***REMOVED***
      if (s2 !== peg$FAILED) ***REMOVED***
        while (s2 !== peg$FAILED) ***REMOVED***
          s1.push(s2);
          if (peg$c20.test(input.charAt(peg$currPos))) ***REMOVED***
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else ***REMOVED***
            s2 = peg$FAILED;
            if (peg$silentFails === 0) ***REMOVED***
              peg$fail(peg$c21);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        s1 = peg$FAILED;
      ***REMOVED***
      if (s1 !== peg$FAILED) ***REMOVED***
        peg$savedPos = s0;
        s1 = peg$c22(s1);
      ***REMOVED***
      s0 = s1;

      return s0;
    ***REMOVED***

    var _ = require('lodash');
    var util = require('util');
    var extras = require('./parser_extras');

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) ***REMOVED***
      return peg$result;
    ***REMOVED*** else ***REMOVED***
      if (peg$result !== peg$FAILED && peg$currPos < input.length) ***REMOVED***
        peg$fail(***REMOVED***type: 'end', description: 'end of input'***REMOVED***);
      ***REMOVED***

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    ***REMOVED***
  ***REMOVED***

  return ***REMOVED***
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
  ***REMOVED***;
***REMOVED***)();
