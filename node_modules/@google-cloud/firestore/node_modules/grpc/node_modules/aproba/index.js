'use strict'

function isArguments (thingy) ***REMOVED***
  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee')
***REMOVED***

var types = ***REMOVED***
  '*': ***REMOVED***label: 'any', check: function () ***REMOVED*** return true ***REMOVED******REMOVED***,
  A: ***REMOVED***label: 'array', check: function (thingy) ***REMOVED*** return Array.isArray(thingy) || isArguments(thingy) ***REMOVED******REMOVED***,
  S: ***REMOVED***label: 'string', check: function (thingy) ***REMOVED*** return typeof thingy === 'string' ***REMOVED******REMOVED***,
  N: ***REMOVED***label: 'number', check: function (thingy) ***REMOVED*** return typeof thingy === 'number' ***REMOVED******REMOVED***,
  F: ***REMOVED***label: 'function', check: function (thingy) ***REMOVED*** return typeof thingy === 'function' ***REMOVED******REMOVED***,
  O: ***REMOVED***label: 'object', check: function (thingy) ***REMOVED*** return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy) ***REMOVED******REMOVED***,
  B: ***REMOVED***label: 'boolean', check: function (thingy) ***REMOVED*** return typeof thingy === 'boolean' ***REMOVED******REMOVED***,
  E: ***REMOVED***label: 'error', check: function (thingy) ***REMOVED*** return thingy instanceof Error ***REMOVED******REMOVED***,
  Z: ***REMOVED***label: 'null', check: function (thingy) ***REMOVED*** return thingy == null ***REMOVED******REMOVED***
***REMOVED***

function addSchema (schema, arity) ***REMOVED***
  var group = arity[schema.length] = arity[schema.length] || []
  if (group.indexOf(schema) === -1) group.push(schema)
***REMOVED***

var validate = module.exports = function (rawSchemas, args) ***REMOVED***
  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length)
  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas')
  if (!args) throw missingRequiredArg(1, 'args')
  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas)
  if (!types.A.check(args)) throw invalidType(1, ['array'], args)
  var schemas = rawSchemas.split('|')
  var arity = ***REMOVED******REMOVED***

  schemas.forEach(function (schema) ***REMOVED***
    for (var ii = 0; ii < schema.length; ++ii) ***REMOVED***
      var type = schema[ii]
      if (!types[type]) throw unknownType(ii, type)
    ***REMOVED***
    if (/E.*E/.test(schema)) throw moreThanOneError(schema)
    addSchema(schema, arity)
    if (/E/.test(schema)) ***REMOVED***
      addSchema(schema.replace(/E.*$/, 'E'), arity)
      addSchema(schema.replace(/E/, 'Z'), arity)
      if (schema.length === 1) addSchema('', arity)
    ***REMOVED***
  ***REMOVED***)
  var matching = arity[args.length]
  if (!matching) ***REMOVED***
    throw wrongNumberOfArgs(Object.keys(arity), args.length)
  ***REMOVED***
  for (var ii = 0; ii < args.length; ++ii) ***REMOVED***
    var newMatching = matching.filter(function (schema) ***REMOVED***
      var type = schema[ii]
      var typeCheck = types[type].check
      return typeCheck(args[ii])
    ***REMOVED***)
    if (!newMatching.length) ***REMOVED***
      var labels = matching.map(function (schema) ***REMOVED***
        return types[schema[ii]].label
      ***REMOVED***).filter(function (schema) ***REMOVED*** return schema != null ***REMOVED***)
      throw invalidType(ii, labels, args[ii])
    ***REMOVED***
    matching = newMatching
  ***REMOVED***
***REMOVED***

function missingRequiredArg (num) ***REMOVED***
  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1))
***REMOVED***

function unknownType (num, type) ***REMOVED***
  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1))
***REMOVED***

function invalidType (num, expectedTypes, value) ***REMOVED***
  var valueType
  Object.keys(types).forEach(function (typeCode) ***REMOVED***
    if (types[typeCode].check(value)) valueType = types[typeCode].label
  ***REMOVED***)
  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' +
    englishList(expectedTypes) + ' but got ' + valueType)
***REMOVED***

function englishList (list) ***REMOVED***
  return list.join(', ').replace(/, ([^,]+)$/, ' or $1')
***REMOVED***

function wrongNumberOfArgs (expected, got) ***REMOVED***
  var english = englishList(expected)
  var args = expected.every(function (ex) ***REMOVED*** return ex.length === 1 ***REMOVED***)
    ? 'argument'
    : 'arguments'
  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got)
***REMOVED***

function moreThanOneError (schema) ***REMOVED***
  return newException('ETOOMANYERRORTYPES',
    'Only one error type per argument signature is allowed, more than one found in "' + schema + '"')
***REMOVED***

function newException (code, msg) ***REMOVED***
  var e = new Error(msg)
  e.code = code
  if (Error.captureStackTrace) Error.captureStackTrace(e, validate)
  return e
***REMOVED***
