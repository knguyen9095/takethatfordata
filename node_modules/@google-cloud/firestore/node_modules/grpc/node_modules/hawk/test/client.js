// Load modules

var Url = require('url');
var Code = require('code');
var Hawk = require('../lib');
var Lab = require('lab');


// Declare internals

var internals = ***REMOVED******REMOVED***;


// Test shortcuts

var lab = exports.lab = Lab.script();
var describe = lab.experiment;
var it = lab.test;
var expect = Code.expect;


describe('Client', function () ***REMOVED***

    describe('header()', function () ***REMOVED***

        it('returns a valid authorization header (sha1)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var header = Hawk.client.header('http://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, ext: 'Bazinga!', timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about' ***REMOVED***).field;
            expect(header).to.equal('Hawk id="123456", ts="1353809207", nonce="Ygvqdz", hash="bsvY3IfUllw6V5rvk4tStEvpBhE=", ext="Bazinga!", mac="qbf1ZPG/r/e06F4ht+T77LXi5vw="');
            done();
        ***REMOVED***);

        it('returns a valid authorization header (sha256)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            ***REMOVED***;

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, ext: 'Bazinga!', timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about', contentType: 'text/plain' ***REMOVED***).field;
            expect(header).to.equal('Hawk id="123456", ts="1353809207", nonce="Ygvqdz", hash="2QfCt3GuY9HQnHWyWD3wX68ZOKbynqlfYmuO2ZBRqtY=", ext="Bazinga!", mac="q1CwFoSHzPZSkbIvl0oYlD+91rBUEvFk763nMjMndj8="');
            done();
        ***REMOVED***);

        it('returns a valid authorization header (no ext)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            ***REMOVED***;

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about', contentType: 'text/plain' ***REMOVED***).field;
            expect(header).to.equal('Hawk id="123456", ts="1353809207", nonce="Ygvqdz", hash="2QfCt3GuY9HQnHWyWD3wX68ZOKbynqlfYmuO2ZBRqtY=", mac="HTgtd0jPI6E4izx8e4OHdO36q00xFCU0FolNq3RiCYs="');
            done();
        ***REMOVED***);

        it('returns a valid authorization header (null ext)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            ***REMOVED***;

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about', contentType: 'text/plain', ext: null ***REMOVED***).field;
            expect(header).to.equal('Hawk id="123456", ts="1353809207", nonce="Ygvqdz", hash="2QfCt3GuY9HQnHWyWD3wX68ZOKbynqlfYmuO2ZBRqtY=", mac="HTgtd0jPI6E4izx8e4OHdO36q00xFCU0FolNq3RiCYs="');
            done();
        ***REMOVED***);

        it('returns a valid authorization header (empty payload)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            ***REMOVED***;

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'Ygvqdz', payload: '', contentType: 'text/plain' ***REMOVED***).field;
            expect(header).to.equal('Hawk id=\"123456\", ts=\"1353809207\", nonce=\"Ygvqdz\", hash=\"q/t+NNAkQZNlq/aAD6PlexImwQTxwgT2MahfTa9XRLA=\", mac=\"U5k16YEzn3UnBHKeBzsDXn067Gu3R4YaY6xOt9PYRZM=\"');
            done();
        ***REMOVED***);

        it('returns a valid authorization header (pre hashed payload)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
            ***REMOVED***;

            var options = ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'Ygvqdz', payload: 'something to write about', contentType: 'text/plain' ***REMOVED***;
            options.hash = Hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', options).field;
            expect(header).to.equal('Hawk id="123456", ts="1353809207", nonce="Ygvqdz", hash="2QfCt3GuY9HQnHWyWD3wX68ZOKbynqlfYmuO2ZBRqtY=", mac="HTgtd0jPI6E4izx8e4OHdO36q00xFCU0FolNq3RiCYs="');
            done();
        ***REMOVED***);

        it('errors on missing uri', function (done) ***REMOVED***

            var header = Hawk.client.header('', 'POST');
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid argument type');
            done();
        ***REMOVED***);

        it('errors on invalid uri', function (done) ***REMOVED***

            var header = Hawk.client.header(4, 'POST');
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid argument type');
            done();
        ***REMOVED***);

        it('errors on missing method', function (done) ***REMOVED***

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', '');
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid argument type');
            done();
        ***REMOVED***);

        it('errors on invalid method', function (done) ***REMOVED***

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 5);
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid argument type');
            done();
        ***REMOVED***);

        it('errors on missing options', function (done) ***REMOVED***

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST');
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid argument type');
            done();
        ***REMOVED***);

        it('errors on invalid credentials (id)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                key: '2983d45yun89q',
                algorithm: 'sha256'
            ***REMOVED***;

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, ext: 'Bazinga!', timestamp: 1353809207 ***REMOVED***);
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid credential object');
            done();
        ***REMOVED***);

        it('errors on missing credentials', function (done) ***REMOVED***

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** ext: 'Bazinga!', timestamp: 1353809207 ***REMOVED***);
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid credential object');
            done();
        ***REMOVED***);

        it('errors on invalid credentials', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                algorithm: 'sha256'
            ***REMOVED***;

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, ext: 'Bazinga!', timestamp: 1353809207 ***REMOVED***);
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Invalid credential object');
            done();
        ***REMOVED***);

        it('errors on invalid algorithm', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'hmac-sha-0'
            ***REMOVED***;

            var header = Hawk.client.header('https://example.net/somewhere/over/the/rainbow', 'POST', ***REMOVED*** credentials: credentials, payload: 'something, anything!', ext: 'Bazinga!', timestamp: 1353809207 ***REMOVED***);
            expect(header.field).to.equal('');
            expect(header.err).to.equal('Unknown algorithm');
            done();
        ***REMOVED***);
    ***REMOVED***);

    describe('authenticate()', function () ***REMOVED***

        it('returns false on invalid header', function (done) ***REMOVED***

            var res = ***REMOVED***
                headers: ***REMOVED***
                    'server-authorization': 'Hawk mac="abc", bad="xyz"'
                ***REMOVED***
            ***REMOVED***;

            expect(Hawk.client.authenticate(res, ***REMOVED******REMOVED***)).to.equal(false);
            done();
        ***REMOVED***);

        it('returns false on invalid mac', function (done) ***REMOVED***

            var res = ***REMOVED***
                headers: ***REMOVED***
                    'content-type': 'text/plain',
                    'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
                ***REMOVED***
            ***REMOVED***;

            var artifacts = ***REMOVED***
                method: 'POST',
                host: 'example.com',
                port: '8080',
                resource: '/resource/4?filter=a',
                ts: '1362336900',
                nonce: 'eb5S_L',
                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',
                ext: 'some-app-data',
                app: undefined,
                dlg: undefined,
                mac: 'BlmSe8K+pbKIb6YsZCnt4E1GrYvY1AaYayNR82dGpIk=',
                id: '123456'
            ***REMOVED***;

            var credentials = ***REMOVED***
                id: '123456',
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
            ***REMOVED***;

            expect(Hawk.client.authenticate(res, credentials, artifacts)).to.equal(false);
            done();
        ***REMOVED***);

        it('returns true on ignoring hash', function (done) ***REMOVED***

            var res = ***REMOVED***
                headers: ***REMOVED***
                    'content-type': 'text/plain',
                    'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
                ***REMOVED***
            ***REMOVED***;

            var artifacts = ***REMOVED***
                method: 'POST',
                host: 'example.com',
                port: '8080',
                resource: '/resource/4?filter=a',
                ts: '1362336900',
                nonce: 'eb5S_L',
                hash: 'nJjkVtBE5Y/Bk38Aiokwn0jiJxt/0S2WRSUwWLCf5xk=',
                ext: 'some-app-data',
                app: undefined,
                dlg: undefined,
                mac: 'BlmSe8K+pbKIb6YsZCnt4E1GrYvY1AaYayNR82dGpIk=',
                id: '123456'
            ***REMOVED***;

            var credentials = ***REMOVED***
                id: '123456',
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
            ***REMOVED***;

            expect(Hawk.client.authenticate(res, credentials, artifacts)).to.equal(true);
            done();
        ***REMOVED***);

        it('fails on invalid WWW-Authenticate header format', function (done) ***REMOVED***

            var header = 'Hawk ts="1362346425875", tsm="PhwayS28vtnn3qbv0mqRBYSXebN/zggEtucfeZ620Zo=", x="Stale timestamp"';
            expect(Hawk.client.authenticate(***REMOVED*** headers: ***REMOVED*** 'www-authenticate': header ***REMOVED*** ***REMOVED***, ***REMOVED******REMOVED***)).to.equal(false);
            done();
        ***REMOVED***);

        it('fails on invalid WWW-Authenticate header format', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
            ***REMOVED***;

            var header = 'Hawk ts="1362346425875", tsm="hwayS28vtnn3qbv0mqRBYSXebN/zggEtucfeZ620Zo=", error="Stale timestamp"';
            expect(Hawk.client.authenticate(***REMOVED*** headers: ***REMOVED*** 'www-authenticate': header ***REMOVED*** ***REMOVED***, credentials)).to.equal(false);
            done();
        ***REMOVED***);

        it('skips tsm validation when missing ts', function (done) ***REMOVED***

            var header = 'Hawk error="Stale timestamp"';
            expect(Hawk.client.authenticate(***REMOVED*** headers: ***REMOVED*** 'www-authenticate': header ***REMOVED*** ***REMOVED***, ***REMOVED******REMOVED***)).to.equal(true);
            done();
        ***REMOVED***);
    ***REMOVED***);

    describe('message()', function () ***REMOVED***

        it('generates authorization', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 80, 'I am the boodyman', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.exist();
            expect(auth.ts).to.equal(1353809207);
            expect(auth.nonce).to.equal('abc123');
            done();
        ***REMOVED***);

        it('errors on invalid host', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message(5, 80, 'I am the boodyman', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on invalid port', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', '80', 'I am the boodyman', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on missing host', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 0, 'I am the boodyman', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on null message', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 80, null, ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on missing message', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 80, undefined, ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on invalid message', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 80, 5, ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on missing options', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 80, 'I am the boodyman');
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on invalid credentials (id)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                key: '2983d45yun89q',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 80, 'I am the boodyman', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);

        it('errors on invalid credentials (key)', function (done) ***REMOVED***

            var credentials = ***REMOVED***
                id: '123456',
                algorithm: 'sha1'
            ***REMOVED***;

            var auth = Hawk.client.message('example.com', 80, 'I am the boodyman', ***REMOVED*** credentials: credentials, timestamp: 1353809207, nonce: 'abc123' ***REMOVED***);
            expect(auth).to.not.exist();
            done();
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***);
