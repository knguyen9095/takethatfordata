***REMOVED***
  "_args": [
    [
      "json-stable-stringify@1.0.1",
      "/usr/local/google/home/mlumish/grpc-node/packages/grpc-native-core"
    ]
  ],
  "_from": "json-stable-stringify@1.0.1",
  "_id": "json-stable-stringify@1.0.1",
  "_inBundle": false,
  "_integrity": "sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8=",
  "_location": "/@google-cloud/firestore/grpc/json-stable-stringify",
  "_phantomChildren": ***REMOVED******REMOVED***,
  "_requested": ***REMOVED***
    "type": "version",
    "registry": true,
    "raw": "json-stable-stringify@1.0.1",
    "name": "json-stable-stringify",
    "escapedName": "json-stable-stringify",
    "rawSpec": "1.0.1",
    "saveSpec": null,
    "fetchSpec": "1.0.1"
  ***REMOVED***,
  "_requiredBy": [
    "/@google-cloud/firestore/grpc/ajv"
  ],
  "_resolved": "https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz",
  "_shrinkwrap": null,
  "_spec": "1.0.1",
  "_where": "/usr/local/google/home/mlumish/grpc-node/packages/grpc-native-core",
  "author": ***REMOVED***
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  ***REMOVED***,
  "bugs": ***REMOVED***
    "url": "https://github.com/substack/json-stable-stringify/issues"
  ***REMOVED***,
  "dependencies": ***REMOVED***
    "jsonify": "~0.0.0"
  ***REMOVED***,
  "description": "deterministic JSON.stringify() with custom sorting to get deterministic hashes from stringified results",
  "devDependencies": ***REMOVED***
    "tape": "~1.0.4"
  ***REMOVED***,
  "homepage": "https://github.com/substack/json-stable-stringify",
  "keywords": [
    "json",
    "stringify",
    "deterministic",
    "hash",
    "sort",
    "stable"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "json-stable-stringify",
  "optionalDependencies": ***REMOVED******REMOVED***,
  "readme": "# json-stable-stringify\n\ndeterministic version of `JSON.stringify()` so you can get a consistent hash\nfrom stringified results\n\nYou can also pass in a custom comparison function.\n\n[![browser support](https://ci.testling.com/substack/json-stable-stringify.png)](https://ci.testling.com/substack/json-stable-stringify)\n\n[![build status](https://secure.travis-ci.org/substack/json-stable-stringify.png)](http://travis-ci.org/substack/json-stable-stringify)\n\n# example\n\n``` js\nvar stringify = require('json-stable-stringify');\nvar obj = ***REMOVED*** c: 8, b: [***REMOVED***z:6,y:5,x:4***REMOVED***,7], a: 3 ***REMOVED***;\nconsole.log(stringify(obj));\n```\n\noutput:\n\n```\n***REMOVED***\"a\":3,\"b\":[***REMOVED***\"x\":4,\"y\":5,\"z\":6***REMOVED***,7],\"c\":8***REMOVED***\n```\n\n# methods\n\n``` js\nvar stringify = require('json-stable-stringify')\n```\n\n## var str = stringify(obj, opts)\n\nReturn a deterministic stringified string `str` from the object `obj`.\n\n## options\n\n### cmp\n\nIf `opts` is given, you can supply an `opts.cmp` to have a custom comparison\nfunction for object keys. Your function `opts.cmp` is called with these\nparameters:\n\n``` js\nopts.cmp(***REMOVED*** key: akey, value: avalue ***REMOVED***, ***REMOVED*** key: bkey, value: bvalue ***REMOVED***)\n```\n\nFor example, to sort on the object key names in reverse order you could write:\n\n``` js\nvar stringify = require('json-stable-stringify');\n\nvar obj = ***REMOVED*** c: 8, b: [***REMOVED***z:6,y:5,x:4***REMOVED***,7], a: 3 ***REMOVED***;\nvar s = stringify(obj, function (a, b) ***REMOVED***\n    return a.key < b.key ? 1 : -1;\n***REMOVED***);\nconsole.log(s);\n```\n\nwhich results in the output string:\n\n```\n***REMOVED***\"c\":8,\"b\":[***REMOVED***\"z\":6,\"y\":5,\"x\":4***REMOVED***,7],\"a\":3***REMOVED***\n```\n\nOr if you wanted to sort on the object values in reverse order, you could write:\n\n```\nvar stringify = require('json-stable-stringify');\n\nvar obj = ***REMOVED*** d: 6, c: 5, b: [***REMOVED***z:3,y:2,x:1***REMOVED***,9], a: 10 ***REMOVED***;\nvar s = stringify(obj, function (a, b) ***REMOVED***\n    return a.value < b.value ? 1 : -1;\n***REMOVED***);\nconsole.log(s);\n```\n\nwhich outputs:\n\n```\n***REMOVED***\"d\":6,\"c\":5,\"b\":[***REMOVED***\"z\":3,\"y\":2,\"x\":1***REMOVED***,9],\"a\":10***REMOVED***\n```\n\n### space\n\nIf you specify `opts.space`, it will indent the output for pretty-printing.\nValid values are strings (e.g. `***REMOVED***space: \\t***REMOVED***`) or a number of spaces\n(`***REMOVED***space: 3***REMOVED***`).\n\nFor example:\n\n```js\nvar obj = ***REMOVED*** b: 1, a: ***REMOVED*** foo: 'bar', and: [1, 2, 3] ***REMOVED*** ***REMOVED***;\nvar s = stringify(obj, ***REMOVED*** space: '  ' ***REMOVED***);\nconsole.log(s);\n```\n\nwhich outputs:\n\n```\n***REMOVED***\n  \"a\": ***REMOVED***\n    \"and\": [\n      1,\n      2,\n      3\n    ],\n    \"foo\": \"bar\"\n  ***REMOVED***,\n  \"b\": 1\n***REMOVED***\n```\n\n### replacer\n\nThe replacer parameter is a function `opts.replacer(key, value)` that behaves\nthe same as the replacer\n[from the core JSON object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter).\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install json-stable-stringify\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": ***REMOVED***
    "type": "git",
    "url": "git://github.com/substack/json-stable-stringify.git"
  ***REMOVED***,
  "scripts": ***REMOVED***
    "test": "tape test/*.js"
  ***REMOVED***,
  "testling": ***REMOVED***
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "ff/5",
      "ff/latest",
      "chrome/15",
      "chrome/latest",
      "safari/latest",
      "opera/latest"
    ]
  ***REMOVED***,
  "version": "1.0.1"
***REMOVED***
