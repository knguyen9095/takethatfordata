# json-stable-stringify

deterministic version of `JSON.stringify()` so you can get a consistent hash
from stringified results

You can also pass in a custom comparison function.

[![browser support](https://ci.testling.com/substack/json-stable-stringify.png)](https://ci.testling.com/substack/json-stable-stringify)

[![build status](https://secure.travis-ci.org/substack/json-stable-stringify.png)](http://travis-ci.org/substack/json-stable-stringify)

# example

``` js
var stringify = require('json-stable-stringify');
var obj = ***REMOVED*** c: 8, b: [***REMOVED***z:6,y:5,x:4***REMOVED***,7], a: 3 ***REMOVED***;
console.log(stringify(obj));
```

output:

```
***REMOVED***"a":3,"b":[***REMOVED***"x":4,"y":5,"z":6***REMOVED***,7],"c":8***REMOVED***
```

# methods

``` js
var stringify = require('json-stable-stringify')
```

## var str = stringify(obj, opts)

Return a deterministic stringified string `str` from the object `obj`.

## options

### cmp

If `opts` is given, you can supply an `opts.cmp` to have a custom comparison
function for object keys. Your function `opts.cmp` is called with these
parameters:

``` js
opts.cmp(***REMOVED*** key: akey, value: avalue ***REMOVED***, ***REMOVED*** key: bkey, value: bvalue ***REMOVED***)
```

For example, to sort on the object key names in reverse order you could write:

``` js
var stringify = require('json-stable-stringify');

var obj = ***REMOVED*** c: 8, b: [***REMOVED***z:6,y:5,x:4***REMOVED***,7], a: 3 ***REMOVED***;
var s = stringify(obj, function (a, b) ***REMOVED***
    return a.key < b.key ? 1 : -1;
***REMOVED***);
console.log(s);
```

which results in the output string:

```
***REMOVED***"c":8,"b":[***REMOVED***"z":6,"y":5,"x":4***REMOVED***,7],"a":3***REMOVED***
```

Or if you wanted to sort on the object values in reverse order, you could write:

```
var stringify = require('json-stable-stringify');

var obj = ***REMOVED*** d: 6, c: 5, b: [***REMOVED***z:3,y:2,x:1***REMOVED***,9], a: 10 ***REMOVED***;
var s = stringify(obj, function (a, b) ***REMOVED***
    return a.value < b.value ? 1 : -1;
***REMOVED***);
console.log(s);
```

which outputs:

```
***REMOVED***"d":6,"c":5,"b":[***REMOVED***"z":3,"y":2,"x":1***REMOVED***,9],"a":10***REMOVED***
```

### space

If you specify `opts.space`, it will indent the output for pretty-printing.
Valid values are strings (e.g. `***REMOVED***space: \t***REMOVED***`) or a number of spaces
(`***REMOVED***space: 3***REMOVED***`).

For example:

```js
var obj = ***REMOVED*** b: 1, a: ***REMOVED*** foo: 'bar', and: [1, 2, 3] ***REMOVED*** ***REMOVED***;
var s = stringify(obj, ***REMOVED*** space: '  ' ***REMOVED***);
console.log(s);
```

which outputs:

```
***REMOVED***
  "a": ***REMOVED***
    "and": [
      1,
      2,
      3
    ],
    "foo": "bar"
  ***REMOVED***,
  "b": 1
***REMOVED***
```

### replacer

The replacer parameter is a function `opts.replacer(key, value)` that behaves
the same as the replacer
[from the core JSON object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter).

# install

With [npm](https://npmjs.org) do:

```
npm install json-stable-stringify
```

# license

MIT
