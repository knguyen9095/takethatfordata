cmake_minimum_required(VERSION 2.4.4)
set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)

project(zlib C)

set(VERSION "1.2.11")

option(ASM686 "Enable building i686 assembly implementation")
option(AMD64 "Enable building amd64 assembly implementation")

set(INSTALL_BIN_DIR "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***/bin" CACHE PATH "Installation directory for executables")
set(INSTALL_LIB_DIR "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***/lib" CACHE PATH "Installation directory for libraries")
set(INSTALL_INC_DIR "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***/include" CACHE PATH "Installation directory for headers")
set(INSTALL_MAN_DIR "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***/share/man" CACHE PATH "Installation directory for manual pages")
set(INSTALL_PKGCONFIG_DIR "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***/share/pkgconfig" CACHE PATH "Installation directory for pkgconfig (.pc) files")

include(CheckTypeSize)
include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckCSourceCompiles)
enable_testing()

check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(stdint.h    HAVE_STDINT_H)
check_include_file(stddef.h    HAVE_STDDEF_H)

#
# Check to see if we have large file support
#
set(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)
# We add these other definitions here because CheckTypeSize.cmake
# in CMake 2.4.x does not automatically do so and we want
# compatibility with CMake 2.4.x.
if(HAVE_SYS_TYPES_H)
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H)
endif()
if(HAVE_STDINT_H)
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H)
endif()
if(HAVE_STDDEF_H)
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H)
endif()
check_type_size(off64_t OFF64_T)
if(HAVE_OFF64_T)
   add_definitions(-D_LARGEFILE64_SOURCE=1)
endif()
set(CMAKE_REQUIRED_DEFINITIONS) # clear variable

#
# Check for fseeko
#
check_function_exists(fseeko HAVE_FSEEKO)
if(NOT HAVE_FSEEKO)
    add_definitions(-DNO_FSEEKO)
endif()

#
# Check for unistd.h
#
check_include_file(unistd.h Z_HAVE_UNISTD_H)

if(MSVC)
    set(CMAKE_DEBUG_POSTFIX "d")
    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
    include_directories($***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***)
endif()

if(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)
    # If we're doing an out of source build and the user has a zconf.h
    # in their source tree...
    if(EXISTS $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zconf.h)
        message(STATUS "Renaming")
        message(STATUS "    $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zconf.h")
        message(STATUS "to 'zconf.h.included' because this file is included with zlib")
        message(STATUS "but CMake generates it automatically in the build directory.")
        file(RENAME $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zconf.h $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zconf.h.included)
  endif()
endif()

set(ZLIB_PC $***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/zlib.pc)
configure_file( $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zlib.pc.cmakein
		$***REMOVED***ZLIB_PC***REMOVED*** @ONLY)
configure_file(	$***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zconf.h.cmakein
		$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/zconf.h @ONLY)
include_directories($***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED*** $***REMOVED***CMAKE_SOURCE_DIR***REMOVED***)


#============================================================================
# zlib
#============================================================================

set(ZLIB_PUBLIC_HDRS
    $***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/zconf.h
    zlib.h
)
set(ZLIB_PRIVATE_HDRS
    crc32.h
    deflate.h
    gzguts.h
    inffast.h
    inffixed.h
    inflate.h
    inftrees.h
    trees.h
    zutil.h
)
set(ZLIB_SRCS
    adler32.c
    compress.c
    crc32.c
    deflate.c
    gzclose.c
    gzlib.c
    gzread.c
    gzwrite.c
    inflate.c
    infback.c
    inftrees.c
    inffast.c
    trees.c
    uncompr.c
    zutil.c
)

if(NOT MINGW)
    set(ZLIB_DLL_SRCS
        win32/zlib1.rc # If present will override custom build rule below.
    )
endif()

if(CMAKE_COMPILER_IS_GNUCC)
    if(ASM686)
        set(ZLIB_ASMS contrib/asm686/match.S)
    elseif (AMD64)
        set(ZLIB_ASMS contrib/amd64/amd64-match.S)
    endif ()

	if(ZLIB_ASMS)
		add_definitions(-DASMV)
		set_source_files_properties($***REMOVED***ZLIB_ASMS***REMOVED*** PROPERTIES LANGUAGE C COMPILE_FLAGS -DNO_UNDERLINE)
	endif()
endif()

if(MSVC)
    if(ASM686)
		ENABLE_LANGUAGE(ASM_MASM)
        set(ZLIB_ASMS
			contrib/masmx86/inffas32.asm
			contrib/masmx86/match686.asm
		)
    elseif (AMD64)
		ENABLE_LANGUAGE(ASM_MASM)
        set(ZLIB_ASMS
			contrib/masmx64/gvmat64.asm
			contrib/masmx64/inffasx64.asm
		)
    endif()

	if(ZLIB_ASMS)
		add_definitions(-DASMV -DASMINF)
	endif()
endif()

# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION
file(READ $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zlib.h _zlib_h_contents)
string(REGEX REPLACE ".*#define[ \t]+ZLIB_VERSION[ \t]+\"([-0-9A-Za-z.]+)\".*"
    "\\1" ZLIB_FULL_VERSION $***REMOVED***_zlib_h_contents***REMOVED***)

if(MINGW)
    # This gets us DLL resource information when compiling on MinGW.
    if(NOT CMAKE_RC_COMPILER)
        set(CMAKE_RC_COMPILER windres.exe)
    endif()

    add_custom_command(OUTPUT $***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/zlib1rc.obj
                       COMMAND $***REMOVED***CMAKE_RC_COMPILER***REMOVED***
                            -D GCC_WINDRES
                            -I $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***
                            -I $***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***
                            -o $***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/zlib1rc.obj
                            -i $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/win32/zlib1.rc)
    set(ZLIB_DLL_SRCS $***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/zlib1rc.obj)
endif(MINGW)

add_library(zlib SHARED $***REMOVED***ZLIB_SRCS***REMOVED*** $***REMOVED***ZLIB_ASMS***REMOVED*** $***REMOVED***ZLIB_DLL_SRCS***REMOVED*** $***REMOVED***ZLIB_PUBLIC_HDRS***REMOVED*** $***REMOVED***ZLIB_PRIVATE_HDRS***REMOVED***)
add_library(zlibstatic STATIC $***REMOVED***ZLIB_SRCS***REMOVED*** $***REMOVED***ZLIB_ASMS***REMOVED*** $***REMOVED***ZLIB_PUBLIC_HDRS***REMOVED*** $***REMOVED***ZLIB_PRIVATE_HDRS***REMOVED***)
set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
set_target_properties(zlib PROPERTIES SOVERSION 1)

if(NOT CYGWIN)
    # This property causes shared libraries on Linux to have the full version
    # encoded into their final filename.  We disable this on Cygwin because
    # it causes cygz-$***REMOVED***ZLIB_FULL_VERSION***REMOVED***.dll to be created when cygz.dll
    # seems to be the default.
    #
    # This has no effect with MSVC, on that platform the version info for
    # the DLL comes from the resource file win32/zlib1.rc
    set_target_properties(zlib PROPERTIES VERSION $***REMOVED***ZLIB_FULL_VERSION***REMOVED***)
endif()

if(UNIX)
    # On unix-like platforms the library is almost always called libz
   set_target_properties(zlib zlibstatic PROPERTIES OUTPUT_NAME z)
   if(NOT APPLE)
     set_target_properties(zlib PROPERTIES LINK_FLAGS "-Wl,--version-script,\"$***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/zlib.map\"")
   endif()
elseif(BUILD_SHARED_LIBS AND WIN32)
    # Creates zlib1.dll when building shared library version
    set_target_properties(zlib PROPERTIES SUFFIX "1.dll")
endif()

if(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )
    install(TARGETS zlib zlibstatic
        RUNTIME DESTINATION "$***REMOVED***INSTALL_BIN_DIR***REMOVED***"
        ARCHIVE DESTINATION "$***REMOVED***INSTALL_LIB_DIR***REMOVED***"
        LIBRARY DESTINATION "$***REMOVED***INSTALL_LIB_DIR***REMOVED***" )
endif()
if(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )
    install(FILES $***REMOVED***ZLIB_PUBLIC_HDRS***REMOVED*** DESTINATION "$***REMOVED***INSTALL_INC_DIR***REMOVED***")
endif()
if(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )
    install(FILES zlib.3 DESTINATION "$***REMOVED***INSTALL_MAN_DIR***REMOVED***/man3")
endif()
if(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )
    install(FILES $***REMOVED***ZLIB_PC***REMOVED*** DESTINATION "$***REMOVED***INSTALL_PKGCONFIG_DIR***REMOVED***")
endif()

#============================================================================
# Example binaries
#============================================================================

add_executable(example test/example.c)
target_link_libraries(example zlib)
add_test(example example)

add_executable(minigzip test/minigzip.c)
target_link_libraries(minigzip zlib)

if(HAVE_OFF64_T)
    add_executable(example64 test/example.c)
    target_link_libraries(example64 zlib)
    set_target_properties(example64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
    add_test(example64 example64)

    add_executable(minigzip64 test/minigzip.c)
    target_link_libraries(minigzip64 zlib)
    set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
endif()
