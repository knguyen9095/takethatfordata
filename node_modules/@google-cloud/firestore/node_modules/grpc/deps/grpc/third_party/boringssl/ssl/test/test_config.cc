/* Copyright (c) 2014, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#include "test_config.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <memory>

#include <openssl/base64.h>

namespace ***REMOVED***

template <typename T>
struct Flag ***REMOVED***
  const char *flag;
  T TestConfig::*member;
***REMOVED***;

// FindField looks for the flag in |flags| that matches |flag|. If one is found,
// it returns a pointer to the corresponding field in |config|. Otherwise, it
// returns NULL.
template<typename T, size_t N>
T *FindField(TestConfig *config, const Flag<T> (&flags)[N], const char *flag) ***REMOVED***
  for (size_t i = 0; i < N; i++) ***REMOVED***
    if (strcmp(flag, flags[i].flag) == 0) ***REMOVED***
      return &(config->*(flags[i].member));
    ***REMOVED***
  ***REMOVED***
  return NULL;
***REMOVED***

const Flag<bool> kBoolFlags[] = ***REMOVED***
  ***REMOVED*** "-server", &TestConfig::is_server ***REMOVED***,
  ***REMOVED*** "-dtls", &TestConfig::is_dtls ***REMOVED***,
  ***REMOVED*** "-fallback-scsv", &TestConfig::fallback_scsv ***REMOVED***,
  ***REMOVED*** "-require-any-client-certificate",
    &TestConfig::require_any_client_certificate ***REMOVED***,
  ***REMOVED*** "-false-start", &TestConfig::false_start ***REMOVED***,
  ***REMOVED*** "-async", &TestConfig::async ***REMOVED***,
  ***REMOVED*** "-write-different-record-sizes",
    &TestConfig::write_different_record_sizes ***REMOVED***,
  ***REMOVED*** "-cbc-record-splitting", &TestConfig::cbc_record_splitting ***REMOVED***,
  ***REMOVED*** "-partial-write", &TestConfig::partial_write ***REMOVED***,
  ***REMOVED*** "-no-tls13", &TestConfig::no_tls13 ***REMOVED***,
  ***REMOVED*** "-no-tls12", &TestConfig::no_tls12 ***REMOVED***,
  ***REMOVED*** "-no-tls11", &TestConfig::no_tls11 ***REMOVED***,
  ***REMOVED*** "-no-tls1", &TestConfig::no_tls1 ***REMOVED***,
  ***REMOVED*** "-no-ssl3", &TestConfig::no_ssl3 ***REMOVED***,
  ***REMOVED*** "-enable-channel-id", &TestConfig::enable_channel_id ***REMOVED***,
  ***REMOVED*** "-shim-writes-first", &TestConfig::shim_writes_first ***REMOVED***,
  ***REMOVED*** "-expect-session-miss", &TestConfig::expect_session_miss ***REMOVED***,
  ***REMOVED*** "-decline-alpn", &TestConfig::decline_alpn ***REMOVED***,
  ***REMOVED*** "-expect-extended-master-secret",
    &TestConfig::expect_extended_master_secret ***REMOVED***,
  ***REMOVED*** "-enable-ocsp-stapling", &TestConfig::enable_ocsp_stapling ***REMOVED***,
  ***REMOVED*** "-enable-signed-cert-timestamps",
    &TestConfig::enable_signed_cert_timestamps ***REMOVED***,
  ***REMOVED*** "-implicit-handshake", &TestConfig::implicit_handshake ***REMOVED***,
  ***REMOVED*** "-use-early-callback", &TestConfig::use_early_callback ***REMOVED***,
  ***REMOVED*** "-fail-early-callback", &TestConfig::fail_early_callback ***REMOVED***,
  ***REMOVED*** "-install-ddos-callback", &TestConfig::install_ddos_callback ***REMOVED***,
  ***REMOVED*** "-fail-ddos-callback", &TestConfig::fail_ddos_callback ***REMOVED***,
  ***REMOVED*** "-fail-second-ddos-callback", &TestConfig::fail_second_ddos_callback ***REMOVED***,
  ***REMOVED*** "-fail-cert-callback", &TestConfig::fail_cert_callback ***REMOVED***,
  ***REMOVED*** "-handshake-never-done", &TestConfig::handshake_never_done ***REMOVED***,
  ***REMOVED*** "-use-export-context", &TestConfig::use_export_context ***REMOVED***,
  ***REMOVED*** "-tls-unique", &TestConfig::tls_unique ***REMOVED***,
  ***REMOVED*** "-expect-ticket-renewal", &TestConfig::expect_ticket_renewal ***REMOVED***,
  ***REMOVED*** "-expect-no-session", &TestConfig::expect_no_session ***REMOVED***,
  ***REMOVED*** "-expect-early-data-info", &TestConfig::expect_early_data_info ***REMOVED***,
  ***REMOVED*** "-use-ticket-callback", &TestConfig::use_ticket_callback ***REMOVED***,
  ***REMOVED*** "-renew-ticket", &TestConfig::renew_ticket ***REMOVED***,
  ***REMOVED*** "-enable-early-data", &TestConfig::enable_early_data ***REMOVED***,
  ***REMOVED*** "-enable-client-custom-extension",
    &TestConfig::enable_client_custom_extension ***REMOVED***,
  ***REMOVED*** "-enable-server-custom-extension",
    &TestConfig::enable_server_custom_extension ***REMOVED***,
  ***REMOVED*** "-custom-extension-skip", &TestConfig::custom_extension_skip ***REMOVED***,
  ***REMOVED*** "-custom-extension-fail-add", &TestConfig::custom_extension_fail_add ***REMOVED***,
  ***REMOVED*** "-check-close-notify", &TestConfig::check_close_notify ***REMOVED***,
  ***REMOVED*** "-shim-shuts-down", &TestConfig::shim_shuts_down ***REMOVED***,
  ***REMOVED*** "-verify-fail", &TestConfig::verify_fail ***REMOVED***,
  ***REMOVED*** "-verify-peer", &TestConfig::verify_peer ***REMOVED***,
  ***REMOVED*** "-expect-verify-result", &TestConfig::expect_verify_result ***REMOVED***,
  ***REMOVED*** "-renegotiate-once", &TestConfig::renegotiate_once ***REMOVED***,
  ***REMOVED*** "-renegotiate-freely", &TestConfig::renegotiate_freely ***REMOVED***,
  ***REMOVED*** "-renegotiate-ignore", &TestConfig::renegotiate_ignore ***REMOVED***,
  ***REMOVED*** "-p384-only", &TestConfig::p384_only ***REMOVED***,
  ***REMOVED*** "-enable-all-curves", &TestConfig::enable_all_curves ***REMOVED***,
  ***REMOVED*** "-use-sparse-dh-prime", &TestConfig::use_sparse_dh_prime ***REMOVED***,
  ***REMOVED*** "-use-old-client-cert-callback",
    &TestConfig::use_old_client_cert_callback ***REMOVED***,
  ***REMOVED*** "-use-null-client-ca-list", &TestConfig::use_null_client_ca_list ***REMOVED***,
  ***REMOVED*** "-send-alert", &TestConfig::send_alert ***REMOVED***,
  ***REMOVED*** "-peek-then-read", &TestConfig::peek_then_read ***REMOVED***,
  ***REMOVED*** "-enable-grease", &TestConfig::enable_grease ***REMOVED***,
  ***REMOVED*** "-use-exporter-between-reads", &TestConfig::use_exporter_between_reads ***REMOVED***,
  ***REMOVED*** "-retain-only-sha256-client-cert-initial",
    &TestConfig::retain_only_sha256_client_cert_initial ***REMOVED***,
  ***REMOVED*** "-retain-only-sha256-client-cert-resume",
    &TestConfig::retain_only_sha256_client_cert_resume ***REMOVED***,
  ***REMOVED*** "-expect-sha256-client-cert-initial",
    &TestConfig::expect_sha256_client_cert_initial ***REMOVED***,
  ***REMOVED*** "-expect-sha256-client-cert-resume",
    &TestConfig::expect_sha256_client_cert_resume ***REMOVED***,
  ***REMOVED*** "-enable-short-header", &TestConfig::enable_short_header ***REMOVED***,
  ***REMOVED*** "-read-with-unfinished-write", &TestConfig::read_with_unfinished_write ***REMOVED***,
  ***REMOVED*** "-expect-secure-renegotiation",
    &TestConfig::expect_secure_renegotiation ***REMOVED***,
  ***REMOVED*** "-expect-no-secure-renegotiation",
    &TestConfig::expect_no_secure_renegotiation ***REMOVED***,
  ***REMOVED*** "-expect-session-id", &TestConfig::expect_session_id ***REMOVED***,
  ***REMOVED*** "-expect-no-session-id", &TestConfig::expect_no_session_id ***REMOVED***,
***REMOVED***;

const Flag<std::string> kStringFlags[] = ***REMOVED***
  ***REMOVED*** "-digest-prefs", &TestConfig::digest_prefs ***REMOVED***,
  ***REMOVED*** "-key-file", &TestConfig::key_file ***REMOVED***,
  ***REMOVED*** "-cert-file", &TestConfig::cert_file ***REMOVED***,
  ***REMOVED*** "-expect-server-name", &TestConfig::expected_server_name ***REMOVED***,
  ***REMOVED*** "-advertise-npn", &TestConfig::advertise_npn ***REMOVED***,
  ***REMOVED*** "-expect-next-proto", &TestConfig::expected_next_proto ***REMOVED***,
  ***REMOVED*** "-select-next-proto", &TestConfig::select_next_proto ***REMOVED***,
  ***REMOVED*** "-send-channel-id", &TestConfig::send_channel_id ***REMOVED***,
  ***REMOVED*** "-host-name", &TestConfig::host_name ***REMOVED***,
  ***REMOVED*** "-advertise-alpn", &TestConfig::advertise_alpn ***REMOVED***,
  ***REMOVED*** "-expect-alpn", &TestConfig::expected_alpn ***REMOVED***,
  ***REMOVED*** "-expect-advertised-alpn", &TestConfig::expected_advertised_alpn ***REMOVED***,
  ***REMOVED*** "-select-alpn", &TestConfig::select_alpn ***REMOVED***,
  ***REMOVED*** "-psk", &TestConfig::psk ***REMOVED***,
  ***REMOVED*** "-psk-identity", &TestConfig::psk_identity ***REMOVED***,
  ***REMOVED*** "-srtp-profiles", &TestConfig::srtp_profiles ***REMOVED***,
  ***REMOVED*** "-cipher", &TestConfig::cipher ***REMOVED***,
  ***REMOVED*** "-export-label", &TestConfig::export_label ***REMOVED***,
  ***REMOVED*** "-export-context", &TestConfig::export_context ***REMOVED***,
  ***REMOVED*** "-expect-peer-cert-file", &TestConfig::expect_peer_cert_file ***REMOVED***,
***REMOVED***;

const Flag<std::string> kBase64Flags[] = ***REMOVED***
  ***REMOVED*** "-expect-certificate-types", &TestConfig::expected_certificate_types ***REMOVED***,
  ***REMOVED*** "-expect-channel-id", &TestConfig::expected_channel_id ***REMOVED***,
  ***REMOVED*** "-expect-ocsp-response", &TestConfig::expected_ocsp_response ***REMOVED***,
  ***REMOVED*** "-expect-signed-cert-timestamps",
    &TestConfig::expected_signed_cert_timestamps ***REMOVED***,
  ***REMOVED*** "-ocsp-response", &TestConfig::ocsp_response ***REMOVED***,
  ***REMOVED*** "-signed-cert-timestamps", &TestConfig::signed_cert_timestamps ***REMOVED***,
  ***REMOVED*** "-ticket-key", &TestConfig::ticket_key ***REMOVED***,
***REMOVED***;

const Flag<int> kIntFlags[] = ***REMOVED***
  ***REMOVED*** "-port", &TestConfig::port ***REMOVED***,
  ***REMOVED*** "-resume-count", &TestConfig::resume_count ***REMOVED***,
  ***REMOVED*** "-min-version", &TestConfig::min_version ***REMOVED***,
  ***REMOVED*** "-max-version", &TestConfig::max_version ***REMOVED***,
  ***REMOVED*** "-mtu", &TestConfig::mtu ***REMOVED***,
  ***REMOVED*** "-export-keying-material", &TestConfig::export_keying_material ***REMOVED***,
  ***REMOVED*** "-expect-total-renegotiations", &TestConfig::expect_total_renegotiations ***REMOVED***,
  ***REMOVED*** "-expect-peer-signature-algorithm",
    &TestConfig::expect_peer_signature_algorithm ***REMOVED***,
  ***REMOVED*** "-expect-curve-id", &TestConfig::expect_curve_id ***REMOVED***,
  ***REMOVED*** "-expect-resume-curve-id", &TestConfig::expect_resume_curve_id ***REMOVED***,
  ***REMOVED*** "-initial-timeout-duration-ms", &TestConfig::initial_timeout_duration_ms ***REMOVED***,
  ***REMOVED*** "-max-cert-list", &TestConfig::max_cert_list ***REMOVED***,
  ***REMOVED*** "-expect-cipher-aes", &TestConfig::expect_cipher_aes ***REMOVED***,
  ***REMOVED*** "-expect-cipher-no-aes", &TestConfig::expect_cipher_no_aes ***REMOVED***,
  ***REMOVED*** "-resumption-delay", &TestConfig::resumption_delay ***REMOVED***,
  ***REMOVED*** "-max-send-fragment", &TestConfig::max_send_fragment ***REMOVED***,
  ***REMOVED*** "-read-size", &TestConfig::read_size ***REMOVED***,
***REMOVED***;

const Flag<std::vector<int>> kIntVectorFlags[] = ***REMOVED***
  ***REMOVED*** "-signing-prefs", &TestConfig::signing_prefs ***REMOVED***,
***REMOVED***;

***REMOVED***  // namespace

bool ParseConfig(int argc, char **argv, TestConfig *out_config) ***REMOVED***
  for (int i = 0; i < argc; i++) ***REMOVED***
    bool *bool_field = FindField(out_config, kBoolFlags, argv[i]);
    if (bool_field != NULL) ***REMOVED***
      *bool_field = true;
      continue;
    ***REMOVED***

    std::string *string_field = FindField(out_config, kStringFlags, argv[i]);
    if (string_field != NULL) ***REMOVED***
      i++;
      if (i >= argc) ***REMOVED***
        fprintf(stderr, "Missing parameter\n");
        return false;
      ***REMOVED***
      string_field->assign(argv[i]);
      continue;
    ***REMOVED***

    std::string *base64_field = FindField(out_config, kBase64Flags, argv[i]);
    if (base64_field != NULL) ***REMOVED***
      i++;
      if (i >= argc) ***REMOVED***
        fprintf(stderr, "Missing parameter\n");
        return false;
      ***REMOVED***
      size_t len;
      if (!EVP_DecodedLength(&len, strlen(argv[i]))) ***REMOVED***
        fprintf(stderr, "Invalid base64: %s\n", argv[i]);
        return false;
      ***REMOVED***
      std::unique_ptr<uint8_t[]> decoded(new uint8_t[len]);
      if (!EVP_DecodeBase64(decoded.get(), &len, len,
                            reinterpret_cast<const uint8_t *>(argv[i]),
                            strlen(argv[i]))) ***REMOVED***
        fprintf(stderr, "Invalid base64: %s\n", argv[i]);
        return false;
      ***REMOVED***
      base64_field->assign(reinterpret_cast<const char *>(decoded.get()), len);
      continue;
    ***REMOVED***

    int *int_field = FindField(out_config, kIntFlags, argv[i]);
    if (int_field) ***REMOVED***
      i++;
      if (i >= argc) ***REMOVED***
        fprintf(stderr, "Missing parameter\n");
        return false;
      ***REMOVED***
      *int_field = atoi(argv[i]);
      continue;
    ***REMOVED***

    std::vector<int> *int_vector_field =
        FindField(out_config, kIntVectorFlags, argv[i]);
    if (int_vector_field) ***REMOVED***
      i++;
      if (i >= argc) ***REMOVED***
        fprintf(stderr, "Missing parameter\n");
        return false;
      ***REMOVED***

      // Each instance of the flag adds to the list.
      int_vector_field->push_back(atoi(argv[i]));
      continue;
    ***REMOVED***

    fprintf(stderr, "Unknown argument: %s\n", argv[i]);
    return false;
  ***REMOVED***

  return true;
***REMOVED***
