#!/bin/sh
#
#       ZLIB compilation script for the OS/400.
#
#
#       This is a shell script since make is not a standard component of OS/400.


################################################################################
#
#                       Tunable configuration parameters.
#
################################################################################

TARGETLIB='ZLIB'                # Target OS/400 program library
STATBNDDIR='ZLIB_A'             # Static binding directory.
DYNBNDDIR='ZLIB'                # Dynamic binding directory.
SRVPGM="ZLIB"                   # Service program.
IFSDIR='/zlib'                  # IFS support base directory.
TGTCCSID='500'                  # Target CCSID of objects
DEBUG='*NONE'                   # Debug level
OPTIMIZE='40'                   # Optimisation level
OUTPUT='*NONE'                  # Compilation output option.
TGTRLS='V6R1M0'                 # Target OS release

export TARGETLIB STATBNDDIR DYNBNDDIR SRVPGM IFSDIR
export TGTCCSID DEBUG OPTIMIZE OUTPUT TGTRLS


################################################################################
#
#                       OS/400 specific definitions.
#
################################################################################

LIBIFSNAME="/QSYS.LIB/$***REMOVED***TARGETLIB***REMOVED***.LIB"


################################################################################
#
#                               Procedures.
#
################################################################################

#       action_needed dest [src]
#
#       dest is an object to build
#       if specified, src is an object on which dest depends.
#
#       exit 0 (succeeds) if some action has to be taken, else 1.

action_needed()

***REMOVED***
        [ ! -e "$***REMOVED***1***REMOVED***" ] && return 0
        [ "$***REMOVED***2***REMOVED***" ] || return 1
        [ "$***REMOVED***1***REMOVED***" -ot "$***REMOVED***2***REMOVED***" ] && return 0
        return 1
***REMOVED***


#       make_module module_name source_name [additional_definitions]
#
#       Compile source name into module if needed.
#       As side effect, append the module name to variable MODULES.
#       Set LINK to "YES" if the module has been compiled.

make_module()

***REMOVED***
    MODULES="$***REMOVED***MODULES***REMOVED*** $***REMOVED***1***REMOVED***"
    MODIFSNAME="$***REMOVED***LIBIFSNAME***REMOVED***/$***REMOVED***1***REMOVED***.MODULE"
    CSRC="`basename \"$***REMOVED***2***REMOVED***\"`"

    if action_needed "$***REMOVED***MODIFSNAME***REMOVED***" "$***REMOVED***2***REMOVED***"
    then    :
    elif [ ! "`sed -e \"/<source name=\\\"$***REMOVED***CSRC***REMOVED***\\\">/,/<\\\\/source>/!d\" \
      -e '/<depend /!d'                                                 \
      -e 's/.* name=\"\\([^\"]*\\)\".*/\\1/' < \"$***REMOVED***TOPDIR***REMOVED***/treebuild.xml\" |
        while read HDR
        do      if action_needed \"$***REMOVED***MODIFSNAME***REMOVED***\" \"$***REMOVED***IFSDIR***REMOVED***/include/$***REMOVED***HDR***REMOVED***\"
                then    echo recompile
                        break
                fi
        done`" ]
    then    return 0
    fi

    CMD="CRTCMOD MODULE($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***1***REMOVED***) SRCSTMF('$***REMOVED***2***REMOVED***')"
    CMD="$***REMOVED***CMD***REMOVED*** SYSIFCOPT(*IFS64IO) OPTION(*INCDIRFIRST)"
    CMD="$***REMOVED***CMD***REMOVED*** LOCALETYPE(*LOCALE) FLAG(10)"
    CMD="$***REMOVED***CMD***REMOVED*** INCDIR('$***REMOVED***IFSDIR***REMOVED***/include' $***REMOVED***INCLUDES***REMOVED***)"
    CMD="$***REMOVED***CMD***REMOVED*** TGTCCSID($***REMOVED***TGTCCSID***REMOVED***) TGTRLS($***REMOVED***TGTRLS***REMOVED***)"
    CMD="$***REMOVED***CMD***REMOVED*** OUTPUT($***REMOVED***OUTPUT***REMOVED***)"
    CMD="$***REMOVED***CMD***REMOVED*** OPTIMIZE($***REMOVED***OPTIMIZE***REMOVED***)"
    CMD="$***REMOVED***CMD***REMOVED*** DBGVIEW($***REMOVED***DEBUG***REMOVED***)"
    system "$***REMOVED***CMD***REMOVED***"
    LINK=YES
***REMOVED***


#       Determine DB2 object name from IFS name.

db2_name()

***REMOVED***
        basename "$***REMOVED***1***REMOVED***"                                                 |
        tr 'a-z-' 'A-Z_'                                                |
        sed -e 's/\..*//'                                               \
            -e 's/^\(.\).*\(.........\)$/\1\2/'
***REMOVED***


#       Force enumeration types to be the same size as integers.

copy_hfile()

***REMOVED***
        sed -e '1i\
#pragma enum(int)\
' "$***REMOVED***@***REMOVED***" -e '$a\
#pragma enum(pop)\
'
***REMOVED***


################################################################################
#
#                             Script initialization.
#
################################################################################

SCRIPTDIR=`dirname "$***REMOVED***0***REMOVED***"`

case "$***REMOVED***SCRIPTDIR***REMOVED***" in
/*)     ;;
*)      SCRIPTDIR="`pwd`/$***REMOVED***SCRIPTDIR***REMOVED***"
esac

while true
do      case "$***REMOVED***SCRIPTDIR***REMOVED***" in
        */.)    SCRIPTDIR="$***REMOVED***SCRIPTDIR%/.***REMOVED***";;
        *)      break;;
        esac
done

#  The script directory is supposed to be in $***REMOVED***TOPDIR***REMOVED***/os400.

TOPDIR=`dirname "$***REMOVED***SCRIPTDIR***REMOVED***"`
export SCRIPTDIR TOPDIR
cd "$***REMOVED***TOPDIR***REMOVED***"


#  Extract the version from the master compilation XML file.

VERSION=`sed -e '/^<package /!d'                                        \
            -e 's/^.* version="\([0-9.]*\)".*$/\1/' -e 'q'              \
            < treebuild.xml`
export VERSION

################################################################################


#       Create the OS/400 library if it does not exist.

if action_needed "$***REMOVED***LIBIFSNAME***REMOVED***"
then    CMD="CRTLIB LIB($***REMOVED***TARGETLIB***REMOVED***) TEXT('ZLIB: Data compression API')"
        system "$***REMOVED***CMD***REMOVED***"
fi


#       Create the DOCS source file if it does not exist.

if action_needed "$***REMOVED***LIBIFSNAME***REMOVED***/DOCS.FILE"
then    CMD="CRTSRCPF FILE($***REMOVED***TARGETLIB***REMOVED***/DOCS) RCDLEN(112)"
        CMD="$***REMOVED***CMD***REMOVED*** CCSID($***REMOVED***TGTCCSID***REMOVED***) TEXT('Documentation texts')"
        system "$***REMOVED***CMD***REMOVED***"
fi

#       Copy some documentation files if needed.

for TEXT in "$***REMOVED***TOPDIR***REMOVED***/ChangeLog" "$***REMOVED***TOPDIR***REMOVED***/FAQ"                       \
    "$***REMOVED***TOPDIR***REMOVED***/README" "$***REMOVED***SCRIPTDIR***REMOVED***/README400"
do      MEMBER="$***REMOVED***LIBIFSNAME***REMOVED***/DOCS.FILE/`db2_name \"$***REMOVED***TEXT***REMOVED***\"`.MBR"

        if action_needed "$***REMOVED***MEMBER***REMOVED***" "$***REMOVED***TEXT***REMOVED***"
        then    CMD="CPY OBJ('$***REMOVED***TEXT***REMOVED***') TOOBJ('$***REMOVED***MEMBER***REMOVED***') TOCCSID($***REMOVED***TGTCCSID***REMOVED***)"
                CMD="$***REMOVED***CMD***REMOVED*** DTAFMT(*TEXT) REPLACE(*YES)"
                system "$***REMOVED***CMD***REMOVED***"
        fi
done


#       Create the OS/400 source program file for the C header files.

SRCPF="$***REMOVED***LIBIFSNAME***REMOVED***/H.FILE"

if action_needed "$***REMOVED***SRCPF***REMOVED***"
then    CMD="CRTSRCPF FILE($***REMOVED***TARGETLIB***REMOVED***/H) RCDLEN(112)"
        CMD="$***REMOVED***CMD***REMOVED*** CCSID($***REMOVED***TGTCCSID***REMOVED***) TEXT('ZLIB: C/C++ header files')"
        system "$***REMOVED***CMD***REMOVED***"
fi


#       Create the IFS directory for the C header files.

if action_needed "$***REMOVED***IFSDIR***REMOVED***/include"
then    mkdir -p "$***REMOVED***IFSDIR***REMOVED***/include"
fi

#       Copy the header files to DB2 library. Link from IFS include directory.

for HFILE in "$***REMOVED***TOPDIR***REMOVED***/"*.h
do      DEST="$***REMOVED***SRCPF***REMOVED***/`db2_name \"$***REMOVED***HFILE***REMOVED***\"`.MBR"

        if action_needed "$***REMOVED***DEST***REMOVED***" "$***REMOVED***HFILE***REMOVED***"
        then    copy_hfile < "$***REMOVED***HFILE***REMOVED***" > tmphdrfile

                #       Need to translate to target CCSID.

                CMD="CPY OBJ('`pwd`/tmphdrfile') TOOBJ('$***REMOVED***DEST***REMOVED***')"
                CMD="$***REMOVED***CMD***REMOVED*** TOCCSID($***REMOVED***TGTCCSID***REMOVED***) DTAFMT(*TEXT) REPLACE(*YES)"
                system "$***REMOVED***CMD***REMOVED***"
                # touch -r "$***REMOVED***HFILE***REMOVED***" "$***REMOVED***DEST***REMOVED***"
                rm -f tmphdrfile
        fi

        IFSFILE="$***REMOVED***IFSDIR***REMOVED***/include/`basename \"$***REMOVED***HFILE***REMOVED***\"`"

        if action_needed "$***REMOVED***IFSFILE***REMOVED***" "$***REMOVED***DEST***REMOVED***"
        then    rm -f "$***REMOVED***IFSFILE***REMOVED***"
                ln -s "$***REMOVED***DEST***REMOVED***" "$***REMOVED***IFSFILE***REMOVED***"
        fi
done


#       Install the ILE/RPG header file.


HFILE="$***REMOVED***SCRIPTDIR***REMOVED***/zlib.inc"
DEST="$***REMOVED***SRCPF***REMOVED***/ZLIB.INC.MBR"

if action_needed "$***REMOVED***DEST***REMOVED***" "$***REMOVED***HFILE***REMOVED***"
then    CMD="CPY OBJ('$***REMOVED***HFILE***REMOVED***') TOOBJ('$***REMOVED***DEST***REMOVED***')"
        CMD="$***REMOVED***CMD***REMOVED*** TOCCSID($***REMOVED***TGTCCSID***REMOVED***) DTAFMT(*TEXT) REPLACE(*YES)"
        system "$***REMOVED***CMD***REMOVED***"
        # touch -r "$***REMOVED***HFILE***REMOVED***" "$***REMOVED***DEST***REMOVED***"
fi

IFSFILE="$***REMOVED***IFSDIR***REMOVED***/include/`basename \"$***REMOVED***HFILE***REMOVED***\"`"

if action_needed "$***REMOVED***IFSFILE***REMOVED***" "$***REMOVED***DEST***REMOVED***"
then    rm -f "$***REMOVED***IFSFILE***REMOVED***"
        ln -s "$***REMOVED***DEST***REMOVED***" "$***REMOVED***IFSFILE***REMOVED***"
fi


#      Create and compile the identification source file.

echo '#pragma comment(user, "ZLIB version '"$***REMOVED***VERSION***REMOVED***"'")' > os400.c
echo '#pragma comment(user, __DATE__)' >> os400.c
echo '#pragma comment(user, __TIME__)' >> os400.c
echo '#pragma comment(copyright, "Copyright (C) 1995-2017 Jean-Loup Gailly, Mark Adler. OS/400 version by P. Monnerat.")' >> os400.c
make_module     OS400           os400.c
LINK=                           # No need to rebuild service program yet.
MODULES=


#       Get source list.

CSOURCES=`sed -e '/<source name="/!d'                                   \
    -e 's/.* name="\([^"]*\)".*/\1/' < treebuild.xml`

#       Compile the sources into modules.

for SRC in $***REMOVED***CSOURCES***REMOVED***
do      MODULE=`db2_name "$***REMOVED***SRC***REMOVED***"`
        make_module "$***REMOVED***MODULE***REMOVED***" "$***REMOVED***SRC***REMOVED***"
done


#       If needed, (re)create the static binding directory.

if action_needed "$***REMOVED***LIBIFSNAME***REMOVED***/$***REMOVED***STATBNDDIR***REMOVED***.BNDDIR"
then    LINK=YES
fi

if [ "$***REMOVED***LINK***REMOVED***" ]
then    rm -rf "$***REMOVED***LIBIFSNAME***REMOVED***/$***REMOVED***STATBNDDIR***REMOVED***.BNDDIR"
        CMD="CRTBNDDIR BNDDIR($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***STATBNDDIR***REMOVED***)"
        CMD="$***REMOVED***CMD***REMOVED*** TEXT('ZLIB static binding directory')"
        system "$***REMOVED***CMD***REMOVED***"

        for MODULE in $***REMOVED***MODULES***REMOVED***
        do      CMD="ADDBNDDIRE BNDDIR($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***STATBNDDIR***REMOVED***)"
                CMD="$***REMOVED***CMD***REMOVED*** OBJ(($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***MODULE***REMOVED*** *MODULE))"
                system "$***REMOVED***CMD***REMOVED***"
        done
fi


#       The exportation file for service program creation must be in a DB2
#               source file, so make sure it exists.

if action_needed "$***REMOVED***LIBIFSNAME***REMOVED***/TOOLS.FILE"
then    CMD="CRTSRCPF FILE($***REMOVED***TARGETLIB***REMOVED***/TOOLS) RCDLEN(112)"
        CMD="$***REMOVED***CMD***REMOVED*** CCSID($***REMOVED***TGTCCSID***REMOVED***) TEXT('ZLIB: build tools')"
        system "$***REMOVED***CMD***REMOVED***"
fi


DEST="$***REMOVED***LIBIFSNAME***REMOVED***/TOOLS.FILE/BNDSRC.MBR"

if action_needed "$***REMOVED***SCRIPTDIR***REMOVED***/bndsrc" "$***REMOVED***DEST***REMOVED***"
then    CMD="CPY OBJ('$***REMOVED***SCRIPTDIR***REMOVED***/bndsrc') TOOBJ('$***REMOVED***DEST***REMOVED***')"
        CMD="$***REMOVED***CMD***REMOVED*** TOCCSID($***REMOVED***TGTCCSID***REMOVED***) DTAFMT(*TEXT) REPLACE(*YES)"
        system "$***REMOVED***CMD***REMOVED***"
        # touch -r "$***REMOVED***SCRIPTDIR***REMOVED***/bndsrc" "$***REMOVED***DEST***REMOVED***"
        LINK=YES
fi


#       Build the service program if needed.

if action_needed "$***REMOVED***LIBIFSNAME***REMOVED***/$***REMOVED***SRVPGM***REMOVED***.SRVPGM"
then    LINK=YES
fi

if [ "$***REMOVED***LINK***REMOVED***" ]
then    CMD="CRTSRVPGM SRVPGM($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***SRVPGM***REMOVED***)"
        CMD="$***REMOVED***CMD***REMOVED*** SRCFILE($***REMOVED***TARGETLIB***REMOVED***/TOOLS) SRCMBR(BNDSRC)"
        CMD="$***REMOVED***CMD***REMOVED*** MODULE($***REMOVED***TARGETLIB***REMOVED***/OS400)"
        CMD="$***REMOVED***CMD***REMOVED*** BNDDIR($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***STATBNDDIR***REMOVED***)"
        CMD="$***REMOVED***CMD***REMOVED*** TEXT('ZLIB $***REMOVED***VERSION***REMOVED*** dynamic library')"
        CMD="$***REMOVED***CMD***REMOVED*** TGTRLS($***REMOVED***TGTRLS***REMOVED***)"
        system "$***REMOVED***CMD***REMOVED***"
        LINK=YES

        #       Duplicate the service program for a versioned backup.

        BACKUP=`echo "$***REMOVED***SRVPGM***REMOVED***$***REMOVED***VERSION***REMOVED***"                              |
                sed -e 's/.*\(..........\)$/\1/' -e 's/\./_/g'`
        BACKUP="`db2_name \"$***REMOVED***BACKUP***REMOVED***\"`"
        BKUPIFSNAME="$***REMOVED***LIBIFSNAME***REMOVED***/$***REMOVED***BACKUP***REMOVED***.SRVPGM"
        rm -f "$***REMOVED***BKUPIFSNAME***REMOVED***"
        CMD="CRTDUPOBJ OBJ($***REMOVED***SRVPGM***REMOVED***) FROMLIB($***REMOVED***TARGETLIB***REMOVED***)"
        CMD="$***REMOVED***CMD***REMOVED*** OBJTYPE(*SRVPGM) NEWOBJ($***REMOVED***BACKUP***REMOVED***)"
        system "$***REMOVED***CMD***REMOVED***"
fi


#       If needed, (re)create the dynamic binding directory.

if action_needed "$***REMOVED***LIBIFSNAME***REMOVED***/$***REMOVED***DYNBNDDIR***REMOVED***.BNDDIR"
then    LINK=YES
fi

if [ "$***REMOVED***LINK***REMOVED***" ]
then    rm -rf "$***REMOVED***LIBIFSNAME***REMOVED***/$***REMOVED***DYNBNDDIR***REMOVED***.BNDDIR"
        CMD="CRTBNDDIR BNDDIR($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***DYNBNDDIR***REMOVED***)"
        CMD="$***REMOVED***CMD***REMOVED*** TEXT('ZLIB dynamic binding directory')"
        system "$***REMOVED***CMD***REMOVED***"
        CMD="ADDBNDDIRE BNDDIR($***REMOVED***TARGETLIB***REMOVED***/$***REMOVED***DYNBNDDIR***REMOVED***)"
        CMD="$***REMOVED***CMD***REMOVED*** OBJ((*LIBL/$***REMOVED***SRVPGM***REMOVED*** *SRVPGM))"
        system "$***REMOVED***CMD***REMOVED***"
fi
