"use strict";
var $protobuf = require("../..");
module.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(require("../../google/protobuf/descriptor.json")).lookup(".google.protobuf");

var Namespace = $protobuf.Namespace,
    Root      = $protobuf.Root,
    Enum      = $protobuf.Enum,
    Type      = $protobuf.Type,
    Field     = $protobuf.Field,
    MapField  = $protobuf.MapField,
    OneOf     = $protobuf.OneOf,
    Service   = $protobuf.Service,
    Method    = $protobuf.Method;

// --- Root ---

/**
 * Properties of a FileDescriptorSet message.
 * @interface IFileDescriptorSet
 * @property ***REMOVED***IFileDescriptorProto[]***REMOVED*** file Files
 */

/**
 * Properties of a FileDescriptorProto message.
 * @interface IFileDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] File name
 * @property ***REMOVED***string***REMOVED*** [package] Package
 * @property ***REMOVED*******REMOVED*** [dependency] Not supported
 * @property ***REMOVED*******REMOVED*** [publicDependency] Not supported
 * @property ***REMOVED*******REMOVED*** [weakDependency] Not supported
 * @property ***REMOVED***IDescriptorProto[]***REMOVED*** [messageType] Nested message types
 * @property ***REMOVED***IEnumDescriptorProto[]***REMOVED*** [enumType] Nested enums
 * @property ***REMOVED***IServiceDescriptorProto[]***REMOVED*** [service] Nested services
 * @property ***REMOVED***IFieldDescriptorProto[]***REMOVED*** [extension] Nested extension fields
 * @property ***REMOVED***IFileOptions***REMOVED*** [options] Options
 * @property ***REMOVED*******REMOVED*** [sourceCodeInfo] Not supported
 * @property ***REMOVED***string***REMOVED*** [syntax="proto2"] Syntax
 */

/**
 * Properties of a FileOptions message.
 * @interface IFileOptions
 * @property ***REMOVED***string***REMOVED*** [javaPackage]
 * @property ***REMOVED***string***REMOVED*** [javaOuterClassname]
 * @property ***REMOVED***boolean***REMOVED*** [javaMultipleFiles]
 * @property ***REMOVED***boolean***REMOVED*** [javaGenerateEqualsAndHash]
 * @property ***REMOVED***boolean***REMOVED*** [javaStringCheckUtf8]
 * @property ***REMOVED***IFileOptionsOptimizeMode***REMOVED*** [optimizeFor=1]
 * @property ***REMOVED***string***REMOVED*** [goPackage]
 * @property ***REMOVED***boolean***REMOVED*** [ccGenericServices]
 * @property ***REMOVED***boolean***REMOVED*** [javaGenericServices]
 * @property ***REMOVED***boolean***REMOVED*** [pyGenericServices]
 * @property ***REMOVED***boolean***REMOVED*** [deprecated]
 * @property ***REMOVED***boolean***REMOVED*** [ccEnableArenas]
 * @property ***REMOVED***string***REMOVED*** [objcClassPrefix]
 * @property ***REMOVED***string***REMOVED*** [csharpNamespace]
 */

/**
 * Values of he FileOptions.OptimizeMode enum.
 * @typedef IFileOptionsOptimizeMode
 * @type ***REMOVED***number***REMOVED***
 * @property ***REMOVED***number***REMOVED*** SPEED=1
 * @property ***REMOVED***number***REMOVED*** CODE_SIZE=2
 * @property ***REMOVED***number***REMOVED*** LITE_RUNTIME=3
 */

/**
 * Creates a root from a descriptor set.
 * @param ***REMOVED***IFileDescriptorSet|Reader|Uint8Array***REMOVED*** descriptor Descriptor
 * @returns ***REMOVED***Root***REMOVED*** Root instance
 */
Root.fromDescriptor = function fromDescriptor(descriptor) ***REMOVED***

    // Decode the descriptor message if specified as a buffer:
    if (typeof descriptor.length === "number")
        descriptor = exports.FileDescriptorSet.decode(descriptor);

    var root = new Root();

    if (descriptor.file) ***REMOVED***
        var fileDescriptor,
            filePackage;
        for (var j = 0, i; j < descriptor.file.length; ++j) ***REMOVED***
            filePackage = root;
            if ((fileDescriptor = descriptor.file[j])["package"] && fileDescriptor["package"].length)
                filePackage = root.define(fileDescriptor["package"]);
            if (fileDescriptor.name && fileDescriptor.name.length)
                root.files.push(filePackage.filename = fileDescriptor.name);
            if (fileDescriptor.messageType)
                for (i = 0; i < fileDescriptor.messageType.length; ++i)
                    filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));
            if (fileDescriptor.enumType)
                for (i = 0; i < fileDescriptor.enumType.length; ++i)
                    filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));
            if (fileDescriptor.extension)
                for (i = 0; i < fileDescriptor.extension.length; ++i)
                    filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));
            var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);
            if (opts) ***REMOVED***
                var ks = Object.keys(opts);
                for (i = 0; i < ks.length; ++i)
                    filePackage.setOption(ks[i], opts[ks[i]]);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    return root;
***REMOVED***;

/**
 * Converts a root to a descriptor set.
 * @returns ***REMOVED***Message<IFileDescriptorSet>***REMOVED*** Descriptor
 * @param ***REMOVED***string***REMOVED*** [syntax="proto2"] Syntax
 */
Root.prototype.toDescriptor = function toDescriptor(syntax) ***REMOVED***
    var set = exports.FileDescriptorSet.create();
    Root_toDescriptorRecursive(this, set.file, syntax);
    return set;
***REMOVED***;

// Traverses a namespace and assembles the descriptor set
function Root_toDescriptorRecursive(ns, files, syntax) ***REMOVED***

    // Create a new file
    var file = exports.FileDescriptorProto.create(***REMOVED*** name: ns.filename || (ns.fullName.substring(1).replace(/\./g, "_") || "root") + ".proto" ***REMOVED***);
    if (syntax)
        file.syntax = syntax;
    if (!(ns instanceof Root))
        file["package"] = ns.fullName.substring(1);

    // Add nested types
    for (var i = 0, nested; i < ns.nestedArray.length; ++i)
        if ((nested = ns._nestedArray[i]) instanceof Type)
            file.messageType.push(nested.toDescriptor(syntax));
        else if (nested instanceof Enum)
            file.enumType.push(nested.toDescriptor());
        else if (nested instanceof Field)
            file.extension.push(nested.toDescriptor(syntax));
        else if (nested instanceof Service)
            file.service.push(nested.toDescriptor());
        else if (nested instanceof /* plain */ Namespace)
            Root_toDescriptorRecursive(nested, files, syntax); // requires new file

    // Keep package-level options
    file.options = toDescriptorOptions(ns.options, exports.FileOptions);

    // And keep the file only if there is at least one nested object
    if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length)
        files.push(file);
***REMOVED***

// --- Type ---

/**
 * Properties of a DescriptorProto message.
 * @interface IDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] Message type name
 * @property ***REMOVED***IFieldDescriptorProto[]***REMOVED*** [field] Fields
 * @property ***REMOVED***IFieldDescriptorProto[]***REMOVED*** [extension] Extension fields
 * @property ***REMOVED***IDescriptorProto[]***REMOVED*** [nestedType] Nested message types
 * @property ***REMOVED***IEnumDescriptorProto[]***REMOVED*** [enumType] Nested enums
 * @property ***REMOVED***IDescriptorProtoExtensionRange[]***REMOVED*** [extensionRange] Extension ranges
 * @property ***REMOVED***IOneofDescriptorProto[]***REMOVED*** [oneofDecl] Oneofs
 * @property ***REMOVED***IMessageOptions***REMOVED*** [options] Not supported
 * @property ***REMOVED***IDescriptorProtoReservedRange[]***REMOVED*** [reservedRange] Reserved ranges
 * @property ***REMOVED***string[]***REMOVED*** [reservedName] Reserved names
 */

/**
 * Properties of a MessageOptions message.
 * @interface IMessageOptions
 * @property ***REMOVED***boolean***REMOVED*** [mapEntry=false] Whether this message is a map entry
 */

/**
 * Properties of an ExtensionRange message.
 * @interface IDescriptorProtoExtensionRange
 * @property ***REMOVED***number***REMOVED*** [start] Start field id
 * @property ***REMOVED***number***REMOVED*** [end] End field id
 */

/**
 * Properties of a ReservedRange message.
 * @interface IDescriptorProtoReservedRange
 * @property ***REMOVED***number***REMOVED*** [start] Start field id
 * @property ***REMOVED***number***REMOVED*** [end] End field id
 */

var unnamedMessageIndex = 0;

/**
 * Creates a type from a descriptor.
 * @param ***REMOVED***IDescriptorProto|Reader|Uint8Array***REMOVED*** descriptor Descriptor
 * @param ***REMOVED***string***REMOVED*** [syntax="proto2"] Syntax
 * @returns ***REMOVED***Type***REMOVED*** Type instance
 */
Type.fromDescriptor = function fromDescriptor(descriptor, syntax) ***REMOVED***

    // Decode the descriptor message if specified as a buffer:
    if (typeof descriptor.length === "number")
        descriptor = exports.DescriptorProto.decode(descriptor);

    // Create the message type
    var type = new Type(descriptor.name.length ? descriptor.name : "Type" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports.MessageOptions)),
        i;

    /* Oneofs */ if (descriptor.oneofDecl)
        for (i = 0; i < descriptor.oneofDecl.length; ++i)
            type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));
    /* Fields */ if (descriptor.field)
        for (i = 0; i < descriptor.field.length; ++i) ***REMOVED***
            var field = Field.fromDescriptor(descriptor.field[i], syntax);
            type.add(field);
            if (descriptor.field[i].hasOwnProperty("oneofIndex")) // eslint-disable-line no-prototype-builtins
                type.oneofsArray[descriptor.field[i].oneofIndex].add(field);
        ***REMOVED***
    /* Extension fields */ if (descriptor.extension)
        for (i = 0; i < descriptor.extension.length; ++i)
            type.add(Field.fromDescriptor(descriptor.extension[i], syntax));
    /* Nested types */ if (descriptor.nestedType)
        for (i = 0; i < descriptor.nestedType.length; ++i) ***REMOVED***
            type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));
            if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry)
                type.setOption("map_entry", true);
        ***REMOVED***
    /* Nested enums */ if (descriptor.enumType)
        for (i = 0; i < descriptor.enumType.length; ++i)
            type.add(Enum.fromDescriptor(descriptor.enumType[i]));
    /* Extension ranges */ if (descriptor.extensionRange && descriptor.extensionRange.length) ***REMOVED***
        type.extensions = [];
        for (i = 0; i < descriptor.extensionRange.length; ++i)
            type.extensions.push([ descriptor.extensionRange[i].start, descriptor.extensionRange[i].end ]);
    ***REMOVED***
    /* Reserved... */ if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) ***REMOVED***
        type.reserved = [];
        /* Ranges */ if (descriptor.reservedRange)
            for (i = 0; i < descriptor.reservedRange.length; ++i)
                type.reserved.push([ descriptor.reservedRange[i].start, descriptor.reservedRange[i].end ]);
        /* Names */ if (descriptor.reservedName)
            for (i = 0; i < descriptor.reservedName.length; ++i)
                type.reserved.push(descriptor.reservedName[i]);
    ***REMOVED***

    return type;
***REMOVED***;

/**
 * Converts a type to a descriptor.
 * @returns ***REMOVED***Message<IDescriptorProto>***REMOVED*** Descriptor
 * @param ***REMOVED***string***REMOVED*** [syntax="proto2"] Syntax
 */
Type.prototype.toDescriptor = function toDescriptor(syntax) ***REMOVED***
    var descriptor = exports.DescriptorProto.create(***REMOVED*** name: this.name ***REMOVED***),
        i;

    /* Fields */ for (i = 0; i < this.fieldsArray.length; ++i) ***REMOVED***
        var fieldDescriptor;
        descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));
        if (this._fieldsArray[i] instanceof MapField) ***REMOVED*** // map fields are repeated FieldNameEntry
            var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType),
                valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType),
                valueTypeName = valueType === /* type */ 11 || valueType === /* enum */ 14
                    ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type
                    : undefined;
            descriptor.nestedType.push(exports.DescriptorProto.create(***REMOVED***
                name: fieldDescriptor.typeName,
                field: [
                    exports.FieldDescriptorProto.create(***REMOVED*** name: "key", number: 1, label: 1, type: keyType ***REMOVED***), // can't reference a type or enum
                    exports.FieldDescriptorProto.create(***REMOVED*** name: "value", number: 2, label: 1, type: valueType, typeName: valueTypeName ***REMOVED***)
                ],
                options: exports.MessageOptions.create(***REMOVED*** mapEntry: true ***REMOVED***)
            ***REMOVED***));
        ***REMOVED***
    ***REMOVED***
    /* Oneofs */ for (i = 0; i < this.oneofsArray.length; ++i)
        descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());
    /* Nested... */ for (i = 0; i < this.nestedArray.length; ++i) ***REMOVED***
        /* Extension fields */ if (this._nestedArray[i] instanceof Field)
            descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));
        /* Types */ else if (this._nestedArray[i] instanceof Type)
            descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));
        /* Enums */ else if (this._nestedArray[i] instanceof Enum)
            descriptor.enumType.push(this._nestedArray[i].toDescriptor());
        // plain nested namespaces become packages instead in Root#toDescriptor
    ***REMOVED***
    /* Extension ranges */ if (this.extensions)
        for (i = 0; i < this.extensions.length; ++i)
            descriptor.extensionRange.push(exports.DescriptorProto.ExtensionRange.create(***REMOVED*** start: this.extensions[i][0], end: this.extensions[i][1] ***REMOVED***));
    /* Reserved... */ if (this.reserved)
        for (i = 0; i < this.reserved.length; ++i)
            /* Names */ if (typeof this.reserved[i] === "string")
                descriptor.reservedName.push(this.reserved[i]);
            /* Ranges */ else
                descriptor.reservedRange.push(exports.DescriptorProto.ReservedRange.create(***REMOVED*** start: this.reserved[i][0], end: this.reserved[i][1] ***REMOVED***));

    descriptor.options = toDescriptorOptions(this.options, exports.MessageOptions);

    return descriptor;
***REMOVED***;

// --- Field ---

/**
 * Properties of a FieldDescriptorProto message.
 * @interface IFieldDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] Field name
 * @property ***REMOVED***number***REMOVED*** [number] Field id
 * @property ***REMOVED***IFieldDescriptorProtoLabel***REMOVED*** [label] Field rule
 * @property ***REMOVED***IFieldDescriptorProtoType***REMOVED*** [type] Field basic type
 * @property ***REMOVED***string***REMOVED*** [typeName] Field type name
 * @property ***REMOVED***string***REMOVED*** [extendee] Extended type name
 * @property ***REMOVED***string***REMOVED*** [defaultValue] Literal default value
 * @property ***REMOVED***number***REMOVED*** [oneofIndex] Oneof index if part of a oneof
 * @property ***REMOVED*******REMOVED*** [jsonName] Not supported
 * @property ***REMOVED***IFieldOptions***REMOVED*** [options] Field options
 */

/**
 * Values of the FieldDescriptorProto.Label enum.
 * @typedef IFieldDescriptorProtoLabel
 * @type ***REMOVED***number***REMOVED***
 * @property ***REMOVED***number***REMOVED*** LABEL_OPTIONAL=1
 * @property ***REMOVED***number***REMOVED*** LABEL_REQUIRED=2
 * @property ***REMOVED***number***REMOVED*** LABEL_REPEATED=3
 */

/**
 * Values of the FieldDescriptorProto.Type enum.
 * @typedef IFieldDescriptorProtoType
 * @type ***REMOVED***number***REMOVED***
 * @property ***REMOVED***number***REMOVED*** TYPE_DOUBLE=1
 * @property ***REMOVED***number***REMOVED*** TYPE_FLOAT=2
 * @property ***REMOVED***number***REMOVED*** TYPE_INT64=3
 * @property ***REMOVED***number***REMOVED*** TYPE_UINT64=4
 * @property ***REMOVED***number***REMOVED*** TYPE_INT32=5
 * @property ***REMOVED***number***REMOVED*** TYPE_FIXED64=6
 * @property ***REMOVED***number***REMOVED*** TYPE_FIXED32=7
 * @property ***REMOVED***number***REMOVED*** TYPE_BOOL=8
 * @property ***REMOVED***number***REMOVED*** TYPE_STRING=9
 * @property ***REMOVED***number***REMOVED*** TYPE_GROUP=10
 * @property ***REMOVED***number***REMOVED*** TYPE_MESSAGE=11
 * @property ***REMOVED***number***REMOVED*** TYPE_BYTES=12
 * @property ***REMOVED***number***REMOVED*** TYPE_UINT32=13
 * @property ***REMOVED***number***REMOVED*** TYPE_ENUM=14
 * @property ***REMOVED***number***REMOVED*** TYPE_SFIXED32=15
 * @property ***REMOVED***number***REMOVED*** TYPE_SFIXED64=16
 * @property ***REMOVED***number***REMOVED*** TYPE_SINT32=17
 * @property ***REMOVED***number***REMOVED*** TYPE_SINT64=18
 */

/**
 * Properties of a FieldOptions message.
 * @interface IFieldOptions
 * @property ***REMOVED***boolean***REMOVED*** [packed] Whether packed or not (defaults to `false` for proto2 and `true` for proto3)
 * @property ***REMOVED***IFieldOptionsJSType***REMOVED*** [jstype] JavaScript value type (not used by protobuf.js)
 */

/**
 * Values of the FieldOptions.JSType enum.
 * @typedef IFieldOptionsJSType
 * @type ***REMOVED***number***REMOVED***
 * @property ***REMOVED***number***REMOVED*** JS_NORMAL=0
 * @property ***REMOVED***number***REMOVED*** JS_STRING=1
 * @property ***REMOVED***number***REMOVED*** JS_NUMBER=2
 */

// copied here from parse.js
var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;

/**
 * Creates a field from a descriptor.
 * @param ***REMOVED***IFieldDescriptorProto|Reader|Uint8Array***REMOVED*** descriptor Descriptor
 * @param ***REMOVED***string***REMOVED*** [syntax="proto2"] Syntax
 * @returns ***REMOVED***Field***REMOVED*** Field instance
 */
Field.fromDescriptor = function fromDescriptor(descriptor, syntax) ***REMOVED***

    // Decode the descriptor message if specified as a buffer:
    if (typeof descriptor.length === "number")
        descriptor = exports.DescriptorProto.decode(descriptor);

    if (typeof descriptor.number !== "number")
        throw Error("missing field id");

    // Rewire field type
    var fieldType;
    if (descriptor.typeName && descriptor.typeName.length)
        fieldType = descriptor.typeName;
    else
        fieldType = fromDescriptorType(descriptor.type);

    // Rewire field rule
    var fieldRule;
    switch (descriptor.label) ***REMOVED***
        // 0 is reserved for errors
        case 1: fieldRule = undefined; break;
        case 2: fieldRule = "required"; break;
        case 3: fieldRule = "repeated"; break;
        default: throw Error("illegal label: " + descriptor.label);
    ***REMOVED***

	var extendee = descriptor.extendee;
	if (descriptor.extendee !== undefined) ***REMOVED***
		extendee = extendee.length ? extendee : undefined;
	***REMOVED***
    var field = new Field(
        descriptor.name.length ? descriptor.name : "field" + descriptor.number,
        descriptor.number,
        fieldType,
        fieldRule,
        extendee
    );

    field.options = fromDescriptorOptions(descriptor.options, exports.FieldOptions);

    if (descriptor.defaultValue && descriptor.defaultValue.length) ***REMOVED***
        var defaultValue = descriptor.defaultValue;
        switch (defaultValue) ***REMOVED***
            case "true": case "TRUE":
                defaultValue = true;
                break;
            case "false": case "FALSE":
                defaultValue = false;
                break;
            default:
                var match = numberRe.exec(defaultValue);
                if (match)
                    defaultValue = parseInt(defaultValue); // eslint-disable-line radix
                break;
        ***REMOVED***
        field.setOption("default", defaultValue);
    ***REMOVED***

    if (packableDescriptorType(descriptor.type)) ***REMOVED***
        if (syntax === "proto3") ***REMOVED*** // defaults to packed=true (internal preset is packed=true)
            if (descriptor.options && !descriptor.options.packed)
                field.setOption("packed", false);
        ***REMOVED*** else if (!(descriptor.options && descriptor.options.packed)) // defaults to packed=false
            field.setOption("packed", false);
    ***REMOVED***

    return field;
***REMOVED***;

/**
 * Converts a field to a descriptor.
 * @returns ***REMOVED***Message<IFieldDescriptorProto>***REMOVED*** Descriptor
 * @param ***REMOVED***string***REMOVED*** [syntax="proto2"] Syntax
 */
Field.prototype.toDescriptor = function toDescriptor(syntax) ***REMOVED***
    var descriptor = exports.FieldDescriptorProto.create(***REMOVED*** name: this.name, number: this.id ***REMOVED***);

    if (this.map) ***REMOVED***

        descriptor.type = 11; // message
        descriptor.typeName = $protobuf.util.ucFirst(this.name); // fieldName -> FieldNameEntry (built in Type#toDescriptor)
        descriptor.label = 3; // repeated

    ***REMOVED*** else ***REMOVED***

        // Rewire field type
        switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) ***REMOVED***
            case 10: // group
            case 11: // type
            case 14: // enum
                descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;
                break;
        ***REMOVED***

        // Rewire field rule
        switch (this.rule) ***REMOVED***
            case "repeated": descriptor.label = 3; break;
            case "required": descriptor.label = 2; break;
            default: descriptor.label = 1; break;
        ***REMOVED***

    ***REMOVED***

    // Handle extension field
    descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;

    // Handle part of oneof
    if (this.partOf)
        if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0)
            throw Error("missing oneof");

    if (this.options) ***REMOVED***
        descriptor.options = toDescriptorOptions(this.options, exports.FieldOptions);
        if (this.options["default"] != null)
            descriptor.defaultValue = String(this.options["default"]);
    ***REMOVED***

    if (syntax === "proto3") ***REMOVED*** // defaults to packed=true
        if (!this.packed)
            (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = false;
    ***REMOVED*** else if (this.packed) // defaults to packed=false
        (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = true;

    return descriptor;
***REMOVED***;

// --- Enum ---

/**
 * Properties of an EnumDescriptorProto message.
 * @interface IEnumDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] Enum name
 * @property ***REMOVED***IEnumValueDescriptorProto[]***REMOVED*** [value] Enum values
 * @property ***REMOVED***IEnumOptions***REMOVED*** [options] Enum options
 */

/**
 * Properties of an EnumValueDescriptorProto message.
 * @interface IEnumValueDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] Name
 * @property ***REMOVED***number***REMOVED*** [number] Value
 * @property ***REMOVED*******REMOVED*** [options] Not supported
 */

/**
 * Properties of an EnumOptions message.
 * @interface IEnumOptions
 * @property ***REMOVED***boolean***REMOVED*** [allowAlias] Whether aliases are allowed
 * @property ***REMOVED***boolean***REMOVED*** [deprecated]
 */

var unnamedEnumIndex = 0;

/**
 * Creates an enum from a descriptor.
 * @param ***REMOVED***IEnumDescriptorProto|Reader|Uint8Array***REMOVED*** descriptor Descriptor
 * @returns ***REMOVED***Enum***REMOVED*** Enum instance
 */
Enum.fromDescriptor = function fromDescriptor(descriptor) ***REMOVED***

    // Decode the descriptor message if specified as a buffer:
    if (typeof descriptor.length === "number")
        descriptor = exports.EnumDescriptorProto.decode(descriptor);

    // Construct values object
    var values = ***REMOVED******REMOVED***;
    if (descriptor.value)
        for (var i = 0; i < descriptor.value.length; ++i) ***REMOVED***
            var name  = descriptor.value[i].name,
                value = descriptor.value[i].number || 0;
            values[name && name.length ? name : "NAME" + value] = value;
        ***REMOVED***

    return new Enum(
        descriptor.name && descriptor.name.length ? descriptor.name : "Enum" + unnamedEnumIndex++,
        values,
        fromDescriptorOptions(descriptor.options, exports.EnumOptions)
    );
***REMOVED***;

/**
 * Converts an enum to a descriptor.
 * @returns ***REMOVED***Message<IEnumDescriptorProto>***REMOVED*** Descriptor
 */
Enum.prototype.toDescriptor = function toDescriptor() ***REMOVED***

    // Values
    var values = [];
    for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)
        values.push(exports.EnumValueDescriptorProto.create(***REMOVED*** name: ks[i], number: this.values[ks[i]] ***REMOVED***));

    return exports.EnumDescriptorProto.create(***REMOVED***
        name: this.name,
        value: values,
        options: toDescriptorOptions(this.options, exports.EnumOptions)
    ***REMOVED***);
***REMOVED***;

// --- OneOf ---

/**
 * Properties of a OneofDescriptorProto message.
 * @interface IOneofDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] Oneof name
 * @property ***REMOVED*******REMOVED*** [options] Not supported
 */

var unnamedOneofIndex = 0;

/**
 * Creates a oneof from a descriptor.
 * @param ***REMOVED***IOneofDescriptorProto|Reader|Uint8Array***REMOVED*** descriptor Descriptor
 * @returns ***REMOVED***OneOf***REMOVED*** OneOf instance
 */
OneOf.fromDescriptor = function fromDescriptor(descriptor) ***REMOVED***

    // Decode the descriptor message if specified as a buffer:
    if (typeof descriptor.length === "number")
        descriptor = exports.OneofDescriptorProto.decode(descriptor);

    return new OneOf(
        // unnamedOneOfIndex is global, not per type, because we have no ref to a type here
        descriptor.name && descriptor.name.length ? descriptor.name : "oneof" + unnamedOneofIndex++
        // fromDescriptorOptions(descriptor.options, exports.OneofOptions) - only uninterpreted_option
    );
***REMOVED***;

/**
 * Converts a oneof to a descriptor.
 * @returns ***REMOVED***Message<IOneofDescriptorProto>***REMOVED*** Descriptor
 */
OneOf.prototype.toDescriptor = function toDescriptor() ***REMOVED***
    return exports.OneofDescriptorProto.create(***REMOVED***
        name: this.name
        // options: toDescriptorOptions(this.options, exports.OneofOptions) - only uninterpreted_option
    ***REMOVED***);
***REMOVED***;

// --- Service ---

/**
 * Properties of a ServiceDescriptorProto message.
 * @interface IServiceDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] Service name
 * @property ***REMOVED***IMethodDescriptorProto[]***REMOVED*** [method] Methods
 * @property ***REMOVED***IServiceOptions***REMOVED*** [options] Options
 */

/**
 * Properties of a ServiceOptions message.
 * @interface IServiceOptions
 * @property ***REMOVED***boolean***REMOVED*** [deprecated]
 */

var unnamedServiceIndex = 0;

/**
 * Creates a service from a descriptor.
 * @param ***REMOVED***IServiceDescriptorProto|Reader|Uint8Array***REMOVED*** descriptor Descriptor
 * @returns ***REMOVED***Service***REMOVED*** Service instance
 */
Service.fromDescriptor = function fromDescriptor(descriptor) ***REMOVED***

    // Decode the descriptor message if specified as a buffer:
    if (typeof descriptor.length === "number")
        descriptor = exports.ServiceDescriptorProto.decode(descriptor);

    var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : "Service" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports.ServiceOptions));
    if (descriptor.method)
        for (var i = 0; i < descriptor.method.length; ++i)
            service.add(Method.fromDescriptor(descriptor.method[i]));

    return service;
***REMOVED***;

/**
 * Converts a service to a descriptor.
 * @returns ***REMOVED***Message<IServiceDescriptorProto>***REMOVED*** Descriptor
 */
Service.prototype.toDescriptor = function toDescriptor() ***REMOVED***

    // Methods
    var methods = [];
    for (var i = 0; i < this.methodsArray; ++i)
        methods.push(this._methodsArray[i].toDescriptor());

    return exports.ServiceDescriptorProto.create(***REMOVED***
        name: this.name,
        methods: methods,
        options: toDescriptorOptions(this.options, exports.ServiceOptions)
    ***REMOVED***);
***REMOVED***;

// --- Method ---

/**
 * Properties of a MethodDescriptorProto message.
 * @interface IMethodDescriptorProto
 * @property ***REMOVED***string***REMOVED*** [name] Method name
 * @property ***REMOVED***string***REMOVED*** [inputType] Request type name
 * @property ***REMOVED***string***REMOVED*** [outputType] Response type name
 * @property ***REMOVED***IMethodOptions***REMOVED*** [options] Not supported
 * @property ***REMOVED***boolean***REMOVED*** [clientStreaming=false] Whether requests are streamed
 * @property ***REMOVED***boolean***REMOVED*** [serverStreaming=false] Whether responses are streamed
 */

/**
 * Properties of a MethodOptions message.
 * @interface IMethodOptions
 * @property ***REMOVED***boolean***REMOVED*** [deprecated]
 */

var unnamedMethodIndex = 0;

/**
 * Creates a method from a descriptor.
 * @param ***REMOVED***IMethodDescriptorProto|Reader|Uint8Array***REMOVED*** descriptor Descriptor
 * @returns ***REMOVED***Method***REMOVED*** Reflected method instance
 */
Method.fromDescriptor = function fromDescriptor(descriptor) ***REMOVED***

    // Decode the descriptor message if specified as a buffer:
    if (typeof descriptor.length === "number")
        descriptor = exports.MethodDescriptorProto.decode(descriptor);

    return new Method(
        // unnamedMethodIndex is global, not per service, because we have no ref to a service here
        descriptor.name && descriptor.name.length ? descriptor.name : "Method" + unnamedMethodIndex++,
        "rpc",
        descriptor.inputType,
        descriptor.outputType,
        Boolean(descriptor.clientStreaming),
        Boolean(descriptor.serverStreaming),
        fromDescriptorOptions(descriptor.options, exports.MethodOptions)
    );
***REMOVED***;

/**
 * Converts a method to a descriptor.
 * @returns ***REMOVED***Message<IMethodDescriptorProto>***REMOVED*** Descriptor
 */
Method.prototype.toDescriptor = function toDescriptor() ***REMOVED***
    return exports.MethodDescriptorProto.create(***REMOVED***
        name: this.name,
        inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,
        outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,
        clientStreaming: this.requestStream,
        serverStreaming: this.responseStream,
        options: toDescriptorOptions(this.options, exports.MethodOptions)
    ***REMOVED***);
***REMOVED***;

// --- utility ---

// Converts a descriptor type to a protobuf.js basic type
function fromDescriptorType(type) ***REMOVED***
    switch (type) ***REMOVED***
        // 0 is reserved for errors
        case 1: return "double";
        case 2: return "float";
        case 3: return "int64";
        case 4: return "uint64";
        case 5: return "int32";
        case 6: return "fixed64";
        case 7: return "fixed32";
        case 8: return "bool";
        case 9: return "string";
        case 12: return "bytes";
        case 13: return "uint32";
        case 15: return "sfixed32";
        case 16: return "sfixed64";
        case 17: return "sint32";
        case 18: return "sint64";
    ***REMOVED***
    throw Error("illegal type: " + type);
***REMOVED***

// Tests if a descriptor type is packable
function packableDescriptorType(type) ***REMOVED***
    switch (type) ***REMOVED***
        case 1: // double
        case 2: // float
        case 3: // int64
        case 4: // uint64
        case 5: // int32
        case 6: // fixed64
        case 7: // fixed32
        case 8: // bool
        case 13: // uint32
        case 14: // enum (!)
        case 15: // sfixed32
        case 16: // sfixed64
        case 17: // sint32
        case 18: // sint64
            return true;
    ***REMOVED***
    return false;
***REMOVED***

// Converts a protobuf.js basic type to a descriptor type
function toDescriptorType(type, resolvedType) ***REMOVED***
    switch (type) ***REMOVED***
        // 0 is reserved for errors
        case "double": return 1;
        case "float": return 2;
        case "int64": return 3;
        case "uint64": return 4;
        case "int32": return 5;
        case "fixed64": return 6;
        case "fixed32": return 7;
        case "bool": return 8;
        case "string": return 9;
        case "bytes": return 12;
        case "uint32": return 13;
        case "sfixed32": return 15;
        case "sfixed64": return 16;
        case "sint32": return 17;
        case "sint64": return 18;
    ***REMOVED***
    if (resolvedType instanceof Enum)
        return 14;
    if (resolvedType instanceof Type)
        return resolvedType.group ? 10 : 11;
    throw Error("illegal type: " + type);
***REMOVED***

// Converts descriptor options to an options object
function fromDescriptorOptions(options, type) ***REMOVED***
    if (!options)
        return undefined;
    var out = [];
    for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i)
        if ((key = (field = type._fieldsArray[i]).name) !== "uninterpretedOption")
            if (options.hasOwnProperty(key)) ***REMOVED*** // eslint-disable-line no-prototype-builtins
                val = options[key];
                if (field.resolvedType instanceof Enum && typeof val === "number" && field.resolvedType.valuesById[val] !== undefined)
                    val = field.resolvedType.valuesById[val];
                out.push(underScore(key), val);
            ***REMOVED***
    return out.length ? $protobuf.util.toObject(out) : undefined;
***REMOVED***

// Converts an options object to descriptor options
function toDescriptorOptions(options, type) ***REMOVED***
    if (!options)
        return undefined;
    var out = [];
    for (var i = 0, ks = Object.keys(options), key, val; i < ks.length; ++i) ***REMOVED***
        val = options[key = ks[i]];
        if (key === "default")
            continue;
        var field = type.fields[key];
        if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)]))
            continue;
        out.push(key, val);
    ***REMOVED***
    return out.length ? type.fromObject($protobuf.util.toObject(out)) : undefined;
***REMOVED***

// Calculates the shortest relative path from `from` to `to`.
function shortname(from, to) ***REMOVED***
    var fromPath = from.fullName.split("."),
        toPath = to.fullName.split("."),
        i = 0,
        j = 0,
        k = toPath.length - 1;
    if (!(from instanceof Root) && to instanceof Namespace)
        while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) ***REMOVED***
            var other = to.lookup(fromPath[i++], true);
            if (other !== null && other !== to)
                break;
            ++j;
        ***REMOVED***
    else
        for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j);
    return toPath.slice(j).join(".");
***REMOVED***

// copied here from cli/targets/proto.js
function underScore(str) ***REMOVED***
    return str.substring(0,1)
         + str.substring(1)
               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) ***REMOVED*** return "_" + $1.toLowerCase(); ***REMOVED***);
***REMOVED***

// --- exports ---

/**
 * Reflected file descriptor set.
 * @name FileDescriptorSet
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected file descriptor proto.
 * @name FileDescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected descriptor proto.
 * @name DescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @property ***REMOVED***Type***REMOVED*** ExtensionRange
 * @property ***REMOVED***Type***REMOVED*** ReservedRange
 * @const
 * @tstype $protobuf.Type & ***REMOVED***
 *     ExtensionRange: $protobuf.Type,
 *     ReservedRange: $protobuf.Type
 * ***REMOVED***
 */

/**
 * Reflected field descriptor proto.
 * @name FieldDescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @property ***REMOVED***Enum***REMOVED*** Label
 * @property ***REMOVED***Enum***REMOVED*** Type
 * @const
 * @tstype $protobuf.Type & ***REMOVED***
 *     Label: $protobuf.Enum,
 *     Type: $protobuf.Enum
 * ***REMOVED***
 */

/**
 * Reflected oneof descriptor proto.
 * @name OneofDescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected enum descriptor proto.
 * @name EnumDescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected service descriptor proto.
 * @name ServiceDescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected enum value descriptor proto.
 * @name EnumValueDescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected method descriptor proto.
 * @name MethodDescriptorProto
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected file options.
 * @name FileOptions
 * @type ***REMOVED***Type***REMOVED***
 * @property ***REMOVED***Enum***REMOVED*** OptimizeMode
 * @const
 * @tstype $protobuf.Type & ***REMOVED***
 *     OptimizeMode: $protobuf.Enum
 * ***REMOVED***
 */

/**
 * Reflected message options.
 * @name MessageOptions
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected field options.
 * @name FieldOptions
 * @type ***REMOVED***Type***REMOVED***
 * @property ***REMOVED***Enum***REMOVED*** CType
 * @property ***REMOVED***Enum***REMOVED*** JSType
 * @const
 * @tstype $protobuf.Type & ***REMOVED***
 *     CType: $protobuf.Enum,
 *     JSType: $protobuf.Enum
 * ***REMOVED***
 */

/**
 * Reflected oneof options.
 * @name OneofOptions
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected enum options.
 * @name EnumOptions
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected enum value options.
 * @name EnumValueOptions
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected service options.
 * @name ServiceOptions
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected method options.
 * @name MethodOptions
 * @type ***REMOVED***Type***REMOVED***
 * @const
 * @tstype $protobuf.Type
 */

/**
 * Reflected uninterpretet option.
 * @name UninterpretedOption
 * @type ***REMOVED***Type***REMOVED***
 * @property ***REMOVED***Type***REMOVED*** NamePart
 * @const
 * @tstype $protobuf.Type & ***REMOVED***
 *     NamePart: $protobuf.Type
 * ***REMOVED***
 */

/**
 * Reflected source code info.
 * @name SourceCodeInfo
 * @type ***REMOVED***Type***REMOVED***
 * @property ***REMOVED***Type***REMOVED*** Location
 * @const
 * @tstype $protobuf.Type & ***REMOVED***
 *     Location: $protobuf.Type
 * ***REMOVED***
 */

/**
 * Reflected generated code info.
 * @name GeneratedCodeInfo
 * @type ***REMOVED***Type***REMOVED***
 * @property ***REMOVED***Type***REMOVED*** Annotation
 * @const
 * @tstype $protobuf.Type & ***REMOVED***
 *     Annotation: $protobuf.Type
 * ***REMOVED***
 */
