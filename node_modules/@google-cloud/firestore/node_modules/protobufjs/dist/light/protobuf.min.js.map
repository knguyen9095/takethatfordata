***REMOVED***"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","JSON","stringify","body","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","type","genValuePartial_toObject","converter","fromObject","mtype","fields","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","_fieldsArray","indexOf","missing","decoder","filter","group","ref","id","keyType","types","long","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","ReflectionObject","TypeError","valuesById","create","comments","reserved","constructor","className","Namespace","fromJSON","json","enm","toJSON","add","comment","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","rule","extend","isObject","ruleRe","toLowerCase","message","defaultValue","bytes","extensionField","declaringField","_packed","Type","defineProperty","get","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","load","root","Root","loadSync","build","verifier","OneOf","MapField","Service","Method","Message","wrappers","Reader","BufferReader","Writer","BufferWriter","rpc","roots","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","prev","setOptions","onAdd","onRemove","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","oneof","addFieldsToParent","self","oneofName","oneOfGetter","set","oneOfSetter","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skip","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","methodName","lcFirst","isReserved","m","q","s","oneofs","extensions","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","target","bake","o","key","safePropBackslashRe","safePropQuoteRe","ucFirst","str","toUpperCase","camelCaseRe","camelCase","a","decorateRoot","enumerable","decorateEnumIndex","zero","toNumber","zzEncode","zeroHash","from","parseInt","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","newError","CustomError","captureStackTrace","stack","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","type_url","substr","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) ***REMOVED***\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) ***REMOVED***\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = ***REMOVED*** exports: ***REMOVED******REMOVED*** ***REMOVED***, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    ***REMOVED***\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) ***REMOVED***\r\n            if (Long && Long.isLong) ***REMOVED***\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            ***REMOVED***\r\n            return protobuf;\r\n        ***REMOVED***);\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n***REMOVED***)/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by ***REMOVED***@link util.asPromise***REMOVED***.\r\n * @typedef asPromiseCallback\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Error|null***REMOVED*** error Error, if any\r\n * @param ***REMOVED***...****REMOVED*** params Additional arguments\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param ***REMOVED***asPromiseCallback***REMOVED*** fn Function to call\r\n * @param ***REMOVED*******REMOVED*** ctx Function context\r\n * @param ***REMOVED***...****REMOVED*** params Function arguments\r\n * @returns ***REMOVED***Promise<*>***REMOVED*** Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) ***REMOVED***\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) ***REMOVED***\r\n        params[offset] = function callback(err/*, varargs */) ***REMOVED***\r\n            if (pending) ***REMOVED***\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else ***REMOVED***\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                ***REMOVED***\r\n            ***REMOVED***\r\n        ***REMOVED***;\r\n        try ***REMOVED***\r\n            fn.apply(ctx || null, params);\r\n        ***REMOVED*** catch (err) ***REMOVED***\r\n            if (pending) ***REMOVED***\r\n                pending = false;\r\n                reject(err);\r\n            ***REMOVED***\r\n        ***REMOVED***\r\n    ***REMOVED***);\r\n***REMOVED***\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param ***REMOVED***string***REMOVED*** string Base64 encoded string\r\n * @returns ***REMOVED***number***REMOVED*** Byte length\r\n */\r\nbase64.length = function length(string) ***REMOVED***\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n***REMOVED***;\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buffer Source buffer\r\n * @param ***REMOVED***number***REMOVED*** start Source start\r\n * @param ***REMOVED***number***REMOVED*** end Source end\r\n * @returns ***REMOVED***string***REMOVED*** Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) ***REMOVED***\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) ***REMOVED***\r\n        var b = buffer[start++];\r\n        switch (j) ***REMOVED***\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        ***REMOVED***\r\n        if (i > 8191) ***REMOVED***\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    if (j) ***REMOVED***\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    ***REMOVED***\r\n    if (parts) ***REMOVED***\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    ***REMOVED***\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n***REMOVED***;\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param ***REMOVED***string***REMOVED*** string Source string\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buffer Destination buffer\r\n * @param ***REMOVED***number***REMOVED*** offset Destination offset\r\n * @returns ***REMOVED***number***REMOVED*** Number of bytes written\r\n * @throws ***REMOVED***Error***REMOVED*** If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) ***REMOVED***\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) ***REMOVED***\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) ***REMOVED***\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param ***REMOVED***string***REMOVED*** string String to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) ***REMOVED***\r\n    return /^(?:[A-Za-z0-9+/]***REMOVED***4***REMOVED***)*(?:[A-Za-z0-9+/]***REMOVED***2***REMOVED***==|[A-Za-z0-9+/]***REMOVED***3***REMOVED***=)?$/.test(string);\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param ***REMOVED***string[]***REMOVED*** functionParams Function parameter names\r\n * @param ***REMOVED***string***REMOVED*** [functionName] Function name if not anonymous\r\n * @returns ***REMOVED***Codegen***REMOVED*** Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") ***REMOVED***\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    ***REMOVED***\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type ***REMOVED***function***REMOVED***\r\n     * @param ***REMOVED***string|Object.<string,*>***REMOVED*** [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param ***REMOVED***...****REMOVED*** [formatParams] Format parameters\r\n     * @returns ***REMOVED***Codegen|Function***REMOVED*** Itself or the generated function if finished\r\n     * @throws ***REMOVED***Error***REMOVED*** If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) ***REMOVED***\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") ***REMOVED***\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) ***REMOVED***\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) ***REMOVED***\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                ***REMOVED***\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            ***REMOVED***\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        ***REMOVED***\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) ***REMOVED***\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) ***REMOVED***\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            ***REMOVED***\r\n            return \"%\";\r\n        ***REMOVED***);\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    ***REMOVED***\r\n\r\n    function toString(functionNameOverride) ***REMOVED***\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \")***REMOVED***\\n  \" + body.join(\"\\n  \") + \"\\n***REMOVED***\";\r\n    ***REMOVED***\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n***REMOVED***\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param ***REMOVED***string***REMOVED*** [functionName] Function name if not anonymous\r\n * @returns ***REMOVED***Codegen***REMOVED*** Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type ***REMOVED***boolean***REMOVED***\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() ***REMOVED***\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type ***REMOVED***Object.<string,*>***REMOVED***\r\n     * @private\r\n     */\r\n    this._listeners = ***REMOVED******REMOVED***;\r\n***REMOVED***\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param ***REMOVED***string***REMOVED*** evt Event name\r\n * @param ***REMOVED***function***REMOVED*** fn Listener\r\n * @param ***REMOVED*******REMOVED*** [ctx] Listener context\r\n * @returns ***REMOVED***util.EventEmitter***REMOVED*** `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) ***REMOVED***\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push(***REMOVED***\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    ***REMOVED***);\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param ***REMOVED***string***REMOVED*** [evt] Event name. Removes all listeners if omitted.\r\n * @param ***REMOVED***function***REMOVED*** [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns ***REMOVED***util.EventEmitter***REMOVED*** `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) ***REMOVED***\r\n    if (evt === undefined)\r\n        this._listeners = ***REMOVED******REMOVED***;\r\n    else ***REMOVED***\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else ***REMOVED***\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param ***REMOVED***string***REMOVED*** evt Event name\r\n * @param ***REMOVED***...****REMOVED*** args Arguments\r\n * @returns ***REMOVED***util.EventEmitter***REMOVED*** `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) ***REMOVED***\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) ***REMOVED***\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by ***REMOVED***@link util.fetch***REMOVED***.\r\n * @typedef FetchCallback\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***?Error***REMOVED*** error Error, if any, otherwise `null`\r\n * @param ***REMOVED***string***REMOVED*** [contents] File contents, if there hasn't been an error\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Options as used by ***REMOVED***@link util.fetch***REMOVED***.\r\n * @typedef FetchOptions\r\n * @type ***REMOVED***Object***REMOVED***\r\n * @property ***REMOVED***boolean***REMOVED*** [binary=false] Whether expecting a binary response\r\n * @property ***REMOVED***boolean***REMOVED*** [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param ***REMOVED***string***REMOVED*** filename File path or url\r\n * @param ***REMOVED***FetchOptions***REMOVED*** options Fetch options\r\n * @param ***REMOVED***FetchCallback***REMOVED*** callback Callback function\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\nfunction fetch(filename, options, callback) ***REMOVED***\r\n    if (typeof options === \"function\") ***REMOVED***\r\n        callback = options;\r\n        options = ***REMOVED******REMOVED***;\r\n    ***REMOVED*** else if (!options)\r\n        options = ***REMOVED******REMOVED***;\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) ***REMOVED***\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        ***REMOVED***);\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n***REMOVED***\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param ***REMOVED***string***REMOVED*** path File path or url\r\n * @param ***REMOVED***FetchCallback***REMOVED*** callback Callback function\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param ***REMOVED***string***REMOVED*** path File path or url\r\n * @param ***REMOVED***FetchOptions***REMOVED*** [options] Fetch options\r\n * @returns ***REMOVED***Promise<string|Uint8Array>***REMOVED*** Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) ***REMOVED***\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() ***REMOVED***\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) ***REMOVED***\r\n            var buffer = xhr.response;\r\n            if (!buffer) ***REMOVED***\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            ***REMOVED***\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        ***REMOVED***\r\n        return callback(null, xhr.responseText);\r\n    ***REMOVED***;\r\n\r\n    if (options.binary) ***REMOVED***\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    ***REMOVED***\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n***REMOVED***;\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** val Value to write\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Target buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Target buffer offset\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** val Value to write\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Target buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Target buffer offset\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Source buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Source buffer offset\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Source buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Source buffer offset\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** val Value to write\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Target buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Target buffer offset\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** val Value to write\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Target buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Target buffer offset\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Source buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Source buffer offset\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buf Source buffer\r\n * @param ***REMOVED***number***REMOVED*** pos Source buffer offset\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) ***REMOVED***\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() ***REMOVED***\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) ***REMOVED***\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        ***REMOVED***\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) ***REMOVED***\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) ***REMOVED***\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        ***REMOVED***\r\n\r\n        function readFloat_f32_rev(buf, pos) ***REMOVED***\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    ***REMOVED***)(); else (function() ***REMOVED***\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) ***REMOVED***\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else ***REMOVED***\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            ***REMOVED***\r\n        ***REMOVED***\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) ***REMOVED***\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        ***REMOVED***\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    ***REMOVED***)();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() ***REMOVED***\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) ***REMOVED***\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        ***REMOVED***\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) ***REMOVED***\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) ***REMOVED***\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        ***REMOVED***\r\n\r\n        function readDouble_f64_rev(buf, pos) ***REMOVED***\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    ***REMOVED***)(); else (function() ***REMOVED***\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) ***REMOVED***\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) ***REMOVED***\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            ***REMOVED*** else if (isNaN(val)) ***REMOVED***\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            ***REMOVED*** else if (val > 1.7976931348623157e+308) ***REMOVED*** // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            ***REMOVED*** else ***REMOVED***\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) ***REMOVED*** // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                ***REMOVED*** else ***REMOVED***\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                ***REMOVED***\r\n            ***REMOVED***\r\n        ***REMOVED***\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) ***REMOVED***\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        ***REMOVED***\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    ***REMOVED***)();\r\n\r\n    return exports;\r\n***REMOVED***\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) ***REMOVED***\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n***REMOVED***\r\n\r\nfunction writeUintBE(val, buf, pos) ***REMOVED***\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n***REMOVED***\r\n\r\nfunction readUintLE(buf, pos) ***REMOVED***\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n***REMOVED***\r\n\r\nfunction readUintBE(buf, pos) ***REMOVED***\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n***REMOVED***\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param ***REMOVED***string***REMOVED*** moduleName Module to require\r\n * @returns ***REMOVED***?Object***REMOVED*** Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) ***REMOVED***\r\n    try ***REMOVED***\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    ***REMOVED*** catch (e) ***REMOVED******REMOVED*** // eslint-disable-line no-empty\r\n    return null;\r\n***REMOVED***\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param ***REMOVED***string***REMOVED*** path Path to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) ***REMOVED***\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n***REMOVED***;\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param ***REMOVED***string***REMOVED*** path Path to normalize\r\n * @returns ***REMOVED***string***REMOVED*** Normalized path\r\n */\r\npath.normalize = function normalize(path) ***REMOVED***\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/***REMOVED***2,***REMOVED***/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) ***REMOVED***\r\n        if (parts[i] === \"..\") ***REMOVED***\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        ***REMOVED*** else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    ***REMOVED***\r\n    return prefix + parts.join(\"/\");\r\n***REMOVED***;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param ***REMOVED***string***REMOVED*** originPath Path to the origin file\r\n * @param ***REMOVED***string***REMOVED*** includePath Include path relative to origin path\r\n * @param ***REMOVED***boolean***REMOVED*** [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns ***REMOVED***string***REMOVED*** Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) ***REMOVED***\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by ***REMOVED***@link util.pool***REMOVED***.\r\n * @typedef PoolAllocator\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***number***REMOVED*** size Buffer size\r\n * @returns ***REMOVED***Uint8Array***REMOVED*** Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by ***REMOVED***@link util.pool***REMOVED***.\r\n * @typedef PoolSlicer\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***number***REMOVED*** start Start offset\r\n * @param ***REMOVED***number***REMOVED*** end End offset\r\n * @returns ***REMOVED***Uint8Array***REMOVED*** Buffer slice\r\n * @this ***REMOVED***Uint8Array***REMOVED***\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param ***REMOVED***PoolAllocator***REMOVED*** alloc Allocator\r\n * @param ***REMOVED***PoolSlicer***REMOVED*** slice Slicer\r\n * @param ***REMOVED***number***REMOVED*** [size=8192] Slab size\r\n * @returns ***REMOVED***PoolAllocator***REMOVED*** Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) ***REMOVED***\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) ***REMOVED***\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) ***REMOVED***\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        ***REMOVED***\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    ***REMOVED***;\r\n***REMOVED***\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param ***REMOVED***string***REMOVED*** string String\r\n * @returns ***REMOVED***number***REMOVED*** Byte length\r\n */\r\nutf8.length = function utf8_length(string) ***REMOVED***\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) ***REMOVED***\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) ***REMOVED***\r\n            ++i;\r\n            len += 4;\r\n        ***REMOVED*** else\r\n            len += 3;\r\n    ***REMOVED***\r\n    return len;\r\n***REMOVED***;\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buffer Source buffer\r\n * @param ***REMOVED***number***REMOVED*** start Source start\r\n * @param ***REMOVED***number***REMOVED*** end Source end\r\n * @returns ***REMOVED***string***REMOVED*** String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) ***REMOVED***\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) ***REMOVED***\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) ***REMOVED***\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        ***REMOVED*** else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) ***REMOVED***\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    if (parts) ***REMOVED***\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    ***REMOVED***\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param ***REMOVED***string***REMOVED*** string Source string\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buffer Destination buffer\r\n * @param ***REMOVED***number***REMOVED*** offset Destination offset\r\n * @returns ***REMOVED***number***REMOVED*** Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) ***REMOVED***\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) ***REMOVED***\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) ***REMOVED***\r\n            buffer[offset++] = c1;\r\n        ***REMOVED*** else if (c1 < 2048) ***REMOVED***\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        ***REMOVED*** else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) ***REMOVED***\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        ***REMOVED*** else ***REMOVED***\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    return offset - start;\r\n***REMOVED***;\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(33);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param ***REMOVED***Codegen***REMOVED*** gen Codegen instance\r\n * @param ***REMOVED***Field***REMOVED*** field Reflected field\r\n * @param ***REMOVED***number***REMOVED*** fieldIndex Field index\r\n * @param ***REMOVED***string***REMOVED*** prop Property reference\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) ***REMOVED***\r\n        if (field.resolvedType instanceof Enum) ***REMOVED*** gen\r\n            (\"switch(d%s)***REMOVED***\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) ***REMOVED***\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            ***REMOVED*** gen\r\n            (\"***REMOVED***\");\r\n        ***REMOVED*** else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    ***REMOVED*** else ***REMOVED***\r\n        var isUnsigned = false;\r\n        switch (field.type) ***REMOVED***\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n***REMOVED***\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param ***REMOVED***Type***REMOVED*** mtype Message type\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) ***REMOVED***\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) ***REMOVED*** gen\r\n    (\"if(d%s)***REMOVED***\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s=***REMOVED******REMOVED***\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i)***REMOVED***\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"***REMOVED***\")\r\n    (\"***REMOVED***\");\r\n\r\n        // Repeated fields\r\n        ***REMOVED*** else if (field.repeated) ***REMOVED*** gen\r\n    (\"if(d%s)***REMOVED***\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i)***REMOVED***\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"***REMOVED***\")\r\n    (\"***REMOVED***\");\r\n\r\n        // Non-repeated fields\r\n        ***REMOVED*** else ***REMOVED***\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null)***REMOVED***\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"***REMOVED***\");\r\n        ***REMOVED***\r\n    ***REMOVED*** return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n***REMOVED***;\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param ***REMOVED***Codegen***REMOVED*** gen Codegen instance\r\n * @param ***REMOVED***Field***REMOVED*** field Reflected field\r\n * @param ***REMOVED***number***REMOVED*** fieldIndex Field index\r\n * @param ***REMOVED***string***REMOVED*** prop Property reference\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) ***REMOVED***\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    ***REMOVED*** else ***REMOVED***\r\n        var isUnsigned = false;\r\n        switch (field.type) ***REMOVED***\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n***REMOVED***\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param ***REMOVED***Type***REMOVED*** mtype Message type\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return ***REMOVED******REMOVED***\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o=***REMOVED******REMOVED***\")\r\n    (\"var d=***REMOVED******REMOVED***\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) ***REMOVED*** gen\r\n    (\"if(o.arrays||o.defaults)***REMOVED***\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"***REMOVED***\");\r\n    ***REMOVED***\r\n\r\n    if (mapFields.length) ***REMOVED*** gen\r\n    (\"if(o.objects||o.defaults)***REMOVED***\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s=***REMOVED******REMOVED***\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"***REMOVED***\");\r\n    ***REMOVED***\r\n\r\n    if (normalFields.length) ***REMOVED*** gen\r\n    (\"if(o.defaults)***REMOVED***\");\r\n        for (i = 0; i < normalFields.length; ++i) ***REMOVED***\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long)***REMOVED***\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"***REMOVED***else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        ***REMOVED*** gen\r\n    (\"***REMOVED***\");\r\n    ***REMOVED***\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) ***REMOVED***\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) ***REMOVED***\r\n            if (!hasKs2) ***REMOVED*** hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            ***REMOVED*** gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length)***REMOVED***\", prop, prop)\r\n        (\"d%s=***REMOVED******REMOVED***\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j)***REMOVED***\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"***REMOVED***\");\r\n        ***REMOVED*** else if (field.repeated) ***REMOVED*** gen\r\n    (\"if(m%s&&m%s.length)***REMOVED***\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j)***REMOVED***\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"***REMOVED***\");\r\n        ***REMOVED*** else ***REMOVED*** gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j))***REMOVED***\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        ***REMOVED***\r\n        gen\r\n    (\"***REMOVED***\");\r\n    ***REMOVED***\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\nfunction missing(field) ***REMOVED***\r\n    return \"missing required '\" + field.name + \"'\";\r\n***REMOVED***\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param ***REMOVED***Type***REMOVED*** mtype Message type\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n */\r\nfunction decoder(mtype) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) ***REMOVED*** return field.map; ***REMOVED***).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c)***REMOVED***\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3)***REMOVED***\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) ***REMOVED***\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) ***REMOVED*** gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s=***REMOVED******REMOVED***\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) ***REMOVED***\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            ***REMOVED*** else ***REMOVED***\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            ***REMOVED***\r\n\r\n        // Repeated fields\r\n        ***REMOVED*** else if (field.repeated) ***REMOVED*** gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2)***REMOVED***\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"***REMOVED***else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        ***REMOVED*** else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    ***REMOVED*** gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"***REMOVED***\")\r\n    (\"***REMOVED***\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) ***REMOVED***\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,***REMOVED***instance:m***REMOVED***)\", missing(rfield));\r\n    ***REMOVED***\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n***REMOVED***\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(32),\r\n    util     = require(33);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param ***REMOVED***Codegen***REMOVED*** gen Codegen instance\r\n * @param ***REMOVED***Field***REMOVED*** field Reflected field\r\n * @param ***REMOVED***number***REMOVED*** fieldIndex Field index\r\n * @param ***REMOVED***string***REMOVED*** ref Variable reference\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) ***REMOVED***\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n***REMOVED***\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param ***REMOVED***Type***REMOVED*** mtype Message type\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n */\r\nfunction encoder(mtype) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) ***REMOVED***\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) ***REMOVED***\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))***REMOVED***\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i)***REMOVED***\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"***REMOVED***\")\r\n    (\"***REMOVED***\");\r\n\r\n            // Repeated fields\r\n        ***REMOVED*** else if (field.repeated) ***REMOVED*** gen\r\n    (\"if(%s!=null&&%s.length)***REMOVED***\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) ***REMOVED*** gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            ***REMOVED*** else ***REMOVED*** gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            ***REMOVED*** gen\r\n    (\"***REMOVED***\");\r\n\r\n        // Non-repeated\r\n        ***REMOVED*** else ***REMOVED***\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n***REMOVED***","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(21),\r\n    util = require(33);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Unique name within its namespace\r\n * @param ***REMOVED***Object.<string,number>***REMOVED*** [values] Enum values as an object, by name\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\nfunction Enum(name, values, options) ***REMOVED***\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type ***REMOVED***Object.<number,string>***REMOVED***\r\n     */\r\n    this.valuesById = ***REMOVED******REMOVED***;\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type ***REMOVED***Object.<string,number>***REMOVED***\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type ***REMOVED***Object.<string,string>***REMOVED***\r\n     */\r\n    this.comments = ***REMOVED******REMOVED***;\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type ***REMOVED***Array.<number[]|string>***REMOVED***\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n***REMOVED***\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property ***REMOVED***Object.<string,number>***REMOVED*** values Enum values\r\n * @property ***REMOVED***Object.<string,*>***REMOVED*** [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param ***REMOVED***string***REMOVED*** name Enum name\r\n * @param ***REMOVED***IEnum***REMOVED*** json Enum descriptor\r\n * @returns ***REMOVED***Enum***REMOVED*** Created enum\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    var enm = new Enum(name, json.values, json.options);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @returns ***REMOVED***IEnum***REMOVED*** Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON() ***REMOVED***\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param ***REMOVED***string***REMOVED*** name Value name\r\n * @param ***REMOVED***number***REMOVED*** id Value id\r\n * @param ***REMOVED***string***REMOVED*** [comment] Comment, if any\r\n * @returns ***REMOVED***Enum***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n * @throws ***REMOVED***Error***REMOVED*** If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) ***REMOVED***\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) ***REMOVED***\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    ***REMOVED*** else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param ***REMOVED***string***REMOVED*** name Value name\r\n * @returns ***REMOVED***Enum***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n * @throws ***REMOVED***Error***REMOVED*** If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) ***REMOVED***\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param ***REMOVED***number***REMOVED*** id Id to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) ***REMOVED***\r\n    return Namespace.isReservedId(this.reserved, id);\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param ***REMOVED***string***REMOVED*** name Name to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) ***REMOVED***\r\n    return Namespace.isReservedName(this.reserved, name);\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(32),\r\n    util  = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that ***REMOVED***@link MapField|map fields***REMOVED*** have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Unique name within its namespace\r\n * @param ***REMOVED***number***REMOVED*** id Unique id within its namespace\r\n * @param ***REMOVED***string***REMOVED*** type Value type\r\n * @param ***REMOVED***string|Object.<string,*>***REMOVED*** [rule=\"optional\"] Field rule\r\n * @param ***REMOVED***string|Object.<string,*>***REMOVED*** [extend] Extended type if different from parent\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param ***REMOVED***string***REMOVED*** name Field name\r\n * @param ***REMOVED***IField***REMOVED*** json Field descriptor\r\n * @returns ***REMOVED***Field***REMOVED*** Created field\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n***REMOVED***;\r\n\r\n/**\r\n * Not an actual constructor. Use ***REMOVED***@link Field***REMOVED*** instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Unique name within its namespace\r\n * @param ***REMOVED***number***REMOVED*** id Unique id within its namespace\r\n * @param ***REMOVED***string***REMOVED*** type Value type\r\n * @param ***REMOVED***string|Object.<string,*>***REMOVED*** [rule=\"optional\"] Field rule\r\n * @param ***REMOVED***string|Object.<string,*>***REMOVED*** [extend] Extended type if different from parent\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) ***REMOVED***\r\n\r\n    if (util.isObject(rule)) ***REMOVED***\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    ***REMOVED*** else if (util.isObject(extend)) ***REMOVED***\r\n        options = extend;\r\n        extend = undefined;\r\n    ***REMOVED***\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type ***REMOVED***string|undefined***REMOVED***\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type ***REMOVED***string***REMOVED***\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type ***REMOVED***string|undefined***REMOVED***\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type ***REMOVED***Type|null***REMOVED***\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type ***REMOVED***OneOf|null***REMOVED***\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type ***REMOVED*******REMOVED***\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type ***REMOVED*******REMOVED***\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type ***REMOVED***Type|Enum|null***REMOVED***\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type ***REMOVED***Field|null***REMOVED***\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type ***REMOVED***Field|null***REMOVED***\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type ***REMOVED***boolean|null***REMOVED***\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n***REMOVED***\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type ***REMOVED***boolean***REMOVED***\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", ***REMOVED***\r\n    get: function() ***REMOVED***\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    ***REMOVED***\r\n***REMOVED***);\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) ***REMOVED***\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n***REMOVED***;\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property ***REMOVED***string***REMOVED*** [rule=\"optional\"] Field rule\r\n * @property ***REMOVED***string***REMOVED*** type Field type\r\n * @property ***REMOVED***number***REMOVED*** id Field id\r\n * @property ***REMOVED***Object.<string,*>***REMOVED*** [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property ***REMOVED***string***REMOVED*** extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @returns ***REMOVED***IField***REMOVED*** Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON() ***REMOVED***\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns ***REMOVED***Field***REMOVED*** `this`\r\n * @throws ***REMOVED***Error***REMOVED*** If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() ***REMOVED***\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) ***REMOVED*** // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    ***REMOVED***\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) ***REMOVED***\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    ***REMOVED***\r\n\r\n    // remove unnecessary options\r\n    if (this.options) ***REMOVED***\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    ***REMOVED***\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) ***REMOVED***\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    ***REMOVED*** else if (this.bytes && typeof this.typeDefault === \"string\") ***REMOVED***\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    ***REMOVED***\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * Decorator function as returned by ***REMOVED***@link Field.d***REMOVED*** and ***REMOVED***@link MapField.d***REMOVED*** (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Object***REMOVED*** prototype Target prototype\r\n * @param ***REMOVED***string***REMOVED*** fieldName Field name\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** fieldId Field id\r\n * @param ***REMOVED***\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object***REMOVED*** fieldType Field type\r\n * @param ***REMOVED***\"optional\"|\"required\"|\"repeated\"***REMOVED*** [fieldRule=\"optional\"] Field rule\r\n * @param ***REMOVED***T***REMOVED*** [defaultValue] Default value\r\n * @returns ***REMOVED***FieldDecorator***REMOVED*** Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) ***REMOVED***\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) ***REMOVED***\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, ***REMOVED*** \"default\": defaultValue ***REMOVED***));\r\n    ***REMOVED***;\r\n***REMOVED***;\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** fieldId Field id\r\n * @param ***REMOVED***Constructor<T>|string***REMOVED*** fieldType Field type\r\n * @param ***REMOVED***\"optional\"|\"required\"|\"repeated\"***REMOVED*** [fieldRule=\"optional\"] Field rule\r\n * @returns ***REMOVED***FieldDecorator***REMOVED*** Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\nField._configure = function configure(Type_) ***REMOVED***\r\n    Type = Type_;\r\n***REMOVED***;\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by ***REMOVED***@link load***REMOVED*** and ***REMOVED***@link Root#load***REMOVED***.\r\n * @typedef LoadCallback\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Error|null***REMOVED*** error Error, if any, otherwise `null`\r\n * @param ***REMOVED***Root***REMOVED*** [root] Root, if there hasn't been an error\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename One or multiple files to load\r\n * @param ***REMOVED***Root***REMOVED*** root Root namespace, defaults to create a new one if omitted.\r\n * @param ***REMOVED***LoadCallback***REMOVED*** callback Callback function\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @see ***REMOVED***@link Root#load***REMOVED***\r\n */\r\nfunction load(filename, root, callback) ***REMOVED***\r\n    if (typeof root === \"function\") ***REMOVED***\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    ***REMOVED*** else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n***REMOVED***\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename One or multiple files to load\r\n * @param ***REMOVED***LoadCallback***REMOVED*** callback Callback function\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @see ***REMOVED***@link Root#load***REMOVED***\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename One or multiple files to load\r\n * @param ***REMOVED***Root***REMOVED*** [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns ***REMOVED***Promise<Root>***REMOVED*** Promise\r\n * @see ***REMOVED***@link Root#load***REMOVED***\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename One or multiple files to load\r\n * @param ***REMOVED***Root***REMOVED*** [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns ***REMOVED***Root***REMOVED*** Root namespace\r\n * @throws ***REMOVED***Error***REMOVED*** If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see ***REMOVED***@link Root#loadSync***REMOVED***\r\n */\r\nfunction loadSync(filename, root) ***REMOVED***\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n***REMOVED***\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(36);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(31);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(30);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Message          = require(19);\r\nprotobuf.wrappers         = require(37);\r\n\r\n// Utility\r\nprotobuf.types            = require(32);\r\nprotobuf.util             = require(33);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type ***REMOVED***string***REMOVED***\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(38);\r\nprotobuf.BufferWriter = require(39);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(35);\r\nprotobuf.rpc          = require(28);\r\nprotobuf.roots        = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\nfunction configure() ***REMOVED***\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n***REMOVED***\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Unique name within its namespace\r\n * @param ***REMOVED***number***REMOVED*** id Unique id within its namespace\r\n * @param ***REMOVED***string***REMOVED*** keyType Key type\r\n * @param ***REMOVED***string***REMOVED*** type Value type\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) ***REMOVED***\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type ***REMOVED***string***REMOVED***\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type ***REMOVED***ReflectionObject|null***REMOVED***\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n***REMOVED***\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends ***REMOVED***IField***REMOVED***\r\n * @property ***REMOVED***string***REMOVED*** keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property ***REMOVED***string***REMOVED*** extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param ***REMOVED***string***REMOVED*** name Field name\r\n * @param ***REMOVED***IMapField***REMOVED*** json Map field descriptor\r\n * @returns ***REMOVED***MapField***REMOVED*** Created map field\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @returns ***REMOVED***IMapField***REMOVED*** Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON() ***REMOVED***\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() ***REMOVED***\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** fieldId Field id\r\n * @param ***REMOVED***\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"***REMOVED*** fieldKeyType Field key type\r\n * @param ***REMOVED***\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<***REMOVED******REMOVED***>***REMOVED*** fieldValueType Field value type\r\n * @returns ***REMOVED***FieldDecorator***REMOVED*** Decorator function\r\n * @template T extends ***REMOVED*** [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<***REMOVED******REMOVED***> ***REMOVED***\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) ***REMOVED***\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) ***REMOVED***\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    ***REMOVED***;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param ***REMOVED***Properties<T>***REMOVED*** [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) ***REMOVED***\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n***REMOVED***\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type ***REMOVED***Type***REMOVED***\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type ***REMOVED***Type***REMOVED***\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [properties] Properties to set\r\n * @returns ***REMOVED***Message<T>***REMOVED*** Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) ***REMOVED***\r\n    return this.$type.create(properties);\r\n***REMOVED***;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param ***REMOVED***T|Object.<string,*>***REMOVED*** message Message to encode\r\n * @param ***REMOVED***Writer***REMOVED*** [writer] Writer to use\r\n * @returns ***REMOVED***Writer***REMOVED*** Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) ***REMOVED***\r\n    return this.$type.encode(message, writer);\r\n***REMOVED***;\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param ***REMOVED***T|Object.<string,*>***REMOVED*** message Message to encode\r\n * @param ***REMOVED***Writer***REMOVED*** [writer] Writer to use\r\n * @returns ***REMOVED***Writer***REMOVED*** Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) ***REMOVED***\r\n    return this.$type.encodeDelimited(message, writer);\r\n***REMOVED***;\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param ***REMOVED***Reader|Uint8Array***REMOVED*** reader Reader or buffer to decode\r\n * @returns ***REMOVED***T***REMOVED*** Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) ***REMOVED***\r\n    return this.$type.decode(reader);\r\n***REMOVED***;\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param ***REMOVED***Reader|Uint8Array***REMOVED*** reader Reader or buffer to decode\r\n * @returns ***REMOVED***T***REMOVED*** Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) ***REMOVED***\r\n    return this.$type.decodeDelimited(reader);\r\n***REMOVED***;\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** message Plain object to verify\r\n * @returns ***REMOVED***string|null***REMOVED*** `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) ***REMOVED***\r\n    return this.$type.verify(message);\r\n***REMOVED***;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** object Plain object\r\n * @returns ***REMOVED***T***REMOVED*** Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) ***REMOVED***\r\n    return this.$type.fromObject(object);\r\n***REMOVED***;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param ***REMOVED***T***REMOVED*** message Message instance\r\n * @param ***REMOVED***IConversionOptions***REMOVED*** [options] Conversion options\r\n * @returns ***REMOVED***Object.<string,*>***REMOVED*** Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) ***REMOVED***\r\n    return this.$type.toObject(message, options);\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns ***REMOVED***Object.<string,*>***REMOVED*** JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() ***REMOVED***\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n***REMOVED***;\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Method name\r\n * @param ***REMOVED***string|undefined***REMOVED*** type Method type, usually `\"rpc\"`\r\n * @param ***REMOVED***string***REMOVED*** requestType Request message type\r\n * @param ***REMOVED***string***REMOVED*** responseType Response message type\r\n * @param ***REMOVED***boolean|Object.<string,*>***REMOVED*** [requestStream] Whether the request is streamed\r\n * @param ***REMOVED***boolean|Object.<string,*>***REMOVED*** [responseStream] Whether the response is streamed\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) ***REMOVED***\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) ***REMOVED***\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    ***REMOVED*** else if (util.isObject(responseStream)) ***REMOVED***\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type ***REMOVED***string***REMOVED***\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type ***REMOVED***string***REMOVED***\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type ***REMOVED***boolean|undefined***REMOVED***\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type ***REMOVED***string***REMOVED***\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type ***REMOVED***boolean|undefined***REMOVED***\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type ***REMOVED***Type|null***REMOVED***\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type ***REMOVED***Type|null***REMOVED***\r\n     */\r\n    this.resolvedResponseType = null;\r\n***REMOVED***\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property ***REMOVED***string***REMOVED*** [type=\"rpc\"] Method type\r\n * @property ***REMOVED***string***REMOVED*** requestType Request type\r\n * @property ***REMOVED***string***REMOVED*** responseType Response type\r\n * @property ***REMOVED***boolean***REMOVED*** [requestStream=false] Whether requests are streamed\r\n * @property ***REMOVED***boolean***REMOVED*** [responseStream=false] Whether responses are streamed\r\n * @property ***REMOVED***Object.<string,*>***REMOVED*** [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param ***REMOVED***string***REMOVED*** name Method name\r\n * @param ***REMOVED***IMethod***REMOVED*** json Method descriptor\r\n * @returns ***REMOVED***Method***REMOVED*** Created method\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @returns ***REMOVED***IMethod***REMOVED*** Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON() ***REMOVED***\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Namespace name\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param ***REMOVED***string***REMOVED*** name Namespace name\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** json JSON object\r\n * @returns ***REMOVED***Namespace***REMOVED*** Created namespace\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param ***REMOVED***ReflectionObject[]***REMOVED*** array Object array\r\n * @returns ***REMOVED***Object.<string,*>|undefined***REMOVED*** JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) ***REMOVED***\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = ***REMOVED******REMOVED***;\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n***REMOVED***\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param ***REMOVED***Array.<number[]|string>|undefined***REMOVED*** reserved Array of reserved ranges and names\r\n * @param ***REMOVED***number***REMOVED*** id Id to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) ***REMOVED***\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param ***REMOVED***Array.<number[]|string>|undefined***REMOVED*** reserved Array of reserved ranges and names\r\n * @param ***REMOVED***string***REMOVED*** name Name to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) ***REMOVED***\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n***REMOVED***;\r\n\r\n/**\r\n * Not an actual constructor. Use ***REMOVED***@link Namespace***REMOVED*** instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Namespace name\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n * @see ***REMOVED***@link Namespace***REMOVED***\r\n */\r\nfunction Namespace(name, options) ***REMOVED***\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type ***REMOVED***Object.<string,ReflectionObject>|undefined***REMOVED***\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type ***REMOVED***ReflectionObject[]|null***REMOVED***\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n***REMOVED***\r\n\r\nfunction clearCache(namespace) ***REMOVED***\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n***REMOVED***\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type ***REMOVED***ReflectionObject[]***REMOVED***\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", ***REMOVED***\r\n    get: function() ***REMOVED***\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    ***REMOVED***\r\n***REMOVED***);\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property ***REMOVED***Object.<string,*>***REMOVED*** [options] Namespace options\r\n * @property ***REMOVED***Object.<string,AnyNestedObject>***REMOVED*** [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type ***REMOVED***IExtensionField|IExtensionMapField***REMOVED***\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type ***REMOVED***IEnum|IType|IService|AnyExtensionField|INamespace***REMOVED***\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @returns ***REMOVED***INamespace***REMOVED*** Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON() ***REMOVED***\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray)\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param ***REMOVED***Object.<string,AnyNestedObject>***REMOVED*** nestedJson Any nested object descriptors\r\n * @returns ***REMOVED***Namespace***REMOVED*** `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) ***REMOVED***\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) ***REMOVED***\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) ***REMOVED***\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param ***REMOVED***string***REMOVED*** name Nested object name\r\n * @returns ***REMOVED***ReflectionObject|null***REMOVED*** The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) ***REMOVED***\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n***REMOVED***;\r\n\r\n/**\r\n * Gets the values of the nested ***REMOVED***@link Enum|enum***REMOVED*** of the specified name.\r\n * This methods differs from ***REMOVED***@link Namespace#get|get***REMOVED*** in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param ***REMOVED***string***REMOVED*** name Nested enum name\r\n * @returns ***REMOVED***Object.<string,number>***REMOVED*** Enum values\r\n * @throws ***REMOVED***Error***REMOVED*** If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) ***REMOVED***\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n***REMOVED***;\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** object Nested object to add\r\n * @returns ***REMOVED***Namespace***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n * @throws ***REMOVED***Error***REMOVED*** If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) ***REMOVED***\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = ***REMOVED******REMOVED***;\r\n    else ***REMOVED***\r\n        var prev = this.get(object.name);\r\n        if (prev) ***REMOVED***\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) ***REMOVED***\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = ***REMOVED******REMOVED***;\r\n                object.setOptions(prev.options, true);\r\n\r\n            ***REMOVED*** else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** object Nested object to remove\r\n * @returns ***REMOVED***Namespace***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n * @throws ***REMOVED***Error***REMOVED*** If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) ***REMOVED***\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param ***REMOVED***string|string[]***REMOVED*** path Path to create\r\n * @param ***REMOVED*******REMOVED*** [json] Nested types to create from JSON\r\n * @returns ***REMOVED***Namespace***REMOVED*** Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) ***REMOVED***\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) ***REMOVED***\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) ***REMOVED***\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        ***REMOVED*** else\r\n            ptr.add(ptr = new Namespace(part));\r\n    ***REMOVED***\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n***REMOVED***;\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns ***REMOVED***Namespace***REMOVED*** `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() ***REMOVED***\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n***REMOVED***;\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param ***REMOVED***string|string[]***REMOVED*** path Path to look up\r\n * @param ***REMOVED****|Array.<*>***REMOVED*** filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param ***REMOVED***boolean***REMOVED*** [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns ***REMOVED***ReflectionObject|null***REMOVED*** Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) ***REMOVED***\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") ***REMOVED***\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    ***REMOVED*** else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) ***REMOVED***\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    ***REMOVED*** else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) ***REMOVED***\r\n        if (path.length === 1) ***REMOVED***\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        ***REMOVED*** else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    ***REMOVED*** else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n***REMOVED***;\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param ***REMOVED***string|string[]***REMOVED*** path Path to look up\r\n * @param ***REMOVED***boolean***REMOVED*** [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns ***REMOVED***ReflectionObject|null***REMOVED*** Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the ***REMOVED***@link Type|type***REMOVED*** at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from ***REMOVED***@link Namespace#lookup|lookup***REMOVED*** in that it throws instead of returning `null`.\r\n * @param ***REMOVED***string|string[]***REMOVED*** path Path to look up\r\n * @returns ***REMOVED***Type***REMOVED*** Looked up type\r\n * @throws ***REMOVED***Error***REMOVED*** If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) ***REMOVED***\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n***REMOVED***;\r\n\r\n/**\r\n * Looks up the values of the ***REMOVED***@link Enum|enum***REMOVED*** at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from ***REMOVED***@link Namespace#lookup|lookup***REMOVED*** in that it throws instead of returning `null`.\r\n * @param ***REMOVED***string|string[]***REMOVED*** path Path to look up\r\n * @returns ***REMOVED***Enum***REMOVED*** Looked up enum\r\n * @throws ***REMOVED***Error***REMOVED*** If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) ***REMOVED***\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n***REMOVED***;\r\n\r\n/**\r\n * Looks up the ***REMOVED***@link Type|type***REMOVED*** or ***REMOVED***@link Enum|enum***REMOVED*** at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from ***REMOVED***@link Namespace#lookup|lookup***REMOVED*** in that it throws instead of returning `null`.\r\n * @param ***REMOVED***string|string[]***REMOVED*** path Path to look up\r\n * @returns ***REMOVED***Type***REMOVED*** Looked up type or enum\r\n * @throws ***REMOVED***Error***REMOVED*** If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) ***REMOVED***\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n***REMOVED***;\r\n\r\n/**\r\n * Looks up the ***REMOVED***@link Service|service***REMOVED*** at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from ***REMOVED***@link Namespace#lookup|lookup***REMOVED*** in that it throws instead of returning `null`.\r\n * @param ***REMOVED***string|string[]***REMOVED*** path Path to look up\r\n * @returns ***REMOVED***Service***REMOVED*** Looked up service\r\n * @throws ***REMOVED***Error***REMOVED*** If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) ***REMOVED***\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n***REMOVED***;\r\n\r\nNamespace._configure = function(Type_, Service_) ***REMOVED***\r\n    Type    = Type_;\r\n    Service = Service_;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(33);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Object name\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) ***REMOVED***\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type ***REMOVED***Object.<string,*>|undefined***REMOVED***\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type ***REMOVED***string***REMOVED***\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type ***REMOVED***Namespace|null***REMOVED***\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type ***REMOVED***string|null***REMOVED***\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type ***REMOVED***string|null***REMOVED***\r\n     */\r\n    this.filename = null;\r\n***REMOVED***\r\n\r\nObject.defineProperties(ReflectionObject.prototype, ***REMOVED***\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type ***REMOVED***Root***REMOVED***\r\n     * @readonly\r\n     */\r\n    root: ***REMOVED***\r\n        get: function() ***REMOVED***\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        ***REMOVED***\r\n    ***REMOVED***,\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type ***REMOVED***string***REMOVED***\r\n     * @readonly\r\n     */\r\n    fullName: ***REMOVED***\r\n        get: function() ***REMOVED***\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) ***REMOVED***\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            ***REMOVED***\r\n            return path.join(\".\");\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n***REMOVED***);\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns ***REMOVED***Object.<string,*>***REMOVED*** Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() ***REMOVED***\r\n    throw Error(); // not implemented, shouldn't happen\r\n***REMOVED***;\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** parent Parent added to\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) ***REMOVED***\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** parent Parent removed from\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) ***REMOVED***\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n***REMOVED***;\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns ***REMOVED***ReflectionObject***REMOVED*** `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() ***REMOVED***\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Gets an option value.\r\n * @param ***REMOVED***string***REMOVED*** name Option name\r\n * @returns ***REMOVED*******REMOVED*** Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) ***REMOVED***\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n***REMOVED***;\r\n\r\n/**\r\n * Sets an option.\r\n * @param ***REMOVED***string***REMOVED*** name Option name\r\n * @param ***REMOVED*******REMOVED*** value Option value\r\n * @param ***REMOVED***boolean***REMOVED*** [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns ***REMOVED***ReflectionObject***REMOVED*** `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) ***REMOVED***\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = ***REMOVED******REMOVED***))[name] = value;\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** options Options to set\r\n * @param ***REMOVED***boolean***REMOVED*** [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns ***REMOVED***ReflectionObject***REMOVED*** `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) ***REMOVED***\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns ***REMOVED***string***REMOVED*** Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() ***REMOVED***\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n***REMOVED***;\r\n\r\nReflectionObject._configure = function(Root_) ***REMOVED***\r\n    Root = Root_;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15),\r\n    util  = require(33);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Oneof name\r\n * @param ***REMOVED***string[]|Object.<string,*>***REMOVED*** [fieldNames] Field names\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) ***REMOVED***\r\n    if (!Array.isArray(fieldNames)) ***REMOVED***\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    ***REMOVED***\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type ***REMOVED***string[]***REMOVED***\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type ***REMOVED***Field[]***REMOVED***\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n***REMOVED***\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property ***REMOVED***Array.<string>***REMOVED*** oneof Oneof field names\r\n * @property ***REMOVED***Object.<string,*>***REMOVED*** [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param ***REMOVED***string***REMOVED*** name Oneof name\r\n * @param ***REMOVED***IOneOf***REMOVED*** json Oneof descriptor\r\n * @returns ***REMOVED***OneOf***REMOVED*** Created oneof\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    return new OneOf(name, json.oneof, json.options);\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @returns ***REMOVED***IOneOf***REMOVED*** Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON() ***REMOVED***\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param ***REMOVED***OneOf***REMOVED*** oneof The oneof\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) ***REMOVED***\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n***REMOVED***\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param ***REMOVED***Field***REMOVED*** field Field to add\r\n * @returns ***REMOVED***OneOf***REMOVED*** `this`\r\n */\r\nOneOf.prototype.add = function add(field) ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param ***REMOVED***Field***REMOVED*** field Field to remove\r\n * @returns ***REMOVED***OneOf***REMOVED*** `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) ***REMOVED***\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) ***REMOVED***\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) ***REMOVED***\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) ***REMOVED***\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n***REMOVED***;\r\n\r\n/**\r\n * Decorator function as returned by ***REMOVED***@link OneOf.d***REMOVED*** (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Object***REMOVED*** prototype Target prototype\r\n * @param ***REMOVED***string***REMOVED*** oneofName OneOf name\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param ***REMOVED***...string***REMOVED*** fieldNames Field names\r\n * @returns ***REMOVED***OneOfDecorator***REMOVED*** Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() ***REMOVED***\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) ***REMOVED***\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, ***REMOVED***\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        ***REMOVED***);\r\n    ***REMOVED***;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) ***REMOVED***\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n***REMOVED***\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param ***REMOVED***Uint8Array***REMOVED*** buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) ***REMOVED***\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type ***REMOVED***Uint8Array***REMOVED***\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.len = buffer.length;\r\n***REMOVED***\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) ***REMOVED***\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    ***REMOVED***\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) ***REMOVED***\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    ***REMOVED***;\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param ***REMOVED***Uint8Array|Buffer***REMOVED*** buffer Buffer to read from\r\n * @returns ***REMOVED***Reader|BufferReader***REMOVED*** A ***REMOVED***@link BufferReader***REMOVED*** if `buffer` is a Buffer, otherwise a ***REMOVED***@link Reader***REMOVED***\r\n * @throws ***REMOVED***Error***REMOVED*** If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) ***REMOVED***\r\n        return (Reader.create = function create_buffer(buffer) ***REMOVED***\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        ***REMOVED***)(buffer);\r\n    ***REMOVED***\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() ***REMOVED***\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() ***REMOVED***\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) ***REMOVED***\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        ***REMOVED***\r\n        return value;\r\n    ***REMOVED***;\r\n***REMOVED***)();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\nReader.prototype.int32 = function read_int32() ***REMOVED***\r\n    return this.uint32() | 0;\r\n***REMOVED***;\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() ***REMOVED***\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n***REMOVED***;\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() ***REMOVED***\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) ***REMOVED*** // fast route (lo)\r\n        for (; i < 4; ++i) ***REMOVED***\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        ***REMOVED***\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    ***REMOVED*** else ***REMOVED***\r\n        for (; i < 3; ++i) ***REMOVED***\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        ***REMOVED***\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    ***REMOVED***\r\n    if (this.len - this.pos > 4) ***REMOVED*** // fast route (hi)\r\n        for (; i < 5; ++i) ***REMOVED***\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        ***REMOVED***\r\n    ***REMOVED*** else ***REMOVED***\r\n        for (; i < 5; ++i) ***REMOVED***\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n***REMOVED***\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns ***REMOVED***Long***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns ***REMOVED***Long***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns ***REMOVED***Long***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns ***REMOVED***boolean***REMOVED*** Value read\r\n */\r\nReader.prototype.bool = function read_bool() ***REMOVED***\r\n    return this.uint32() !== 0;\r\n***REMOVED***;\r\n\r\nfunction readFixed32_end(buf, end) ***REMOVED*** // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n***REMOVED***\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n***REMOVED***;\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n***REMOVED***;\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n***REMOVED***\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns ***REMOVED***Long***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns ***REMOVED***Long***REMOVED*** Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\nReader.prototype.float = function read_float() ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n***REMOVED***;\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns ***REMOVED***number***REMOVED*** Value read\r\n */\r\nReader.prototype.double = function read_double() ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n***REMOVED***;\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns ***REMOVED***Uint8Array***REMOVED*** Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() ***REMOVED***\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n***REMOVED***;\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns ***REMOVED***string***REMOVED*** Value read\r\n */\r\nReader.prototype.string = function read_string() ***REMOVED***\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n***REMOVED***;\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param ***REMOVED***number***REMOVED*** [length] Length if known, otherwise a varint is assumed\r\n * @returns ***REMOVED***Reader***REMOVED*** `this`\r\n */\r\nReader.prototype.skip = function skip(length) ***REMOVED***\r\n    if (typeof length === \"number\") ***REMOVED***\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    ***REMOVED*** else ***REMOVED***\r\n        do ***REMOVED***\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        ***REMOVED*** while (this.buf[this.pos++] & 128);\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param ***REMOVED***number***REMOVED*** wireType Wire type received\r\n * @returns ***REMOVED***Reader***REMOVED*** `this`\r\n */\r\nReader.prototype.skipType = function(wireType) ***REMOVED***\r\n    switch (wireType) ***REMOVED***\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do ***REMOVED*** // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            ***REMOVED*** while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n\r\nReader._configure = function(BufferReader_) ***REMOVED***\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, ***REMOVED***\r\n\r\n        int64: function read_int64() ***REMOVED***\r\n            return readLongVarint.call(this)[fn](false);\r\n        ***REMOVED***,\r\n\r\n        uint64: function read_uint64() ***REMOVED***\r\n            return readLongVarint.call(this)[fn](true);\r\n        ***REMOVED***,\r\n\r\n        sint64: function read_sint64() ***REMOVED***\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        ***REMOVED***,\r\n\r\n        fixed64: function read_fixed64() ***REMOVED***\r\n            return readFixed64.call(this)[fn](true);\r\n        ***REMOVED***,\r\n\r\n        sfixed64: function read_sfixed64() ***REMOVED***\r\n            return readFixed64.call(this)[fn](false);\r\n        ***REMOVED***\r\n\r\n    ***REMOVED***);\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param ***REMOVED***Buffer***REMOVED*** buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) ***REMOVED***\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type ***REMOVED***Buffer***REMOVED***\r\n     */\r\n***REMOVED***\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() ***REMOVED***\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n***REMOVED***;\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns ***REMOVED***Buffer***REMOVED*** Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    OneOf   = require(23),\r\n    util    = require(33);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Top level options\r\n */\r\nfunction Root(options) ***REMOVED***\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type ***REMOVED***Field[]***REMOVED***\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type ***REMOVED***string[]***REMOVED***\r\n     */\r\n    this.files = [];\r\n***REMOVED***\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param ***REMOVED***INamespace***REMOVED*** json Nameespace descriptor\r\n * @param ***REMOVED***Root***REMOVED*** [root] Root namespace, defaults to create a new one if omitted\r\n * @returns ***REMOVED***Root***REMOVED*** Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) ***REMOVED***\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n***REMOVED***;\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param ***REMOVED***string***REMOVED*** origin The file name of the importing file\r\n * @param ***REMOVED***string***REMOVED*** target The file name being imported\r\n * @returns ***REMOVED***string|null***REMOVED*** Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() ***REMOVED******REMOVED*** // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename Names of one or multiple files to load\r\n * @param ***REMOVED***IParseOptions***REMOVED*** options Parse options\r\n * @param ***REMOVED***LoadCallback***REMOVED*** callback Callback function\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) ***REMOVED***\r\n    if (typeof options === \"function\") ***REMOVED***\r\n        callback = options;\r\n        options = undefined;\r\n    ***REMOVED***\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) ***REMOVED***\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    ***REMOVED***\r\n\r\n    // Processes a single file\r\n    function process(filename, source) ***REMOVED***\r\n        try ***REMOVED***\r\n            if (util.isString(source) && source.charAt(0) === \"***REMOVED***\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else ***REMOVED***\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            ***REMOVED***\r\n        ***REMOVED*** catch (err) ***REMOVED***\r\n            finish(err);\r\n        ***REMOVED***\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    ***REMOVED***\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) ***REMOVED***\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) ***REMOVED***\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        ***REMOVED***\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) ***REMOVED***\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else ***REMOVED***\r\n                ++queued;\r\n                setTimeout(function() ***REMOVED***\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                ***REMOVED***);\r\n            ***REMOVED***\r\n            return;\r\n        ***REMOVED***\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) ***REMOVED***\r\n            var source;\r\n            try ***REMOVED***\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            ***REMOVED*** catch (err) ***REMOVED***\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            ***REMOVED***\r\n            process(filename, source);\r\n        ***REMOVED*** else ***REMOVED***\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) ***REMOVED***\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) ***REMOVED***\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                ***REMOVED***\r\n                process(filename, source);\r\n            ***REMOVED***);\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n***REMOVED***;\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename Names of one or multiple files to load\r\n * @param ***REMOVED***LoadCallback***REMOVED*** callback Callback function\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename Names of one or multiple files to load\r\n * @param ***REMOVED***IParseOptions***REMOVED*** [options] Parse options. Defaults to ***REMOVED***@link parse.defaults***REMOVED*** when omitted.\r\n * @returns ***REMOVED***Promise<Root>***REMOVED*** Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param ***REMOVED***string|string[]***REMOVED*** filename Names of one or multiple files to load\r\n * @param ***REMOVED***IParseOptions***REMOVED*** [options] Parse options. Defaults to ***REMOVED***@link parse.defaults***REMOVED*** when omitted.\r\n * @returns ***REMOVED***Root***REMOVED*** Root namespace\r\n * @throws ***REMOVED***Error***REMOVED*** If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) ***REMOVED***\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() ***REMOVED***\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) ***REMOVED***\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        ***REMOVED***).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n***REMOVED***;\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param ***REMOVED***Root***REMOVED*** root Root instance\r\n * @param ***REMOVED***Field***REMOVED*** field Declaring extension field witin the declaring type\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) ***REMOVED***\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) ***REMOVED***\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    ***REMOVED***\r\n    return false;\r\n***REMOVED***\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** object Object added\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) ***REMOVED***\r\n    if (object instanceof Field) ***REMOVED***\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    ***REMOVED*** else if (object instanceof Enum) ***REMOVED***\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    ***REMOVED*** else if (!(object instanceof OneOf)) /* everything else is a namespace */ ***REMOVED***\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    ***REMOVED***\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n***REMOVED***;\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** object Object removed\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) ***REMOVED***\r\n    if (object instanceof Field) ***REMOVED***\r\n\r\n        if (/* an extension field */ object.extend !== undefined) ***REMOVED***\r\n            if (/* already handled */ object.extensionField) ***REMOVED*** // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            ***REMOVED*** else ***REMOVED*** // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            ***REMOVED***\r\n        ***REMOVED***\r\n\r\n    ***REMOVED*** else if (object instanceof Enum) ***REMOVED***\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    ***REMOVED*** else if (object instanceof Namespace) ***REMOVED***\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    ***REMOVED***\r\n***REMOVED***;\r\n\r\nRoot._configure = function(Type_, parse_, common_) ***REMOVED***\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = ***REMOVED******REMOVED***;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type ***REMOVED***Object.<string,Root>***REMOVED***\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to ***REMOVED***@link Service#create***REMOVED*** performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Method|rpc.ServiceMethod<Message<***REMOVED******REMOVED***>,Message<***REMOVED******REMOVED***>>***REMOVED*** method Reflected or static method being called\r\n * @param ***REMOVED***Uint8Array***REMOVED*** requestData Request data\r\n * @param ***REMOVED***RPCImplCallback***REMOVED*** callback Callback function\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @example\r\n * function rpcImpl(method, requestData, callback) ***REMOVED***\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) ***REMOVED***\r\n *         callback(err, responseData);\r\n *     ***REMOVED***);\r\n * ***REMOVED***\r\n */\r\n\r\n/**\r\n * Node-style callback as used by ***REMOVED***@link RPCImpl***REMOVED***.\r\n * @typedef RPCImplCallback\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Error|null***REMOVED*** error Error, if any, otherwise `null`\r\n * @param ***REMOVED***Uint8Array|null***REMOVED*** [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(35);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by ***REMOVED***@link rpc.ServiceMethod|ServiceMethod***REMOVED***.\r\n *\r\n * Differs from ***REMOVED***@link RPCImplCallback***REMOVED*** in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Error|null***REMOVED*** error Error, if any\r\n * @param ***REMOVED***TRes***REMOVED*** [response] Response message\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * A service method part of a ***REMOVED***@link rpc.Service***REMOVED*** as created by ***REMOVED***@link Service.create***REMOVED***.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***TReq|Properties<TReq>***REMOVED*** request Request message or plain object\r\n * @param ***REMOVED***rpc.ServiceMethodCallback<TRes>***REMOVED*** [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns ***REMOVED***Promise<Message<TRes>>***REMOVED*** Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by ***REMOVED***@link Service#create***REMOVED***.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param ***REMOVED***RPCImpl***REMOVED*** rpcImpl RPC implementation\r\n * @param ***REMOVED***boolean***REMOVED*** [requestDelimited=false] Whether requests are length-delimited\r\n * @param ***REMOVED***boolean***REMOVED*** [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) ***REMOVED***\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type ***REMOVED***RPCImpl|null***REMOVED***\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type ***REMOVED***boolean***REMOVED***\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n***REMOVED***\r\n\r\n/**\r\n * Calls a service method through ***REMOVED***@link rpc.Service#rpcImpl|rpcImpl***REMOVED***.\r\n * @param ***REMOVED***Method|rpc.ServiceMethod<TReq,TRes>***REMOVED*** method Reflected or static method\r\n * @param ***REMOVED***Constructor<TReq>***REMOVED*** requestCtor Request constructor\r\n * @param ***REMOVED***Constructor<TRes>***REMOVED*** responseCtor Response constructor\r\n * @param ***REMOVED***TReq|Properties<TReq>***REMOVED*** request Request message or plain object\r\n * @param ***REMOVED***rpc.ServiceMethodCallback<TRes>***REMOVED*** callback Service callback\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) ***REMOVED***\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) ***REMOVED***\r\n        setTimeout(function() ***REMOVED*** callback(Error(\"already ended\")); ***REMOVED***, 0);\r\n        return undefined;\r\n    ***REMOVED***\r\n\r\n    try ***REMOVED***\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) ***REMOVED***\r\n\r\n                if (err) ***REMOVED***\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                ***REMOVED***\r\n\r\n                if (response === null) ***REMOVED***\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                ***REMOVED***\r\n\r\n                if (!(response instanceof responseCtor)) ***REMOVED***\r\n                    try ***REMOVED***\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    ***REMOVED*** catch (err) ***REMOVED***\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    ***REMOVED***\r\n                ***REMOVED***\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            ***REMOVED***\r\n        );\r\n    ***REMOVED*** catch (err) ***REMOVED***\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() ***REMOVED*** callback(err); ***REMOVED***, 0);\r\n        return undefined;\r\n    ***REMOVED***\r\n***REMOVED***;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param ***REMOVED***boolean***REMOVED*** [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns ***REMOVED***rpc.Service***REMOVED*** `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) ***REMOVED***\r\n    if (this.rpcImpl) ***REMOVED***\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(33),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Service name\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Service options\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nfunction Service(name, options) ***REMOVED***\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type ***REMOVED***Object.<string,Method>***REMOVED***\r\n     */\r\n    this.methods = ***REMOVED******REMOVED***; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type ***REMOVED***Method[]|null***REMOVED***\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n***REMOVED***\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property ***REMOVED***Object.<string,IMethod>***REMOVED*** methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param ***REMOVED***string***REMOVED*** name Service name\r\n * @param ***REMOVED***IService***REMOVED*** json Service descriptor\r\n * @returns ***REMOVED***Service***REMOVED*** Created service\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    return service;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @returns ***REMOVED***IService***REMOVED*** Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON() ***REMOVED***\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ ***REMOVED******REMOVED***,\r\n        \"nested\"  , inherited && inherited.nested || undefined\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type ***REMOVED***Method[]***REMOVED***\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", ***REMOVED***\r\n    get: function() ***REMOVED***\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    ***REMOVED***\r\n***REMOVED***);\r\n\r\nfunction clearCache(service) ***REMOVED***\r\n    service._methodsArray = null;\r\n    return service;\r\n***REMOVED***\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) ***REMOVED***\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() ***REMOVED***\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) ***REMOVED***\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    ***REMOVED***\r\n    return Namespace.prototype.add.call(this, object);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) ***REMOVED***\r\n    if (object instanceof Method) ***REMOVED***\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    ***REMOVED***\r\n    return Namespace.prototype.remove.call(this, object);\r\n***REMOVED***;\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param ***REMOVED***RPCImpl***REMOVED*** rpcImpl RPC implementation\r\n * @param ***REMOVED***boolean***REMOVED*** [requestDelimited=false] Whether requests are length-delimited\r\n * @param ***REMOVED***boolean***REMOVED*** [responseDelimited=false] Whether responses are length-delimited\r\n * @returns ***REMOVED***rpc.Service***REMOVED*** RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) ***REMOVED***\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) ***REMOVED***\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")(***REMOVED***\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        ***REMOVED***);\r\n    ***REMOVED***\r\n    return rpcService;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(30),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(38),\r\n    util      = require(33),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(36),\r\n    converter = require(11),\r\n    wrappers  = require(37);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** name Message name\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options\r\n */\r\nfunction Type(name, options) ***REMOVED***\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type ***REMOVED***Object.<string,Field>***REMOVED***\r\n     */\r\n    this.fields = ***REMOVED******REMOVED***;  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type ***REMOVED***Object.<string,OneOf>***REMOVED***\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type ***REMOVED***number[][]***REMOVED***\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type ***REMOVED***Array.<number[]|string>***REMOVED***\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type ***REMOVED***boolean|undefined***REMOVED***\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type ***REMOVED***Object.<number,Field>|null***REMOVED***\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type ***REMOVED***Field[]|null***REMOVED***\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type ***REMOVED***OneOf[]|null***REMOVED***\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type ***REMOVED***Constructor<***REMOVED******REMOVED***>***REMOVED***\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n***REMOVED***\r\n\r\nObject.defineProperties(Type.prototype, ***REMOVED***\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type ***REMOVED***Object.<number,Field>***REMOVED***\r\n     * @readonly\r\n     */\r\n    fieldsById: ***REMOVED***\r\n        get: function() ***REMOVED***\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = ***REMOVED******REMOVED***;\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) ***REMOVED***\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            ***REMOVED***\r\n            return this._fieldsById;\r\n        ***REMOVED***\r\n    ***REMOVED***,\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type ***REMOVED***Field[]***REMOVED***\r\n     * @readonly\r\n     */\r\n    fieldsArray: ***REMOVED***\r\n        get: function() ***REMOVED***\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        ***REMOVED***\r\n    ***REMOVED***,\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type ***REMOVED***OneOf[]***REMOVED***\r\n     * @readonly\r\n     */\r\n    oneofsArray: ***REMOVED***\r\n        get: function() ***REMOVED***\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        ***REMOVED***\r\n    ***REMOVED***,\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend ***REMOVED***@link Message***REMOVED*** yet, its prototype will be setup accordingly and static methods will be populated. If it already extends ***REMOVED***@link Message***REMOVED***, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type ***REMOVED***Constructor<***REMOVED******REMOVED***>***REMOVED***\r\n     */\r\n    ctor: ***REMOVED***\r\n        get: function() ***REMOVED***\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        ***REMOVED***,\r\n        set: function(ctor) ***REMOVED***\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) ***REMOVED***\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            ***REMOVED***\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = ***REMOVED******REMOVED***;\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = ***REMOVED***\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                ***REMOVED***;\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n***REMOVED***);\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param ***REMOVED***Type***REMOVED*** mtype Message type\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s=***REMOVED******REMOVED***\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n***REMOVED***;\r\n\r\nfunction clearCache(type) ***REMOVED***\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n***REMOVED***\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property ***REMOVED***Object.<string,IOneOf>***REMOVED*** [oneofs] Oneof descriptors\r\n * @property ***REMOVED***Object.<string,IField>***REMOVED*** fields Field descriptors\r\n * @property ***REMOVED***number[][]***REMOVED*** [extensions] Extension ranges\r\n * @property ***REMOVED***number[][]***REMOVED*** [reserved] Reserved ranges\r\n * @property ***REMOVED***boolean***REMOVED*** [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param ***REMOVED***string***REMOVED*** name Message name\r\n * @param ***REMOVED***IType***REMOVED*** json Message type descriptor\r\n * @returns ***REMOVED***Type***REMOVED*** Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) ***REMOVED***\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) ***REMOVED***\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        ***REMOVED***\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @returns ***REMOVED***IType***REMOVED*** Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON() ***REMOVED***\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) ***REMOVED*** return !obj.declaringField; ***REMOVED***)) || ***REMOVED******REMOVED***,\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined\r\n    ]);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() ***REMOVED***\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) ***REMOVED***\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n***REMOVED***;\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** object Nested object to add\r\n * @returns ***REMOVED***Type***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n * @throws ***REMOVED***Error***REMOVED*** If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) ***REMOVED***\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) ***REMOVED***\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    ***REMOVED***\r\n    if (object instanceof OneOf) ***REMOVED***\r\n        if (!this.oneofs)\r\n            this.oneofs = ***REMOVED******REMOVED***;\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    ***REMOVED***\r\n    return Namespace.prototype.add.call(this, object);\r\n***REMOVED***;\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param ***REMOVED***ReflectionObject***REMOVED*** object Nested object to remove\r\n * @returns ***REMOVED***Type***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid\r\n * @throws ***REMOVED***Error***REMOVED*** If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) ***REMOVED***\r\n    if (object instanceof Field && object.extend === undefined) ***REMOVED***\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    ***REMOVED***\r\n    if (object instanceof OneOf) ***REMOVED***\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    ***REMOVED***\r\n    return Namespace.prototype.remove.call(this, object);\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param ***REMOVED***number***REMOVED*** id Id to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) ***REMOVED***\r\n    return Namespace.isReservedId(this.reserved, id);\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param ***REMOVED***string***REMOVED*** name Name to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) ***REMOVED***\r\n    return Namespace.isReservedName(this.reserved, name);\r\n***REMOVED***;\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [properties] Properties to set\r\n * @returns ***REMOVED***Message<***REMOVED******REMOVED***>***REMOVED*** Message instance\r\n */\r\nType.prototype.create = function create(properties) ***REMOVED***\r\n    return new this.ctor(properties);\r\n***REMOVED***;\r\n\r\n/**\r\n * Sets up ***REMOVED***@link Type#encode|encode***REMOVED***, ***REMOVED***@link Type#decode|decode***REMOVED*** and ***REMOVED***@link Type#verify|verify***REMOVED***.\r\n * @returns ***REMOVED***Type***REMOVED*** `this`\r\n */\r\nType.prototype.setup = function setup() ***REMOVED***\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)(***REMOVED***\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    ***REMOVED***);\r\n    this.decode = decoder(this)(***REMOVED***\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    ***REMOVED***);\r\n    this.verify = verifier(this)(***REMOVED***\r\n        types : types,\r\n        util  : util\r\n    ***REMOVED***);\r\n    this.fromObject = converter.fromObject(this)(***REMOVED***\r\n        types : types,\r\n        util  : util\r\n    ***REMOVED***);\r\n    this.toObject = converter.toObject(this)(***REMOVED***\r\n        types : types,\r\n        util  : util\r\n    ***REMOVED***);\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) ***REMOVED***\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) ***REMOVED***\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // ***REMOVED***\r\n        // if (wrapper.toObject) ***REMOVED***\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // ***REMOVED***\r\n    ***REMOVED***\r\n\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly ***REMOVED***@link Type#verify|verify***REMOVED*** messages.\r\n * @param ***REMOVED***Message<***REMOVED******REMOVED***>|Object.<string,*>***REMOVED*** message Message instance or plain object\r\n * @param ***REMOVED***Writer***REMOVED*** [writer] Writer to encode to\r\n * @returns ***REMOVED***Writer***REMOVED*** writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) ***REMOVED***\r\n    return this.setup().encode(message, writer); // overrides this method\r\n***REMOVED***;\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly ***REMOVED***@link Type#verify|verify***REMOVED*** messages.\r\n * @param ***REMOVED***Message<***REMOVED******REMOVED***>|Object.<string,*>***REMOVED*** message Message instance or plain object\r\n * @param ***REMOVED***Writer***REMOVED*** [writer] Writer to encode to\r\n * @returns ***REMOVED***Writer***REMOVED*** writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) ***REMOVED***\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n***REMOVED***;\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param ***REMOVED***Reader|Uint8Array***REMOVED*** reader Reader or buffer to decode from\r\n * @param ***REMOVED***number***REMOVED*** [length] Length of the message, if known beforehand\r\n * @returns ***REMOVED***Message<***REMOVED******REMOVED***>***REMOVED*** Decoded message\r\n * @throws ***REMOVED***Error***REMOVED*** If the payload is not a reader or valid buffer\r\n * @throws ***REMOVED***util.ProtocolError<***REMOVED******REMOVED***>***REMOVED*** If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) ***REMOVED***\r\n    return this.setup().decode(reader, length); // overrides this method\r\n***REMOVED***;\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param ***REMOVED***Reader|Uint8Array***REMOVED*** reader Reader or buffer to decode from\r\n * @returns ***REMOVED***Message<***REMOVED******REMOVED***>***REMOVED*** Decoded message\r\n * @throws ***REMOVED***Error***REMOVED*** If the payload is not a reader or valid buffer\r\n * @throws ***REMOVED***util.ProtocolError***REMOVED*** If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) ***REMOVED***\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n***REMOVED***;\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** message Plain object to verify\r\n * @returns ***REMOVED***null|string***REMOVED*** `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) ***REMOVED***\r\n    return this.setup().verify(message); // overrides this method\r\n***REMOVED***;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** object Plain object to convert\r\n * @returns ***REMOVED***Message<***REMOVED******REMOVED***>***REMOVED*** Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) ***REMOVED***\r\n    return this.setup().fromObject(object);\r\n***REMOVED***;\r\n\r\n/**\r\n * Conversion options as used by ***REMOVED***@link Type#toObject***REMOVED*** and ***REMOVED***@link Message.toObject***REMOVED***.\r\n * @interface IConversionOptions\r\n * @property ***REMOVED***Function***REMOVED*** [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a ***REMOVED***@link Long***REMOVED*** with a long library.\r\n * @property ***REMOVED***Function***REMOVED*** [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property ***REMOVED***Function***REMOVED*** [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property ***REMOVED***boolean***REMOVED*** [defaults=false] Also sets default values on the resulting object\r\n * @property ***REMOVED***boolean***REMOVED*** [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property ***REMOVED***boolean***REMOVED*** [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property ***REMOVED***boolean***REMOVED*** [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property ***REMOVED***boolean***REMOVED*** [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param ***REMOVED***Message<***REMOVED******REMOVED***>***REMOVED*** message Message instance\r\n * @param ***REMOVED***IConversionOptions***REMOVED*** [options] Conversion options\r\n * @returns ***REMOVED***Object.<string,*>***REMOVED*** Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) ***REMOVED***\r\n    return this.setup().toObject(message, options);\r\n***REMOVED***;\r\n\r\n/**\r\n * Decorator function as returned by ***REMOVED***@link Type.d***REMOVED*** (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Constructor<T>***REMOVED*** target Target constructor\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param ***REMOVED***string***REMOVED*** [typeName] Type name, defaults to the constructor's name\r\n * @returns ***REMOVED***TypeDecorator<T>***REMOVED*** Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) ***REMOVED***\r\n    return function typeDecorator(target) ***REMOVED***\r\n        util.decorateType(target, typeName);\r\n    ***REMOVED***;\r\n***REMOVED***;\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) ***REMOVED***\r\n    var i = 0, o = ***REMOVED******REMOVED***;\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n***REMOVED***\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type ***REMOVED***Object.<string,number>***REMOVED***\r\n * @const\r\n * @property ***REMOVED***number***REMOVED*** double=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** float=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** int32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** uint32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** sint32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** fixed32=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** sfixed32=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** int64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** uint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** sint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** fixed64=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** sfixed64=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** bool=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** string=2 Ldelim wire type\r\n * @property ***REMOVED***number***REMOVED*** bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type ***REMOVED***Object.<string,*>***REMOVED***\r\n * @const\r\n * @property ***REMOVED***number***REMOVED*** double=0 Double default\r\n * @property ***REMOVED***number***REMOVED*** float=0 Float default\r\n * @property ***REMOVED***number***REMOVED*** int32=0 Int32 default\r\n * @property ***REMOVED***number***REMOVED*** uint32=0 Uint32 default\r\n * @property ***REMOVED***number***REMOVED*** sint32=0 Sint32 default\r\n * @property ***REMOVED***number***REMOVED*** fixed32=0 Fixed32 default\r\n * @property ***REMOVED***number***REMOVED*** sfixed32=0 Sfixed32 default\r\n * @property ***REMOVED***number***REMOVED*** int64=0 Int64 default\r\n * @property ***REMOVED***number***REMOVED*** uint64=0 Uint64 default\r\n * @property ***REMOVED***number***REMOVED*** sint64=0 Sint32 default\r\n * @property ***REMOVED***number***REMOVED*** fixed64=0 Fixed64 default\r\n * @property ***REMOVED***number***REMOVED*** sfixed64=0 Sfixed64 default\r\n * @property ***REMOVED***boolean***REMOVED*** bool=false Bool default\r\n * @property ***REMOVED***string***REMOVED*** string=\"\" String default\r\n * @property ***REMOVED***Array.<number>***REMOVED*** bytes=Array(0) Bytes default\r\n * @property ***REMOVED***null***REMOVED*** message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type ***REMOVED***Object.<string,number>***REMOVED***\r\n * @const\r\n * @property ***REMOVED***number***REMOVED*** int64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** uint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** sint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** fixed64=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type ***REMOVED***Object.<string,number>***REMOVED***\r\n * @const\r\n * @property ***REMOVED***number***REMOVED*** int32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** uint32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** sint32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** fixed32=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** sfixed32=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** int64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** uint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** sint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** fixed64=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** sfixed64=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** bool=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type ***REMOVED***Object.<string,number>***REMOVED***\r\n * @const\r\n * @property ***REMOVED***number***REMOVED*** double=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** float=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** int32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** uint32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** sint32=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** fixed32=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** sfixed32=5 Fixed32 wire type\r\n * @property ***REMOVED***number***REMOVED*** int64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** uint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** sint64=0 Varint wire type\r\n * @property ***REMOVED***number***REMOVED*** fixed64=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** sfixed64=1 Fixed64 wire type\r\n * @property ***REMOVED***number***REMOVED*** bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nvar roots = require(27);\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type ***REMOVED***Object.<string,*>***REMOVED***\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** object Object to convert\r\n * @returns ***REMOVED***Array.<*>***REMOVED*** Converted array\r\n */\r\nutil.toArray = function toArray(object) ***REMOVED***\r\n    if (object) ***REMOVED***\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    ***REMOVED***\r\n    return [];\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param ***REMOVED***Array.<*>***REMOVED*** array Array to convert\r\n * @returns ***REMOVED***Object.<string,*>***REMOVED*** Converted object\r\n */\r\nutil.toObject = function toObject(array) ***REMOVED***\r\n    var object = ***REMOVED******REMOVED***,\r\n        index  = 0;\r\n    while (index < array.length) ***REMOVED***\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    ***REMOVED***\r\n    return object;\r\n***REMOVED***;\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param ***REMOVED***string***REMOVED*** name Name to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) ***REMOVED***\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n***REMOVED***;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param ***REMOVED***string***REMOVED*** prop Property name\r\n * @returns ***REMOVED***string***REMOVED*** Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) ***REMOVED***\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param ***REMOVED***string***REMOVED*** str String to convert\r\n * @returns ***REMOVED***string***REMOVED*** Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) ***REMOVED***\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n***REMOVED***;\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param ***REMOVED***string***REMOVED*** str String to convert\r\n * @returns ***REMOVED***string***REMOVED*** Converted string\r\n */\r\nutil.camelCase = function camelCase(str) ***REMOVED***\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) ***REMOVED*** return $1.toUpperCase(); ***REMOVED***);\r\n***REMOVED***;\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param ***REMOVED***Field***REMOVED*** a First field\r\n * @param ***REMOVED***Field***REMOVED*** b Second field\r\n * @returns ***REMOVED***number***REMOVED*** Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) ***REMOVED***\r\n    return a.id - b.id;\r\n***REMOVED***;\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param ***REMOVED***Constructor<T>***REMOVED*** ctor Constructor function\r\n * @param ***REMOVED***string***REMOVED*** [typeName] Type name, defaults to the constructor's name\r\n * @returns ***REMOVED***Type***REMOVED*** Reflected type\r\n * @template T extends Message<T>\r\n * @property ***REMOVED***Root***REMOVED*** root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) ***REMOVED***\r\n        if (typeName && ctor.$type.name !== typeName) ***REMOVED***\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        ***REMOVED***\r\n        return ctor.$type;\r\n    ***REMOVED***\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", ***REMOVED*** value: type, enumerable: false ***REMOVED***);\r\n    Object.defineProperty(ctor.prototype, \"$type\", ***REMOVED*** value: type, enumerable: false ***REMOVED***);\r\n    return type;\r\n***REMOVED***;\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param ***REMOVED***Object***REMOVED*** object Enum object\r\n * @returns ***REMOVED***Enum***REMOVED*** Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) ***REMOVED***\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(14);\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", ***REMOVED*** value: enm, enumerable: false ***REMOVED***);\r\n    return enm;\r\n***REMOVED***;\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type ***REMOVED***Root***REMOVED***\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", ***REMOVED***\r\n    get: function() ***REMOVED***\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(26))());\r\n    ***REMOVED***\r\n***REMOVED***);\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param ***REMOVED***number***REMOVED*** lo Low 32 bits, unsigned\r\n * @param ***REMOVED***number***REMOVED*** hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) ***REMOVED***\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.hi = hi >>> 0;\r\n***REMOVED***\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type ***REMOVED***util.LongBits***REMOVED***\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() ***REMOVED*** return 0; ***REMOVED***;\r\nzero.zzEncode = zero.zzDecode = function() ***REMOVED*** return this; ***REMOVED***;\r\nzero.length = function() ***REMOVED*** return 1; ***REMOVED***;\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type ***REMOVED***string***REMOVED***\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param ***REMOVED***number***REMOVED*** value Value\r\n * @returns ***REMOVED***util.LongBits***REMOVED*** Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) ***REMOVED***\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) ***REMOVED***\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) ***REMOVED***\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    return new LongBits(lo, hi);\r\n***REMOVED***;\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param ***REMOVED***Long|number|string***REMOVED*** value Value\r\n * @returns ***REMOVED***util.LongBits***REMOVED*** Instance\r\n */\r\nLongBits.from = function from(value) ***REMOVED***\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) ***REMOVED***\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    ***REMOVED***\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param ***REMOVED***boolean***REMOVED*** [unsigned=false] Whether unsigned or not\r\n * @returns ***REMOVED***number***REMOVED*** Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) ***REMOVED***\r\n    if (!unsigned && this.hi >>> 31) ***REMOVED***\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    ***REMOVED***\r\n    return this.lo + this.hi * 4294967296;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param ***REMOVED***boolean***REMOVED*** [unsigned=false] Whether unsigned or not\r\n * @returns ***REMOVED***Long***REMOVED*** Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) ***REMOVED***\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : ***REMOVED*** low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) ***REMOVED***;\r\n***REMOVED***;\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param ***REMOVED***string***REMOVED*** hash Hash\r\n * @returns ***REMOVED***util.LongBits***REMOVED*** Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) ***REMOVED***\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns ***REMOVED***string***REMOVED*** Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() ***REMOVED***\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n***REMOVED***;\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns ***REMOVED***util.LongBits***REMOVED*** `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() ***REMOVED***\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns ***REMOVED***util.LongBits***REMOVED*** `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() ***REMOVED***\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns ***REMOVED***number***REMOVED*** Length\r\n */\r\nLongBits.prototype.length = function length() ***REMOVED***\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n***REMOVED***;\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(34);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type ***REMOVED***Array.<*>***REMOVED***\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type ***REMOVED***Object***REMOVED***\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze(***REMOVED******REMOVED***) : /* istanbul ignore next */ ***REMOVED******REMOVED***; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type ***REMOVED***boolean***REMOVED***\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param ***REMOVED*******REMOVED*** value Value to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) ***REMOVED***\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param ***REMOVED*******REMOVED*** value Value to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) ***REMOVED***\r\n    return typeof value === \"string\" || value instanceof String;\r\n***REMOVED***;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param ***REMOVED*******REMOVED*** value Value to test\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) ***REMOVED***\r\n    return value && typeof value === \"object\";\r\n***REMOVED***;\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of ***REMOVED***@link util.isSet***REMOVED***.\r\n * @function\r\n * @param ***REMOVED***Object***REMOVED*** obj Plain object or message instance\r\n * @param ***REMOVED***string***REMOVED*** prop Property name\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param ***REMOVED***Object***REMOVED*** obj Plain object or message instance\r\n * @param ***REMOVED***string***REMOVED*** prop Property name\r\n * @returns ***REMOVED***boolean***REMOVED*** `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) ***REMOVED***\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n***REMOVED***;\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type ***REMOVED***Constructor<Buffer>***REMOVED***\r\n */\r\nutil.Buffer = (function() ***REMOVED***\r\n    try ***REMOVED***\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    ***REMOVED*** catch (e) ***REMOVED***\r\n        /* istanbul ignore next */\r\n        return null;\r\n    ***REMOVED***\r\n***REMOVED***)();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param ***REMOVED***number|number[]***REMOVED*** [sizeOrArray=0] Buffer size or number array\r\n * @returns ***REMOVED***Uint8Array|Buffer***REMOVED*** Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) ***REMOVED***\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n***REMOVED***;\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type ***REMOVED***Constructor<Uint8Array>***REMOVED***\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property ***REMOVED***number***REMOVED*** low Low bits\r\n * @property ***REMOVED***number***REMOVED*** high High bits\r\n * @property ***REMOVED***boolean***REMOVED*** unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type ***REMOVED***Constructor<Long>***REMOVED***\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type ***REMOVED***RegExp***REMOVED***\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type ***REMOVED***RegExp***REMOVED***\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type ***REMOVED***RegExp***REMOVED***\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]***REMOVED***8***REMOVED***|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param ***REMOVED***Long|number***REMOVED*** value Value to convert\r\n * @returns ***REMOVED***string***REMOVED*** Hash\r\n */\r\nutil.longToHash = function longToHash(value) ***REMOVED***\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n***REMOVED***;\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param ***REMOVED***string***REMOVED*** hash Hash\r\n * @param ***REMOVED***boolean***REMOVED*** [unsigned=false] Whether unsigned or not\r\n * @returns ***REMOVED***Long|number***REMOVED*** Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) ***REMOVED***\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n***REMOVED***;\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** dst Destination object\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** src Source object\r\n * @param ***REMOVED***boolean***REMOVED*** [ifNotSet=false] Merges only if the key is not already set\r\n * @returns ***REMOVED***Object.<string,*>***REMOVED*** Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) ***REMOVED*** // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n***REMOVED***\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param ***REMOVED***string***REMOVED*** str String to convert\r\n * @returns ***REMOVED***string***REMOVED*** Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) ***REMOVED***\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n***REMOVED***;\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param ***REMOVED***string***REMOVED*** name Error name\r\n * @returns ***REMOVED***Constructor<Error>***REMOVED*** Custom error constructor\r\n */\r\nfunction newError(name) ***REMOVED***\r\n\r\n    function CustomError(message, properties) ***REMOVED***\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", ***REMOVED*** get: function() ***REMOVED*** return message; ***REMOVED*** ***REMOVED***);\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", ***REMOVED*** value: (new Error()).stack || \"\" ***REMOVED***);\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    ***REMOVED***\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", ***REMOVED*** get: function() ***REMOVED*** return name; ***REMOVED*** ***REMOVED***);\r\n\r\n    CustomError.prototype.toString = function toString() ***REMOVED***\r\n        return this.name + \": \" + this.message;\r\n    ***REMOVED***;\r\n\r\n    return CustomError;\r\n***REMOVED***\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param ***REMOVED***string***REMOVED*** message Error message\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** [properties] Additional properties\r\n * @example\r\n * try ***REMOVED***\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * ***REMOVED*** catch (e) ***REMOVED***\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * ***REMOVED***\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type ***REMOVED***Message<T>***REMOVED***\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by ***REMOVED***@link util.oneOfGetter***REMOVED***.\r\n * @typedef OneOfGetter\r\n * @type ***REMOVED***function***REMOVED***\r\n * @returns ***REMOVED***string|undefined***REMOVED*** Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param ***REMOVED***string[]***REMOVED*** fieldNames Field names\r\n * @returns ***REMOVED***OneOfGetter***REMOVED*** Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) ***REMOVED***\r\n    var fieldMap = ***REMOVED******REMOVED***;\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns ***REMOVED***string|undefined***REMOVED*** Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() ***REMOVED*** // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    ***REMOVED***;\r\n***REMOVED***;\r\n\r\n/**\r\n * A OneOf setter as returned by ***REMOVED***@link util.oneOfSetter***REMOVED***.\r\n * @typedef OneOfSetter\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***string|undefined***REMOVED*** value Field name\r\n * @returns ***REMOVED***undefined***REMOVED***\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param ***REMOVED***string[]***REMOVED*** fieldNames Field names\r\n * @returns ***REMOVED***OneOfSetter***REMOVED*** Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) ***REMOVED***\r\n\r\n    /**\r\n     * @param ***REMOVED***string***REMOVED*** name Field name\r\n     * @returns ***REMOVED***undefined***REMOVED***\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) ***REMOVED***\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    ***REMOVED***;\r\n***REMOVED***;\r\n\r\n/**\r\n * Default conversion options used for ***REMOVED***@link Message#toJSON***REMOVED*** implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type ***REMOVED***IConversionOptions***REMOVED***\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = ***REMOVED***\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n***REMOVED***;\r\n\r\nutil._configure = function() ***REMOVED***\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) ***REMOVED***\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    ***REMOVED***\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) ***REMOVED***\r\n            return new Buffer(value, encoding);\r\n        ***REMOVED***;\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) ***REMOVED***\r\n            return new Buffer(size);\r\n        ***REMOVED***;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(33);\r\n\r\nfunction invalid(field, expected) ***REMOVED***\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"***REMOVED***k:\"+field.keyType+\"***REMOVED***\" : \"\") + \" expected\";\r\n***REMOVED***\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param ***REMOVED***Codegen***REMOVED*** gen Codegen instance\r\n * @param ***REMOVED***Field***REMOVED*** field Reflected field\r\n * @param ***REMOVED***number***REMOVED*** fieldIndex Field index\r\n * @param ***REMOVED***string***REMOVED*** ref Variable reference\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) ***REMOVED***\r\n        if (field.resolvedType instanceof Enum) ***REMOVED*** gen\r\n            (\"switch(%s)***REMOVED***\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"***REMOVED***\");\r\n        ***REMOVED*** else ***REMOVED***\r\n            gen\r\n            (\"***REMOVED***\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"***REMOVED***\");\r\n        ***REMOVED***\r\n    ***REMOVED*** else ***REMOVED***\r\n        switch (field.type) ***REMOVED***\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        ***REMOVED***\r\n    ***REMOVED***\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n***REMOVED***\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param ***REMOVED***Codegen***REMOVED*** gen Codegen instance\r\n * @param ***REMOVED***Field***REMOVED*** field Reflected field\r\n * @param ***REMOVED***string***REMOVED*** ref Variable reference\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) ***REMOVED***\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    ***REMOVED***\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n***REMOVED***\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param ***REMOVED***Type***REMOVED*** mtype Message type\r\n * @returns ***REMOVED***Codegen***REMOVED*** Codegen instance\r\n */\r\nfunction verifier(mtype) ***REMOVED***\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = ***REMOVED******REMOVED***;\r\n    if (oneofs.length) gen\r\n    (\"var p=***REMOVED******REMOVED***\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) ***REMOVED***\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j))***REMOVED***\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) ***REMOVED*** gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i)***REMOVED***\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"***REMOVED***\");\r\n\r\n        // repeated fields\r\n        ***REMOVED*** else if (field.repeated) ***REMOVED*** gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i)***REMOVED***\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"***REMOVED***\");\r\n\r\n        // required or present fields\r\n        ***REMOVED*** else ***REMOVED***\r\n            if (field.partOf) ***REMOVED***\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            ***REMOVED***\r\n            genVerifyValue(gen, field, i, ref);\r\n        ***REMOVED***\r\n        if (field.optional) gen\r\n        (\"***REMOVED***\");\r\n    ***REMOVED***\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n***REMOVED***","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type ***REMOVED***Object.<string,IWrapper>***REMOVED***\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(19);\r\n\r\n/**\r\n * From object converter part of an ***REMOVED***@link IWrapper***REMOVED***.\r\n * @typedef WrapperFromObjectConverter\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Object.<string,*>***REMOVED*** object Plain object\r\n * @returns ***REMOVED***Message<***REMOVED******REMOVED***>***REMOVED*** Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an ***REMOVED***@link IWrapper***REMOVED***.\r\n * @typedef WrapperToObjectConverter\r\n * @type ***REMOVED***function***REMOVED***\r\n * @param ***REMOVED***Message<***REMOVED******REMOVED***>***REMOVED*** message Message instance\r\n * @param ***REMOVED***IConversionOptions***REMOVED*** [options] Conversion options\r\n * @returns ***REMOVED***Object.<string,*>***REMOVED*** Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of ***REMOVED***@link wrappers***REMOVED***.\r\n * @interface IWrapper\r\n * @property ***REMOVED***WrapperFromObjectConverter***REMOVED*** [fromObject] From object converter\r\n * @property ***REMOVED***WrapperToObjectConverter***REMOVED*** [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = ***REMOVED***\r\n\r\n    fromObject: function(object) ***REMOVED***\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) ***REMOVED***\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) ***REMOVED***\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create(***REMOVED***\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                ***REMOVED***);\r\n            ***REMOVED***\r\n        ***REMOVED***\r\n\r\n        return this.fromObject(object);\r\n    ***REMOVED***,\r\n\r\n    toObject: function(message, options) ***REMOVED***\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) ***REMOVED***\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        ***REMOVED***\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) ***REMOVED***\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        ***REMOVED***\r\n\r\n        return this.toObject(message, options);\r\n    ***REMOVED***\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param ***REMOVED***function(*, Uint8Array, number)***REMOVED*** fn Function to call\r\n * @param ***REMOVED***number***REMOVED*** len Value byte length\r\n * @param ***REMOVED*******REMOVED*** val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) ***REMOVED***\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type ***REMOVED***function(Uint8Array, number, *)***REMOVED***\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type ***REMOVED***Writer.Op|undefined***REMOVED***\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type ***REMOVED*******REMOVED***\r\n     */\r\n    this.val = val; // type varies\r\n***REMOVED***\r\n\r\n/* istanbul ignore next */\r\nfunction noop() ***REMOVED******REMOVED*** // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param ***REMOVED***Writer***REMOVED*** writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) ***REMOVED***\r\n\r\n    /**\r\n     * Current head.\r\n     * @type ***REMOVED***Writer.Op***REMOVED***\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type ***REMOVED***Writer.Op***REMOVED***\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type ***REMOVED***State|null***REMOVED***\r\n     */\r\n    this.next = writer.states;\r\n***REMOVED***\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() ***REMOVED***\r\n\r\n    /**\r\n     * Current length.\r\n     * @type ***REMOVED***number***REMOVED***\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type ***REMOVED***Object***REMOVED***\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type ***REMOVED***Object***REMOVED***\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type ***REMOVED***Object|null***REMOVED***\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n***REMOVED***\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns ***REMOVED***BufferWriter|Writer***REMOVED*** A ***REMOVED***@link BufferWriter***REMOVED*** when Buffers are supported, otherwise a ***REMOVED***@link Writer***REMOVED***\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() ***REMOVED***\r\n        return (Writer.create = function create_buffer() ***REMOVED***\r\n            return new BufferWriter();\r\n        ***REMOVED***)();\r\n    ***REMOVED***\r\n    /* istanbul ignore next */\r\n    : function create_array() ***REMOVED***\r\n        return new Writer();\r\n    ***REMOVED***;\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param ***REMOVED***number***REMOVED*** size Buffer size\r\n * @returns ***REMOVED***Uint8Array***REMOVED*** Buffer\r\n */\r\nWriter.alloc = function alloc(size) ***REMOVED***\r\n    return new util.Array(size);\r\n***REMOVED***;\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param ***REMOVED***function(Uint8Array, number, *)***REMOVED*** fn Function to call\r\n * @param ***REMOVED***number***REMOVED*** len Value byte length\r\n * @param ***REMOVED***number***REMOVED*** val Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) ***REMOVED***\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n***REMOVED***;\r\n\r\nfunction writeByte(val, buf, pos) ***REMOVED***\r\n    buf[pos] = val & 255;\r\n***REMOVED***\r\n\r\nfunction writeVarint32(val, buf, pos) ***REMOVED***\r\n    while (val > 127) ***REMOVED***\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    ***REMOVED***\r\n    buf[pos] = val;\r\n***REMOVED***\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param ***REMOVED***number***REMOVED*** len Value byte length\r\n * @param ***REMOVED***number***REMOVED*** val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) ***REMOVED***\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n***REMOVED***\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param ***REMOVED***number***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) ***REMOVED***\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) ***REMOVED***\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param ***REMOVED***number***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) ***REMOVED***\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n***REMOVED***;\r\n\r\nfunction writeVarint64(val, buf, pos) ***REMOVED***\r\n    while (val.hi) ***REMOVED***\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    ***REMOVED***\r\n    while (val.lo > 127) ***REMOVED***\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    ***REMOVED***\r\n    buf[pos++] = val.lo;\r\n***REMOVED***\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param ***REMOVED***Long|number|string***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) ***REMOVED***\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param ***REMOVED***Long|number|string***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param ***REMOVED***Long|number|string***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) ***REMOVED***\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param ***REMOVED***boolean***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) ***REMOVED***\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n***REMOVED***;\r\n\r\nfunction writeFixed32(val, buf, pos) ***REMOVED***\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n***REMOVED***\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param ***REMOVED***number***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) ***REMOVED***\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param ***REMOVED***Long|number|string***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) ***REMOVED***\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param ***REMOVED***Long|number|string***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n * @throws ***REMOVED***TypeError***REMOVED*** If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.float = function write_float(value) ***REMOVED***\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param ***REMOVED***number***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.double = function write_double(value) ***REMOVED***\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n***REMOVED***;\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) ***REMOVED***\r\n        buf.set(val, pos); // also works for plain array values\r\n    ***REMOVED***\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) ***REMOVED***\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    ***REMOVED***;\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param ***REMOVED***Uint8Array|string***REMOVED*** value Buffer or base64 encoded string to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) ***REMOVED***\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) ***REMOVED***\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    ***REMOVED***\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n***REMOVED***;\r\n\r\n/**\r\n * Writes a string.\r\n * @param ***REMOVED***string***REMOVED*** value Value to write\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.string = function write_string(value) ***REMOVED***\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n***REMOVED***;\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling ***REMOVED***@link Writer#reset|reset***REMOVED*** or ***REMOVED***@link Writer#ldelim|ldelim***REMOVED*** resets the writer to the previous state.\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.fork = function fork() ***REMOVED***\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.reset = function reset() ***REMOVED***\r\n    if (this.states) ***REMOVED***\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    ***REMOVED*** else ***REMOVED***\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns ***REMOVED***Writer***REMOVED*** `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() ***REMOVED***\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) ***REMOVED***\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    ***REMOVED***\r\n    return this;\r\n***REMOVED***;\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns ***REMOVED***Uint8Array***REMOVED*** Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() ***REMOVED***\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) ***REMOVED***\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    ***REMOVED***\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n***REMOVED***;\r\n\r\nWriter._configure = function(BufferWriter_) ***REMOVED***\r\n    BufferWriter = BufferWriter_;\r\n***REMOVED***;\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(38);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(35);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() ***REMOVED***\r\n    Writer.call(this);\r\n***REMOVED***\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param ***REMOVED***number***REMOVED*** size Buffer size\r\n * @returns ***REMOVED***Buffer***REMOVED*** Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) ***REMOVED***\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n***REMOVED***;\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) ***REMOVED***\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    ***REMOVED***\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) ***REMOVED***\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    ***REMOVED***;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) ***REMOVED***\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n***REMOVED***;\r\n\r\nfunction writeStringBuffer(val, buf, pos) ***REMOVED***\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n***REMOVED***\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) ***REMOVED***\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n***REMOVED***;\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns ***REMOVED***Buffer***REMOVED*** Finished buffer\r\n */\r\n"],"sourceRoot":"."***REMOVED***