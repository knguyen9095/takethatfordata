"use strict";
module.exports = OneOf;

// extends ReflectionObject
var ReflectionObject = require("./object");
((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

var Field = require("./field"),
    util  = require("./util");

/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param ***REMOVED***string***REMOVED*** name Oneof name
 * @param ***REMOVED***string[]|Object.<string,*>***REMOVED*** [fieldNames] Field names
 * @param ***REMOVED***Object.<string,*>***REMOVED*** [options] Declared options
 */
function OneOf(name, fieldNames, options) ***REMOVED***
    if (!Array.isArray(fieldNames)) ***REMOVED***
        options = fieldNames;
        fieldNames = undefined;
    ***REMOVED***
    ReflectionObject.call(this, name, options);

    /* istanbul ignore if */
    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");

    /**
     * Field names that belong to this oneof.
     * @type ***REMOVED***string[]***REMOVED***
     */
    this.oneof = fieldNames || []; // toJSON, marker

    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type ***REMOVED***Field[]***REMOVED***
     * @readonly
     */
    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent
***REMOVED***

/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property ***REMOVED***Array.<string>***REMOVED*** oneof Oneof field names
 * @property ***REMOVED***Object.<string,*>***REMOVED*** [options] Oneof options
 */

/**
 * Constructs a oneof from a oneof descriptor.
 * @param ***REMOVED***string***REMOVED*** name Oneof name
 * @param ***REMOVED***IOneOf***REMOVED*** json Oneof descriptor
 * @returns ***REMOVED***OneOf***REMOVED*** Created oneof
 * @throws ***REMOVED***TypeError***REMOVED*** If arguments are invalid
 */
OneOf.fromJSON = function fromJSON(name, json) ***REMOVED***
    return new OneOf(name, json.oneof, json.options);
***REMOVED***;

/**
 * Converts this oneof to a oneof descriptor.
 * @returns ***REMOVED***IOneOf***REMOVED*** Oneof descriptor
 */
OneOf.prototype.toJSON = function toJSON() ***REMOVED***
    return util.toObject([
        "options" , this.options,
        "oneof"   , this.oneof
    ]);
***REMOVED***;

/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param ***REMOVED***OneOf***REMOVED*** oneof The oneof
 * @returns ***REMOVED***undefined***REMOVED***
 * @inner
 * @ignore
 */
function addFieldsToParent(oneof) ***REMOVED***
    if (oneof.parent)
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
            if (!oneof.fieldsArray[i].parent)
                oneof.parent.add(oneof.fieldsArray[i]);
***REMOVED***

/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param ***REMOVED***Field***REMOVED*** field Field to add
 * @returns ***REMOVED***OneOf***REMOVED*** `this`
 */
OneOf.prototype.add = function add(field) ***REMOVED***

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
***REMOVED***;

/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param ***REMOVED***Field***REMOVED*** field Field to remove
 * @returns ***REMOVED***OneOf***REMOVED*** `this`
 */
OneOf.prototype.remove = function remove(field) ***REMOVED***

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    var index = this.fieldsArray.indexOf(field);

    /* istanbul ignore if */
    if (index < 0)
        throw Error(field + " is not a member of " + this);

    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);

    /* istanbul ignore else */
    if (index > -1) // theoretical
        this.oneof.splice(index, 1);

    field.partOf = null;
    return this;
***REMOVED***;

/**
 * @override
 */
OneOf.prototype.onAdd = function onAdd(parent) ***REMOVED***
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for (var i = 0; i < this.oneof.length; ++i) ***REMOVED***
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) ***REMOVED***
            field.partOf = self;
            self.fieldsArray.push(field);
        ***REMOVED***
    ***REMOVED***
    // Add not yet present fields
    addFieldsToParent(this);
***REMOVED***;

/**
 * @override
 */
OneOf.prototype.onRemove = function onRemove(parent) ***REMOVED***
    for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
            field.parent.remove(field);
    ReflectionObject.prototype.onRemove.call(this, parent);
***REMOVED***;

/**
 * Decorator function as returned by ***REMOVED***@link OneOf.d***REMOVED*** (TypeScript).
 * @typedef OneOfDecorator
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***Object***REMOVED*** prototype Target prototype
 * @param ***REMOVED***string***REMOVED*** oneofName OneOf name
 * @returns ***REMOVED***undefined***REMOVED***
 */

/**
 * OneOf decorator (TypeScript).
 * @function
 * @param ***REMOVED***...string***REMOVED*** fieldNames Field names
 * @returns ***REMOVED***OneOfDecorator***REMOVED*** Decorator function
 * @template T extends string
 */
OneOf.d = function decorateOneOf() ***REMOVED***
    var fieldNames = new Array(arguments.length),
        index = 0;
    while (index < arguments.length)
        fieldNames[index] = arguments[index++];
    return function oneOfDecorator(prototype, oneofName) ***REMOVED***
        util.decorateType(prototype.constructor)
            .add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, ***REMOVED***
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        ***REMOVED***);
    ***REMOVED***;
***REMOVED***;
