"use strict";

/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to ***REMOVED***@link Service#create***REMOVED*** performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***Method|rpc.ServiceMethod<Message<***REMOVED******REMOVED***>,Message<***REMOVED******REMOVED***>>***REMOVED*** method Reflected or static method being called
 * @param ***REMOVED***Uint8Array***REMOVED*** requestData Request data
 * @param ***REMOVED***RPCImplCallback***REMOVED*** callback Callback function
 * @returns ***REMOVED***undefined***REMOVED***
 * @example
 * function rpcImpl(method, requestData, callback) ***REMOVED***
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) ***REMOVED***
 *         callback(err, responseData);
 *     ***REMOVED***);
 * ***REMOVED***
 */

/**
 * Node-style callback as used by ***REMOVED***@link RPCImpl***REMOVED***.
 * @typedef RPCImplCallback
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***Error|null***REMOVED*** error Error, if any, otherwise `null`
 * @param ***REMOVED***Uint8Array|null***REMOVED*** [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns ***REMOVED***undefined***REMOVED***
 */

rpc.Service = require("./rpc/service");
