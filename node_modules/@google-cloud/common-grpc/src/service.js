/*!
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @module commonGrpc/service
 */

'use strict';

var dotProp = require('dot-prop');
var duplexify = require('duplexify');
var extend = require('extend');
var grpc = require('grpc');
var is = require('is');
var nodeutil = require('util');
var retryRequest = require('retry-request');
var Service = require('@google-cloud/common').Service;
var through = require('through2');
var util = require('@google-cloud/common').util;

/**
 * @const ***REMOVED***object***REMOVED*** - A cache of proto objects.
 * @private
 */
var protoObjectCache = ***REMOVED******REMOVED***;

/**
 * @const ***REMOVED***object***REMOVED*** - A map of protobuf codes to HTTP status codes.
 * @private
 */
var GRPC_ERROR_CODE_TO_HTTP = ***REMOVED***
  0: ***REMOVED***
    code: 200,
    message: 'OK',
  ***REMOVED***,

  1: ***REMOVED***
    code: 499,
    message: 'Client Closed Request',
  ***REMOVED***,

  2: ***REMOVED***
    code: 500,
    message: 'Internal Server Error',
  ***REMOVED***,

  3: ***REMOVED***
    code: 400,
    message: 'Bad Request',
  ***REMOVED***,

  4: ***REMOVED***
    code: 504,
    message: 'Gateway Timeout',
  ***REMOVED***,

  5: ***REMOVED***
    code: 404,
    message: 'Not Found',
  ***REMOVED***,

  6: ***REMOVED***
    code: 409,
    message: 'Conflict',
  ***REMOVED***,

  7: ***REMOVED***
    code: 403,
    message: 'Forbidden',
  ***REMOVED***,

  8: ***REMOVED***
    code: 429,
    message: 'Too Many Requests',
  ***REMOVED***,

  9: ***REMOVED***
    code: 412,
    message: 'Precondition Failed',
  ***REMOVED***,

  10: ***REMOVED***
    code: 409,
    message: 'Conflict',
  ***REMOVED***,

  11: ***REMOVED***
    code: 400,
    message: 'Bad Request',
  ***REMOVED***,

  12: ***REMOVED***
    code: 501,
    message: 'Not Implemented',
  ***REMOVED***,

  13: ***REMOVED***
    code: 500,
    message: 'Internal Server Error',
  ***REMOVED***,

  14: ***REMOVED***
    code: 503,
    message: 'Service Unavailable',
  ***REMOVED***,

  15: ***REMOVED***
    code: 500,
    message: 'Internal Server Error',
  ***REMOVED***,

  16: ***REMOVED***
    code: 401,
    message: 'Unauthorized',
  ***REMOVED***,
***REMOVED***;

/**
 * The default configuration for all gRPC Service instantions.
 *
 * @resource [All options]***REMOVED***@link https://github.com/grpc/grpc/blob/13e185419cd177b7fb552601665e43820321a96b/include/grpc/impl/codegen/grpc_types.h#L148***REMOVED***
 *
 * @private
 *
 * @type ***REMOVED***object***REMOVED***
 */
var GRPC_SERVICE_OPTIONS = ***REMOVED***
  // RE: https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1991
  'grpc.max_send_message_length': -1, // unlimited
  'grpc.max_receive_message_length': -1, // unlimited

  // RE: https://github.com/grpc/grpc/issues/8839
  // RE: https://github.com/grpc/grpc/issues/8382
  // RE: https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1991
  'grpc.initial_reconnect_backoff_ms': 5000,
***REMOVED***;

/**
 * Service is a base class, meant to be inherited from by a "service," like
 * BigQuery or Storage.
 *
 * This handles making authenticated requests by exposing a `makeReq_` function.
 *
 * @constructor
 * @alias module:common/grpc-service
 *
 * @param ***REMOVED***object***REMOVED*** config - Configuration object.
 * @param ***REMOVED***string***REMOVED*** config.baseUrl - The base URL to make API requests to.
 * @param ***REMOVED***object***REMOVED*** config.grpcMetadata - Metadata to send with every request.
 * @param ***REMOVED***string[]***REMOVED*** config.scopes - The scopes required for the request.
 * @param ***REMOVED***string***REMOVED*** config.protosDir - The root directory where proto files live.
 * @param ***REMOVED***object***REMOVED*** config.protoServices - Directly provide the required proto
 *     files. This is useful when a single class requires multiple services.
 * @param ***REMOVED***object***REMOVED*** options - [Configuration object](#/docs/?method=gcloud).
 */
function GrpcService(config, options) ***REMOVED***
  if (global.GCLOUD_SANDBOX_ENV) ***REMOVED***
    // gRPC has a tendency to cause our doc unit tests to fail, so we prevent
    // any calls to that library from going through.
    // Reference: https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1137#issuecomment-193315047
    return global.GCLOUD_SANDBOX_ENV;
  ***REMOVED***

  Service.call(this, config, options);

  if (config.customEndpoint) ***REMOVED***
    this.grpcCredentials = grpc.credentials.createInsecure();
  ***REMOVED***

  this.grpcMetadata = new grpc.Metadata();

  this.grpcMetadata.add(
    'x-goog-api-client',
    [
      'gl-node/' + process.versions.node,
      'gccl/' + config.packageJson.version,
      'grpc/' + require('grpc/package.json').version,
    ].join(' ')
  );

  if (config.grpcMetadata) ***REMOVED***
    for (var prop in config.grpcMetadata) ***REMOVED***
      if (config.grpcMetadata.hasOwnProperty(prop)) ***REMOVED***
        this.grpcMetadata.add(prop, config.grpcMetadata[prop]);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  this.maxRetries = options.maxRetries;
  this.userAgent = util.getUserAgentFromPackageJson(config.packageJson);

  this.activeServiceMap_ = new Map();
  this.protos = ***REMOVED******REMOVED***;

  var protoServices = config.protoServices;

  var self = this;

  Object.keys(protoServices).forEach(function(name) ***REMOVED***
    var protoConfig = protoServices[name];
    var service = self.loadProtoFile_(protoConfig, config);

    self.protos[name] = service;

    if (protoConfig.baseUrl) ***REMOVED***
      service.baseUrl = protoConfig.baseUrl;
    ***REMOVED***
  ***REMOVED***);
***REMOVED***

nodeutil.inherits(GrpcService, Service);

/**
 * Make an authenticated request with gRPC.
 *
 * @param ***REMOVED***object***REMOVED*** protoOpts - The proto options.
 * @param ***REMOVED***string***REMOVED*** protoOpts.service - The service name.
 * @param ***REMOVED***string***REMOVED*** protoOpts.method - The method name.
 * @param ***REMOVED***number=***REMOVED*** protoOpts.timeout - After how many milliseconds should the
 *     request cancel.
 * @param ***REMOVED***object***REMOVED*** reqOpts - The request options.
 * @param ***REMOVED***function=***REMOVED*** callback - The callback function.
 */
GrpcService.prototype.request = function(protoOpts, reqOpts, callback) ***REMOVED***
  if (global.GCLOUD_SANDBOX_ENV) ***REMOVED***
    return global.GCLOUD_SANDBOX_ENV;
  ***REMOVED***

  var self = this;

  if (!this.grpcCredentials) ***REMOVED***
    // We must establish an authClient to give to grpc.
    this.getGrpcCredentials_(function(err, credentials) ***REMOVED***
      if (err) ***REMOVED***
        callback(err);
        return;
      ***REMOVED***

      self.grpcCredentials = credentials;
      self.request(protoOpts, reqOpts, callback);
    ***REMOVED***);

    return;
  ***REMOVED***

  var service = this.getService_(protoOpts);
  var metadata = this.grpcMetadata;
  var grpcOpts = ***REMOVED******REMOVED***;

  if (is.number(protoOpts.timeout)) ***REMOVED***
    grpcOpts.deadline = GrpcService.createDeadline_(protoOpts.timeout);
  ***REMOVED***

  try ***REMOVED***
    reqOpts = this.decorateRequest_(reqOpts);
  ***REMOVED*** catch (e) ***REMOVED***
    callback(e);
    return;
  ***REMOVED***

  // Retains a reference to an error from the response. If the final callback is
  // executed with this as the "response", we return it to the user as an error.
  var respError;

  var retryOpts = extend(
    ***REMOVED***
      retries: this.maxRetries,
      currentRetryAttempt: 0,
      shouldRetryFn: GrpcService.shouldRetryRequest_,

      // retry-request determines if it should retry from the incoming HTTP
      // response status. gRPC always returns an error proto message. We pass that
      // "error" into retry-request to act as the HTTP response, so it can use the
      // status code to determine if it should retry.
      request: function(_, onResponse) ***REMOVED***
        respError = null;

        return service[protoOpts.method](reqOpts, metadata, grpcOpts, function(
          err,
          resp
        ) ***REMOVED***
          if (err) ***REMOVED***
            respError = GrpcService.decorateError_(err);

            if (respError) ***REMOVED***
              onResponse(null, respError);
              return;
            ***REMOVED***

            onResponse(err, resp);
            return;
          ***REMOVED***

          onResponse(null, resp);
        ***REMOVED***);
      ***REMOVED***,
    ***REMOVED***,
    protoOpts.retryOpts
  );

  return retryRequest(null, retryOpts, function(err, resp) ***REMOVED***
    if (!err && resp === respError) ***REMOVED***
      err = respError;
      resp = null;
    ***REMOVED***

    callback(err, resp);
  ***REMOVED***);
***REMOVED***;

/**
 * Make an authenticated streaming request with gRPC.
 *
 * @param ***REMOVED***object***REMOVED*** protoOpts - The proto options.
 * @param ***REMOVED***string***REMOVED*** protoOpts.service - The service.
 * @param ***REMOVED***string***REMOVED*** protoOpts.method - The method name.
 * @param ***REMOVED***number=***REMOVED*** protoOpts.timeout - After how many milliseconds should the
 *     request cancel.
 * @param ***REMOVED***object***REMOVED*** reqOpts - The request options.
 */
GrpcService.prototype.requestStream = function(protoOpts, reqOpts) ***REMOVED***
  if (global.GCLOUD_SANDBOX_ENV) ***REMOVED***
    return through.obj();
  ***REMOVED***

  var self = this;

  if (!protoOpts.stream) ***REMOVED***
    protoOpts.stream = through.obj();
  ***REMOVED***

  var stream = protoOpts.stream;

  if (!this.grpcCredentials) ***REMOVED***
    // We must establish an authClient to give to grpc.
    this.getGrpcCredentials_(function(err, credentials) ***REMOVED***
      if (err) ***REMOVED***
        stream.destroy(err);
        return;
      ***REMOVED***

      self.grpcCredentials = credentials;
      self.requestStream(protoOpts, reqOpts);
    ***REMOVED***);

    return stream;
  ***REMOVED***

  var objectMode = !!reqOpts.objectMode;

  var service = this.getService_(protoOpts);
  var grpcMetadata = this.grpcMetadata;
  var grpcOpts = ***REMOVED******REMOVED***;

  if (is.number(protoOpts.timeout)) ***REMOVED***
    grpcOpts.deadline = GrpcService.createDeadline_(protoOpts.timeout);
  ***REMOVED***

  try ***REMOVED***
    reqOpts = this.decorateRequest_(reqOpts);
  ***REMOVED*** catch (e) ***REMOVED***
    setImmediate(function() ***REMOVED***
      stream.destroy(e);
    ***REMOVED***);
    return stream;
  ***REMOVED***

  var retryOpts = extend(
    ***REMOVED***
      retries: this.maxRetries,
      currentRetryAttempt: 0,
      objectMode: objectMode,
      shouldRetryFn: GrpcService.shouldRetryRequest_,

      request: function() ***REMOVED***
        return service[protoOpts.method](reqOpts, grpcMetadata, grpcOpts).on(
          'metadata',
          function() ***REMOVED***
            // retry-request requires a server response before it starts emitting
            // data. The closest mechanism grpc provides is a metadata event, but
            // this does not provide any kind of response status. So we're faking
            // it here with code `0` which translates to HTTP 200.
            //
            // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1444#discussion_r71812636
            var grcpStatus = GrpcService.decorateStatus_(***REMOVED***code: 0***REMOVED***);

            this.emit('response', grcpStatus);
          ***REMOVED***
        );
      ***REMOVED***,
    ***REMOVED***,
    protoOpts.retryOpts
  );

  return retryRequest(null, retryOpts)
    .on('error', function(err) ***REMOVED***
      var grpcError = GrpcService.decorateError_(err);

      stream.destroy(grpcError || err);
    ***REMOVED***)
    .on('request', stream.emit.bind(stream, 'request'))
    .pipe(stream);
***REMOVED***;

/**
 * Make an authenticated writable streaming request with gRPC.
 *
 * @param ***REMOVED***object***REMOVED*** protoOpts - The proto options.
 * @param ***REMOVED***string***REMOVED*** protoOpts.service - The service.
 * @param ***REMOVED***string***REMOVED*** protoOpts.method - The method name.
 * @param ***REMOVED***number=***REMOVED*** protoOpts.timeout - After how many milliseconds should the
 *     request cancel.
 * @param ***REMOVED***object***REMOVED*** reqOpts - The request options.
 */
GrpcService.prototype.requestWritableStream = function(protoOpts, reqOpts) ***REMOVED***
  var stream = (protoOpts.stream = protoOpts.stream || duplexify.obj());

  if (global.GCLOUD_SANDBOX_ENV) ***REMOVED***
    return stream;
  ***REMOVED***

  var self = this;

  if (!this.grpcCredentials) ***REMOVED***
    // We must establish an authClient to give to grpc.
    this.getGrpcCredentials_(function(err, credentials) ***REMOVED***
      if (err) ***REMOVED***
        stream.destroy(err);
        return;
      ***REMOVED***

      self.grpcCredentials = credentials;
      self.requestWritableStream(protoOpts, reqOpts);
    ***REMOVED***);

    return stream;
  ***REMOVED***

  var service = this.getService_(protoOpts);
  var grpcMetadata = this.grpcMetadata;
  var grpcOpts = ***REMOVED******REMOVED***;

  if (is.number(protoOpts.timeout)) ***REMOVED***
    grpcOpts.deadline = GrpcService.createDeadline_(protoOpts.timeout);
  ***REMOVED***

  try ***REMOVED***
    reqOpts = this.decorateRequest_(reqOpts);
  ***REMOVED*** catch (e) ***REMOVED***
    setImmediate(function() ***REMOVED***
      stream.destroy(e);
    ***REMOVED***);
    return stream;
  ***REMOVED***

  var grpcStream = service[protoOpts.method](reqOpts, grpcMetadata, grpcOpts)
    .on('status', function(status) ***REMOVED***
      var grcpStatus = GrpcService.decorateStatus_(status);
      stream.emit('response', grcpStatus || status);
    ***REMOVED***)
    .on('error', function(err) ***REMOVED***
      var grpcError = GrpcService.decorateError_(err);
      stream.destroy(grpcError || err);
    ***REMOVED***);

  stream.setReadable(grpcStream);
  stream.setWritable(grpcStream);

  return stream;
***REMOVED***;

/**
 * Decode a protobuf Struct's value.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** value - A Struct's Field message.
 * @return ***REMOVED*******REMOVED*** - The decoded value.
 */
GrpcService.decodeValue_ = function(value) ***REMOVED***
  switch (value.kind) ***REMOVED***
    case 'structValue': ***REMOVED***
      return GrpcService.structToObj_(value.structValue);
    ***REMOVED***

    case 'nullValue': ***REMOVED***
      return null;
    ***REMOVED***

    case 'listValue': ***REMOVED***
      return value.listValue.values.map(GrpcService.decodeValue_);
    ***REMOVED***

    default: ***REMOVED***
      return value[value.kind];
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/**
 * Convert a raw value to a type-denoted protobuf message-friendly object.
 *
 * @private
 *
 * @param ***REMOVED*******REMOVED*** value - The input value.
 * @return ***REMOVED*******REMOVED*** - The encoded value.
 *
 * @example
 * ObjectToStructConverter.encodeValue('Hi');
 * // ***REMOVED***
 * //   stringValue: 'Hello!'
 * // ***REMOVED***
 */
GrpcService.encodeValue_ = function(value) ***REMOVED***
  return new GrpcService.ObjectToStructConverter().encodeValue_(value);
***REMOVED***;

/**
 * Creates a deadline.
 *
 * @private
 *
 * @param ***REMOVED***number***REMOVED*** timeout - Timeout in miliseconds.
 * @return ***REMOVED***date***REMOVED*** deadline - The deadline in Date object form.
 */
GrpcService.createDeadline_ = function(timeout) ***REMOVED***
  return new Date(Date.now() + timeout);
***REMOVED***;

/**
 * Checks for a grpc status code and extends the error object with additional
 * information.
 *
 * @private
 *
 * @param ***REMOVED***error|object***REMOVED*** err - The grpc error.
 * @return ***REMOVED***error|null***REMOVED***
 */
GrpcService.decorateError_ = function(err) ***REMOVED***
  var errorObj = is.error(err) ? err : ***REMOVED******REMOVED***;

  return GrpcService.decorateGrpcResponse_(errorObj, err);
***REMOVED***;

/**
 * Checks for a grpc status code and extends the supplied object with additional
 * information.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** obj - The object to be extended.
 * @param ***REMOVED***object***REMOVED*** response - The grpc response.
 * @return ***REMOVED***object|null***REMOVED***
 */
GrpcService.decorateGrpcResponse_ = function(obj, response) ***REMOVED***
  if (response && GRPC_ERROR_CODE_TO_HTTP[response.code]) ***REMOVED***
    var defaultResponseDetails = GRPC_ERROR_CODE_TO_HTTP[response.code];
    var message = defaultResponseDetails.message;

    if (response.message) ***REMOVED***
      // gRPC error messages can be either stringified JSON or strings.
      try ***REMOVED***
        message = JSON.parse(response.message).description;
      ***REMOVED*** catch (e) ***REMOVED***
        message = response.message;
      ***REMOVED***
    ***REMOVED***

    return extend(true, obj, response, ***REMOVED***
      code: defaultResponseDetails.code,
      message: message,
    ***REMOVED***);
  ***REMOVED***

  return null;
***REMOVED***;

/**
 * Checks for grpc status code and extends the status object with additional
 * information
 *
 * @private
 * @param ***REMOVED***object***REMOVED*** status - The grpc status.
 * @return ***REMOVED***object|null***REMOVED***
 */
GrpcService.decorateStatus_ = function(status) ***REMOVED***
  return GrpcService.decorateGrpcResponse_(***REMOVED******REMOVED***, status);
***REMOVED***;

/**
 * Function to decide whether or not a request retry could occur.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** response - The request response.
 * @return ***REMOVED***boolean***REMOVED*** shouldRetry
 */
GrpcService.shouldRetryRequest_ = function(response) ***REMOVED***
  return [429, 500, 502, 503].indexOf(response.code) > -1;
***REMOVED***;

/**
 * Convert an object to a struct.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** obj - An object to convert.
 * @param ***REMOVED***object=***REMOVED*** options - Configuration object.
 * @param ***REMOVED***boolean***REMOVED*** options.removeCircular - Remove circular references in the
 *     object with a placeholder string.
 * @param ***REMOVED***boolean***REMOVED*** options.stringify - Stringify un-recognized types.
 * @return ***REMOVED***array***REMOVED*** - The converted object.
 *
 * @example
 * GrpcService.objToStruct_(***REMOVED***
 *   greeting: 'Hello!',
 *   favNumber: 7,
 *   friendIds: [
 *     1004,
 *     1006
 *   ],
 *   userDetails: ***REMOVED***
 *     termsSigned: true
 *   ***REMOVED***
 * ***REMOVED***);
 * // ***REMOVED***
 * //   fields: ***REMOVED***
 * //     greeting: ***REMOVED***
 * //       stringValue: 'Hello!'
 * //     ***REMOVED***,
 * //     favNumber: ***REMOVED***
 * //       numberValue: 7
 * //     ***REMOVED***,
 * //     friendIds: ***REMOVED***
 * //       listValue: [
 * //         ***REMOVED***
 * //           numberValue: 1004
 * //         ***REMOVED***,
 * //         ***REMOVED***
 * //           numberValue: 1006
 * //         ***REMOVED***
 * //       ]
 * //     ***REMOVED***,
 * //     userDetails: ***REMOVED***
 * //       fields: ***REMOVED***
 * //         termsSigned: ***REMOVED***
 * //           booleanValue: true
 * //         ***REMOVED***
 * //       ***REMOVED***
 * //     ***REMOVED***
 * //   ***REMOVED***
 * // ***REMOVED***
 */
GrpcService.objToStruct_ = function(obj, options) ***REMOVED***
  return new GrpcService.ObjectToStructConverter(options).convert(obj);
***REMOVED***;

/**
 * Condense a protobuf Struct into an object of only its values.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** struct - A protobuf Struct message.
 * @return ***REMOVED***object***REMOVED*** - The simplified object.
 *
 * @example
 * GrpcService.structToObj_(***REMOVED***
 *   fields: ***REMOVED***
 *     name: ***REMOVED***
 *       kind: 'stringValue',
 *       stringValue: 'Stephen'
 *     ***REMOVED***
 *   ***REMOVED***
 * ***REMOVED***);
 * // ***REMOVED***
 * //   name: 'Stephen'
 * // ***REMOVED***
 */
GrpcService.structToObj_ = function(struct) ***REMOVED***
  var convertedObject = ***REMOVED******REMOVED***;

  for (var prop in struct.fields) ***REMOVED***
    if (struct.fields.hasOwnProperty(prop)) ***REMOVED***
      var value = struct.fields[prop];
      convertedObject[prop] = GrpcService.decodeValue_(value);
    ***REMOVED***
  ***REMOVED***

  return convertedObject;
***REMOVED***;

/**
 * Assign a projectId if one is specified to all request options.
 *
 * @param ***REMOVED***object***REMOVED*** reqOpts - The request options.
 * @return ***REMOVED***object***REMOVED*** - The decorated request object.
 */
GrpcService.prototype.decorateRequest_ = function(reqOpts) ***REMOVED***
  reqOpts = extend(***REMOVED******REMOVED***, reqOpts);

  delete reqOpts.autoPaginate;
  delete reqOpts.autoPaginateVal;
  delete reqOpts.objectMode;

  return util.replaceProjectIdToken(reqOpts, this.projectId);
***REMOVED***;

/**
 * To authorize requests through gRPC, we must get the raw google-auth-library
 * auth client object.
 *
 * @private
 *
 * @param ***REMOVED***function***REMOVED*** callback - The callback function.
 * @param ***REMOVED***?error***REMOVED*** callback.err - An error getting an auth client.
 */
GrpcService.prototype.getGrpcCredentials_ = function(callback) ***REMOVED***
  var self = this;

  this.authClient.getAuthClient(function(err, authClient) ***REMOVED***
    if (err) ***REMOVED***
      callback(err);
      return;
    ***REMOVED***

    var credentials = grpc.credentials.combineChannelCredentials(
      grpc.credentials.createSsl(),
      grpc.credentials.createFromGoogleCredential(authClient)
    );

    if (!self.projectId || self.projectId === '***REMOVED******REMOVED***projectId***REMOVED******REMOVED***') ***REMOVED***
      self.projectId = self.authClient.projectId;
    ***REMOVED***

    callback(null, credentials);
  ***REMOVED***);
***REMOVED***;

/**
 * Loads a proto file, useful when handling multiple proto files/services
 * within a single instance of GrpcService.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** protoConfig - The proto specific configs for this file.
 * @param ***REMOVED***object***REMOVED*** config - The base config for the GrpcService.
 * @return ***REMOVED***object***REMOVED*** protoObject - The loaded proto object.
 */
GrpcService.prototype.loadProtoFile_ = function(protoConfig, config) ***REMOVED***
  var grpcOpts = ***REMOVED***
    binaryAsBase64: true,
    convertFieldsToCamelCase: true,
  ***REMOVED***;

  if (is.string(protoConfig)) ***REMOVED***
    protoConfig = ***REMOVED***
      path: protoConfig,
    ***REMOVED***;
  ***REMOVED***

  var protoObjectCacheKey = [
    config.protosDir,
    protoConfig.path,
    protoConfig.service,
  ].join('$');

  if (!protoObjectCache[protoObjectCacheKey]) ***REMOVED***
    var services = grpc.load(
      ***REMOVED***
        root: config.protosDir,
        file: protoConfig.path,
      ***REMOVED***,
      'proto',
      grpcOpts
    );
    var service = dotProp.get(services.google, protoConfig.service);
    protoObjectCache[protoObjectCacheKey] = service;
  ***REMOVED***

  return protoObjectCache[protoObjectCacheKey];
***REMOVED***;

/**
 * Retrieves the service object used to make the grpc requests.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** protoOpts - The proto options.
 * @return ***REMOVED***object***REMOVED*** service - The proto service.
 */
GrpcService.prototype.getService_ = function(protoOpts) ***REMOVED***
  var proto = this.protos[protoOpts.service];
  var service = this.activeServiceMap_.get(protoOpts.service);

  if (!service) ***REMOVED***
    service = new proto[protoOpts.service](
      proto.baseUrl || this.baseUrl,
      this.grpcCredentials,
      extend(
        ***REMOVED***
          'grpc.primary_user_agent': this.userAgent,
        ***REMOVED***,
        GRPC_SERVICE_OPTIONS
      )
    );

    this.activeServiceMap_.set(protoOpts.service, service);
  ***REMOVED***

  return service;
***REMOVED***;

/**
 * A class that can be used to convert an object to a struct. Optionally this
 * class can be used to erase/throw on circular references during conversion.
 *
 * @private
 *
 * @param ***REMOVED***object=***REMOVED*** options - Configuration object.
 * @param ***REMOVED***boolean***REMOVED*** options.removeCircular - Remove circular references in the
 *     object with a placeholder string. (Default: `false`)
 * @param ***REMOVED***boolean***REMOVED*** options.stringify - Stringify un-recognized types. (Default:
 *     `false`)
 */
function ObjectToStructConverter(options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  this.seenObjects = new Set();
  this.removeCircular = options.removeCircular === true;
  this.stringify = options.stringify === true;
***REMOVED***

/**
 * Begin the conversion process from a JS object to an encoded gRPC Value
 * message.
 *
 * @param ***REMOVED*******REMOVED*** value - The input value.
 * @return ***REMOVED***object***REMOVED*** - The encoded value.
 *
 * @example
 * ObjectToStructConverter.convert(***REMOVED***
 *   aString: 'Hi'
 * ***REMOVED***);
 * // ***REMOVED***
 * //   fields: ***REMOVED***
 * //     aString: ***REMOVED***
 * //       stringValue: 'Hello!'
 * //     ***REMOVED***
 * //   ***REMOVED***
 * // ***REMOVED***
 */
ObjectToStructConverter.prototype.convert = function(obj) ***REMOVED***
  var convertedObject = ***REMOVED***
    fields: ***REMOVED******REMOVED***,
  ***REMOVED***;

  this.seenObjects.add(obj);

  for (var prop in obj) ***REMOVED***
    if (obj.hasOwnProperty(prop)) ***REMOVED***
      var value = obj[prop];

      if (is.undefined(value)) ***REMOVED***
        continue;
      ***REMOVED***

      convertedObject.fields[prop] = this.encodeValue_(value);
    ***REMOVED***
  ***REMOVED***

  this.seenObjects.delete(obj);

  return convertedObject;
***REMOVED***;

/**
 * Convert a raw value to a type-denoted protobuf message-friendly object.
 *
 * @private
 *
 * @param ***REMOVED*******REMOVED*** value - The input value.
 * @return ***REMOVED*******REMOVED*** - The encoded value.
 *
 * @example
 * ObjectToStructConverter.encodeValue('Hi');
 * // ***REMOVED***
 * //   stringValue: 'Hello!'
 * // ***REMOVED***
 */
ObjectToStructConverter.prototype.encodeValue_ = function(value) ***REMOVED***
  var convertedValue;

  if (is.null(value)) ***REMOVED***
    convertedValue = ***REMOVED***
      nullValue: 0,
    ***REMOVED***;
  ***REMOVED*** else if (is.number(value)) ***REMOVED***
    convertedValue = ***REMOVED***
      numberValue: value,
    ***REMOVED***;
  ***REMOVED*** else if (is.string(value)) ***REMOVED***
    convertedValue = ***REMOVED***
      stringValue: value,
    ***REMOVED***;
  ***REMOVED*** else if (is.boolean(value)) ***REMOVED***
    convertedValue = ***REMOVED***
      boolValue: value,
    ***REMOVED***;
  ***REMOVED*** else if (Buffer.isBuffer(value)) ***REMOVED***
    convertedValue = ***REMOVED***
      blobValue: value,
    ***REMOVED***;
  ***REMOVED*** else if (is.object(value)) ***REMOVED***
    if (this.seenObjects.has(value)) ***REMOVED***
      // Circular reference.
      if (!this.removeCircular) ***REMOVED***
        throw new Error(
          [
            'This object contains a circular reference. To automatically',
            'remove it, set the `removeCircular` option to true.',
          ].join(' ')
        );
      ***REMOVED***
      convertedValue = ***REMOVED***
        stringValue: '[Circular]',
      ***REMOVED***;
    ***REMOVED*** else ***REMOVED***
      convertedValue = ***REMOVED***
        structValue: this.convert(value),
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED*** else if (is.array(value)) ***REMOVED***
    convertedValue = ***REMOVED***
      listValue: ***REMOVED***
        values: value.map(this.encodeValue_.bind(this)),
      ***REMOVED***,
    ***REMOVED***;
  ***REMOVED*** else ***REMOVED***
    if (!this.stringify) ***REMOVED***
      throw new Error('Value of type ' + typeof value + ' not recognized.');
    ***REMOVED***

    convertedValue = ***REMOVED***
      stringValue: String(value),
    ***REMOVED***;
  ***REMOVED***

  return convertedValue;
***REMOVED***;

module.exports = GrpcService;
module.exports.GRPC_ERROR_CODE_TO_HTTP = GRPC_ERROR_CODE_TO_HTTP;
module.exports.GRPC_SERVICE_OPTIONS = GRPC_SERVICE_OPTIONS;
module.exports.ObjectToStructConverter = ObjectToStructConverter;
