# This is an example script for use with CMake projects for locating and configuring
# the nanopb library.
#
# The following variables can be set and are optional:
#
#
#   PROTOBUF_SRC_ROOT_FOLDER - When compiling with MSVC, if this cache variable is set
#                              the protobuf-default VS project build locations
#                              (vsprojects/Debug & vsprojects/Release) will be searched
#                              for libraries and binaries.
#
#   NANOPB_IMPORT_DIRS       - List of additional directories to be searched for
#                              imported .proto files.
#
#   NANOPB_GENERATE_CPP_APPEND_PATH - By default -I will be passed to protoc
#                                     for each directory where a proto file is referenced.
#                                     Set to FALSE if you want to disable this behaviour.
#
# Defines the following variables:
#
#   NANOPB_FOUND - Found the nanopb library (source&header files, generator tool, protoc compiler tool)
#   NANOPB_INCLUDE_DIRS - Include directories for Google Protocol Buffers
#
# The following cache variables are also available to set or use:
#   PROTOBUF_PROTOC_EXECUTABLE - The protoc compiler
#   NANOPB_GENERATOR_SOURCE_DIR - The nanopb generator source
#
#  ====================================================================
#
# NANOPB_GENERATE_CPP (public function)
#   SRCS = Variable to define with autogenerated
#          source files
#   HDRS = Variable to define with autogenerated
#          header files
#   ARGN = proto files
#
#  ====================================================================
#  Example:
#
#   set(NANOPB_SRC_ROOT_FOLDER "/path/to/nanopb")
#   set(CMAKE_MODULE_PATH $***REMOVED***CMAKE_MODULE_PATH***REMOVED*** $***REMOVED***NANOPB_SRC_ROOT_FOLDER***REMOVED***/cmake)
#   find_package( Nanopb REQUIRED )
#   include_directories($***REMOVED***NANOPB_INCLUDE_DIRS***REMOVED***)
#
#   NANOPB_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)
#
#   include_directories($***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***)
#   add_executable(bar bar.cc $***REMOVED***PROTO_SRCS***REMOVED*** $***REMOVED***PROTO_HDRS***REMOVED***)
#
#  ====================================================================

#=============================================================================
# Copyright 2009 Kitware, Inc.
# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>
# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the names of Kitware, Inc., the Insight Software Consortium,
#   nor the names of their contributors may be used to endorse or promote
#   products derived from this software without specific prior written
#   permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#=============================================================================
#
# Changes
# 2013.01.31 - Pavlo Ilin - used Modules/FindProtobuf.cmake from cmake 2.8.10 to
#                           write FindNanopb.cmake
#
#=============================================================================


function(NANOPB_GENERATE_CPP SRCS HDRS)
  if(NOT ARGN)
    return()
  endif()

  if(NANOPB_GENERATE_CPP_APPEND_PATH)
    # Create an include path for each file specified
    foreach(FIL $***REMOVED***ARGN***REMOVED***)
      get_filename_component(ABS_FIL $***REMOVED***FIL***REMOVED*** ABSOLUTE)
      get_filename_component(ABS_PATH $***REMOVED***ABS_FIL***REMOVED*** PATH)

      list(FIND _nanobp_include_path $***REMOVED***ABS_PATH***REMOVED*** _contains_already)
      if($***REMOVED***_contains_already***REMOVED*** EQUAL -1)
          list(APPEND _nanobp_include_path -I $***REMOVED***ABS_PATH***REMOVED***)
      endif()
    endforeach()
  else()
    set(_nanobp_include_path -I $***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***)
  endif()

  if(DEFINED NANOPB_IMPORT_DIRS)
    foreach(DIR $***REMOVED***NANOPB_IMPORT_DIRS***REMOVED***)
      get_filename_component(ABS_PATH $***REMOVED***DIR***REMOVED*** ABSOLUTE)
      list(FIND _nanobp_include_path $***REMOVED***ABS_PATH***REMOVED*** _contains_already)
      if($***REMOVED***_contains_already***REMOVED*** EQUAL -1)
          list(APPEND _nanobp_include_path -I $***REMOVED***ABS_PATH***REMOVED***)
      endif()
    endforeach()
  endif()

  set($***REMOVED***SRCS***REMOVED***)
  set($***REMOVED***HDRS***REMOVED***)

  set(GENERATOR_PATH $***REMOVED***CMAKE_BINARY_DIR***REMOVED***/nanopb/generator)

  set(NANOPB_GENERATOR_EXECUTABLE $***REMOVED***GENERATOR_PATH***REMOVED***/nanopb_generator.py)

  set(GENERATOR_CORE_DIR $***REMOVED***GENERATOR_PATH***REMOVED***/proto)
  set(GENERATOR_CORE_SRC
      $***REMOVED***GENERATOR_CORE_DIR***REMOVED***/nanopb.proto
      $***REMOVED***GENERATOR_CORE_DIR***REMOVED***/plugin.proto)

  # Treat the source diretory as immutable.
  #
  # Copy the generator directory to the build directory before
  # compiling python and proto files.  Fixes issues when using the
  # same build directory with different python/protobuf versions
  # as the binary build directory is discarded across builds.
  #
  add_custom_command(
      OUTPUT $***REMOVED***NANOPB_GENERATOR_EXECUTABLE***REMOVED*** $***REMOVED***GENERATOR_CORE_SRC***REMOVED***
      COMMAND $***REMOVED***CMAKE_COMMAND***REMOVED*** -E copy_directory
      ARGS $***REMOVED***NANOPB_GENERATOR_SOURCE_DIR***REMOVED*** $***REMOVED***GENERATOR_PATH***REMOVED***
      VERBATIM)

  set(GENERATOR_CORE_PYTHON_SRC)
  foreach(FIL $***REMOVED***GENERATOR_CORE_SRC***REMOVED***)
      get_filename_component(ABS_FIL $***REMOVED***FIL***REMOVED*** ABSOLUTE)
      get_filename_component(FIL_WE $***REMOVED***FIL***REMOVED*** NAME_WE)

      set(output "$***REMOVED***GENERATOR_CORE_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***_pb2.py")
      set(GENERATOR_CORE_PYTHON_SRC $***REMOVED***GENERATOR_CORE_PYTHON_SRC***REMOVED*** $***REMOVED***output***REMOVED***)
      add_custom_command(
        OUTPUT $***REMOVED***output***REMOVED***
        COMMAND $***REMOVED***PROTOBUF_PROTOC_EXECUTABLE***REMOVED***
        ARGS -I$***REMOVED***GENERATOR_PATH***REMOVED***/proto
          --python_out=$***REMOVED***GENERATOR_CORE_DIR***REMOVED*** $***REMOVED***ABS_FIL***REMOVED***
        DEPENDS $***REMOVED***ABS_FIL***REMOVED***
        VERBATIM)
  endforeach()

  foreach(FIL $***REMOVED***ARGN***REMOVED***)
    get_filename_component(ABS_FIL $***REMOVED***FIL***REMOVED*** ABSOLUTE)
    get_filename_component(FIL_WE $***REMOVED***FIL***REMOVED*** NAME_WE)
    get_filename_component(FIL_DIR $***REMOVED***FIL***REMOVED*** PATH)
    set(NANOPB_OPTIONS_FILE $***REMOVED***FIL_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***.options)
    set(NANOPB_OPTIONS)
    if(EXISTS $***REMOVED***NANOPB_OPTIONS_FILE***REMOVED***)
        set(NANOPB_OPTIONS -f $***REMOVED***NANOPB_OPTIONS_FILE***REMOVED***)
    endif()

    list(APPEND $***REMOVED***SRCS***REMOVED*** "$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***.pb.c")
    list(APPEND $***REMOVED***HDRS***REMOVED*** "$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***.pb.h")

    add_custom_command(
      OUTPUT "$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***.pb"
      COMMAND  $***REMOVED***PROTOBUF_PROTOC_EXECUTABLE***REMOVED***
      ARGS -I$***REMOVED***GENERATOR_PATH***REMOVED*** -I$***REMOVED***GENERATOR_CORE_DIR***REMOVED***
        -I$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED*** $***REMOVED***_nanobp_include_path***REMOVED***
        -o$***REMOVED***FIL_WE***REMOVED***.pb $***REMOVED***ABS_FIL***REMOVED***
      DEPENDS $***REMOVED***ABS_FIL***REMOVED*** $***REMOVED***GENERATOR_CORE_PYTHON_SRC***REMOVED***
      COMMENT "Running C++ protocol buffer compiler on $***REMOVED***FIL***REMOVED***"
      VERBATIM )

    add_custom_command(
      OUTPUT "$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***.pb.c"
             "$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***.pb.h"
      COMMAND $***REMOVED***PYTHON_EXECUTABLE***REMOVED***
      ARGS $***REMOVED***NANOPB_GENERATOR_EXECUTABLE***REMOVED*** $***REMOVED***FIL_WE***REMOVED***.pb $***REMOVED***NANOPB_OPTIONS***REMOVED***
      DEPENDS "$***REMOVED***CMAKE_CURRENT_BINARY_DIR***REMOVED***/$***REMOVED***FIL_WE***REMOVED***.pb"
      COMMENT "Running nanopb generator on $***REMOVED***FIL_WE***REMOVED***.pb"
      VERBATIM )
  endforeach()

  set_source_files_properties($***REMOVED***$***REMOVED***SRCS***REMOVED******REMOVED*** $***REMOVED***$***REMOVED***HDRS***REMOVED******REMOVED*** PROPERTIES GENERATED TRUE)
  set($***REMOVED***SRCS***REMOVED*** $***REMOVED***$***REMOVED***SRCS***REMOVED******REMOVED*** $***REMOVED***NANOPB_SRCS***REMOVED*** PARENT_SCOPE)
  set($***REMOVED***HDRS***REMOVED*** $***REMOVED***$***REMOVED***HDRS***REMOVED******REMOVED*** $***REMOVED***NANOPB_HDRS***REMOVED*** PARENT_SCOPE)

endfunction()



#
# Main.
#

# By default have NANOPB_GENERATE_CPP macro pass -I to protoc
# for each directory where a proto file is referenced.
if(NOT DEFINED NANOPB_GENERATE_CPP_APPEND_PATH)
  set(NANOPB_GENERATE_CPP_APPEND_PATH TRUE)
endif()

# Make a really good guess regarding location of NANOPB_SRC_ROOT_FOLDER
if(NOT DEFINED NANOPB_SRC_ROOT_FOLDER)
  get_filename_component(NANOPB_SRC_ROOT_FOLDER
                         $***REMOVED***CMAKE_CURRENT_LIST_DIR***REMOVED***/.. ABSOLUTE)
endif()

# Find the include directory
find_path(NANOPB_INCLUDE_DIRS
    pb.h
    PATHS $***REMOVED***NANOPB_SRC_ROOT_FOLDER***REMOVED***
)
mark_as_advanced(NANOPB_INCLUDE_DIRS)

# Find nanopb source files
set(NANOPB_SRCS)
set(NANOPB_HDRS)
list(APPEND _nanopb_srcs pb_decode.c pb_encode.c pb_common.c)
list(APPEND _nanopb_hdrs pb_decode.h pb_encode.h pb_common.h pb.h)

foreach(FIL $***REMOVED***_nanopb_srcs***REMOVED***)
  find_file($***REMOVED***FIL***REMOVED***__nano_pb_file NAMES $***REMOVED***FIL***REMOVED*** PATHS $***REMOVED***NANOPB_SRC_ROOT_FOLDER***REMOVED*** $***REMOVED***NANOPB_INCLUDE_DIRS***REMOVED***)
  list(APPEND NANOPB_SRCS "$***REMOVED***$***REMOVED***FIL***REMOVED***__nano_pb_file***REMOVED***")
  mark_as_advanced($***REMOVED***FIL***REMOVED***__nano_pb_file)
endforeach()

foreach(FIL $***REMOVED***_nanopb_hdrs***REMOVED***)
  find_file($***REMOVED***FIL***REMOVED***__nano_pb_file NAMES $***REMOVED***FIL***REMOVED*** PATHS $***REMOVED***NANOPB_INCLUDE_DIRS***REMOVED***)
  mark_as_advanced($***REMOVED***FIL***REMOVED***__nano_pb_file)
  list(APPEND NANOPB_HDRS "$***REMOVED***$***REMOVED***FIL***REMOVED***__nano_pb_file***REMOVED***")
endforeach()

# Find the protoc Executable
find_program(PROTOBUF_PROTOC_EXECUTABLE
    NAMES protoc
    DOC "The Google Protocol Buffers Compiler"
    PATHS
    $***REMOVED***PROTOBUF_SRC_ROOT_FOLDER***REMOVED***/vsprojects/Release
    $***REMOVED***PROTOBUF_SRC_ROOT_FOLDER***REMOVED***/vsprojects/Debug
)
mark_as_advanced(PROTOBUF_PROTOC_EXECUTABLE)

# Find nanopb generator source dir
find_path(NANOPB_GENERATOR_SOURCE_DIR
    NAMES nanopb_generator.py
    DOC "nanopb generator source"
    PATHS
    $***REMOVED***NANOPB_SRC_ROOT_FOLDER***REMOVED***/generator
)
mark_as_advanced(NANOPB_GENERATOR_SOURCE_DIR)

find_package(PythonInterp REQUIRED)

include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(NANOPB DEFAULT_MSG
  NANOPB_INCLUDE_DIRS
  NANOPB_SRCS NANOPB_HDRS
  NANOPB_GENERATOR_SOURCE_DIR
  PROTOBUF_PROTOC_EXECUTABLE
  )
