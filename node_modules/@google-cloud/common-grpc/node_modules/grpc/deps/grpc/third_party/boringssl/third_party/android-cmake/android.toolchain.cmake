# Copyright (c) 2010-2011, Ethan Rublee
# Copyright (c) 2011-2014, Andrey Kamaev
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1.  Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
# 2.  Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
# 3.  Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from this
#     software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# ------------------------------------------------------------------------------
#  Android CMake toolchain file, for use with the Android NDK r5-r10d
#  Requires cmake 2.6.3 or newer (2.8.9 or newer is recommended).
#  See home page: https://github.com/taka-no-me/android-cmake
#
#  Usage Linux:
#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk
#   $ mkdir build && cd build
#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..
#   $ make -j8
#
#  Usage Windows:
#     You need native port of make to build your project.
#     Android NDK r7 (and newer) already has make.exe on board.
#     For older NDK you have to install it separately.
#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm
#
#   $ SET ANDROID_NDK=C:\absolute\path\to\the\android-ndk
#   $ mkdir build && cd build
#   $ cmake.exe -G"MinGW Makefiles"
#       -DCMAKE_TOOLCHAIN_FILE=path\to\the\android.toolchain.cmake
#       -DCMAKE_MAKE_PROGRAM="%ANDROID_NDK%\prebuilt\windows\bin\make.exe" ..
#   $ cmake.exe --build .
#
#
#  Options (can be set as cmake parameters: -D<option_name>=<value>):
#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.
#      Can be set as environment variable. Can be set only at first cmake run.
#
#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary
#      Interface (ABI). This option nearly matches to the APP_ABI variable
#      used by ndk-build tool from Android NDK.
#
#      Possible targets are:
#        "armeabi" - ARMv5TE based CPU with software floating point operations
#        "armeabi-v7a" - ARMv7 based devices with hardware FPU instructions
#            this ABI target is used by default
#        "armeabi-v7a with NEON" - same as armeabi-v7a, but
#            sets NEON as floating-point unit
#        "armeabi-v7a with VFPV3" - same as armeabi-v7a, but
#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)
#        "armeabi-v6 with VFP" - tuned for ARMv6 processors having VFP
#        "x86" - IA-32 instruction set
#        "mips" - MIPS32 instruction set
#
#      64-bit ABIs for NDK r10 and newer:
#        "arm64-v8a" - ARMv8 AArch64 instruction set
#        "x86_64" - Intel64 instruction set (r1)
#        "mips64" - MIPS64 instruction set (r6)
#
#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.
#      Option is read-only when standalone toolchain is used.
#      Note: building for "android-L" requires explicit configuration.
#
#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 - the name of compiler
#      toolchain to be used. The list of possible values depends on the NDK
#      version. For NDK r10c the possible values are:
#
#        * aarch64-linux-android-4.9
#        * aarch64-linux-android-clang3.4
#        * aarch64-linux-android-clang3.5
#        * arm-linux-androideabi-4.6
#        * arm-linux-androideabi-4.8
#        * arm-linux-androideabi-4.9 (default)
#        * arm-linux-androideabi-clang3.4
#        * arm-linux-androideabi-clang3.5
#        * mips64el-linux-android-4.9
#        * mips64el-linux-android-clang3.4
#        * mips64el-linux-android-clang3.5
#        * mipsel-linux-android-4.6
#        * mipsel-linux-android-4.8
#        * mipsel-linux-android-4.9
#        * mipsel-linux-android-clang3.4
#        * mipsel-linux-android-clang3.5
#        * x86-4.6
#        * x86-4.8
#        * x86-4.9
#        * x86-clang3.4
#        * x86-clang3.5
#        * x86_64-4.9
#        * x86_64-clang3.4
#        * x86_64-clang3.5
#
#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions
#      instead of Thumb. Is not available for "armeabi-v6 with VFP"
#      (is forced to be ON) ABI.
#
#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker
#      errors even if they are not used.
#
#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared
#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2
#      problems.
#
#    ANDROID_STL=gnustl_static - specify the runtime to use.
#
#      Possible values are:
#        none           -> Do not configure the runtime.
#        system         -> Use the default minimal system C++ runtime library.
#                          Implies -fno-rtti -fno-exceptions.
#                          Is not available for standalone toolchain.
#        system_re      -> Use the default minimal system C++ runtime library.
#                          Implies -frtti -fexceptions.
#                          Is not available for standalone toolchain.
#        gabi++_static  -> Use the GAbi++ runtime as a static library.
#                          Implies -frtti -fno-exceptions.
#                          Available for NDK r7 and newer.
#                          Is not available for standalone toolchain.
#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.
#                          Implies -frtti -fno-exceptions.
#                          Available for NDK r7 and newer.
#                          Is not available for standalone toolchain.
#        stlport_static -> Use the STLport runtime as a static library.
#                          Implies -fno-rtti -fno-exceptions for NDK before r7.
#                          Implies -frtti -fno-exceptions for NDK r7 and newer.
#                          Is not available for standalone toolchain.
#        stlport_shared -> Use the STLport runtime as a shared library.
#                          Implies -fno-rtti -fno-exceptions for NDK before r7.
#                          Implies -frtti -fno-exceptions for NDK r7 and newer.
#                          Is not available for standalone toolchain.
#        gnustl_static  -> Use the GNU STL as a static library.
#                          Implies -frtti -fexceptions.
#        gnustl_shared  -> Use the GNU STL as a shared library.
#                          Implies -frtti -fno-exceptions.
#                          Available for NDK r7b and newer.
#                          Silently degrades to gnustl_static if not available.
#
#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on
#      chosen runtime. If disabled, then the user is responsible for settings
#      these options.
#
#  What?:
#    android-cmake toolchain searches for NDK/toolchain in the following order:
#      ANDROID_NDK - cmake parameter
#      ANDROID_NDK - environment variable
#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter
#      ANDROID_STANDALONE_TOOLCHAIN - environment variable
#      ANDROID_NDK - default locations
#      ANDROID_STANDALONE_TOOLCHAIN - default locations
#
#    Make sure to do the following in your scripts:
#      SET( CMAKE_CXX_FLAGS "$***REMOVED***CMAKE_CXX_FLAGS***REMOVED*** $***REMOVED***my_cxx_flags***REMOVED***" )
#      SET( CMAKE_C_FLAGS "$***REMOVED***CMAKE_C_FLAGS***REMOVED*** $***REMOVED***my_cxx_flags***REMOVED***" )
#    The flags will be prepopulated with critical flags, so don't loose them.
#    Also be aware that toolchain also sets configuration-specific compiler
#    flags and linker flags.
#
#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these
#    variables to make necessary Android-specific configuration changes.
#
#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS or ARM64_V8A or X86_64 or MIPS64
#    will be set true, mutually exclusive. NEON option will be set true
#    if VFP is set to NEON.
#
# ------------------------------------------------------------------------------

cmake_minimum_required( VERSION 2.6.3 )

if( DEFINED CMAKE_CROSSCOMPILING )
 # subsequent toolchain loading is not really needed
 return()
endif()

if( CMAKE_TOOLCHAIN_FILE )
 # touch toolchain variable to suppress "unused variable" warning
endif()

# inherit settings in recursive loads
get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )
if( _CMAKE_IN_TRY_COMPILE )
 include( "$***REMOVED***CMAKE_CURRENT_SOURCE_DIR***REMOVED***/../android.toolchain.config.cmake" OPTIONAL )
endif()

# this one is important
if( CMAKE_VERSION VERSION_GREATER "3.0.99" )
 set( CMAKE_SYSTEM_NAME Android )
else()
 set( CMAKE_SYSTEM_NAME Linux )
endif()

# this one not so much
set( CMAKE_SYSTEM_VERSION 1 )

# rpath makes low sense for Android
set( CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "" )
set( CMAKE_SKIP_RPATH TRUE CACHE BOOL "If set, runtime paths are not added when using shared libraries." )

# NDK search paths
set( ANDROID_SUPPORTED_NDK_VERSIONS $***REMOVED***ANDROID_EXTRA_NDK_VERSIONS***REMOVED*** -r10d -r10c -r10b -r10 -r9d -r9c -r9b -r9 -r8e -r8d -r8c -r8b -r8 -r7c -r7b -r7 -r6b -r6 -r5c -r5b -r5 "" )
if( NOT DEFINED ANDROID_NDK_SEARCH_PATHS )
 if( CMAKE_HOST_WIN32 )
  file( TO_CMAKE_PATH "$ENV***REMOVED***PROGRAMFILES***REMOVED***" ANDROID_NDK_SEARCH_PATHS )
  set( ANDROID_NDK_SEARCH_PATHS "$***REMOVED***ANDROID_NDK_SEARCH_PATHS***REMOVED***" "$ENV***REMOVED***SystemDrive***REMOVED***/NVPACK" )
 else()
  file( TO_CMAKE_PATH "$ENV***REMOVED***HOME***REMOVED***" ANDROID_NDK_SEARCH_PATHS )
  set( ANDROID_NDK_SEARCH_PATHS /opt "$***REMOVED***ANDROID_NDK_SEARCH_PATHS***REMOVED***/NVPACK" )
 endif()
endif()
if( NOT DEFINED ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH )
 set( ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH /opt/android-toolchain )
endif()

# known ABIs
set( ANDROID_SUPPORTED_ABIS_arm "armeabi-v7a;armeabi;armeabi-v7a with NEON;armeabi-v7a with VFPV3;armeabi-v6 with VFP" )
set( ANDROID_SUPPORTED_ABIS_arm64 "arm64-v8a" )
set( ANDROID_SUPPORTED_ABIS_x86 "x86" )
set( ANDROID_SUPPORTED_ABIS_x86_64 "x86_64" )
set( ANDROID_SUPPORTED_ABIS_mips "mips" )
set( ANDROID_SUPPORTED_ABIS_mips64 "mips64" )

# API level defaults
set( ANDROID_DEFAULT_NDK_API_LEVEL 8 )
set( ANDROID_DEFAULT_NDK_API_LEVEL_arm64 21 )
set( ANDROID_DEFAULT_NDK_API_LEVEL_x86 9 )
set( ANDROID_DEFAULT_NDK_API_LEVEL_x86_64 21 )
set( ANDROID_DEFAULT_NDK_API_LEVEL_mips 9 )
set( ANDROID_DEFAULT_NDK_API_LEVEL_mips64 21 )


macro( __LIST_FILTER listvar regex )
  if( $***REMOVED***listvar***REMOVED*** )
    foreach( __val $***REMOVED***$***REMOVED***listvar***REMOVED******REMOVED*** )
      if( __val MATCHES "$***REMOVED***regex***REMOVED***" )
        list( REMOVE_ITEM $***REMOVED***listvar***REMOVED*** "$***REMOVED***__val***REMOVED***" )
      endif()
    endforeach()
  endif()
endmacro()

macro( __INIT_VARIABLE var_name )
  set( __test_path 0 )
  foreach( __var $***REMOVED***ARGN***REMOVED*** )
    if( __var STREQUAL "PATH" )
      set( __test_path 1 )
      break()
    endif()
  endforeach()

  if( __test_path AND NOT EXISTS "$***REMOVED***$***REMOVED***var_name***REMOVED******REMOVED***" )
    unset( $***REMOVED***var_name***REMOVED*** CACHE )
  endif()

  if( " $***REMOVED***$***REMOVED***var_name***REMOVED******REMOVED***" STREQUAL " " )
    set( __values 0 )
    foreach( __var $***REMOVED***ARGN***REMOVED*** )
      if( __var STREQUAL "VALUES" )
        set( __values 1 )
      elseif( NOT __var STREQUAL "PATH" )
        if( __var MATCHES "^ENV_.*$" )
          string( REPLACE "ENV_" "" __var "$***REMOVED***__var***REMOVED***" )
          set( __value "$ENV***REMOVED***$***REMOVED***__var***REMOVED******REMOVED***" )
        elseif( DEFINED $***REMOVED***__var***REMOVED*** )
          set( __value "$***REMOVED***$***REMOVED***__var***REMOVED******REMOVED***" )
        elseif( __values )
          set( __value "$***REMOVED***__var***REMOVED***" )
        else()
          set( __value "" )
        endif()

        if( NOT " $***REMOVED***__value***REMOVED***" STREQUAL " " AND (NOT __test_path OR EXISTS "$***REMOVED***__value***REMOVED***") )
          set( $***REMOVED***var_name***REMOVED*** "$***REMOVED***__value***REMOVED***" )
          break()
        endif()
      endif()
    endforeach()
    unset( __value )
    unset( __values )
  endif()

  if( __test_path )
    file( TO_CMAKE_PATH "$***REMOVED***$***REMOVED***var_name***REMOVED******REMOVED***" $***REMOVED***var_name***REMOVED*** )
  endif()
  unset( __test_path )
endmacro()

macro( __DETECT_NATIVE_API_LEVEL _var _path )
  set( __ndkApiLevelRegex "^[\t ]*#define[\t ]+__ANDROID_API__[\t ]+([0-9]+)[\t ]*.*$" )
  file( STRINGS $***REMOVED***_path***REMOVED*** __apiFileContent REGEX "$***REMOVED***__ndkApiLevelRegex***REMOVED***" )
  if( NOT __apiFileContent )
    message( SEND_ERROR "Could not get Android native API level. Probably you have specified invalid level value, or your copy of NDK/toolchain is broken." )
  endif()
  string( REGEX REPLACE "$***REMOVED***__ndkApiLevelRegex***REMOVED***" "\\1" $***REMOVED***_var***REMOVED*** "$***REMOVED***__apiFileContent***REMOVED***" )
  unset( __apiFileContent )
  unset( __ndkApiLevelRegex )
endmacro()

macro( __DETECT_TOOLCHAIN_MACHINE_NAME _var _root )
 if( EXISTS "$***REMOVED***_root***REMOVED***" )
    file( GLOB __gccExePath RELATIVE "$***REMOVED***_root***REMOVED***/bin/" "$***REMOVED***_root***REMOVED***/bin/*-gcc$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" )
    __LIST_FILTER( __gccExePath "^[.].*" )
    list( LENGTH __gccExePath __gccExePathsCount )
    if( NOT __gccExePathsCount EQUAL 1  AND NOT _CMAKE_IN_TRY_COMPILE )
      message( WARNING "Could not determine machine name for compiler from $***REMOVED***_root***REMOVED***" )
      set( $***REMOVED***_var***REMOVED*** "" )
    else()
      get_filename_component( __gccExeName "$***REMOVED***__gccExePath***REMOVED***" NAME_WE )
      string( REPLACE "-gcc" "" $***REMOVED***_var***REMOVED*** "$***REMOVED***__gccExeName***REMOVED***" )
    endif()
    unset( __gccExePath )
    unset( __gccExePathsCount )
    unset( __gccExeName )
  else()
    set( $***REMOVED***_var***REMOVED*** "" )
  endif()
endmacro()


# fight against cygwin
set( ANDROID_FORBID_SYGWIN TRUE CACHE BOOL "Prevent cmake from working under cygwin and using cygwin tools")
mark_as_advanced( ANDROID_FORBID_SYGWIN )
if( ANDROID_FORBID_SYGWIN )
 if( CYGWIN )
  message( FATAL_ERROR "Android NDK and android-cmake toolchain are not welcome Cygwin. It is unlikely that this cmake toolchain will work under cygwin. But if you want to try then you can set cmake variable ANDROID_FORBID_SYGWIN to FALSE and rerun cmake." )
 endif()

 if( CMAKE_HOST_WIN32 )
  # remove cygwin from PATH
  set( __new_path "$ENV***REMOVED***PATH***REMOVED***")
  __LIST_FILTER( __new_path "cygwin" )
  set(ENV***REMOVED***PATH***REMOVED*** "$***REMOVED***__new_path***REMOVED***")
  unset(__new_path)
 endif()
endif()


# detect current host platform
if( NOT DEFINED ANDROID_NDK_HOST_X64 AND (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "amd64|x86_64|AMD64" OR CMAKE_HOST_APPLE) )
 set( ANDROID_NDK_HOST_X64 1 CACHE BOOL "Try to use 64-bit compiler toolchain" )
 mark_as_advanced( ANDROID_NDK_HOST_X64 )
endif()

set( TOOL_OS_SUFFIX "" )
if( CMAKE_HOST_APPLE )
 set( ANDROID_NDK_HOST_SYSTEM_NAME "darwin-x86_64" )
 set( ANDROID_NDK_HOST_SYSTEM_NAME2 "darwin-x86" )
elseif( CMAKE_HOST_WIN32 )
 set( ANDROID_NDK_HOST_SYSTEM_NAME "windows-x86_64" )
 set( ANDROID_NDK_HOST_SYSTEM_NAME2 "windows" )
 set( TOOL_OS_SUFFIX ".exe" )
elseif( CMAKE_HOST_UNIX )
 set( ANDROID_NDK_HOST_SYSTEM_NAME "linux-x86_64" )
 set( ANDROID_NDK_HOST_SYSTEM_NAME2 "linux-x86" )
else()
 message( FATAL_ERROR "Cross-compilation on your platform is not supported by this cmake toolchain" )
endif()

if( NOT ANDROID_NDK_HOST_X64 )
 set( ANDROID_NDK_HOST_SYSTEM_NAME $***REMOVED***ANDROID_NDK_HOST_SYSTEM_NAME2***REMOVED*** )
endif()

# see if we have path to Android NDK
if( NOT ANDROID_NDK AND NOT ANDROID_STANDALONE_TOOLCHAIN )
  __INIT_VARIABLE( ANDROID_NDK PATH ENV_ANDROID_NDK )
endif()
if( NOT ANDROID_NDK )
 # see if we have path to Android standalone toolchain
 __INIT_VARIABLE( ANDROID_STANDALONE_TOOLCHAIN PATH ENV_ANDROID_STANDALONE_TOOLCHAIN )

 if( NOT ANDROID_STANDALONE_TOOLCHAIN )
  #try to find Android NDK in one of the the default locations
  set( __ndkSearchPaths )
  foreach( __ndkSearchPath $***REMOVED***ANDROID_NDK_SEARCH_PATHS***REMOVED*** )
   foreach( suffix $***REMOVED***ANDROID_SUPPORTED_NDK_VERSIONS***REMOVED*** )
    list( APPEND __ndkSearchPaths "$***REMOVED***__ndkSearchPath***REMOVED***/android-ndk$***REMOVED***suffix***REMOVED***" )
   endforeach()
  endforeach()
  __INIT_VARIABLE( ANDROID_NDK PATH VALUES $***REMOVED***__ndkSearchPaths***REMOVED*** )
  unset( __ndkSearchPaths )

  if( ANDROID_NDK )
   message( STATUS "Using default path for Android NDK: $***REMOVED***ANDROID_NDK***REMOVED***" )
   message( STATUS "  If you prefer to use a different location, please define a cmake or environment variable: ANDROID_NDK" )
  else()
   #try to find Android standalone toolchain in one of the the default locations
   __INIT_VARIABLE( ANDROID_STANDALONE_TOOLCHAIN PATH ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH )

   if( ANDROID_STANDALONE_TOOLCHAIN )
    message( STATUS "Using default path for standalone toolchain $***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***" )
    message( STATUS "  If you prefer to use a different location, please define the variable: ANDROID_STANDALONE_TOOLCHAIN" )
   endif( ANDROID_STANDALONE_TOOLCHAIN )
  endif( ANDROID_NDK )
 endif( NOT ANDROID_STANDALONE_TOOLCHAIN )
endif( NOT ANDROID_NDK )

# remember found paths
if( ANDROID_NDK )
 get_filename_component( ANDROID_NDK "$***REMOVED***ANDROID_NDK***REMOVED***" ABSOLUTE )
 set( ANDROID_NDK "$***REMOVED***ANDROID_NDK***REMOVED***" CACHE INTERNAL "Path of the Android NDK" FORCE )
 set( BUILD_WITH_ANDROID_NDK True )
 if( EXISTS "$***REMOVED***ANDROID_NDK***REMOVED***/RELEASE.TXT" )
  file( STRINGS "$***REMOVED***ANDROID_NDK***REMOVED***/RELEASE.TXT" ANDROID_NDK_RELEASE_FULL LIMIT_COUNT 1 REGEX "r[0-9]+[a-z]?" )
  string( REGEX MATCH "r([0-9]+)([a-z]?)" ANDROID_NDK_RELEASE "$***REMOVED***ANDROID_NDK_RELEASE_FULL***REMOVED***" )
 else()
  set( ANDROID_NDK_RELEASE "r1x" )
  set( ANDROID_NDK_RELEASE_FULL "unreleased" )
 endif()
 string( REGEX REPLACE "r([0-9]+)([a-z]?)" "\\1*1000" ANDROID_NDK_RELEASE_NUM "$***REMOVED***ANDROID_NDK_RELEASE***REMOVED***" )
 string( FIND " abcdefghijklmnopqastuvwxyz" "$***REMOVED***CMAKE_MATCH_2***REMOVED***" __ndkReleaseLetterNum )
 math( EXPR ANDROID_NDK_RELEASE_NUM "$***REMOVED***ANDROID_NDK_RELEASE_NUM***REMOVED***+$***REMOVED***__ndkReleaseLetterNum***REMOVED***" )
elseif( ANDROID_STANDALONE_TOOLCHAIN )
 get_filename_component( ANDROID_STANDALONE_TOOLCHAIN "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***" ABSOLUTE )
 # try to detect change
 if( CMAKE_AR )
  string( LENGTH "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***" __length )
  string( SUBSTRING "$***REMOVED***CMAKE_AR***REMOVED***" 0 $***REMOVED***__length***REMOVED*** __androidStandaloneToolchainPreviousPath )
  if( NOT __androidStandaloneToolchainPreviousPath STREQUAL ANDROID_STANDALONE_TOOLCHAIN )
   message( FATAL_ERROR "It is not possible to change path to the Android standalone toolchain on subsequent run." )
  endif()
  unset( __androidStandaloneToolchainPreviousPath )
  unset( __length )
 endif()
 set( ANDROID_STANDALONE_TOOLCHAIN "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***" CACHE INTERNAL "Path of the Android standalone toolchain" FORCE )
 set( BUILD_WITH_STANDALONE_TOOLCHAIN True )
else()
 list(GET ANDROID_NDK_SEARCH_PATHS 0 ANDROID_NDK_SEARCH_PATH)
 message( FATAL_ERROR "Could not find neither Android NDK nor Android standalone toolchain.
    You should either set an environment variable:
      export ANDROID_NDK=~/my-android-ndk
    or
      export ANDROID_STANDALONE_TOOLCHAIN=~/my-android-toolchain
    or put the toolchain or NDK in the default path:
      sudo ln -s ~/my-android-ndk $***REMOVED***ANDROID_NDK_SEARCH_PATH***REMOVED***/android-ndk
      sudo ln -s ~/my-android-toolchain $***REMOVED***ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH***REMOVED***" )
endif()

# android NDK layout
if( BUILD_WITH_ANDROID_NDK )
 if( NOT DEFINED ANDROID_NDK_LAYOUT )
  # try to automatically detect the layout
  if( EXISTS "$***REMOVED***ANDROID_NDK***REMOVED***/RELEASE.TXT")
   set( ANDROID_NDK_LAYOUT "RELEASE" )
  elseif( EXISTS "$***REMOVED***ANDROID_NDK***REMOVED***/../../linux-x86/toolchain/" )
   set( ANDROID_NDK_LAYOUT "LINARO" )
  elseif( EXISTS "$***REMOVED***ANDROID_NDK***REMOVED***/../../gcc/" )
   set( ANDROID_NDK_LAYOUT "ANDROID" )
  endif()
 endif()
 set( ANDROID_NDK_LAYOUT "$***REMOVED***ANDROID_NDK_LAYOUT***REMOVED***" CACHE STRING "The inner layout of NDK" )
 mark_as_advanced( ANDROID_NDK_LAYOUT )
 if( ANDROID_NDK_LAYOUT STREQUAL "LINARO" )
  set( ANDROID_NDK_HOST_SYSTEM_NAME $***REMOVED***ANDROID_NDK_HOST_SYSTEM_NAME2***REMOVED*** ) # only 32-bit at the moment
  set( ANDROID_NDK_TOOLCHAINS_PATH "$***REMOVED***ANDROID_NDK***REMOVED***/../../$***REMOVED***ANDROID_NDK_HOST_SYSTEM_NAME***REMOVED***/toolchain" )
  set( ANDROID_NDK_TOOLCHAINS_SUBPATH  "" )
  set( ANDROID_NDK_TOOLCHAINS_SUBPATH2 "" )
 elseif( ANDROID_NDK_LAYOUT STREQUAL "ANDROID" )
  set( ANDROID_NDK_HOST_SYSTEM_NAME $***REMOVED***ANDROID_NDK_HOST_SYSTEM_NAME2***REMOVED*** ) # only 32-bit at the moment
  set( ANDROID_NDK_TOOLCHAINS_PATH "$***REMOVED***ANDROID_NDK***REMOVED***/../../gcc/$***REMOVED***ANDROID_NDK_HOST_SYSTEM_NAME***REMOVED***/arm" )
  set( ANDROID_NDK_TOOLCHAINS_SUBPATH  "" )
  set( ANDROID_NDK_TOOLCHAINS_SUBPATH2 "" )
 else() # ANDROID_NDK_LAYOUT STREQUAL "RELEASE"
  set( ANDROID_NDK_TOOLCHAINS_PATH "$***REMOVED***ANDROID_NDK***REMOVED***/toolchains" )
  set( ANDROID_NDK_TOOLCHAINS_SUBPATH  "/prebuilt/$***REMOVED***ANDROID_NDK_HOST_SYSTEM_NAME***REMOVED***" )
  set( ANDROID_NDK_TOOLCHAINS_SUBPATH2 "/prebuilt/$***REMOVED***ANDROID_NDK_HOST_SYSTEM_NAME2***REMOVED***" )
 endif()
 get_filename_component( ANDROID_NDK_TOOLCHAINS_PATH "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***" ABSOLUTE )

 # try to detect change of NDK
 if( CMAKE_AR )
  string( LENGTH "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***" __length )
  string( SUBSTRING "$***REMOVED***CMAKE_AR***REMOVED***" 0 $***REMOVED***__length***REMOVED*** __androidNdkPreviousPath )
  if( NOT __androidNdkPreviousPath STREQUAL ANDROID_NDK_TOOLCHAINS_PATH )
   message( FATAL_ERROR "It is not possible to change the path to the NDK on subsequent CMake run. You must remove all generated files from your build folder first.
   " )
  endif()
  unset( __androidNdkPreviousPath )
  unset( __length )
 endif()
endif()


# get all the details about standalone toolchain
if( BUILD_WITH_STANDALONE_TOOLCHAIN )
 __DETECT_NATIVE_API_LEVEL( ANDROID_SUPPORTED_NATIVE_API_LEVELS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/sysroot/usr/include/android/api-level.h" )
 set( ANDROID_STANDALONE_TOOLCHAIN_API_LEVEL $***REMOVED***ANDROID_SUPPORTED_NATIVE_API_LEVELS***REMOVED*** )
 set( __availableToolchains "standalone" )
 __DETECT_TOOLCHAIN_MACHINE_NAME( __availableToolchainMachines "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***" )
 if( NOT __availableToolchainMachines )
  message( FATAL_ERROR "Could not determine machine name of your toolchain. Probably your Android standalone toolchain is broken." )
 endif()
 if( __availableToolchainMachines MATCHES x86_64 )
  set( __availableToolchainArchs "x86_64" )
 elseif( __availableToolchainMachines MATCHES i686 )
  set( __availableToolchainArchs "x86" )
 elseif( __availableToolchainMachines MATCHES aarch64 )
  set( __availableToolchainArchs "arm64" )
 elseif( __availableToolchainMachines MATCHES arm )
  set( __availableToolchainArchs "arm" )
 elseif( __availableToolchainMachines MATCHES mips64el )
  set( __availableToolchainArchs "mips64" )
 elseif( __availableToolchainMachines MATCHES mipsel )
  set( __availableToolchainArchs "mips" )
 endif()
 execute_process( COMMAND "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/bin/$***REMOVED***__availableToolchainMachines***REMOVED***-gcc$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" -dumpversion
                  OUTPUT_VARIABLE __availableToolchainCompilerVersions OUTPUT_STRIP_TRAILING_WHITESPACE )
 string( REGEX MATCH "[0-9]+[.][0-9]+([.][0-9]+)?" __availableToolchainCompilerVersions "$***REMOVED***__availableToolchainCompilerVersions***REMOVED***" )
 if( EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/bin/clang$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" )
  list( APPEND __availableToolchains "standalone-clang" )
  list( APPEND __availableToolchainMachines $***REMOVED***__availableToolchainMachines***REMOVED*** )
  list( APPEND __availableToolchainArchs $***REMOVED***__availableToolchainArchs***REMOVED*** )
  list( APPEND __availableToolchainCompilerVersions $***REMOVED***__availableToolchainCompilerVersions***REMOVED*** )
 endif()
endif()

macro( __GLOB_NDK_TOOLCHAINS __availableToolchainsVar __availableToolchainsLst __toolchain_subpath )
 foreach( __toolchain $***REMOVED***$***REMOVED***__availableToolchainsLst***REMOVED******REMOVED*** )
  if( "$***REMOVED***__toolchain***REMOVED***" MATCHES "-clang3[.][0-9]$" AND NOT EXISTS "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***__toolchain***REMOVED***$***REMOVED***__toolchain_subpath***REMOVED***" )
   SET( __toolchainVersionRegex "^TOOLCHAIN_VERSION[\t ]+:=[\t ]+(.*)$" )
   FILE( STRINGS "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***__toolchain***REMOVED***/setup.mk" __toolchainVersionStr REGEX "$***REMOVED***__toolchainVersionRegex***REMOVED***" )
   if( __toolchainVersionStr )
    string( REGEX REPLACE "$***REMOVED***__toolchainVersionRegex***REMOVED***" "\\1" __toolchainVersionStr "$***REMOVED***__toolchainVersionStr***REMOVED***" )
    string( REGEX REPLACE "-clang3[.][0-9]$" "-$***REMOVED***__toolchainVersionStr***REMOVED***" __gcc_toolchain "$***REMOVED***__toolchain***REMOVED***" )
   else()
    string( REGEX REPLACE "-clang3[.][0-9]$" "-4.6" __gcc_toolchain "$***REMOVED***__toolchain***REMOVED***" )
   endif()
   unset( __toolchainVersionStr )
   unset( __toolchainVersionRegex )
  else()
   set( __gcc_toolchain "$***REMOVED***__toolchain***REMOVED***" )
  endif()
  __DETECT_TOOLCHAIN_MACHINE_NAME( __machine "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***__gcc_toolchain***REMOVED***$***REMOVED***__toolchain_subpath***REMOVED***" )
  if( __machine )
   string( REGEX MATCH "[0-9]+[.][0-9]+([.][0-9x]+)?$" __version "$***REMOVED***__gcc_toolchain***REMOVED***" )
   if( __machine MATCHES x86_64 )
    set( __arch "x86_64" )
   elseif( __machine MATCHES i686 )
    set( __arch "x86" )
   elseif( __machine MATCHES aarch64 )
    set( __arch "arm64" )
   elseif( __machine MATCHES arm )
    set( __arch "arm" )
   elseif( __machine MATCHES mips64el )
    set( __arch "mips64" )
   elseif( __machine MATCHES mipsel )
    set( __arch "mips" )
   else()
    set( __arch "" )
   endif()
   #message("machine: !$***REMOVED***__machine***REMOVED***!\narch: !$***REMOVED***__arch***REMOVED***!\nversion: !$***REMOVED***__version***REMOVED***!\ntoolchain: !$***REMOVED***__toolchain***REMOVED***!\n")
   if (__arch)
    list( APPEND __availableToolchainMachines "$***REMOVED***__machine***REMOVED***" )
    list( APPEND __availableToolchainArchs "$***REMOVED***__arch***REMOVED***" )
    list( APPEND __availableToolchainCompilerVersions "$***REMOVED***__version***REMOVED***" )
    list( APPEND $***REMOVED***__availableToolchainsVar***REMOVED*** "$***REMOVED***__toolchain***REMOVED***" )
   endif()
  endif()
  unset( __gcc_toolchain )
 endforeach()
endmacro()

# get all the details about NDK
if( BUILD_WITH_ANDROID_NDK )
 file( GLOB ANDROID_SUPPORTED_NATIVE_API_LEVELS RELATIVE "$***REMOVED***ANDROID_NDK***REMOVED***/platforms" "$***REMOVED***ANDROID_NDK***REMOVED***/platforms/android-*" )
 string( REPLACE "android-" "" ANDROID_SUPPORTED_NATIVE_API_LEVELS "$***REMOVED***ANDROID_SUPPORTED_NATIVE_API_LEVELS***REMOVED***" )
 set( __availableToolchains "" )
 set( __availableToolchainMachines "" )
 set( __availableToolchainArchs "" )
 set( __availableToolchainCompilerVersions "" )
 if( ANDROID_TOOLCHAIN_NAME AND EXISTS "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***/" )
  # do not go through all toolchains if we know the name
  set( __availableToolchainsLst "$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***" )
  __GLOB_NDK_TOOLCHAINS( __availableToolchains __availableToolchainsLst "$***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH***REMOVED***" )
  if( NOT __availableToolchains AND NOT ANDROID_NDK_TOOLCHAINS_SUBPATH STREQUAL ANDROID_NDK_TOOLCHAINS_SUBPATH2 )
   __GLOB_NDK_TOOLCHAINS( __availableToolchains __availableToolchainsLst "$***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH2***REMOVED***" )
   if( __availableToolchains )
    set( ANDROID_NDK_TOOLCHAINS_SUBPATH $***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH2***REMOVED*** )
   endif()
  endif()
 endif()
 if( NOT __availableToolchains )
  file( GLOB __availableToolchainsLst RELATIVE "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***" "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/*" )
  if( __availableToolchainsLst )
   list(SORT __availableToolchainsLst) # we need clang to go after gcc
  endif()
  __LIST_FILTER( __availableToolchainsLst "^[.]" )
  __LIST_FILTER( __availableToolchainsLst "llvm" )
  __LIST_FILTER( __availableToolchainsLst "renderscript" )
  __GLOB_NDK_TOOLCHAINS( __availableToolchains __availableToolchainsLst "$***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH***REMOVED***" )
  if( NOT __availableToolchains AND NOT ANDROID_NDK_TOOLCHAINS_SUBPATH STREQUAL ANDROID_NDK_TOOLCHAINS_SUBPATH2 )
   __GLOB_NDK_TOOLCHAINS( __availableToolchains __availableToolchainsLst "$***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH2***REMOVED***" )
   if( __availableToolchains )
    set( ANDROID_NDK_TOOLCHAINS_SUBPATH $***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH2***REMOVED*** )
   endif()
  endif()
 endif()
 if( NOT __availableToolchains )
  message( FATAL_ERROR "Could not find any working toolchain in the NDK. Probably your Android NDK is broken." )
 endif()
endif()

# build list of available ABIs
set( ANDROID_SUPPORTED_ABIS "" )
set( __uniqToolchainArchNames $***REMOVED***__availableToolchainArchs***REMOVED*** )
list( REMOVE_DUPLICATES __uniqToolchainArchNames )
list( SORT __uniqToolchainArchNames )
foreach( __arch $***REMOVED***__uniqToolchainArchNames***REMOVED*** )
 list( APPEND ANDROID_SUPPORTED_ABIS $***REMOVED***ANDROID_SUPPORTED_ABIS_$***REMOVED***__arch***REMOVED******REMOVED*** )
endforeach()
unset( __uniqToolchainArchNames )
if( NOT ANDROID_SUPPORTED_ABIS )
 message( FATAL_ERROR "No one of known Android ABIs is supported by this cmake toolchain." )
endif()

# choose target ABI
__INIT_VARIABLE( ANDROID_ABI VALUES $***REMOVED***ANDROID_SUPPORTED_ABIS***REMOVED*** )
# verify that target ABI is supported
list( FIND ANDROID_SUPPORTED_ABIS "$***REMOVED***ANDROID_ABI***REMOVED***" __androidAbiIdx )
if( __androidAbiIdx EQUAL -1 )
 string( REPLACE ";" "\", \"" PRINTABLE_ANDROID_SUPPORTED_ABIS  "$***REMOVED***ANDROID_SUPPORTED_ABIS***REMOVED***" )
 message( FATAL_ERROR "Specified ANDROID_ABI = \"$***REMOVED***ANDROID_ABI***REMOVED***\" is not supported by this cmake toolchain or your NDK/toolchain.
   Supported values are: \"$***REMOVED***PRINTABLE_ANDROID_SUPPORTED_ABIS***REMOVED***\"
   " )
endif()
unset( __androidAbiIdx )

# set target ABI options
if( ANDROID_ABI STREQUAL "x86" )
 set( X86 true )
 set( ANDROID_NDK_ABI_NAME "x86" )
 set( ANDROID_ARCH_NAME "x86" )
 set( ANDROID_LLVM_TRIPLE "i686-none-linux-android" )
 set( CMAKE_SYSTEM_PROCESSOR "i686" )
elseif( ANDROID_ABI STREQUAL "x86_64" )
 set( X86 true )
 set( X86_64 true )
 set( ANDROID_NDK_ABI_NAME "x86_64" )
 set( ANDROID_ARCH_NAME "x86_64" )
 set( CMAKE_SYSTEM_PROCESSOR "x86_64" )
 set( ANDROID_LLVM_TRIPLE "x86_64-none-linux-android" )
elseif( ANDROID_ABI STREQUAL "mips64" )
 set( MIPS64 true )
 set( ANDROID_NDK_ABI_NAME "mips64" )
 set( ANDROID_ARCH_NAME "mips64" )
 set( ANDROID_LLVM_TRIPLE "mips64el-none-linux-android" )
 set( CMAKE_SYSTEM_PROCESSOR "mips64" )
elseif( ANDROID_ABI STREQUAL "mips" )
 set( MIPS true )
 set( ANDROID_NDK_ABI_NAME "mips" )
 set( ANDROID_ARCH_NAME "mips" )
 set( ANDROID_LLVM_TRIPLE "mipsel-none-linux-android" )
 set( CMAKE_SYSTEM_PROCESSOR "mips" )
elseif( ANDROID_ABI STREQUAL "arm64-v8a" )
 set( ARM64_V8A true )
 set( ANDROID_NDK_ABI_NAME "arm64-v8a" )
 set( ANDROID_ARCH_NAME "arm64" )
 set( ANDROID_LLVM_TRIPLE "aarch64-none-linux-android" )
 set( CMAKE_SYSTEM_PROCESSOR "aarch64" )
 set( VFPV3 true )
 set( NEON true )
elseif( ANDROID_ABI STREQUAL "armeabi" )
 set( ARMEABI true )
 set( ANDROID_NDK_ABI_NAME "armeabi" )
 set( ANDROID_ARCH_NAME "arm" )
 set( ANDROID_LLVM_TRIPLE "armv5te-none-linux-androideabi" )
 set( CMAKE_SYSTEM_PROCESSOR "armv5te" )
elseif( ANDROID_ABI STREQUAL "armeabi-v6 with VFP" )
 set( ARMEABI_V6 true )
 set( ANDROID_NDK_ABI_NAME "armeabi" )
 set( ANDROID_ARCH_NAME "arm" )
 set( ANDROID_LLVM_TRIPLE "armv5te-none-linux-androideabi" )
 set( CMAKE_SYSTEM_PROCESSOR "armv6" )
 # need always fallback to older platform
 set( ARMEABI true )
elseif( ANDROID_ABI STREQUAL "armeabi-v7a")
 set( ARMEABI_V7A true )
 set( ANDROID_NDK_ABI_NAME "armeabi-v7a" )
 set( ANDROID_ARCH_NAME "arm" )
 set( ANDROID_LLVM_TRIPLE "armv7-none-linux-androideabi" )
 set( CMAKE_SYSTEM_PROCESSOR "armv7-a" )
elseif( ANDROID_ABI STREQUAL "armeabi-v7a with VFPV3" )
 set( ARMEABI_V7A true )
 set( ANDROID_NDK_ABI_NAME "armeabi-v7a" )
 set( ANDROID_ARCH_NAME "arm" )
 set( ANDROID_LLVM_TRIPLE "armv7-none-linux-androideabi" )
 set( CMAKE_SYSTEM_PROCESSOR "armv7-a" )
 set( VFPV3 true )
elseif( ANDROID_ABI STREQUAL "armeabi-v7a with NEON" )
 set( ARMEABI_V7A true )
 set( ANDROID_NDK_ABI_NAME "armeabi-v7a" )
 set( ANDROID_ARCH_NAME "arm" )
 set( ANDROID_LLVM_TRIPLE "armv7-none-linux-androideabi" )
 set( CMAKE_SYSTEM_PROCESSOR "armv7-a" )
 set( VFPV3 true )
 set( NEON true )
else()
 message( SEND_ERROR "Unknown ANDROID_ABI=\"$***REMOVED***ANDROID_ABI***REMOVED***\" is specified." )
endif()

if( CMAKE_BINARY_DIR AND EXISTS "$***REMOVED***CMAKE_BINARY_DIR***REMOVED***$***REMOVED***CMAKE_FILES_DIRECTORY***REMOVED***/CMakeSystem.cmake" )
 # really dirty hack
 # it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...
 file( APPEND "$***REMOVED***CMAKE_BINARY_DIR***REMOVED***$***REMOVED***CMAKE_FILES_DIRECTORY***REMOVED***/CMakeSystem.cmake" "SET(CMAKE_SYSTEM_PROCESSOR \"$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***\")\n" )
endif()

if( ANDROID_ARCH_NAME STREQUAL "arm" AND NOT ARMEABI_V6 )
 __INIT_VARIABLE( ANDROID_FORCE_ARM_BUILD VALUES OFF )
 set( ANDROID_FORCE_ARM_BUILD $***REMOVED***ANDROID_FORCE_ARM_BUILD***REMOVED*** CACHE BOOL "Use 32-bit ARM instructions instead of Thumb-1" FORCE )
 mark_as_advanced( ANDROID_FORCE_ARM_BUILD )
else()
 unset( ANDROID_FORCE_ARM_BUILD CACHE )
endif()

# choose toolchain
if( ANDROID_TOOLCHAIN_NAME )
 list( FIND __availableToolchains "$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***" __toolchainIdx )
 if( __toolchainIdx EQUAL -1 )
  list( SORT __availableToolchains )
  string( REPLACE ";" "\n  * " toolchains_list "$***REMOVED***__availableToolchains***REMOVED***" )
  set( toolchains_list "  * $***REMOVED***toolchains_list***REMOVED***")
  message( FATAL_ERROR "Specified toolchain \"$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***\" is missing in your NDK or broken. Please verify that your NDK is working or select another compiler toolchain.
To configure the toolchain set CMake variable ANDROID_TOOLCHAIN_NAME to one of the following values:\n$***REMOVED***toolchains_list***REMOVED***\n" )
 endif()
 list( GET __availableToolchainArchs $***REMOVED***__toolchainIdx***REMOVED*** __toolchainArch )
 if( NOT __toolchainArch STREQUAL ANDROID_ARCH_NAME )
  message( SEND_ERROR "Selected toolchain \"$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***\" is not able to compile binaries for the \"$***REMOVED***ANDROID_ARCH_NAME***REMOVED***\" platform." )
 endif()
else()
 set( __toolchainIdx -1 )
 set( __applicableToolchains "" )
 set( __toolchainMaxVersion "0.0.0" )
 list( LENGTH __availableToolchains __availableToolchainsCount )
 math( EXPR __availableToolchainsCount "$***REMOVED***__availableToolchainsCount***REMOVED***-1" )
 foreach( __idx RANGE $***REMOVED***__availableToolchainsCount***REMOVED*** )
  list( GET __availableToolchainArchs $***REMOVED***__idx***REMOVED*** __toolchainArch )
  if( __toolchainArch STREQUAL ANDROID_ARCH_NAME )
   list( GET __availableToolchainCompilerVersions $***REMOVED***__idx***REMOVED*** __toolchainVersion )
   string( REPLACE "x" "99" __toolchainVersion "$***REMOVED***__toolchainVersion***REMOVED***")
   if( __toolchainVersion VERSION_GREATER __toolchainMaxVersion )
    set( __toolchainMaxVersion "$***REMOVED***__toolchainVersion***REMOVED***" )
    set( __toolchainIdx $***REMOVED***__idx***REMOVED*** )
   endif()
  endif()
 endforeach()
 unset( __availableToolchainsCount )
 unset( __toolchainMaxVersion )
 unset( __toolchainVersion )
endif()
unset( __toolchainArch )
if( __toolchainIdx EQUAL -1 )
 message( FATAL_ERROR "No one of available compiler toolchains is able to compile for $***REMOVED***ANDROID_ARCH_NAME***REMOVED*** platform." )
endif()
list( GET __availableToolchains $***REMOVED***__toolchainIdx***REMOVED*** ANDROID_TOOLCHAIN_NAME )
list( GET __availableToolchainMachines $***REMOVED***__toolchainIdx***REMOVED*** ANDROID_TOOLCHAIN_MACHINE_NAME )
list( GET __availableToolchainCompilerVersions $***REMOVED***__toolchainIdx***REMOVED*** ANDROID_COMPILER_VERSION )

unset( __toolchainIdx )
unset( __availableToolchains )
unset( __availableToolchainMachines )
unset( __availableToolchainArchs )
unset( __availableToolchainCompilerVersions )

# choose native API level
__INIT_VARIABLE( ANDROID_NATIVE_API_LEVEL ENV_ANDROID_NATIVE_API_LEVEL ANDROID_API_LEVEL ENV_ANDROID_API_LEVEL ANDROID_STANDALONE_TOOLCHAIN_API_LEVEL ANDROID_DEFAULT_NDK_API_LEVEL_$***REMOVED***ANDROID_ARCH_NAME***REMOVED*** ANDROID_DEFAULT_NDK_API_LEVEL )
string( REPLACE "android-" "" ANDROID_NATIVE_API_LEVEL "$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***" )
string( STRIP "$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***" ANDROID_NATIVE_API_LEVEL )
# adjust API level
set( __real_api_level $***REMOVED***ANDROID_DEFAULT_NDK_API_LEVEL_$***REMOVED***ANDROID_ARCH_NAME***REMOVED******REMOVED*** )
foreach( __level $***REMOVED***ANDROID_SUPPORTED_NATIVE_API_LEVELS***REMOVED*** )
 if( (__level LESS ANDROID_NATIVE_API_LEVEL OR __level STREQUAL ANDROID_NATIVE_API_LEVEL) AND NOT __level LESS __real_api_level )
  set( __real_api_level $***REMOVED***__level***REMOVED*** )
 endif()
endforeach()
if( __real_api_level AND NOT ANDROID_NATIVE_API_LEVEL STREQUAL __real_api_level )
 message( STATUS "Adjusting Android API level 'android-$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***' to 'android-$***REMOVED***__real_api_level***REMOVED***'")
 set( ANDROID_NATIVE_API_LEVEL $***REMOVED***__real_api_level***REMOVED*** )
endif()
unset(__real_api_level)
# validate
list( FIND ANDROID_SUPPORTED_NATIVE_API_LEVELS "$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***" __levelIdx )
if( __levelIdx EQUAL -1 )
 message( SEND_ERROR "Specified Android native API level 'android-$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***' is not supported by your NDK/toolchain." )
else()
 if( BUILD_WITH_ANDROID_NDK )
  __DETECT_NATIVE_API_LEVEL( __realApiLevel "$***REMOVED***ANDROID_NDK***REMOVED***/platforms/android-$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***/arch-$***REMOVED***ANDROID_ARCH_NAME***REMOVED***/usr/include/android/api-level.h" )
  if( NOT __realApiLevel EQUAL ANDROID_NATIVE_API_LEVEL AND NOT __realApiLevel GREATER 9000 )
   message( SEND_ERROR "Specified Android API level ($***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***) does not match to the level found ($***REMOVED***__realApiLevel***REMOVED***). Probably your copy of NDK is broken." )
  endif()
  unset( __realApiLevel )
 endif()
 set( ANDROID_NATIVE_API_LEVEL "$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***" CACHE STRING "Android API level for native code" FORCE )
 set( CMAKE_ANDROID_API $***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED*** )
 if( CMAKE_VERSION VERSION_GREATER "2.8" )
  list( SORT ANDROID_SUPPORTED_NATIVE_API_LEVELS )
  set_property( CACHE ANDROID_NATIVE_API_LEVEL PROPERTY STRINGS $***REMOVED***ANDROID_SUPPORTED_NATIVE_API_LEVELS***REMOVED*** )
 endif()
endif()
unset( __levelIdx )


# remember target ABI
set( ANDROID_ABI "$***REMOVED***ANDROID_ABI***REMOVED***" CACHE STRING "The target ABI for Android. If arm, then armeabi-v7a is recommended for hardware floating point." FORCE )
if( CMAKE_VERSION VERSION_GREATER "2.8" )
 list( SORT ANDROID_SUPPORTED_ABIS_$***REMOVED***ANDROID_ARCH_NAME***REMOVED*** )
 set_property( CACHE ANDROID_ABI PROPERTY STRINGS $***REMOVED***ANDROID_SUPPORTED_ABIS_$***REMOVED***ANDROID_ARCH_NAME***REMOVED******REMOVED*** )
endif()


# runtime choice (STL, rtti, exceptions)
if( NOT ANDROID_STL )
  set( ANDROID_STL gnustl_static )
endif()
set( ANDROID_STL "$***REMOVED***ANDROID_STL***REMOVED***" CACHE STRING "C++ runtime" )
set( ANDROID_STL_FORCE_FEATURES ON CACHE BOOL "automatically configure rtti and exceptions support based on C++ runtime" )
mark_as_advanced( ANDROID_STL ANDROID_STL_FORCE_FEATURES )

if( BUILD_WITH_ANDROID_NDK )
 if( NOT "$***REMOVED***ANDROID_STL***REMOVED***" MATCHES "^(none|system|system_re|gabi\\+\\+_static|gabi\\+\\+_shared|stlport_static|stlport_shared|gnustl_static|gnustl_shared)$")
  message( FATAL_ERROR "ANDROID_STL is set to invalid value \"$***REMOVED***ANDROID_STL***REMOVED***\".
The possible values are:
  none           -> Do not configure the runtime.
  system         -> Use the default minimal system C++ runtime library.
  system_re      -> Same as system but with rtti and exceptions.
  gabi++_static  -> Use the GAbi++ runtime as a static library.
  gabi++_shared  -> Use the GAbi++ runtime as a shared library.
  stlport_static -> Use the STLport runtime as a static library.
  stlport_shared -> Use the STLport runtime as a shared library.
  gnustl_static  -> (default) Use the GNU STL as a static library.
  gnustl_shared  -> Use the GNU STL as a shared library.
" )
 endif()
elseif( BUILD_WITH_STANDALONE_TOOLCHAIN )
 if( NOT "$***REMOVED***ANDROID_STL***REMOVED***" MATCHES "^(none|gnustl_static|gnustl_shared)$")
  message( FATAL_ERROR "ANDROID_STL is set to invalid value \"$***REMOVED***ANDROID_STL***REMOVED***\".
The possible values are:
  none           -> Do not configure the runtime.
  gnustl_static  -> (default) Use the GNU STL as a static library.
  gnustl_shared  -> Use the GNU STL as a shared library.
" )
 endif()
endif()

unset( ANDROID_RTTI )
unset( ANDROID_EXCEPTIONS )
unset( ANDROID_STL_INCLUDE_DIRS )
unset( __libstl )
unset( __libsupcxx )

if( NOT _CMAKE_IN_TRY_COMPILE AND ANDROID_NDK_RELEASE STREQUAL "r7b" AND ARMEABI_V7A AND NOT VFPV3 AND ANDROID_STL MATCHES "gnustl" )
 message( WARNING  "The GNU STL armeabi-v7a binaries from NDK r7b can crash non-NEON devices. The files provided with NDK r7b were not configured properly, resulting in crashes on Tegra2-based devices and others when trying to use certain floating-point functions (e.g., cosf, sinf, expf).
You are strongly recommended to switch to another NDK release.
" )
endif()

if( NOT _CMAKE_IN_TRY_COMPILE AND X86 AND ANDROID_STL MATCHES "gnustl" AND ANDROID_NDK_RELEASE STREQUAL "r6" )
  message( WARNING  "The x86 system header file from NDK r6 has incorrect definition for ptrdiff_t. You are recommended to upgrade to a newer NDK release or manually patch the header:
See https://android.googlesource.com/platform/development.git f907f4f9d4e56ccc8093df6fee54454b8bcab6c2
  diff --git a/ndk/platforms/android-9/arch-x86/include/machine/_types.h b/ndk/platforms/android-9/arch-x86/include/machine/_types.h
  index 5e28c64..65892a1 100644
  --- a/ndk/platforms/android-9/arch-x86/include/machine/_types.h
  +++ b/ndk/platforms/android-9/arch-x86/include/machine/_types.h
  @@ -51,7 +51,11 @@ typedef long int       ssize_t;
   #endif
   #ifndef _PTRDIFF_T
   #define _PTRDIFF_T
  -typedef long           ptrdiff_t;
  +#  ifdef __ANDROID__
  +     typedef int            ptrdiff_t;
  +#  else
  +     typedef long           ptrdiff_t;
  +#  endif
   #endif
" )
endif()


# setup paths and STL for standalone toolchain
if( BUILD_WITH_STANDALONE_TOOLCHAIN )
 set( ANDROID_TOOLCHAIN_ROOT "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***" )
 set( ANDROID_CLANG_TOOLCHAIN_ROOT "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***" )
 set( ANDROID_SYSROOT "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/sysroot" )

 if( NOT ANDROID_STL STREQUAL "none" )
  set( ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/include/c++/$***REMOVED***ANDROID_COMPILER_VERSION***REMOVED***" )
  if( NOT EXISTS "$***REMOVED***ANDROID_STL_INCLUDE_DIRS***REMOVED***" )
   # old location ( pre r8c )
   set( ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/include/c++/$***REMOVED***ANDROID_COMPILER_VERSION***REMOVED***" )
  endif()
  if( ARMEABI_V7A AND EXISTS "$***REMOVED***ANDROID_STL_INCLUDE_DIRS***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/bits" )
   list( APPEND ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_STL_INCLUDE_DIRS***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***" )
  elseif( ARMEABI AND NOT ANDROID_FORCE_ARM_BUILD AND EXISTS "$***REMOVED***ANDROID_STL_INCLUDE_DIRS***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/thumb/bits" )
   list( APPEND ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_STL_INCLUDE_DIRS***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/thumb" )
  else()
   list( APPEND ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_STL_INCLUDE_DIRS***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***" )
  endif()
  # always search static GNU STL to get the location of libsupc++.a
  if( ARMEABI_V7A AND NOT ANDROID_FORCE_ARM_BUILD AND EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/thumb/libstdc++.a" )
   set( __libstl "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/thumb" )
  elseif( ARMEABI_V7A AND EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/libstdc++.a" )
   set( __libstl "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***" )
  elseif( ARMEABI AND NOT ANDROID_FORCE_ARM_BUILD AND EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/thumb/libstdc++.a" )
   set( __libstl "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/thumb" )
  elseif( EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/libstdc++.a" )
   set( __libstl "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib" )
  endif()
  if( __libstl )
   set( __libsupcxx "$***REMOVED***__libstl***REMOVED***/libsupc++.a" )
   set( __libstl    "$***REMOVED***__libstl***REMOVED***/libstdc++.a" )
  endif()
  if( NOT EXISTS "$***REMOVED***__libsupcxx***REMOVED***" )
   message( FATAL_ERROR "The required libstdsupc++.a is missing in your standalone toolchain.
 Usually it happens because of bug in make-standalone-toolchain.sh script from NDK r7, r7b and r7c.
 You need to either upgrade to newer NDK or manually copy
     $ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libsupc++.a
 to
     $***REMOVED***__libsupcxx***REMOVED***
   " )
  endif()
  if( ANDROID_STL STREQUAL "gnustl_shared" )
   if( ARMEABI_V7A AND EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/libgnustl_shared.so" )
    set( __libstl "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/libgnustl_shared.so" )
   elseif( ARMEABI AND NOT ANDROID_FORCE_ARM_BUILD AND EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/thumb/libgnustl_shared.so" )
    set( __libstl "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/thumb/libgnustl_shared.so" )
   elseif( EXISTS "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/libgnustl_shared.so" )
    set( __libstl "$***REMOVED***ANDROID_STANDALONE_TOOLCHAIN***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/libgnustl_shared.so" )
   endif()
  endif()
 endif()
endif()

# clang
if( "$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***" STREQUAL "standalone-clang" )
 set( ANDROID_COMPILER_IS_CLANG 1 )
 execute_process( COMMAND "$***REMOVED***ANDROID_CLANG_TOOLCHAIN_ROOT***REMOVED***/bin/clang$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" --version OUTPUT_VARIABLE ANDROID_CLANG_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE )
 string( REGEX MATCH "[0-9]+[.][0-9]+" ANDROID_CLANG_VERSION "$***REMOVED***ANDROID_CLANG_VERSION***REMOVED***")
elseif( "$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***" MATCHES "-clang3[.][0-9]?$" )
 string( REGEX MATCH "3[.][0-9]$" ANDROID_CLANG_VERSION "$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***")
 string( REGEX REPLACE "-clang$***REMOVED***ANDROID_CLANG_VERSION***REMOVED***$" "-$***REMOVED***ANDROID_COMPILER_VERSION***REMOVED***" ANDROID_GCC_TOOLCHAIN_NAME "$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***" )
 if( NOT EXISTS "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/llvm-$***REMOVED***ANDROID_CLANG_VERSION***REMOVED***$***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH***REMOVED***/bin/clang$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" )
  message( FATAL_ERROR "Could not find the Clang compiler driver" )
 endif()
 set( ANDROID_COMPILER_IS_CLANG 1 )
 set( ANDROID_CLANG_TOOLCHAIN_ROOT "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/llvm-$***REMOVED***ANDROID_CLANG_VERSION***REMOVED***$***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH***REMOVED***" )
else()
 set( ANDROID_GCC_TOOLCHAIN_NAME "$***REMOVED***ANDROID_TOOLCHAIN_NAME***REMOVED***" )
 unset( ANDROID_COMPILER_IS_CLANG CACHE )
endif()

string( REPLACE "." "" _clang_name "clang$***REMOVED***ANDROID_CLANG_VERSION***REMOVED***" )
if( NOT EXISTS "$***REMOVED***ANDROID_CLANG_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***_clang_name***REMOVED***$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" )
 set( _clang_name "clang" )
endif()


# setup paths and STL for NDK
if( BUILD_WITH_ANDROID_NDK )
 set( ANDROID_TOOLCHAIN_ROOT "$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***ANDROID_GCC_TOOLCHAIN_NAME***REMOVED***$***REMOVED***ANDROID_NDK_TOOLCHAINS_SUBPATH***REMOVED***" )
 set( ANDROID_SYSROOT "$***REMOVED***ANDROID_NDK***REMOVED***/platforms/android-$***REMOVED***ANDROID_NATIVE_API_LEVEL***REMOVED***/arch-$***REMOVED***ANDROID_ARCH_NAME***REMOVED***" )

 if( ANDROID_STL STREQUAL "none" )
  # do nothing
 elseif( ANDROID_STL STREQUAL "system" )
  set( ANDROID_RTTI             OFF )
  set( ANDROID_EXCEPTIONS       OFF )
  set( ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/system/include" )
 elseif( ANDROID_STL STREQUAL "system_re" )
  set( ANDROID_RTTI             ON )
  set( ANDROID_EXCEPTIONS       ON )
  set( ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/system/include" )
 elseif( ANDROID_STL MATCHES "gabi" )
  if( ANDROID_NDK_RELEASE_NUM LESS 7000 ) # before r7
   message( FATAL_ERROR "gabi++ is not available in your NDK. You have to upgrade to NDK r7 or newer to use gabi++.")
  endif()
  set( ANDROID_RTTI             ON )
  set( ANDROID_EXCEPTIONS       OFF )
  set( ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gabi++/include" )
  set( __libstl                 "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gabi++/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libgabi++_static.a" )
 elseif( ANDROID_STL MATCHES "stlport" )
  if( NOT ANDROID_NDK_RELEASE_NUM LESS 8004 ) # before r8d
   set( ANDROID_EXCEPTIONS       ON )
  else()
   set( ANDROID_EXCEPTIONS       OFF )
  endif()
  if( ANDROID_NDK_RELEASE_NUM LESS 7000 ) # before r7
   set( ANDROID_RTTI            OFF )
  else()
   set( ANDROID_RTTI            ON )
  endif()
  set( ANDROID_STL_INCLUDE_DIRS "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/stlport/stlport" )
  set( __libstl                 "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/stlport/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libstlport_static.a" )
 elseif( ANDROID_STL MATCHES "gnustl" )
  set( ANDROID_EXCEPTIONS       ON )
  set( ANDROID_RTTI             ON )
  if( EXISTS "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gnu-libstdc++/$***REMOVED***ANDROID_COMPILER_VERSION***REMOVED***" )
   if( ARMEABI_V7A AND ANDROID_COMPILER_VERSION VERSION_EQUAL "4.7" AND ANDROID_NDK_RELEASE STREQUAL "r8d" )
    # gnustl binary for 4.7 compiler is buggy :(
    # TODO: look for right fix
    set( __libstl                "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gnu-libstdc++/4.6" )
   else()
    set( __libstl                "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gnu-libstdc++/$***REMOVED***ANDROID_COMPILER_VERSION***REMOVED***" )
   endif()
  else()
   set( __libstl                "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gnu-libstdc++" )
  endif()
  set( ANDROID_STL_INCLUDE_DIRS "$***REMOVED***__libstl***REMOVED***/include" "$***REMOVED***__libstl***REMOVED***/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/include" "$***REMOVED***__libstl***REMOVED***/include/backward" )
  if( EXISTS "$***REMOVED***__libstl***REMOVED***/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libgnustl_static.a" )
   set( __libstl                "$***REMOVED***__libstl***REMOVED***/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libgnustl_static.a" )
  else()
   set( __libstl                "$***REMOVED***__libstl***REMOVED***/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libstdc++.a" )
  endif()
 else()
  message( FATAL_ERROR "Unknown runtime: $***REMOVED***ANDROID_STL***REMOVED***" )
 endif()
 # find libsupc++.a - rtti & exceptions
 if( ANDROID_STL STREQUAL "system_re" OR ANDROID_STL MATCHES "gnustl" )
  set( __libsupcxx "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gnu-libstdc++/$***REMOVED***ANDROID_COMPILER_VERSION***REMOVED***/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libsupc++.a" ) # r8b or newer
  if( NOT EXISTS "$***REMOVED***__libsupcxx***REMOVED***" )
   set( __libsupcxx "$***REMOVED***ANDROID_NDK***REMOVED***/sources/cxx-stl/gnu-libstdc++/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***/libsupc++.a" ) # r7-r8
  endif()
  if( NOT EXISTS "$***REMOVED***__libsupcxx***REMOVED***" ) # before r7
   if( ARMEABI_V7A )
    if( ANDROID_FORCE_ARM_BUILD )
     set( __libsupcxx "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/libsupc++.a" )
    else()
     set( __libsupcxx "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/$***REMOVED***CMAKE_SYSTEM_PROCESSOR***REMOVED***/thumb/libsupc++.a" )
    endif()
   elseif( ARMEABI AND NOT ANDROID_FORCE_ARM_BUILD )
    set( __libsupcxx "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/thumb/libsupc++.a" )
   else()
    set( __libsupcxx "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***/lib/libsupc++.a" )
   endif()
  endif()
  if( NOT EXISTS "$***REMOVED***__libsupcxx***REMOVED***")
   message( ERROR "Could not find libsupc++.a for a chosen platform. Either your NDK is not supported or is broken.")
  endif()
 endif()
endif()


# case of shared STL linkage
if( ANDROID_STL MATCHES "shared" AND DEFINED __libstl )
 string( REPLACE "_static.a" "_shared.so" __libstl "$***REMOVED***__libstl***REMOVED***" )
 # TODO: check if .so file exists before the renaming
endif()


# ccache support
__INIT_VARIABLE( _ndk_ccache NDK_CCACHE ENV_NDK_CCACHE )
if( _ndk_ccache )
 if( DEFINED NDK_CCACHE AND NOT EXISTS NDK_CCACHE )
  unset( NDK_CCACHE CACHE )
 endif()
 find_program( NDK_CCACHE "$***REMOVED***_ndk_ccache***REMOVED***" DOC "The path to ccache binary")
else()
 unset( NDK_CCACHE CACHE )
endif()
unset( _ndk_ccache )


# setup the cross-compiler
if( NOT CMAKE_C_COMPILER )
 if( NDK_CCACHE AND NOT ANDROID_SYSROOT MATCHES "[ ;\"]" )
  set( CMAKE_C_COMPILER   "$***REMOVED***NDK_CCACHE***REMOVED***" CACHE PATH "ccache as C compiler" )
  set( CMAKE_CXX_COMPILER "$***REMOVED***NDK_CCACHE***REMOVED***" CACHE PATH "ccache as C++ compiler" )
  if( ANDROID_COMPILER_IS_CLANG )
   set( CMAKE_C_COMPILER_ARG1   "$***REMOVED***ANDROID_CLANG_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***_clang_name***REMOVED***$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"   CACHE PATH "C compiler")
   set( CMAKE_CXX_COMPILER_ARG1 "$***REMOVED***ANDROID_CLANG_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***_clang_name***REMOVED***++$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" CACHE PATH "C++ compiler")
  else()
   set( CMAKE_C_COMPILER_ARG1   "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-gcc$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" CACHE PATH "C compiler")
   set( CMAKE_CXX_COMPILER_ARG1 "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-g++$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" CACHE PATH "C++ compiler")
  endif()
 else()
  if( ANDROID_COMPILER_IS_CLANG )
   set( CMAKE_C_COMPILER   "$***REMOVED***ANDROID_CLANG_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***_clang_name***REMOVED***$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"   CACHE PATH "C compiler")
   set( CMAKE_CXX_COMPILER "$***REMOVED***ANDROID_CLANG_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***_clang_name***REMOVED***++$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" CACHE PATH "C++ compiler")
  else()
   set( CMAKE_C_COMPILER   "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-gcc$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"    CACHE PATH "C compiler" )
   set( CMAKE_CXX_COMPILER "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-g++$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"    CACHE PATH "C++ compiler" )
  endif()
 endif()
 set( CMAKE_ASM_COMPILER "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-gcc$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"     CACHE PATH "assembler" )
 set( CMAKE_STRIP        "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-strip$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"   CACHE PATH "strip" )
 if( EXISTS "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-gcc-ar$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" )
  # Use gcc-ar if we have it for better LTO support.
  set( CMAKE_AR           "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-gcc-ar$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"      CACHE PATH "archive" )
 else()
  set( CMAKE_AR           "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-ar$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"      CACHE PATH "archive" )
 endif()
 set( CMAKE_LINKER       "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-ld$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"      CACHE PATH "linker" )
 set( CMAKE_NM           "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-nm$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"      CACHE PATH "nm" )
 set( CMAKE_OBJCOPY      "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-objcopy$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" CACHE PATH "objcopy" )
 set( CMAKE_OBJDUMP      "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-objdump$***REMOVED***TOOL_OS_SUFFIX***REMOVED***" CACHE PATH "objdump" )
 set( CMAKE_RANLIB       "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-ranlib$***REMOVED***TOOL_OS_SUFFIX***REMOVED***"  CACHE PATH "ranlib" )
endif()

set( _CMAKE_TOOLCHAIN_PREFIX "$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***-" )
if( CMAKE_VERSION VERSION_LESS 2.8.5 )
 set( CMAKE_ASM_COMPILER_ARG1 "-c" )
endif()
if( APPLE )
 find_program( CMAKE_INSTALL_NAME_TOOL NAMES install_name_tool )
 if( NOT CMAKE_INSTALL_NAME_TOOL )
  message( FATAL_ERROR "Could not find install_name_tool, please check your installation." )
 endif()
 mark_as_advanced( CMAKE_INSTALL_NAME_TOOL )
endif()

# Force set compilers because standard identification works badly for us
include( CMakeForceCompiler )
CMAKE_FORCE_C_COMPILER( "$***REMOVED***CMAKE_C_COMPILER***REMOVED***" GNU )
if( ANDROID_COMPILER_IS_CLANG )
 set( CMAKE_C_COMPILER_ID Clang )
endif()
set( CMAKE_C_PLATFORM_ID Linux )
if( X86_64 OR MIPS64 OR ARM64_V8A )
 set( CMAKE_C_SIZEOF_DATA_PTR 8 )
else()
 set( CMAKE_C_SIZEOF_DATA_PTR 4 )
endif()
set( CMAKE_C_HAS_ISYSROOT 1 )
set( CMAKE_C_COMPILER_ABI ELF )
CMAKE_FORCE_CXX_COMPILER( "$***REMOVED***CMAKE_CXX_COMPILER***REMOVED***" GNU )
if( ANDROID_COMPILER_IS_CLANG )
 set( CMAKE_CXX_COMPILER_ID Clang)
endif()
set( CMAKE_CXX_PLATFORM_ID Linux )
set( CMAKE_CXX_SIZEOF_DATA_PTR $***REMOVED***CMAKE_C_SIZEOF_DATA_PTR***REMOVED*** )
set( CMAKE_CXX_HAS_ISYSROOT 1 )
set( CMAKE_CXX_COMPILER_ABI ELF )
set( CMAKE_CXX_SOURCE_FILE_EXTENSIONS cc cp cxx cpp CPP c++ C )
# force ASM compiler (required for CMake < 2.8.5)
set( CMAKE_ASM_COMPILER_ID_RUN TRUE )
set( CMAKE_ASM_COMPILER_ID GNU )
set( CMAKE_ASM_COMPILER_WORKS TRUE )
set( CMAKE_ASM_COMPILER_FORCED TRUE )
set( CMAKE_COMPILER_IS_GNUASM 1)
set( CMAKE_ASM_SOURCE_FILE_EXTENSIONS s S asm )

foreach( lang C CXX ASM )
 if( ANDROID_COMPILER_IS_CLANG )
  set( CMAKE_$***REMOVED***lang***REMOVED***_COMPILER_VERSION $***REMOVED***ANDROID_CLANG_VERSION***REMOVED*** )
 else()
  set( CMAKE_$***REMOVED***lang***REMOVED***_COMPILER_VERSION $***REMOVED***ANDROID_COMPILER_VERSION***REMOVED*** )
 endif()
endforeach()

# flags and definitions
remove_definitions( -DANDROID )
add_definitions( -DANDROID )

if( ANDROID_SYSROOT MATCHES "[ ;\"]" )
 if( CMAKE_HOST_WIN32 )
  # try to convert path to 8.3 form
  file( WRITE "$***REMOVED***CMAKE_BINARY_DIR***REMOVED***$***REMOVED***CMAKE_FILES_DIRECTORY***REMOVED***/cvt83.cmd" "@echo %~s1" )
  execute_process( COMMAND "$ENV***REMOVED***ComSpec***REMOVED***" /c "$***REMOVED***CMAKE_BINARY_DIR***REMOVED***$***REMOVED***CMAKE_FILES_DIRECTORY***REMOVED***/cvt83.cmd" "$***REMOVED***ANDROID_SYSROOT***REMOVED***"
                   OUTPUT_VARIABLE __path OUTPUT_STRIP_TRAILING_WHITESPACE
                   RESULT_VARIABLE __result ERROR_QUIET )
  if( __result EQUAL 0 )
   file( TO_CMAKE_PATH "$***REMOVED***__path***REMOVED***" ANDROID_SYSROOT )
   set( ANDROID_CXX_FLAGS "--sysroot=$***REMOVED***ANDROID_SYSROOT***REMOVED***" )
  else()
   set( ANDROID_CXX_FLAGS "--sysroot=\"$***REMOVED***ANDROID_SYSROOT***REMOVED***\"" )
  endif()
 else()
  set( ANDROID_CXX_FLAGS "'--sysroot=$***REMOVED***ANDROID_SYSROOT***REMOVED***'" )
 endif()
 if( NOT _CMAKE_IN_TRY_COMPILE )
  # quotes can break try_compile and compiler identification
  message(WARNING "Path to your Android NDK (or toolchain) has non-alphanumeric symbols.\nThe build might be broken.\n")
 endif()
else()
 set( ANDROID_CXX_FLAGS "--sysroot=$***REMOVED***ANDROID_SYSROOT***REMOVED***" )
endif()

# NDK flags
if (ARM64_V8A )
 set( ANDROID_CXX_FLAGS         "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -funwind-tables" )
 set( ANDROID_CXX_FLAGS_RELEASE "-fomit-frame-pointer -fstrict-aliasing" )
 set( ANDROID_CXX_FLAGS_DEBUG   "-fno-omit-frame-pointer -fno-strict-aliasing" )
 if( NOT ANDROID_COMPILER_IS_CLANG )
  set( ANDROID_CXX_FLAGS_RELEASE "$***REMOVED***ANDROID_CXX_FLAGS_RELEASE***REMOVED*** -funswitch-loops -finline-limit=300" )
 endif()
elseif( ARMEABI OR ARMEABI_V7A)
 set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -funwind-tables" )
 if( NOT ANDROID_FORCE_ARM_BUILD AND NOT ARMEABI_V6 )
  set( ANDROID_CXX_FLAGS_RELEASE "-mthumb -fomit-frame-pointer -fno-strict-aliasing" )
  set( ANDROID_CXX_FLAGS_DEBUG   "-marm -fno-omit-frame-pointer -fno-strict-aliasing" )
  if( NOT ANDROID_COMPILER_IS_CLANG )
   set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -finline-limit=64" )
  endif()
 else()
  # always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI
  set( ANDROID_CXX_FLAGS_RELEASE "-marm -fomit-frame-pointer -fstrict-aliasing" )
  set( ANDROID_CXX_FLAGS_DEBUG   "-marm -fno-omit-frame-pointer -fno-strict-aliasing" )
  if( NOT ANDROID_COMPILER_IS_CLANG )
   set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -funswitch-loops -finline-limit=300" )
  endif()
 endif()
elseif( X86 OR X86_64 )
 set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -funwind-tables" )
 if( NOT ANDROID_COMPILER_IS_CLANG )
  set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -funswitch-loops -finline-limit=300" )
 endif()
 set( ANDROID_CXX_FLAGS_RELEASE "-fomit-frame-pointer -fstrict-aliasing" )
 set( ANDROID_CXX_FLAGS_DEBUG   "-fno-omit-frame-pointer -fno-strict-aliasing" )
elseif( MIPS OR MIPS64 )
 set( ANDROID_CXX_FLAGS         "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -fno-strict-aliasing -finline-functions -funwind-tables -fmessage-length=0" )
 set( ANDROID_CXX_FLAGS_RELEASE "-fomit-frame-pointer" )
 set( ANDROID_CXX_FLAGS_DEBUG   "-fno-omit-frame-pointer" )
 if( NOT ANDROID_COMPILER_IS_CLANG )
  set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -fno-inline-functions-called-once -fgcse-after-reload -frerun-cse-after-loop -frename-registers" )
  set( ANDROID_CXX_FLAGS_RELEASE "$***REMOVED***ANDROID_CXX_FLAGS_RELEASE***REMOVED*** -funswitch-loops -finline-limit=300" )
 endif()
elseif()
 set( ANDROID_CXX_FLAGS_RELEASE "" )
 set( ANDROID_CXX_FLAGS_DEBUG   "" )
endif()

set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -fsigned-char" ) # good/necessary when porting desktop libraries

if( NOT X86 AND NOT ANDROID_COMPILER_IS_CLANG )
 set( ANDROID_CXX_FLAGS "-Wno-psabi $***REMOVED***ANDROID_CXX_FLAGS***REMOVED***" )
endif()

if( NOT ANDROID_COMPILER_VERSION VERSION_LESS "4.6" )
 set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -no-canonical-prefixes" ) # see https://android-review.googlesource.com/#/c/47564/
endif()

# ABI-specific flags
if( ARMEABI_V7A )
 set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -march=armv7-a -mfloat-abi=softfp" )
 if( NEON )
  set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -mfpu=neon" )
 elseif( VFPV3 )
  set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -mfpu=vfpv3" )
 else()
  set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -mfpu=vfpv3-d16" )
 endif()
elseif( ARMEABI_V6 )
 set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -march=armv6 -mfloat-abi=softfp -mfpu=vfp" ) # vfp == vfpv2
elseif( ARMEABI )
 set( ANDROID_CXX_FLAGS "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -march=armv5te -mtune=xscale -msoft-float" )
endif()

if( ANDROID_STL MATCHES "gnustl" AND (EXISTS "$***REMOVED***__libstl***REMOVED***" OR EXISTS "$***REMOVED***__libsupcxx***REMOVED***") )
 set( CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
 set( CMAKE_CXX_CREATE_SHARED_MODULE  "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
 set( CMAKE_CXX_LINK_EXECUTABLE       "<CMAKE_C_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" )
else()
 set( CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
 set( CMAKE_CXX_CREATE_SHARED_MODULE  "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
 set( CMAKE_CXX_LINK_EXECUTABLE       "<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" )
endif()

# STL
if( EXISTS "$***REMOVED***__libstl***REMOVED***" OR EXISTS "$***REMOVED***__libsupcxx***REMOVED***" )
 if( EXISTS "$***REMOVED***__libstl***REMOVED***" )
  set( CMAKE_CXX_CREATE_SHARED_LIBRARY "$***REMOVED***CMAKE_CXX_CREATE_SHARED_LIBRARY***REMOVED*** \"$***REMOVED***__libstl***REMOVED***\"" )
  set( CMAKE_CXX_CREATE_SHARED_MODULE  "$***REMOVED***CMAKE_CXX_CREATE_SHARED_MODULE***REMOVED*** \"$***REMOVED***__libstl***REMOVED***\"" )
  set( CMAKE_CXX_LINK_EXECUTABLE       "$***REMOVED***CMAKE_CXX_LINK_EXECUTABLE***REMOVED*** \"$***REMOVED***__libstl***REMOVED***\"" )
 endif()
 if( EXISTS "$***REMOVED***__libsupcxx***REMOVED***" )
  set( CMAKE_CXX_CREATE_SHARED_LIBRARY "$***REMOVED***CMAKE_CXX_CREATE_SHARED_LIBRARY***REMOVED*** \"$***REMOVED***__libsupcxx***REMOVED***\"" )
  set( CMAKE_CXX_CREATE_SHARED_MODULE  "$***REMOVED***CMAKE_CXX_CREATE_SHARED_MODULE***REMOVED*** \"$***REMOVED***__libsupcxx***REMOVED***\"" )
  set( CMAKE_CXX_LINK_EXECUTABLE       "$***REMOVED***CMAKE_CXX_LINK_EXECUTABLE***REMOVED*** \"$***REMOVED***__libsupcxx***REMOVED***\"" )
  # C objects:
  set( CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
  set( CMAKE_C_CREATE_SHARED_MODULE  "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
  set( CMAKE_C_LINK_EXECUTABLE       "<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" )
  set( CMAKE_C_CREATE_SHARED_LIBRARY "$***REMOVED***CMAKE_C_CREATE_SHARED_LIBRARY***REMOVED*** \"$***REMOVED***__libsupcxx***REMOVED***\"" )
  set( CMAKE_C_CREATE_SHARED_MODULE  "$***REMOVED***CMAKE_C_CREATE_SHARED_MODULE***REMOVED*** \"$***REMOVED***__libsupcxx***REMOVED***\"" )
  set( CMAKE_C_LINK_EXECUTABLE       "$***REMOVED***CMAKE_C_LINK_EXECUTABLE***REMOVED*** \"$***REMOVED***__libsupcxx***REMOVED***\"" )
 endif()
 if( ANDROID_STL MATCHES "gnustl" )
  if( NOT EXISTS "$***REMOVED***ANDROID_LIBM_PATH***REMOVED***" )
   set( ANDROID_LIBM_PATH -lm )
  endif()
  set( CMAKE_CXX_CREATE_SHARED_LIBRARY "$***REMOVED***CMAKE_CXX_CREATE_SHARED_LIBRARY***REMOVED*** $***REMOVED***ANDROID_LIBM_PATH***REMOVED***" )
  set( CMAKE_CXX_CREATE_SHARED_MODULE  "$***REMOVED***CMAKE_CXX_CREATE_SHARED_MODULE***REMOVED*** $***REMOVED***ANDROID_LIBM_PATH***REMOVED***" )
  set( CMAKE_CXX_LINK_EXECUTABLE       "$***REMOVED***CMAKE_CXX_LINK_EXECUTABLE***REMOVED*** $***REMOVED***ANDROID_LIBM_PATH***REMOVED***" )
 endif()
endif()

# variables controlling optional build flags
if( ANDROID_NDK_RELEASE_NUM LESS 7000 ) # before r7
 # libGLESv2.so in NDK's prior to r7 refers to missing external symbols.
 # So this flag option is required for all projects using OpenGL from native.
 __INIT_VARIABLE( ANDROID_SO_UNDEFINED                      VALUES ON )
else()
 __INIT_VARIABLE( ANDROID_SO_UNDEFINED                      VALUES OFF )
endif()
__INIT_VARIABLE( ANDROID_NO_UNDEFINED                       VALUES ON )
__INIT_VARIABLE( ANDROID_FUNCTION_LEVEL_LINKING             VALUES ON )
__INIT_VARIABLE( ANDROID_GOLD_LINKER                        VALUES ON )
__INIT_VARIABLE( ANDROID_NOEXECSTACK                        VALUES ON )
__INIT_VARIABLE( ANDROID_RELRO                              VALUES ON )

set( ANDROID_NO_UNDEFINED           $***REMOVED***ANDROID_NO_UNDEFINED***REMOVED***           CACHE BOOL "Show all undefined symbols as linker errors" )
set( ANDROID_SO_UNDEFINED           $***REMOVED***ANDROID_SO_UNDEFINED***REMOVED***           CACHE BOOL "Allows or disallows undefined symbols in shared libraries" )
set( ANDROID_FUNCTION_LEVEL_LINKING $***REMOVED***ANDROID_FUNCTION_LEVEL_LINKING***REMOVED*** CACHE BOOL "Put each function in separate section and enable garbage collection of unused input sections at link time" )
set( ANDROID_GOLD_LINKER            $***REMOVED***ANDROID_GOLD_LINKER***REMOVED***            CACHE BOOL "Enables gold linker" )
set( ANDROID_NOEXECSTACK            $***REMOVED***ANDROID_NOEXECSTACK***REMOVED***            CACHE BOOL "Allows or disallows undefined symbols in shared libraries" )
set( ANDROID_RELRO                  $***REMOVED***ANDROID_RELRO***REMOVED***                  CACHE BOOL "Enables RELRO - a memory corruption mitigation technique" )
mark_as_advanced( ANDROID_NO_UNDEFINED ANDROID_SO_UNDEFINED ANDROID_FUNCTION_LEVEL_LINKING ANDROID_GOLD_LINKER ANDROID_NOEXECSTACK ANDROID_RELRO )

# linker flags
set( ANDROID_LINKER_FLAGS "" )

if( ARMEABI_V7A )
 # this is *required* to use the following linker flags that routes around
 # a CPU bug in some Cortex-A8 implementations:
 set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -Wl,--fix-cortex-a8" )
endif()

if( ANDROID_NO_UNDEFINED )
 if( MIPS )
  # there is some sysroot-related problem in mips linker...
  if( NOT ANDROID_SYSROOT MATCHES "[ ;\"]" )
   set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -Wl,--no-undefined -Wl,-rpath-link,$***REMOVED***ANDROID_SYSROOT***REMOVED***/usr/lib" )
  endif()
 else()
  set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -Wl,--no-undefined" )
 endif()
endif()

if( ANDROID_SO_UNDEFINED )
 set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -Wl,-allow-shlib-undefined" )
endif()

if( ANDROID_FUNCTION_LEVEL_LINKING )
 set( ANDROID_CXX_FLAGS    "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -fdata-sections -ffunction-sections" )
 set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -Wl,--gc-sections" )
endif()

if( ANDROID_COMPILER_VERSION VERSION_EQUAL "4.6" )
 if( ANDROID_GOLD_LINKER AND (CMAKE_HOST_UNIX OR ANDROID_NDK_RELEASE_NUM GREATER 8002) AND (ARMEABI OR ARMEABI_V7A OR X86) )
  set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -fuse-ld=gold" )
 elseif( ANDROID_NDK_RELEASE_NUM GREATER 8002 ) # after r8b
  set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -fuse-ld=bfd" )
 elseif( ANDROID_NDK_RELEASE STREQUAL "r8b" AND ARMEABI AND NOT _CMAKE_IN_TRY_COMPILE )
  message( WARNING "The default bfd linker from arm GCC 4.6 toolchain can fail with 'unresolvable R_ARM_THM_CALL relocation' error message. See https://code.google.com/p/android/issues/detail?id=35342
  On Linux and OS X host platform you can workaround this problem using gold linker (default).
  Rerun cmake with -DANDROID_GOLD_LINKER=ON option in case of problems.
" )
 endif()
endif() # version 4.6

if( ANDROID_NOEXECSTACK )
 if( ANDROID_COMPILER_IS_CLANG )
  set( ANDROID_CXX_FLAGS    "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -Xclang -mnoexecstack" )
 else()
  set( ANDROID_CXX_FLAGS    "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** -Wa,--noexecstack" )
 endif()
 set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -Wl,-z,noexecstack" )
endif()

if( ANDROID_RELRO )
 set( ANDROID_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** -Wl,-z,relro -Wl,-z,now" )
endif()

if( ANDROID_COMPILER_IS_CLANG )
 set( ANDROID_CXX_FLAGS "-target $***REMOVED***ANDROID_LLVM_TRIPLE***REMOVED*** -Qunused-arguments $***REMOVED***ANDROID_CXX_FLAGS***REMOVED***" )
 if( BUILD_WITH_ANDROID_NDK )
  set( ANDROID_CXX_FLAGS "-gcc-toolchain $***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED*** $***REMOVED***ANDROID_CXX_FLAGS***REMOVED***" )
 endif()
endif()

# cache flags
set( CMAKE_CXX_FLAGS           ""                        CACHE STRING "c++ flags" )
set( CMAKE_C_FLAGS             ""                        CACHE STRING "c flags" )
set( CMAKE_CXX_FLAGS_RELEASE   "-O3 -DNDEBUG"            CACHE STRING "c++ Release flags" )
set( CMAKE_C_FLAGS_RELEASE     "-O3 -DNDEBUG"            CACHE STRING "c Release flags" )
set( CMAKE_CXX_FLAGS_DEBUG     "-O0 -g -DDEBUG -D_DEBUG" CACHE STRING "c++ Debug flags" )
set( CMAKE_C_FLAGS_DEBUG       "-O0 -g -DDEBUG -D_DEBUG" CACHE STRING "c Debug flags" )
set( CMAKE_SHARED_LINKER_FLAGS ""                        CACHE STRING "shared linker flags" )
set( CMAKE_MODULE_LINKER_FLAGS ""                        CACHE STRING "module linker flags" )
set( CMAKE_EXE_LINKER_FLAGS    "-Wl,-z,nocopyreloc"      CACHE STRING "executable linker flags" )

# put flags to cache (for debug purpose only)
set( ANDROID_CXX_FLAGS         "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED***"         CACHE INTERNAL "Android specific c/c++ flags" )
set( ANDROID_CXX_FLAGS_RELEASE "$***REMOVED***ANDROID_CXX_FLAGS_RELEASE***REMOVED***" CACHE INTERNAL "Android specific c/c++ Release flags" )
set( ANDROID_CXX_FLAGS_DEBUG   "$***REMOVED***ANDROID_CXX_FLAGS_DEBUG***REMOVED***"   CACHE INTERNAL "Android specific c/c++ Debug flags" )
set( ANDROID_LINKER_FLAGS      "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED***"      CACHE INTERNAL "Android specific c/c++ linker flags" )

# finish flags
set( CMAKE_CXX_FLAGS           "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** $***REMOVED***CMAKE_CXX_FLAGS***REMOVED***" )
set( CMAKE_C_FLAGS             "$***REMOVED***ANDROID_CXX_FLAGS***REMOVED*** $***REMOVED***CMAKE_C_FLAGS***REMOVED***" )
set( CMAKE_CXX_FLAGS_RELEASE   "$***REMOVED***ANDROID_CXX_FLAGS_RELEASE***REMOVED*** $***REMOVED***CMAKE_CXX_FLAGS_RELEASE***REMOVED***" )
set( CMAKE_C_FLAGS_RELEASE     "$***REMOVED***ANDROID_CXX_FLAGS_RELEASE***REMOVED*** $***REMOVED***CMAKE_C_FLAGS_RELEASE***REMOVED***" )
set( CMAKE_CXX_FLAGS_DEBUG     "$***REMOVED***ANDROID_CXX_FLAGS_DEBUG***REMOVED*** $***REMOVED***CMAKE_CXX_FLAGS_DEBUG***REMOVED***" )
set( CMAKE_C_FLAGS_DEBUG       "$***REMOVED***ANDROID_CXX_FLAGS_DEBUG***REMOVED*** $***REMOVED***CMAKE_C_FLAGS_DEBUG***REMOVED***" )
set( CMAKE_SHARED_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** $***REMOVED***CMAKE_SHARED_LINKER_FLAGS***REMOVED***" )
set( CMAKE_MODULE_LINKER_FLAGS "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** $***REMOVED***CMAKE_MODULE_LINKER_FLAGS***REMOVED***" )
set( CMAKE_EXE_LINKER_FLAGS    "$***REMOVED***ANDROID_LINKER_FLAGS***REMOVED*** $***REMOVED***CMAKE_EXE_LINKER_FLAGS***REMOVED***" )

if( MIPS AND BUILD_WITH_ANDROID_NDK AND ANDROID_NDK_RELEASE STREQUAL "r8" )
 set( CMAKE_SHARED_LINKER_FLAGS "-Wl,-T,$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***ANDROID_GCC_TOOLCHAIN_NAME***REMOVED***/mipself.xsc $***REMOVED***CMAKE_SHARED_LINKER_FLAGS***REMOVED***" )
 set( CMAKE_MODULE_LINKER_FLAGS "-Wl,-T,$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***ANDROID_GCC_TOOLCHAIN_NAME***REMOVED***/mipself.xsc $***REMOVED***CMAKE_MODULE_LINKER_FLAGS***REMOVED***" )
 set( CMAKE_EXE_LINKER_FLAGS    "-Wl,-T,$***REMOVED***ANDROID_NDK_TOOLCHAINS_PATH***REMOVED***/$***REMOVED***ANDROID_GCC_TOOLCHAIN_NAME***REMOVED***/mipself.x $***REMOVED***CMAKE_EXE_LINKER_FLAGS***REMOVED***" )
endif()

# pie/pic
if( NOT (ANDROID_NATIVE_API_LEVEL LESS 16) AND (NOT DEFINED ANDROID_APP_PIE OR ANDROID_APP_PIE) AND (CMAKE_VERSION VERSION_GREATER 2.8.8) )
 set( CMAKE_POSITION_INDEPENDENT_CODE TRUE )
 set( CMAKE_EXE_LINKER_FLAGS "$***REMOVED***CMAKE_EXE_LINKER_FLAGS***REMOVED*** -fPIE -pie")
else()
 set( CMAKE_POSITION_INDEPENDENT_CODE FALSE )
 set( CMAKE_CXX_FLAGS "-fpic $***REMOVED***CMAKE_CXX_FLAGS***REMOVED***" )
 set( CMAKE_C_FLAGS   "-fpic $***REMOVED***CMAKE_C_FLAGS***REMOVED***" )
endif()

# configure rtti
if( DEFINED ANDROID_RTTI AND ANDROID_STL_FORCE_FEATURES )
 if( ANDROID_RTTI )
  set( CMAKE_CXX_FLAGS "-frtti $***REMOVED***CMAKE_CXX_FLAGS***REMOVED***" )
 else()
  set( CMAKE_CXX_FLAGS "-fno-rtti $***REMOVED***CMAKE_CXX_FLAGS***REMOVED***" )
 endif()
endif()

# configure exceptios
if( DEFINED ANDROID_EXCEPTIONS AND ANDROID_STL_FORCE_FEATURES )
 if( ANDROID_EXCEPTIONS )
  set( CMAKE_CXX_FLAGS "-fexceptions $***REMOVED***CMAKE_CXX_FLAGS***REMOVED***" )
  set( CMAKE_C_FLAGS "-fexceptions $***REMOVED***CMAKE_C_FLAGS***REMOVED***" )
 else()
  set( CMAKE_CXX_FLAGS "-fno-exceptions $***REMOVED***CMAKE_CXX_FLAGS***REMOVED***" )
  set( CMAKE_C_FLAGS "-fno-exceptions $***REMOVED***CMAKE_C_FLAGS***REMOVED***" )
 endif()
endif()

# global includes and link directories
include_directories( SYSTEM "$***REMOVED***ANDROID_SYSROOT***REMOVED***/usr/include" $***REMOVED***ANDROID_STL_INCLUDE_DIRS***REMOVED*** )
get_filename_component(__android_install_path "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***" ABSOLUTE) # avoid CMP0015 policy warning
link_directories( "$***REMOVED***__android_install_path***REMOVED***" )

# detect if need link crtbegin_so.o explicitly
if( NOT DEFINED ANDROID_EXPLICIT_CRT_LINK )
 set( __cmd "$***REMOVED***CMAKE_CXX_CREATE_SHARED_LIBRARY***REMOVED***" )
 string( REPLACE "<CMAKE_CXX_COMPILER>" "$***REMOVED***CMAKE_CXX_COMPILER***REMOVED*** $***REMOVED***CMAKE_CXX_COMPILER_ARG1***REMOVED***" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<CMAKE_C_COMPILER>"   "$***REMOVED***CMAKE_C_COMPILER***REMOVED*** $***REMOVED***CMAKE_C_COMPILER_ARG1***REMOVED***"   __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<CMAKE_SHARED_LIBRARY_CXX_FLAGS>" "$***REMOVED***CMAKE_CXX_FLAGS***REMOVED***" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<LANGUAGE_COMPILE_FLAGS>" "" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<LINK_FLAGS>" "$***REMOVED***CMAKE_SHARED_LINKER_FLAGS***REMOVED***" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS>" "-shared" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG>" "" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<TARGET_SONAME>" "" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<TARGET>" "$***REMOVED***CMAKE_BINARY_DIR***REMOVED***$***REMOVED***CMAKE_FILES_DIRECTORY***REMOVED***/toolchain_crtlink_test.so" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<OBJECTS>" "\"$***REMOVED***ANDROID_SYSROOT***REMOVED***/usr/lib/crtbegin_so.o\"" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "<LINK_LIBRARIES>" "" __cmd "$***REMOVED***__cmd***REMOVED***" )
 separate_arguments( __cmd )
 foreach( __var ANDROID_NDK ANDROID_NDK_TOOLCHAINS_PATH ANDROID_STANDALONE_TOOLCHAIN )
  if( $***REMOVED***__var***REMOVED*** )
   set( __tmp "$***REMOVED***$***REMOVED***__var***REMOVED******REMOVED***" )
   separate_arguments( __tmp )
   string( REPLACE "$***REMOVED***__tmp***REMOVED***" "$***REMOVED***$***REMOVED***__var***REMOVED******REMOVED***" __cmd "$***REMOVED***__cmd***REMOVED***")
  endif()
 endforeach()
 string( REPLACE "'" "" __cmd "$***REMOVED***__cmd***REMOVED***" )
 string( REPLACE "\"" "" __cmd "$***REMOVED***__cmd***REMOVED***" )
 execute_process( COMMAND $***REMOVED***__cmd***REMOVED*** RESULT_VARIABLE __cmd_result OUTPUT_QUIET ERROR_QUIET )
 if( __cmd_result EQUAL 0 )
  set( ANDROID_EXPLICIT_CRT_LINK ON )
 else()
  set( ANDROID_EXPLICIT_CRT_LINK OFF )
 endif()
endif()

if( ANDROID_EXPLICIT_CRT_LINK )
 set( CMAKE_CXX_CREATE_SHARED_LIBRARY "$***REMOVED***CMAKE_CXX_CREATE_SHARED_LIBRARY***REMOVED*** \"$***REMOVED***ANDROID_SYSROOT***REMOVED***/usr/lib/crtbegin_so.o\"" )
 set( CMAKE_CXX_CREATE_SHARED_MODULE  "$***REMOVED***CMAKE_CXX_CREATE_SHARED_MODULE***REMOVED*** \"$***REMOVED***ANDROID_SYSROOT***REMOVED***/usr/lib/crtbegin_so.o\"" )
endif()

# setup output directories
set( CMAKE_INSTALL_PREFIX "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/user" CACHE STRING "path for installing" )

if( DEFINED LIBRARY_OUTPUT_PATH_ROOT
      OR EXISTS "$***REMOVED***CMAKE_SOURCE_DIR***REMOVED***/AndroidManifest.xml"
      OR (EXISTS "$***REMOVED***CMAKE_SOURCE_DIR***REMOVED***/../AndroidManifest.xml" AND EXISTS "$***REMOVED***CMAKE_SOURCE_DIR***REMOVED***/../jni/") )
  set( LIBRARY_OUTPUT_PATH_ROOT $***REMOVED***CMAKE_SOURCE_DIR***REMOVED*** CACHE PATH "Root for binaries output, set this to change where Android libs are installed to" )
  if( NOT _CMAKE_IN_TRY_COMPILE )
    if( EXISTS "$***REMOVED***CMAKE_SOURCE_DIR***REMOVED***/jni/CMakeLists.txt" )
      set( EXECUTABLE_OUTPUT_PATH "$***REMOVED***LIBRARY_OUTPUT_PATH_ROOT***REMOVED***/bin/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***" CACHE PATH "Output directory for applications" )
    else()
      set( EXECUTABLE_OUTPUT_PATH "$***REMOVED***LIBRARY_OUTPUT_PATH_ROOT***REMOVED***/bin" CACHE PATH "Output directory for applications" )
    endif()
    set( LIBRARY_OUTPUT_PATH "$***REMOVED***LIBRARY_OUTPUT_PATH_ROOT***REMOVED***/libs/$***REMOVED***ANDROID_NDK_ABI_NAME***REMOVED***" CACHE PATH "Output directory for Android libs" )
  endif()
endif()

# copy shaed stl library to build directory
if( NOT _CMAKE_IN_TRY_COMPILE AND __libstl MATCHES "[.]so$" AND DEFINED LIBRARY_OUTPUT_PATH )
  get_filename_component( __libstlname "$***REMOVED***__libstl***REMOVED***" NAME )
  execute_process( COMMAND "$***REMOVED***CMAKE_COMMAND***REMOVED***" -E copy_if_different "$***REMOVED***__libstl***REMOVED***" "$***REMOVED***LIBRARY_OUTPUT_PATH***REMOVED***/$***REMOVED***__libstlname***REMOVED***" RESULT_VARIABLE __fileCopyProcess )
  if( NOT __fileCopyProcess EQUAL 0 OR NOT EXISTS "$***REMOVED***LIBRARY_OUTPUT_PATH***REMOVED***/$***REMOVED***__libstlname***REMOVED***")
    message( SEND_ERROR "Failed copying of $***REMOVED***__libstl***REMOVED*** to the $***REMOVED***LIBRARY_OUTPUT_PATH***REMOVED***/$***REMOVED***__libstlname***REMOVED***" )
  endif()
  unset( __fileCopyProcess )
  unset( __libstlname )
endif()


# set these global flags for cmake client scripts to change behavior
set( ANDROID True )
set( BUILD_ANDROID True )

# where is the target environment
set( CMAKE_FIND_ROOT_PATH "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/bin" "$***REMOVED***ANDROID_TOOLCHAIN_ROOT***REMOVED***/$***REMOVED***ANDROID_TOOLCHAIN_MACHINE_NAME***REMOVED***" "$***REMOVED***ANDROID_SYSROOT***REMOVED***" "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***" "$***REMOVED***CMAKE_INSTALL_PREFIX***REMOVED***/share" )

# only search for libraries and includes in the ndk toolchain
set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY )
set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )


# macro to find packages on the host OS
macro( find_host_package )
 set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
 set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER )
 set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER )
 if( CMAKE_HOST_WIN32 )
  SET( WIN32 1 )
  SET( UNIX )
 elseif( CMAKE_HOST_APPLE )
  SET( APPLE 1 )
  SET( UNIX )
 endif()
 find_package( $***REMOVED***ARGN***REMOVED*** )
 SET( WIN32 )
 SET( APPLE )
 SET( UNIX 1 )
 set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY )
 set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
 set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
endmacro()


# macro to find programs on the host OS
macro( find_host_program )
 set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
 set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER )
 set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER )
 if( CMAKE_HOST_WIN32 )
  SET( WIN32 1 )
  SET( UNIX )
 elseif( CMAKE_HOST_APPLE )
  SET( APPLE 1 )
  SET( UNIX )
 endif()
 find_program( $***REMOVED***ARGN***REMOVED*** )
 SET( WIN32 )
 SET( APPLE )
 SET( UNIX 1 )
 set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY )
 set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
 set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
endmacro()


# export toolchain settings for the try_compile() command
if( NOT _CMAKE_IN_TRY_COMPILE )
 set( __toolchain_config "")
 foreach( __var NDK_CCACHE  LIBRARY_OUTPUT_PATH_ROOT  ANDROID_FORBID_SYGWIN
                ANDROID_NDK_HOST_X64
                ANDROID_NDK
                ANDROID_NDK_LAYOUT
                ANDROID_STANDALONE_TOOLCHAIN
                ANDROID_TOOLCHAIN_NAME
                ANDROID_ABI
                ANDROID_NATIVE_API_LEVEL
                ANDROID_STL
                ANDROID_STL_FORCE_FEATURES
                ANDROID_FORCE_ARM_BUILD
                ANDROID_NO_UNDEFINED
                ANDROID_SO_UNDEFINED
                ANDROID_FUNCTION_LEVEL_LINKING
                ANDROID_GOLD_LINKER
                ANDROID_NOEXECSTACK
                ANDROID_RELRO
                ANDROID_LIBM_PATH
                ANDROID_EXPLICIT_CRT_LINK
                ANDROID_APP_PIE
                )
  if( DEFINED $***REMOVED***__var***REMOVED*** )
   if( $***REMOVED***__var***REMOVED*** MATCHES " ")
    set( __toolchain_config "$***REMOVED***__toolchain_config***REMOVED***set( $***REMOVED***__var***REMOVED*** \"$***REMOVED***$***REMOVED***__var***REMOVED******REMOVED***\" CACHE INTERNAL \"\" )\n" )
   else()
    set( __toolchain_config "$***REMOVED***__toolchain_config***REMOVED***set( $***REMOVED***__var***REMOVED*** $***REMOVED***$***REMOVED***__var***REMOVED******REMOVED*** CACHE INTERNAL \"\" )\n" )
   endif()
  endif()
 endforeach()
 file( WRITE "$***REMOVED***CMAKE_BINARY_DIR***REMOVED***$***REMOVED***CMAKE_FILES_DIRECTORY***REMOVED***/android.toolchain.config.cmake" "$***REMOVED***__toolchain_config***REMOVED***" )
 unset( __toolchain_config )
endif()


# force cmake to produce / instead of \ in build commands for Ninja generator
if( CMAKE_GENERATOR MATCHES "Ninja" AND CMAKE_HOST_WIN32 )
 # it is a bad hack after all
 # CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW
 set( CMAKE_COMPILER_IS_MINGW TRUE ) # tell CMake that we are MinGW
 set( CMAKE_CROSSCOMPILING TRUE )    # stop recursion
 enable_language( C )
 enable_language( CXX )
 # unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it
 unset( MINGW )
endif()


# Variables controlling behavior or set by cmake toolchain:
#   ANDROID_ABI : "armeabi-v7a" (default), "armeabi", "armeabi-v7a with NEON", "armeabi-v7a with VFPV3", "armeabi-v6 with VFP", "x86", "mips", "arm64-v8a", "x86_64", "mips64"
#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14,15,16,17,18,19,21 (depends on NDK version)
#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none
#   ANDROID_FORBID_SYGWIN : ON/OFF
#   ANDROID_NO_UNDEFINED : ON/OFF
#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)
#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF
#   ANDROID_GOLD_LINKER : ON/OFF
#   ANDROID_NOEXECSTACK : ON/OFF
#   ANDROID_RELRO : ON/OFF
#   ANDROID_FORCE_ARM_BUILD : ON/OFF
#   ANDROID_STL_FORCE_FEATURES : ON/OFF
#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`
# Can be set only at the first run:
#   ANDROID_NDK : path to your NDK install
#   NDK_CCACHE : path to your ccache executable
#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain
#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)
#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)
#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>
#   ANDROID_STANDALONE_TOOLCHAIN
#
# Primary read-only variables:
#   ANDROID : always TRUE
#   ARMEABI : TRUE for arm v6 and older devices
#   ARMEABI_V6 : TRUE for arm v6
#   ARMEABI_V7A : TRUE for arm v7a
#   ARM64_V8A : TRUE for arm64-v8a
#   NEON : TRUE if NEON unit is enabled
#   VFPV3 : TRUE if VFP version 3 is enabled
#   X86 : TRUE if configured for x86
#   X86_64 : TRUE if configured for x86_64
#   MIPS : TRUE if configured for mips
#   MIPS64 : TRUE if configured for mips64
#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used
#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used
#   ANDROID_NDK_HOST_SYSTEM_NAME : "windows", "linux-x86" or "darwin-x86" depending on host platform
#   ANDROID_NDK_ABI_NAME : "armeabi", "armeabi-v7a", "x86", "mips", "arm64-v8a", "x86_64", "mips64" depending on ANDROID_ABI
#   ANDROID_NDK_RELEASE : from r5 to r10d; set only for NDK
#   ANDROID_NDK_RELEASE_NUM : numeric ANDROID_NDK_RELEASE version (1000*major+minor)
#   ANDROID_ARCH_NAME : "arm", "x86", "mips", "arm64", "x86_64", "mips64" depending on ANDROID_ABI
#   ANDROID_SYSROOT : path to the compiler sysroot
#   TOOL_OS_SUFFIX : "" or ".exe" depending on host platform
#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used
#
# Secondary (less stable) read-only variables:
#   ANDROID_COMPILER_VERSION : GCC version used (not Clang version)
#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used
#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform
#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI
#   ANDROID_TOOLCHAIN_MACHINE_NAME : "arm-linux-androideabi", "arm-eabi" or "i686-android-linux"
#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)
#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools
#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK
#   ANDROID_STL_INCLUDE_DIRS : stl include paths
#   ANDROID_RTTI : if rtti is enabled by the runtime
#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime
#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used
#
# Defaults:
#   ANDROID_DEFAULT_NDK_API_LEVEL
#   ANDROID_DEFAULT_NDK_API_LEVEL_$***REMOVED***ARCH***REMOVED***
#   ANDROID_NDK_SEARCH_PATHS
#   ANDROID_SUPPORTED_ABIS_$***REMOVED***ARCH***REMOVED***
#   ANDROID_SUPPORTED_NDK_VERSIONS
