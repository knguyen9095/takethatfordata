#! /usr/bin/env perl
# Copyright 1999-2016 The OpenSSL Project Authors. All Rights Reserved.
#
# Licensed under the OpenSSL license (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html


package x86nasm;

*out=\@::out;

$::lbdecor="L\$";		# local label decoration
$nmdecor=$::netware?"":"_";	# external name decoration
$drdecor=$::mwerks?".":"";	# directive decoration

$initseg="";

sub ::generic
***REMOVED*** my $opcode=shift;
  my $tmp;

    if (!$::mwerks)
    ***REMOVED***   if    ($opcode =~ m/^j/o && $#_==0) # optimize jumps
	***REMOVED***   $_[0] = "NEAR $_[0]";   	***REMOVED***
	elsif ($opcode eq "lea" && $#_==1)  # wipe storage qualifier from lea
	***REMOVED***   $_[1] =~ s/^[^\[]*\[/\[/o;	***REMOVED***
	elsif ($opcode eq "clflush" && $#_==0)
	***REMOVED***   $_[0] =~ s/^[^\[]*\[/\[/o;	***REMOVED***
    ***REMOVED***
    &::emit($opcode,@_);
  1;
***REMOVED***
#
# opcodes not covered by ::generic above, mostly inconsistent namings...
#
sub ::call	***REMOVED*** &::emit("call",(&::islabel($_[0]) or "$nmdecor$_[0]")); ***REMOVED***
sub ::call_ptr	***REMOVED*** &::emit("call",@_);	***REMOVED***
sub ::jmp_ptr	***REMOVED*** &::emit("jmp",@_);	***REMOVED***

sub get_mem
***REMOVED*** my($size,$addr,$reg1,$reg2,$idx)=@_;
  my($post,$ret);

    if (!defined($idx) && 1*$reg2) ***REMOVED*** $idx=$reg2; $reg2=$reg1; undef $reg1; ***REMOVED***

    if ($size ne "")
    ***REMOVED***	$ret .= "$size";
	$ret .= " PTR" if ($::mwerks);
	$ret .= " ";
    ***REMOVED***
    $ret .= "[";

    $addr =~ s/^\s+//;
    # prepend global references with optional underscore
    $addr =~ s/^([^\+\-0-9][^\+\-]*)/::islabel($1) or "$nmdecor$1"/ige;
    # put address arithmetic expression in parenthesis
    $addr="($addr)" if ($addr =~ /^.+[\-\+].+$/);

    if (($addr ne "") && ($addr ne 0))
    ***REMOVED***	if ($addr !~ /^-/)	***REMOVED*** $ret .= "$addr+"; ***REMOVED***
	else			***REMOVED*** $post=$addr;      ***REMOVED***
    ***REMOVED***

    if ($reg2 ne "")
    ***REMOVED***	$idx!=0 or $idx=1;
	$ret .= "$reg2*$idx";
	$ret .= "+$reg1" if ($reg1 ne "");
    ***REMOVED***
    else
    ***REMOVED***	$ret .= "$reg1";   ***REMOVED***

    $ret .= "$post]";
    $ret =~ s/\+\]/]/; # in case $addr was the only argument

  $ret;
***REMOVED***
sub ::BP	***REMOVED*** &get_mem("BYTE",@_);  ***REMOVED***
sub ::DWP	***REMOVED*** &get_mem("DWORD",@_); ***REMOVED***
sub ::WP	***REMOVED*** &get_mem("WORD",@_);	***REMOVED***
sub ::QWP	***REMOVED*** &get_mem("",@_);      ***REMOVED***
sub ::BC	***REMOVED*** (($::mwerks)?"":"BYTE ")."@_";  ***REMOVED***
sub ::DWC	***REMOVED*** (($::mwerks)?"":"DWORD ")."@_"; ***REMOVED***

sub ::file
***REMOVED***   if ($::mwerks)	***REMOVED*** push(@out,".section\t.text,64\n"); ***REMOVED***
    else
    ***REMOVED*** my $tmp=<<___;
%ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
%ifdef __YASM_VERSION_ID__
%if __YASM_VERSION_ID__ < 01010000h
%error yasm version 1.1.0 or later needed.
%endif
; Yasm automatically includes @feat.00 and complains about redefining it.
; https://www.tortall.net/projects/yasm/manual/html/objfmt-win32-safeseh.html
%else
\$\@feat.00 equ 1
%endif
section	.text	code align=64
%else
section	.text	code
%endif
___
	push(@out,$tmp);
    ***REMOVED***
***REMOVED***

sub ::function_begin_B
***REMOVED*** my $func=shift;
  my $global=($func !~ /^_/);
  my $begin="$***REMOVED***::lbdecor***REMOVED***_$***REMOVED***func***REMOVED***_begin";

    $begin =~ s/^\@/./ if ($::mwerks);	# the torture never stops

    &::LABEL($func,$global?"$begin":"$nmdecor$func");
    $func=$nmdecor.$func;

    push(@out,"$***REMOVED***drdecor***REMOVED***global	$func\n")	if ($global);
    push(@out,"$***REMOVED***drdecor***REMOVED***align	16\n");
    push(@out,"$func:\n");
    push(@out,"$begin:\n")			if ($global);
    $::stack=4;
***REMOVED***

sub ::function_end_B
***REMOVED***   $::stack=0;
    &::wipe_labels();
***REMOVED***

sub ::file_end
***REMOVED***   if (grep ***REMOVED***/\b$***REMOVED***nmdecor***REMOVED***OPENSSL_ia32cap_P\b/i***REMOVED*** @out)
    ***REMOVED***	my $comm=<<___;
$***REMOVED***drdecor***REMOVED***segment	.bss
$***REMOVED***drdecor***REMOVED***common	$***REMOVED***nmdecor***REMOVED***OPENSSL_ia32cap_P 16
___
	# comment out OPENSSL_ia32cap_P declarations
	grep ***REMOVED***s/(^extern\s+$***REMOVED***nmdecor***REMOVED***OPENSSL_ia32cap_P)/\;$1/***REMOVED*** @out;
	push (@out,$comm)
    ***REMOVED***
    push (@out,$initseg) if ($initseg);
***REMOVED***

sub ::comment ***REMOVED***   foreach (@_) ***REMOVED*** push(@out,"\t; $_\n"); ***REMOVED***   ***REMOVED***

sub ::external_label
***REMOVED***   foreach(@_)
    ***REMOVED***	push(@out,"$***REMOVED***drdecor***REMOVED***extern\t".&::LABEL($_,$nmdecor.$_)."\n");   ***REMOVED***
***REMOVED***

sub ::public_label
***REMOVED***   push(@out,"$***REMOVED***drdecor***REMOVED***global\t".&::LABEL($_[0],$nmdecor.$_[0])."\n");  ***REMOVED***

sub ::data_byte
***REMOVED***   push(@out,(($::mwerks)?".byte\t":"db\t").join(',',@_)."\n");	***REMOVED***
sub ::data_short
***REMOVED***   push(@out,(($::mwerks)?".word\t":"dw\t").join(',',@_)."\n");	***REMOVED***
sub ::data_word
***REMOVED***   push(@out,(($::mwerks)?".long\t":"dd\t").join(',',@_)."\n");	***REMOVED***

sub ::align
***REMOVED***   push(@out,"$***REMOVED***drdecor***REMOVED***align\t$_[0]\n");	***REMOVED***

sub ::picmeup
***REMOVED*** my($dst,$sym)=@_;
    &::lea($dst,&::DWP($sym));
***REMOVED***

sub ::initseg
***REMOVED*** my $f=$nmdecor.shift;
    if ($::win32)
    ***REMOVED***	$initseg=<<___;
segment	.CRT\$XCU data align=4
extern	$f
dd	$f
___
    ***REMOVED***
***REMOVED***

sub ::dataseg
***REMOVED***   if ($mwerks)	***REMOVED*** push(@out,".section\t.data,4\n");   ***REMOVED***
    else		***REMOVED*** push(@out,"section\t.data align=4\n"); ***REMOVED***
***REMOVED***

sub ::safeseh
***REMOVED*** my $nm=shift;
    push(@out,"%if	__NASM_VERSION_ID__ >= 0x02030000\n");
    push(@out,"safeseh	".&::LABEL($nm,$nmdecor.$nm)."\n");
    push(@out,"%endif\n");
***REMOVED***

1;
