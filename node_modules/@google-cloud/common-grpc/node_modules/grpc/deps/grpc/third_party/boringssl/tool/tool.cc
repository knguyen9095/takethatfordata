/* Copyright (c) 2014, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#include <string>
#include <vector>

#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/ssl.h>

#if defined(OPENSSL_WINDOWS)
#include <fcntl.h>
#include <io.h>
#else
#include <libgen.h>
#endif

#include "internal.h"


typedef bool (*tool_func_t)(const std::vector<std::string> &args);

struct Tool ***REMOVED***
  const char *name;
  tool_func_t func;
***REMOVED***;

static const Tool kTools[] = ***REMOVED***
  ***REMOVED*** "ciphers", Ciphers ***REMOVED***,
  ***REMOVED*** "client", Client ***REMOVED***,
  ***REMOVED*** "generate-ed25519", GenerateEd25519Key ***REMOVED***,
  ***REMOVED*** "genrsa", GenerateRSAKey ***REMOVED***,
  ***REMOVED*** "md5sum", MD5Sum ***REMOVED***,
  ***REMOVED*** "pkcs12", DoPKCS12 ***REMOVED***,
  ***REMOVED*** "rand", Rand ***REMOVED***,
  ***REMOVED*** "s_client", Client ***REMOVED***,
  ***REMOVED*** "s_server", Server ***REMOVED***,
  ***REMOVED*** "server", Server ***REMOVED***,
  ***REMOVED*** "sha1sum", SHA1Sum ***REMOVED***,
  ***REMOVED*** "sha224sum", SHA224Sum ***REMOVED***,
  ***REMOVED*** "sha256sum", SHA256Sum ***REMOVED***,
  ***REMOVED*** "sha384sum", SHA384Sum ***REMOVED***,
  ***REMOVED*** "sha512sum", SHA512Sum ***REMOVED***,
  ***REMOVED*** "speed", Speed ***REMOVED***,
  ***REMOVED*** "", nullptr ***REMOVED***,
***REMOVED***;

static void usage(const char *name) ***REMOVED***
  printf("Usage: %s COMMAND\n", name);
  printf("\n");
  printf("Available commands:\n");

  for (size_t i = 0;; i++) ***REMOVED***
    const Tool &tool = kTools[i];
    if (tool.func == nullptr) ***REMOVED***
      break;
    ***REMOVED***
    printf("    %s\n", tool.name);
  ***REMOVED***
***REMOVED***

static tool_func_t FindTool(const std::string &name) ***REMOVED***
  for (size_t i = 0;; i++) ***REMOVED***
    const Tool &tool = kTools[i];
    if (tool.func == nullptr || name == tool.name) ***REMOVED***
      return tool.func;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

int main(int argc, char **argv) ***REMOVED***
#if defined(OPENSSL_WINDOWS)
  // Read and write in binary mode. This makes bssl on Windows consistent with
  // bssl on other platforms, and also makes it consistent with MSYS's commands
  // like diff(1) and md5sum(1). This is especially important for the digest
  // commands.
  if (_setmode(_fileno(stdin), _O_BINARY) == -1) ***REMOVED***
    perror("_setmode(_fileno(stdin), O_BINARY)");
    return 1;
  ***REMOVED***
  if (_setmode(_fileno(stdout), _O_BINARY) == -1) ***REMOVED***
    perror("_setmode(_fileno(stdout), O_BINARY)");
    return 1;
  ***REMOVED***
  if (_setmode(_fileno(stderr), _O_BINARY) == -1) ***REMOVED***
    perror("_setmode(_fileno(stderr), O_BINARY)");
    return 1;
  ***REMOVED***
#endif

  CRYPTO_library_init();

  int starting_arg = 1;
  tool_func_t tool = nullptr;
#if !defined(OPENSSL_WINDOWS)
  tool = FindTool(basename(argv[0]));
#endif
  if (tool == nullptr) ***REMOVED***
    starting_arg++;
    if (argc > 1) ***REMOVED***
      tool = FindTool(argv[1]);
    ***REMOVED***
  ***REMOVED***
  if (tool == nullptr) ***REMOVED***
    usage(argv[0]);
    return 1;
  ***REMOVED***

  std::vector<std::string> args;
  for (int i = starting_arg; i < argc; i++) ***REMOVED***
    args.push_back(argv[i]);
  ***REMOVED***

  return !tool(args);
***REMOVED***
