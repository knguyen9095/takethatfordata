
var assert = require('assert');
var delegate = require('..');

describe('.method(name)', function()***REMOVED***
  it('should delegate methods', function()***REMOVED***
    var obj = ***REMOVED******REMOVED***;

    obj.request = ***REMOVED***
      foo: function(bar)***REMOVED***
        assert(this == obj.request);
        return bar;
      ***REMOVED***
    ***REMOVED***;

    delegate(obj, 'request').method('foo');

    obj.foo('something').should.equal('something');
  ***REMOVED***)
***REMOVED***)

describe('.getter(name)', function()***REMOVED***
  it('should delegate getters', function()***REMOVED***
    var obj = ***REMOVED******REMOVED***;

    obj.request = ***REMOVED***
      get type() ***REMOVED***
        return 'text/html';
      ***REMOVED***
    ***REMOVED***

    delegate(obj, 'request').getter('type');

    obj.type.should.equal('text/html');
  ***REMOVED***)
***REMOVED***)

describe('.setter(name)', function()***REMOVED***
  it('should delegate setters', function()***REMOVED***
    var obj = ***REMOVED******REMOVED***;

    obj.request = ***REMOVED***
      get type() ***REMOVED***
        return this._type.toUpperCase();
      ***REMOVED***,

      set type(val) ***REMOVED***
        this._type = val;
      ***REMOVED***
    ***REMOVED***

    delegate(obj, 'request').setter('type');

    obj.type = 'hey';
    obj.request.type.should.equal('HEY');
  ***REMOVED***)
***REMOVED***)

describe('.access(name)', function()***REMOVED***
  it('should delegate getters and setters', function()***REMOVED***
    var obj = ***REMOVED******REMOVED***;

    obj.request = ***REMOVED***
      get type() ***REMOVED***
        return this._type.toUpperCase();
      ***REMOVED***,

      set type(val) ***REMOVED***
        this._type = val;
      ***REMOVED***
    ***REMOVED***

    delegate(obj, 'request').access('type');

    obj.type = 'hey';
    obj.type.should.equal('HEY');
  ***REMOVED***)
***REMOVED***)

describe('.fluent(name)', function () ***REMOVED***
  it('should delegate in a fluent fashion', function () ***REMOVED***
    var obj = ***REMOVED***
      settings: ***REMOVED***
        env: 'development'
      ***REMOVED***
    ***REMOVED***;

    delegate(obj, 'settings').fluent('env');

    obj.env().should.equal('development');
    obj.env('production').should.equal(obj);
    obj.settings.env.should.equal('production');
  ***REMOVED***)
***REMOVED***)
