/*!
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @module common/service
 */

'use strict';

var arrify = require('arrify');
var extend = require('extend');

/**
 * @type ***REMOVED***module:common/util***REMOVED***
 * @private
 */
var util = require('./util.js');

var PROJECT_ID_TOKEN = '***REMOVED******REMOVED***projectId***REMOVED******REMOVED***';

/**
 * Service is a base class, meant to be inherited from by a "service," like
 * BigQuery or Storage.
 *
 * This handles making authenticated requests by exposing a `makeReq_` function.
 *
 * @constructor
 * @alias module:common/service
 *
 * @param ***REMOVED***object***REMOVED*** config - Configuration object.
 * @param ***REMOVED***string***REMOVED*** config.baseUrl - The base URL to make API requests to.
 * @param ***REMOVED***string[]***REMOVED*** config.scopes - The scopes required for the request.
 * @param ***REMOVED***object=***REMOVED*** options - [Configuration object](#/docs).
 */
function Service(config, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  this.baseUrl = config.baseUrl;
  this.globalInterceptors = arrify(options.interceptors_);
  this.interceptors = [];
  this.packageJson = config.packageJson;
  this.projectId = options.projectId || PROJECT_ID_TOKEN;
  this.projectIdRequired = config.projectIdRequired !== false;
  this.Promise = options.promise || Promise;

  var reqCfg = extend(***REMOVED******REMOVED***, config, ***REMOVED***
    projectIdRequired: this.projectIdRequired,
    projectId: this.projectId,
    credentials: options.credentials,
    keyFile: options.keyFilename,
    email: options.email,
  ***REMOVED***);

  this.makeAuthenticatedRequest = util.makeAuthenticatedRequestFactory(reqCfg);
  this.authClient = this.makeAuthenticatedRequest.authClient;
  this.getCredentials = this.makeAuthenticatedRequest.getCredentials;

  var isCloudFunctionEnv = !!process.env.FUNCTION_NAME;

  if (isCloudFunctionEnv) ***REMOVED***
    this.interceptors.push(***REMOVED***
      request: function(reqOpts) ***REMOVED***
        reqOpts.forever = false;
        return reqOpts;
      ***REMOVED***,
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Get and update the Service's project ID.
 *
 * @param ***REMOVED***function***REMOVED*** callback - The callback function.
 */
Service.prototype.getProjectId = function(callback) ***REMOVED***
  var self = this;

  this.authClient.getProjectId(function(err, projectId) ***REMOVED***
    if (err) ***REMOVED***
      callback(err);
      return;
    ***REMOVED***

    if (self.projectId === PROJECT_ID_TOKEN && projectId) ***REMOVED***
      self.projectId = projectId;
    ***REMOVED***

    callback(null, self.projectId);
  ***REMOVED***);
***REMOVED***;

/**
 * Make an authenticated API request.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** reqOpts - Request options that are passed to `request`.
 * @param ***REMOVED***string***REMOVED*** reqOpts.uri - A URI relative to the baseUrl.
 * @param ***REMOVED***function***REMOVED*** callback - The callback function passed to `request`.
 */
Service.prototype.request_ = function(reqOpts, callback) ***REMOVED***
  reqOpts = extend(true, ***REMOVED******REMOVED***, reqOpts);

  var isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;

  var uriComponents = [this.baseUrl];

  if (this.projectIdRequired) ***REMOVED***
    uriComponents.push('projects');
    uriComponents.push(this.projectId);
  ***REMOVED***

  uriComponents.push(reqOpts.uri);

  if (isAbsoluteUrl) ***REMOVED***
    uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));
  ***REMOVED***

  reqOpts.uri = uriComponents
    .map(function(uriComponent) ***REMOVED***
      var trimSlashesRegex = /^\/*|\/*$/g;
      return uriComponent.replace(trimSlashesRegex, '');
    ***REMOVED***)
    .join('/')
    // Some URIs have colon separators.
    // Bad: https://.../projects/:list
    // Good: https://.../projects:list
    .replace(/\/:/g, ':');

  // Interceptors should be called in the order they were assigned.
  var combinedInterceptors = [].slice
    .call(this.globalInterceptors)
    .concat(this.interceptors)
    .concat(arrify(reqOpts.interceptors_));

  var interceptor;

  while ((interceptor = combinedInterceptors.shift()) && interceptor.request) ***REMOVED***
    reqOpts = interceptor.request(reqOpts);
  ***REMOVED***

  delete reqOpts.interceptors_;

  var pkg = this.packageJson;
  reqOpts.headers = extend(***REMOVED******REMOVED***, reqOpts.headers, ***REMOVED***
    'User-Agent': util.getUserAgentFromPackageJson(pkg),
    'x-goog-api-client': `gl-node/$***REMOVED***process.versions.node***REMOVED*** gccl/$***REMOVED***pkg.version***REMOVED***`,
  ***REMOVED***);

  return this.makeAuthenticatedRequest(reqOpts, callback);
***REMOVED***;

/**
 * Make an authenticated API request.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** reqOpts - Request options that are passed to `request`.
 * @param ***REMOVED***string***REMOVED*** reqOpts.uri - A URI relative to the baseUrl.
 * @param ***REMOVED***function***REMOVED*** callback - The callback function passed to `request`.
 */
Service.prototype.request = function(reqOpts, callback) ***REMOVED***
  Service.prototype.request_.call(this, reqOpts, callback);
***REMOVED***;

/**
 * Make an authenticated API request.
 *
 * @private
 *
 * @param ***REMOVED***object***REMOVED*** reqOpts - Request options that are passed to `request`.
 * @param ***REMOVED***string***REMOVED*** reqOpts.uri - A URI relative to the baseUrl.
 */
Service.prototype.requestStream = function(reqOpts) ***REMOVED***
  return Service.prototype.request_.call(this, reqOpts);
***REMOVED***;

module.exports = Service;
