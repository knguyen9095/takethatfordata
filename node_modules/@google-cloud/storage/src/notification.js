/*!
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

var common = require('@google-cloud/common');
var is = require('is');
var util = require('util');

/**
 * A Notification object is created from your ***REMOVED***@link Bucket***REMOVED*** object using
 * ***REMOVED***@link Bucket#notification***REMOVED***. Use it to interact with Cloud Pub/Sub
 * notifications.
 *
 * @see [Cloud Pub/Sub Notifications for Google Cloud Storage]***REMOVED***@link https://cloud.google.com/storage/docs/pubsub-notifications***REMOVED***
 *
 * @class
 * @hideconstructor
 *
 * @param ***REMOVED***Bucket***REMOVED*** bucket The bucket instance this notification is attached to.
 * @param ***REMOVED***string***REMOVED*** id The ID of the notification.
 *
 * @example
 * var storage = require('@google-cloud/storage')();
 * var myBucket = storage.bucket('my-bucket');
 *
 * var notification = myBucket.notification('1');
 */
function Notification(bucket, id) ***REMOVED***
  var methods = ***REMOVED***
    /**
     * Creates a notification subscription for the bucket.
     *
     * @see [Notifications: insert]***REMOVED***@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert***REMOVED***
     *
     * @param ***REMOVED***Topic|string***REMOVED*** topic The Cloud PubSub topic to which this
     *     subscription publishes. If the project ID is omitted, the current
     *     project ID will be used.
     *
     *     Acceptable formats are:
     *     - `projects/grape-spaceship-123/topics/my-topic`
     *
     *     - `my-topic`
     * @param ***REMOVED***CreateNotificationRequest***REMOVED*** [options] Metadata to set for
     *     the notification.
     * @param ***REMOVED***CreateNotificationCallback***REMOVED*** [callback] Callback function.
     * @returns ***REMOVED***Promise<CreateNotificationResponse>***REMOVED***
     * @throws ***REMOVED***Error***REMOVED*** If a valid topic is not provided.
     *
     * @example
     * var storage = require('@google-cloud/storage')();
     * var myBucket = storage.bucket('my-bucket');
     * var notification = myBucket.notification('1');
     *
     * notification.create(function(err, notification, apiResponse) ***REMOVED***
     *   if (!err) ***REMOVED***
     *     // The notification was created successfully.
     *   ***REMOVED***
     * ***REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * notification.create().then(function(data) ***REMOVED***
     *   var notification = data[0];
     *   var apiResponse = data[1];
     * ***REMOVED***);
     */
    create: true,

    /**
     * @typedef ***REMOVED***array***REMOVED*** NotificationExistsResponse
     * @property ***REMOVED***boolean***REMOVED*** 0 Whether the notification exists or not.
     */
    /**
     * @callback NotificationExistsCallback
     * @param ***REMOVED***?Error***REMOVED*** err Request error, if any.
     * @param ***REMOVED***boolean***REMOVED*** exists Whether the notification exists or not.
     */
    /**
     * Check if the notification exists.
     *
     * @param ***REMOVED***NotificationExistsCallback***REMOVED*** [callback] Callback function.
     * @returns ***REMOVED***Promise<NotificationExistsResponse>***REMOVED***
     *
     * @example
     * var storage = require('@google-cloud/storage')();
     * var myBucket = storage.bucket('my-bucket');
     * var notification = myBucket.notification('1');
     *
     * notification.exists(function(err, exists) ***REMOVED******REMOVED***);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * notification.exists().then(function(data) ***REMOVED***
     *   var exists = data[0];
     * ***REMOVED***);
     */
    exists: true,
  ***REMOVED***;

  common.ServiceObject.call(this, ***REMOVED***
    parent: bucket,
    baseUrl: '/notificationConfigs',
    id: id.toString(),
    createMethod: bucket.createNotification.bind(bucket),
    methods: methods,
  ***REMOVED***);
***REMOVED***

util.inherits(Notification, common.ServiceObject);

/**
 * @typedef ***REMOVED***array***REMOVED*** DeleteNotificationResponse
 * @property ***REMOVED***object***REMOVED*** 0 The full API response.
 */
/**
 * @callback DeleteNotificationCallback
 * @param ***REMOVED***?Error***REMOVED*** err Request error, if any.
 * @param ***REMOVED***object***REMOVED*** apiResponse The full API response.
 */
/**
 * Permanently deletes a notification subscription.
 *
 * @see [Notifications: delete API Documentation]***REMOVED***@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete***REMOVED***
 *
 * @param ***REMOVED***object***REMOVED*** [options] Configuration options.
 * @param ***REMOVED***string***REMOVED*** [options.userProject] The ID of the project which will be
 *     billed for the request.
 * @param ***REMOVED***DeleteNotificationCallback***REMOVED*** [callback] Callback function.
 * @returns ***REMOVED***Promise<DeleteNotificationResponse>***REMOVED***
 *
 * @example
 * var storage = require('@google-cloud/storage')();
 * var myBucket = storage.bucket('my-bucket');
 * var notification = myBucket.notification('1');
 *
 * notification.delete(function(err, apiResponse) ***REMOVED******REMOVED***);
 *
 * //-
 * // If the callback is omitted, we'll return a Promise.
 * //-
 * notification.delete().then(function(data) ***REMOVED***
 *   var apiResponse = data[0];
 * ***REMOVED***);
 *
 * @example <caption>include:samples/notifications.js</caption>
 * region_tag:storage_delete_notification
 * Another example:
 */
Notification.prototype.delete = function(options, callback) ***REMOVED***
  if (is.fn(options)) ***REMOVED***
    callback = options;
    options = ***REMOVED******REMOVED***;
  ***REMOVED***

  this.request(
    ***REMOVED***
      method: 'DELETE',
      uri: '',
      qs: options,
    ***REMOVED***,
    callback || common.util.noop
  );
***REMOVED***;

/**
 * @typedef ***REMOVED***array***REMOVED*** GetNotificationResponse
 * @property ***REMOVED***Notification***REMOVED*** 0 The ***REMOVED***@link Notification***REMOVED***
 * @property ***REMOVED***object***REMOVED*** 1 The full API response.
 */
/**
 * @callback GetNotificationCallback
 * @param ***REMOVED***?Error***REMOVED*** err Request error, if any.
 * @param ***REMOVED***Notification***REMOVED*** notification The ***REMOVED***@link Notification***REMOVED***.
 * @param ***REMOVED***object***REMOVED*** apiResponse The full API response.
 */
/**
 * Get a notification and its metadata if it exists.
 *
 * @see [Notifications: get API Documentation]***REMOVED***@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get***REMOVED***
 *
 * @param ***REMOVED***object***REMOVED*** [options] Configuration options.
 *     See ***REMOVED***@link Bucket#createNotification***REMOVED*** for create options.
 * @param ***REMOVED***boolean***REMOVED*** [options.autoCreate] Automatically create the object if
 *     it does not exist. Default: `false`.
 * @param ***REMOVED***string***REMOVED*** [options.userProject] The ID of the project which will be
 *     billed for the request.
 * @param ***REMOVED***GetNotificationCallback***REMOVED*** [callback] Callback function.
 * @return ***REMOVED***Promise<GetNotificationCallback>***REMOVED***
 *
 * @example
 * var storage = require('@google-cloud/storage')();
 * var myBucket = storage.bucket('my-bucket');
 * var notification = myBucket.notification('1');
 *
 * notification.get(function(err, notification, apiResponse) ***REMOVED***
 *   // `notification.metadata` has been populated.
 * ***REMOVED***);
 *
 * //-
 * // If the callback is omitted, we'll return a Promise.
 * //-
 * notification.get().then(function(data) ***REMOVED***
 *   var notification = data[0];
 *   var apiResponse = data[1];
 * ***REMOVED***);
 */
Notification.prototype.get = function(options, callback) ***REMOVED***
  var self = this;

  if (is.fn(options)) ***REMOVED***
    callback = options;
    options = ***REMOVED******REMOVED***;
  ***REMOVED***

  var autoCreate = options.autoCreate;
  delete options.autoCreate;

  function onCreate(err, notification, apiResponse) ***REMOVED***
    if (err) ***REMOVED***
      if (err.code === 409) ***REMOVED***
        self.get(options, callback);
        return;
      ***REMOVED***

      callback(err, null, apiResponse);
      return;
    ***REMOVED***

    callback(null, notification, apiResponse);
  ***REMOVED***

  this.getMetadata(options, function(err, metadata) ***REMOVED***
    if (err) ***REMOVED***
      if (err.code === 404 && autoCreate) ***REMOVED***
        var args = [];

        if (!is.empty(options)) ***REMOVED***
          args.push(options);
        ***REMOVED***

        args.push(onCreate);

        self.create.apply(self, args);
        return;
      ***REMOVED***

      callback(err, null, metadata);
      return;
    ***REMOVED***

    callback(null, self, metadata);
  ***REMOVED***);
***REMOVED***;

/**
 * @typedef ***REMOVED***array***REMOVED*** GetNotificationMetadataResponse
 * @property ***REMOVED***object***REMOVED*** 0 The notification metadata.
 * @property ***REMOVED***object***REMOVED*** 1 The full API response.
 */
/**
 * @callback GetNotificationMetadataCallback
 * @param ***REMOVED***?Error***REMOVED*** err Request error, if any.
 * @param ***REMOVED***object***REMOVED*** files The notification metadata.
 * @param ***REMOVED***object***REMOVED*** apiResponse The full API response.
 */
/**
 * Get the notification's metadata.
 *
 * @see [Notifications: get API Documentation]***REMOVED***@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get***REMOVED***
 *
 * @param ***REMOVED***object***REMOVED*** [options] Configuration options.
 * @param ***REMOVED***string***REMOVED*** [options.userProject] The ID of the project which will be
 *     billed for the request.
 * @param ***REMOVED***GetNotificationMetadataCallback***REMOVED*** [callback] Callback function.
 * @returns ***REMOVED***Promise<GetNotificationMetadataResponse>***REMOVED***
 *
 * @example
 * var storage = require('@google-cloud/storage')();
 * var myBucket = storage.bucket('my-bucket');
 * var notification = myBucket.notification('1');
 *
 * notification.getMetadata(function(err, metadata, apiResponse) ***REMOVED******REMOVED***);
 *
 * //-
 * // If the callback is omitted, we'll return a Promise.
 * //-
 * notification.getMetadata().then(function(data) ***REMOVED***
 *   var metadata = data[0];
 *   var apiResponse = data[1];
 * ***REMOVED***);
 *
 * @example <caption>include:samples/notifications.js</caption>
 * region_tag:storage_notifications_get_metadata
 * Another example:
 */
Notification.prototype.getMetadata = function(options, callback) ***REMOVED***
  var self = this;

  if (is.fn(options)) ***REMOVED***
    callback = options;
    options = ***REMOVED******REMOVED***;
  ***REMOVED***

  this.request(
    ***REMOVED***
      uri: '',
      qs: options,
    ***REMOVED***,
    function(err, resp) ***REMOVED***
      if (err) ***REMOVED***
        callback(err, null, resp);
        return;
      ***REMOVED***

      self.metadata = resp;

      callback(null, self.metadata, resp);
    ***REMOVED***
  );
***REMOVED***;

/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
common.util.promisifyAll(Notification);

/**
 * Reference to the ***REMOVED***@link Notification***REMOVED*** class.
 * @name module:@google-cloud/storage.Notification
 * @see Notification
 */
module.exports = Notification;
