"use strict";

const path = require("path");

const matchRelativePath = /^\.\.?[/\\]/;

function isAbsolutePath(str) ***REMOVED***
	return path.posix.isAbsolute(str) || path.win32.isAbsolute(str);
***REMOVED***

function isRelativePath(str) ***REMOVED***
	return matchRelativePath.test(str);
***REMOVED***

function stringifyRequest(loaderContext, request) ***REMOVED***
	const splitted = request.split("!");
	const context = loaderContext.context || (loaderContext.options && loaderContext.options.context);
	return JSON.stringify(splitted.map(part => ***REMOVED***
		// First, separate singlePath from query, because the query might contain paths again
		const splittedPart = part.match(/^(.*?)(\?.*)/);
		let singlePath = splittedPart ? splittedPart[1] : part;
		const query = splittedPart ? splittedPart[2] : "";
		if(isAbsolutePath(singlePath) && context) ***REMOVED***
			singlePath = path.relative(context, singlePath);
			if(isAbsolutePath(singlePath)) ***REMOVED***
				// If singlePath still matches an absolute path, singlePath was on a different drive than context.
				// In this case, we leave the path platform-specific without replacing any separators.
				// @see https://github.com/webpack/loader-utils/pull/14
				return singlePath + query;
			***REMOVED***
			if(isRelativePath(singlePath) === false) ***REMOVED***
				// Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).
				singlePath = "./" + singlePath;
			***REMOVED***
		***REMOVED***
		return singlePath.replace(/\\/g, "/") + query;
	***REMOVED***).join("!"));
***REMOVED***

module.exports = stringifyRequest;
