'use strict';
/* Simple test script that doesn't need mocha or similar - it just parses stuff and checks the returned AST */
var acorn = require('acorn');
var colors = require('colors');
require('../')(acorn);
function parse(code, pluginOptions, scriptType) ***REMOVED***
    if (Array.isArray(code)) ***REMOVED***
        code = code.join('\n');
    ***REMOVED***
    return acorn.parse(code, ***REMOVED***
        sourceType: scriptType,
        ecmaVersion: 8,
        locations: true,
        ranges: true,
        plugins: ***REMOVED***
            asyncawait: pluginOptions || ***REMOVED******REMOVED***
        ***REMOVED***
    ***REMOVED***);
***REMOVED***

function isIdentThenFnDecl(ast) ***REMOVED***
    return ast.body[0].type === 'ExpressionStatement' && ast.body[0].expression.type === 'Identifier' && ast.body[0].expression.name === 'async' && !ast.body[1].async === true && ast.body[1].type == "FunctionDeclaration";
***REMOVED***

function isAsyncFnDecl(ast) ***REMOVED***
    return ast.body[0].async === true && ast.body[0].type === "FunctionDeclaration";
***REMOVED***

function isAsyncFnExpr(ast) ***REMOVED***
    return ast.body[0].expression.async === true && ast.body[0].expression.type === "ArrowFunctionExpression";
***REMOVED***

function isExprType(type) ***REMOVED***
    return function (ast, sourceType) ***REMOVED***
        return ast.body[0].type === 'ExpressionStatement' && ast.body[0].expression.type === type;
    ***REMOVED***;
***REMOVED***

var tests = [
/* Standard behaviours */
***REMOVED***
    desc: "Simple async function",
    code: "async function x() ***REMOVED*** return undefined; ***REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].async === true;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Simple async function expression",
    code: "(async function ()***REMOVED***  ***REMOVED***)",
    pass: function (ast) ***REMOVED***
        return ast.body[0].expression.async === true;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Async function expression call (1)",
    code: "(async function ()***REMOVED***  ***REMOVED***())",
    pass: function (ast) ***REMOVED***
        return ast.body[0].expression.callee.async === true;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Async function expression call (2)",
    code: "(async function ()***REMOVED***  ***REMOVED***)()",
    pass: function (ast) ***REMOVED***
        return ast.body[0].expression.callee.async === true;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Await in async is AwaitExpression",
    code: "async function x() ***REMOVED*** await(undefined); await undefined ; ***REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].expression.type === 'AwaitExpression' && ast.body[0].body.body[1].expression.type === 'AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Await in function is identifier in 'script', illegal in 'module'",
    code: "function x() ***REMOVED*** await(undefined); ***REMOVED***",
    pass: function (ast,scriptType) ***REMOVED***
        return scriptType === 'script'?ast.body[0].body.body[0].expression.callee.name === 'await':ast.indexOf("(1:15)")>=0;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Async method ***REMOVED***code***REMOVED***",
    code: "var a = ***REMOVED***async x()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].declarations[0].init.properties[0].value.async;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Async arrow",
    code: "var a = async()=>0",
    pass: function (ast) ***REMOVED***
        return ast.body[0].declarations[0].init.async;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Abbreviated async arrow",
    code: "var a = async b=>-b",
    pass: function (ast) ***REMOVED***
        return ast.body[0].declarations[0].init.async;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Parenthesized async arrow is a call",
    code: "var a = async(b=>0)",
    pass: function (ast) ***REMOVED***
        return ast.body[0].declarations[0].init.type==='CallExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Await declaration fails in async function",
    code: "async function x() ***REMOVED*** var await; ***REMOVED***",
    pass: function (ex, scriptType) ***REMOVED***
      return ex.indexOf("(1:25)")>=0
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Await function declaration fails in async function",
    code: "async function x() ***REMOVED*** function await() ***REMOVED******REMOVED*** ***REMOVED***",
    pass: function (ex, scriptType) ***REMOVED***
      return ex.indexOf("(1:30)")>=0
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Await reference fails in async function",
    code: "async function x() ***REMOVED*** return 1+await; ***REMOVED***",
    pass: function (ex) ***REMOVED***
        return !!ex.match(/\(1:3[05]\)/);
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is an async FunctionExpression",
    code: "async ()=>0",
    pass: isAsyncFnExpr
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a CallExpression",
    code: "async(()=>0)",
    pass: isExprType('CallExpression')
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is an async FunctionDeclaration",
    code: "async /* a */ function x()***REMOVED******REMOVED***",
    pass: isAsyncFnDecl
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a reference to 'async' and a sync FunctionDeclaration",
    code: "async /*\n*/function x()***REMOVED******REMOVED***",
    pass: isIdentThenFnDecl
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a reference to 'async' and a sync FunctionDeclaration",
    code: "async /* a */\nfunction x()***REMOVED******REMOVED***",
    pass: isIdentThenFnDecl
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a reference to 'async' and a sync FunctionDeclaration",
    code: "async\nfunction x()***REMOVED******REMOVED***",
    pass: isIdentThenFnDecl
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a reference to 'async' and a sync FunctionDeclaration",
    code: "async //\nfunction x()***REMOVED******REMOVED***",
    pass: isIdentThenFnDecl
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a reference to 'async' and a sync FunctionDeclaration",
    code: "async /*\n*/\nfunction x()***REMOVED******REMOVED***",
    pass: isIdentThenFnDecl
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a SyntaxError (when inAsyncFunction and awaitAnywhere option are defaults)",
    code: "await x",
    pass: function (ex, sourceType) ***REMOVED***
        return sourceType==='module' ? !!ex.match(/\(1:0\)/) : ex === "Unexpected token (1:6)";
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** is a CallExpression in scripts, and a SyntaxError in modules",
    code: "await(x)",
    pass: function(ast,sourceType) ***REMOVED***
        return sourceType==='module'?!!ast.match(/\(1:0\)/) :isExprType('CallExpression')(ast)
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Async method 'constructor' is valid",
    code: "var a = ***REMOVED***async constructor()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        var props = ast.body[0].declarations[0].init.properties ;
        return (props[0].kind === 'init' && props[0].key.name==='constructor' && props[0].value.async) 
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Async class constructor fails",
    code: "class a ***REMOVED***async constructor()***REMOVED******REMOVED******REMOVED***",
    pass: function (ex) ***REMOVED***
        return !!ex.match(/class constructor\(\) cannot be be async \(1:(15|9)\)/) || ex === "Constructor can't be an async method (1:15)";
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Async setter fails",
    code: "var a = ***REMOVED***async set x(y)***REMOVED******REMOVED******REMOVED***",
    pass: function (ex) ***REMOVED***
        return ex === "'set <member>(value)' cannot be be async (1:15)" || ex === "Unexpected token (1:19)";
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Deprecated async setter fails (use 'async set x')",
    code: "var a = ***REMOVED***set async x(y)***REMOVED******REMOVED******REMOVED***",
    pass: function (ex) ***REMOVED***
        return ex === "'set <member>(value)' cannot be be async (1:13)" || ex === "Unexpected token (1:19)";
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** getters/setters are not async",
    code: "var a = ***REMOVED***get x()***REMOVED******REMOVED***,set y(z)***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        var props = ast.body[0].declarations[0].init.properties ;
        return (props[0].kind === 'get' && props[0].key.name==='x' && !props[0].value.async) 
            && (props[1].kind === 'set' && props[1].key.name==='y' && !props[1].value.async);
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** are methods, not getters/setters",
    code: "var a = ***REMOVED***async get()***REMOVED******REMOVED***,async set()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        var props = ast.body[0].declarations[0].init.properties ;
        return (props[0].kind === 'init' && props[0].key.name==='get' && props[0].value.async) 
            && (props[1].kind === 'init' && props[1].key.name==='set' && props[1].value.async);
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "In ***REMOVED***code***REMOVED***, x is an sync getter",
    code: "class a ***REMOVED***get x()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].kind==="get" && !ast.body[0].body.body[0].value.async && !ast.body[0].body.body[0].static ; 
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "In ***REMOVED***code***REMOVED***, x is an static sync getter",
    code: "class a ***REMOVED***static get x()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].kind==="get" && !ast.body[0].body.body[0].value.async && ast.body[0].body.body[0].static ; 
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "In ***REMOVED***code***REMOVED***, x is an static sync method",
    code: "class a ***REMOVED***static async x()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].kind==="method" && ast.body[0].body.body[0].value.async && ast.body[0].body.body[0].static ; 
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "***REMOVED***code***REMOVED*** are a getters/setters, not methods",
    code: "var a = ***REMOVED***get async()***REMOVED******REMOVED***,set async(x)***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        var props = ast.body[0].declarations[0].init.properties ;
        return (props[0].kind === 'get' && props[0].key.name==='async' && !props[0].value.async)
            && (props[1].kind === 'set' && props[1].key.name==='async' && !props[1].value.async);
    ***REMOVED***
***REMOVED***,
/* Extended syntax behaviour for Nodent */
***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED***, get is a static method",
    code: "class Foo ***REMOVED*** static get(v) ***REMOVED******REMOVED*** ***REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].type==='MethodDefinition'
            && ast.body[0].body.body[0].key.name === 'get'
            && ast.body[0].body.body[0].kind === "method"
            && ast.body[0].body.body[0].static;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED***, get is a non-static method",
    code: "class Foo ***REMOVED*** get(v) ***REMOVED******REMOVED*** ***REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].type==='MethodDefinition'
            && ast.body[0].body.body[0].key.name === 'get'
            && ast.body[0].body.body[0].kind === "method"
            && !ast.body[0].body.body[0].static;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED***, get is a non-static getter",
    code: "class Foo ***REMOVED*** get get() ***REMOVED******REMOVED*** ***REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].type==='MethodDefinition'
            && ast.body[0].body.body[0].key.name === 'get'
            && ast.body[0].body.body[0].kind === "get"
            && !ast.body[0].body.body[0].static;
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED***, x is an async getter",
    code: "var a = ***REMOVED***async get x()***REMOVED*** await(0) ***REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].declarations[0].init.properties[0].value.async 
            && ast.body[0].declarations[0].init.properties[0].value.body.body[0].expression.type==='AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED*** (deprecated), x is an async getter",
    code: "var a = ***REMOVED***get async x()***REMOVED*** await 0 ***REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].declarations[0].init.properties[0].value.async 
            && ast.body[0].declarations[0].init.properties[0].value.body.body[0].expression.type==='AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED*** (deprecated), x is an async getter",
    code: "var a = ***REMOVED***get async x()***REMOVED*** await(0) ***REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].declarations[0].init.properties[0].value.async 
            && ast.body[0].declarations[0].init.properties[0].value.body.body[0].expression.type==='AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED***, x is an async getter",
    code: "class a ***REMOVED***async get x()***REMOVED*** await 0 ***REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].value.async 
            && ast.body[0].body.body[0].value.body.body[0].expression.type==='AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED***, x is an async getter",
    code: "class a ***REMOVED***async get x()***REMOVED*** await(0) ***REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].value.async 
            && ast.body[0].body.body[0].value.body.body[0].expression.type==='AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED*** (deprecated), x is an async getter",
    code: "class a ***REMOVED***get async x()***REMOVED*** await 0 ***REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].value.async 
            && ast.body[0].body.body[0].value.body.body[0].expression.type==='AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED*** (deprecated), x is an async getter",
    code: "class a ***REMOVED***get async x()***REMOVED*** await(0) ***REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].value.async 
            && ast.body[0].body.body[0].value.body.body[0].expression.type==='AwaitExpression';
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED***, x is an static async getter",
    code: "class a ***REMOVED***static async get x()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].kind==="get" && ast.body[0].body.body[0].value.async && ast.body[0].body.body[0].static ; 
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" In ***REMOVED***code***REMOVED*** (deprecated), x is an static async getter",
    code: "class a ***REMOVED***static get async x()***REMOVED******REMOVED******REMOVED***",
    pass: function (ast) ***REMOVED***
        return ast.body[0].body.body[0].kind==="get" && ast.body[0].body.body[0].value.async && ast.body[0].body.body[0].static ; 
    ***REMOVED***
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" ***REMOVED***code***REMOVED*** is an AwaitExpression when inAsyncFunction option is true",
    code: "await(x)",
    options: ***REMOVED***
        inAsyncFunction: true
    ***REMOVED***,
    pass: isExprType('AwaitExpression')
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" ***REMOVED***code***REMOVED*** is an AwaitExpression when inAsyncFunction option is true",
    code: "await x",
    options: ***REMOVED***
        inAsyncFunction: true
    ***REMOVED***,
    pass: isExprType('AwaitExpression')
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" ***REMOVED***code***REMOVED*** is a CallExpression when awaitAnywhere option is true",
    code: "await(x)",
    options: ***REMOVED***
        awaitAnywhere: true
    ***REMOVED***,
    pass: isExprType('CallExpression')
***REMOVED***,***REMOVED***
    desc: "Nodent:".grey+" ***REMOVED***code***REMOVED*** is an AwaitExpression when awaitAnywhere option is true",
    code: "await x",
    options: ***REMOVED***
        awaitAnywhere: true
    ***REMOVED***,
    pass: isExprType('AwaitExpression')
***REMOVED***];
// TODO: Add tests for asyncExits, noAsyncGetters

var out = ***REMOVED***
    true: "pass".green,
    false: "fail".red
***REMOVED***;
var testNumber = +process.argv[2] || 0;
if (testNumber) ***REMOVED***
    tests = [tests[testNumber - 1]];
***REMOVED*** else ***REMOVED***
    testNumber += 1;
***REMOVED***
var results = ***REMOVED***
    true: 0,
    false: 0
***REMOVED***;

tests.forEach(function (test, idx) ***REMOVED***
    ['script','module'].forEach(function(scriptType)***REMOVED***
        var code = test.code.replace(/\n/g, ' <linefeed> ');
        var desc = test.desc.replace('***REMOVED***code***REMOVED***', code.yellow);
        var pass = function () ***REMOVED***
            var p = test.pass.apply(this, arguments);
            results[p] += 1;
            return p;
        ***REMOVED***;
        var prefix = idx + testNumber + " (" + scriptType + ", acorn v" + acorn.version+")\t" ;
        try ***REMOVED***
            console.log(prefix, desc, out[pass(parse(test.code, test.options, scriptType),scriptType)]);
        ***REMOVED*** catch (ex) ***REMOVED***
            try ***REMOVED***
                console.log(prefix, desc, ex.message.cyan, out[pass(ex.message,scriptType)]);
            ***REMOVED*** catch (ex) ***REMOVED***
                console.log(prefix, desc, ex.message.magenta, out[false]);
                results.false += 1;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);
***REMOVED***) ;
console.log('');
if (results.true)
    console.log((results.true + " of " + tests.length*2 + " tests passed").green);
if (results.false) ***REMOVED***
    console.log((results.false + " of " + tests.length*2 + " tests failed").red);
    var exit = new Error("Test failed") ;
    exit.stack = "" ;
    throw exit ;
***REMOVED***
