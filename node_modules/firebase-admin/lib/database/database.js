/*! firebase-admin v5.8.2 */
"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var error_1 = require("../utils/error");
var validator = require("../utils/validator");
/**
 * Internals of a Database instance.
 */
var DatabaseInternals = /** @class */ (function () ***REMOVED***
    function DatabaseInternals() ***REMOVED***
        this.databases = ***REMOVED******REMOVED***;
    ***REMOVED***
    /**
     * Deletes the service and its associated resources.
     *
     * @return ***REMOVED***Promise<()>***REMOVED*** An empty Promise that will be fulfilled when the service is deleted.
     */
    DatabaseInternals.prototype.delete = function () ***REMOVED***
        for (var _i = 0, _a = Object.keys(this.databases); _i < _a.length; _i++) ***REMOVED***
            var dbUrl = _a[_i];
            var db = this.databases[dbUrl];
            db.INTERNAL.delete();
        ***REMOVED***
        return Promise.resolve(undefined);
    ***REMOVED***;
    return DatabaseInternals;
***REMOVED***());
var DatabaseService = /** @class */ (function () ***REMOVED***
    function DatabaseService(app) ***REMOVED***
        this.INTERNAL = new DatabaseInternals();
        if (!validator.isNonNullObject(app) || !('options' in app)) ***REMOVED***
            throw new error_1.FirebaseDatabaseError(***REMOVED***
                code: 'invalid-argument',
                message: 'First argument passed to admin.database() must be a valid Firebase app instance.',
            ***REMOVED***);
        ***REMOVED***
        this.appInternal = app;
    ***REMOVED***
    Object.defineProperty(DatabaseService.prototype, "app", ***REMOVED***
        /**
         * Returns the app associated with this DatabaseService instance.
         *
         * @return ***REMOVED***FirebaseApp***REMOVED*** The app associated with this DatabaseService instance.
         */
        get: function () ***REMOVED***
            return this.appInternal;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    DatabaseService.prototype.getDatabase = function (url) ***REMOVED***
        var dbUrl = this.ensureUrl(url);
        if (!validator.isNonEmptyString(dbUrl)) ***REMOVED***
            throw new error_1.FirebaseDatabaseError(***REMOVED***
                code: 'invalid-argument',
                message: 'Database URL must be a valid, non-empty URL string.',
            ***REMOVED***);
        ***REMOVED***
        var db = this.INTERNAL.databases[dbUrl];
        if (typeof db === 'undefined') ***REMOVED***
            var rtdb = require('@firebase/database');
            db = rtdb.initStandalone(this.appInternal, dbUrl).instance;
            this.INTERNAL.databases[dbUrl] = db;
        ***REMOVED***
        return db;
    ***REMOVED***;
    DatabaseService.prototype.ensureUrl = function (url) ***REMOVED***
        if (typeof url !== 'undefined') ***REMOVED***
            return url;
        ***REMOVED***
        else if (typeof this.appInternal.options.databaseURL !== 'undefined') ***REMOVED***
            return this.appInternal.options.databaseURL;
        ***REMOVED***
        throw new error_1.FirebaseDatabaseError(***REMOVED***
            code: 'invalid-argument',
            message: 'Can\'t determine Firebase Database URL.',
        ***REMOVED***);
    ***REMOVED***;
    return DatabaseService;
***REMOVED***());
exports.DatabaseService = DatabaseService;
