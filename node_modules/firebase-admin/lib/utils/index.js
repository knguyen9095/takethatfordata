/*! firebase-admin v5.8.2 */
"use strict";
/*!
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var validator = require("./validator");
/**
 * Renames properties on an object given a mapping from old to new property names.
 *
 * For example, this can be used to map underscore_cased properties to camelCase.
 *
 * @param ***REMOVED***Object***REMOVED*** obj The object whose properties to rename.
 * @param ***REMOVED***Object***REMOVED*** keyMap The mapping from old to new property names.
 */
function renameProperties(obj, keyMap) ***REMOVED***
    Object.keys(keyMap).forEach(function (oldKey) ***REMOVED***
        if (oldKey in obj) ***REMOVED***
            var newKey = keyMap[oldKey];
            // The old key's value takes precedence over the new key's value.
            obj[newKey] = obj[oldKey];
            delete obj[oldKey];
        ***REMOVED***
    ***REMOVED***);
***REMOVED***
exports.renameProperties = renameProperties;
/**
 * Defines a new read-only property directly on an object and returns the object.
 *
 * @param ***REMOVED***Object***REMOVED*** obj The object on which to define the property.
 * @param ***REMOVED***string***REMOVED*** prop The name of the property to be defined or modified.
 * @param ***REMOVED***any***REMOVED*** value The value associated with the property.
 *
 * @return ***REMOVED***Object***REMOVED*** The object that was passed to the function.
 */
function addReadonlyGetter(obj, prop, value) ***REMOVED***
    Object.defineProperty(obj, prop, ***REMOVED***
        value: value,
        // Make this property read-only.
        writable: false,
        // Include this property during enumeration of obj's properties.
        enumerable: true,
    ***REMOVED***);
***REMOVED***
exports.addReadonlyGetter = addReadonlyGetter;
/**
 * Determines the Google Cloud project ID associated with a Firebase app by examining
 * the Firebase app options, credentials and the local environment in that order.
 *
 * @param ***REMOVED***FirebaseApp***REMOVED*** app A Firebase app to get the project ID from.
 *
 * @return ***REMOVED***string***REMOVED*** A project ID string or null.
 */
function getProjectId(app) ***REMOVED***
    var options = app.options;
    if (validator.isNonEmptyString(options.projectId)) ***REMOVED***
        return options.projectId;
    ***REMOVED***
    var cert = options.credential.getCertificate();
    if (cert != null && validator.isNonEmptyString(cert.projectId)) ***REMOVED***
        return cert.projectId;
    ***REMOVED***
    var projectId = process.env.GCLOUD_PROJECT;
    if (validator.isNonEmptyString(projectId)) ***REMOVED***
        return projectId;
    ***REMOVED***
    return null;
***REMOVED***
exports.getProjectId = getProjectId;
