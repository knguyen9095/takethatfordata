/*! firebase-admin v5.8.2 */
"use strict";
/*!
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = Object.setPrototypeOf ||
        (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
        function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var deep_copy_1 = require("./deep-copy");
var error_1 = require("./error");
var https = require("https");
/**
 * Base class for handling HTTP requests.
 */
var HttpRequestHandler = /** @class */ (function () ***REMOVED***
    function HttpRequestHandler() ***REMOVED***
    ***REMOVED***
    /**
     * Sends HTTP requests and returns a promise that resolves with the result.
     * Will retry once if the first attempt encounters an AppErrorCodes.NETWORK_ERROR.
     *
     * @param ***REMOVED***string***REMOVED*** host The HTTP host.
     * @param ***REMOVED***number***REMOVED*** port The port number.
     * @param ***REMOVED***string***REMOVED*** path The endpoint path.
     * @param ***REMOVED***HttpMethod***REMOVED*** httpMethod The http method.
     * @param ***REMOVED***Object***REMOVED*** [data] The request JSON.
     * @param ***REMOVED***Object***REMOVED*** [headers] The request headers.
     * @param ***REMOVED***number***REMOVED*** [timeout] The request timeout in milliseconds.
     * @return ***REMOVED***Promise<Object>***REMOVED*** A promise that resolves with the response.
     */
    HttpRequestHandler.prototype.sendRequest = function (host, port, path, httpMethod, data, headers, timeout) ***REMOVED***
        var _this = this;
        // Convenience for calling the real _sendRequest() method with the original params.
        var sendOneRequest = function () ***REMOVED***
            return _this._sendRequest(host, port, path, httpMethod, data, headers, timeout);
        ***REMOVED***;
        return sendOneRequest()
            .catch(function (response) ***REMOVED***
            // Retry if the request failed due to a network error.
            if (response.error instanceof error_1.FirebaseAppError) ***REMOVED***
                if (response.error.hasCode(error_1.AppErrorCodes.NETWORK_ERROR)) ***REMOVED***
                    return sendOneRequest();
                ***REMOVED***
            ***REMOVED***
            return Promise.reject(response);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Sends HTTP requests and returns a promise that resolves with the result.
     *
     * @param ***REMOVED***string***REMOVED*** host The HTTP host.
     * @param ***REMOVED***number***REMOVED*** port The port number.
     * @param ***REMOVED***string***REMOVED*** path The endpoint path.
     * @param ***REMOVED***HttpMethod***REMOVED*** httpMethod The http method.
     * @param ***REMOVED***Object***REMOVED*** [data] The request JSON.
     * @param ***REMOVED***Object***REMOVED*** [headers] The request headers.
     * @param ***REMOVED***number***REMOVED*** [timeout] The request timeout in milliseconds.
     * @return ***REMOVED***Promise<Object>***REMOVED*** A promise that resolves with the response.
     */
    HttpRequestHandler.prototype._sendRequest = function (host, port, path, httpMethod, data, headers, timeout) ***REMOVED***
        var requestData;
        if (data) ***REMOVED***
            try ***REMOVED***
                requestData = JSON.stringify(data);
            ***REMOVED***
            catch (e) ***REMOVED***
                return Promise.reject(e);
            ***REMOVED***
        ***REMOVED***
        var options = ***REMOVED***
            method: httpMethod,
            host: host,
            port: port,
            path: path,
            headers: headers,
        ***REMOVED***;
        // Only https endpoints.
        return new Promise(function (resolve, reject) ***REMOVED***
            var req = https.request(options, function (res) ***REMOVED***
                var buffers = [];
                res.on('data', function (buffer) ***REMOVED*** return buffers.push(buffer); ***REMOVED***);
                res.on('end', function () ***REMOVED***
                    var response = Buffer.concat(buffers).toString();
                    var statusCode = res.statusCode || 200;
                    var responseHeaders = res.headers || ***REMOVED******REMOVED***;
                    var contentType = responseHeaders['content-type'] || 'application/json';
                    if (contentType.indexOf('text/html') !== -1 || contentType.indexOf('text/plain') !== -1) ***REMOVED***
                        // Text response
                        if (statusCode >= 200 && statusCode < 300) ***REMOVED***
                            resolve(response);
                        ***REMOVED***
                        else ***REMOVED***
                            reject(***REMOVED***
                                statusCode: statusCode,
                                error: response,
                            ***REMOVED***);
                        ***REMOVED***
                    ***REMOVED***
                    else ***REMOVED***
                        // JSON response
                        try ***REMOVED***
                            var json = JSON.parse(response);
                            if (statusCode >= 200 && statusCode < 300) ***REMOVED***
                                resolve(json);
                            ***REMOVED***
                            else ***REMOVED***
                                reject(***REMOVED***
                                    statusCode: statusCode,
                                    error: json,
                                ***REMOVED***);
                            ***REMOVED***
                        ***REMOVED***
                        catch (error) ***REMOVED***
                            var parsingError = new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, "Failed to parse response data: \"" + error.toString() + "\". Raw server" +
                                ("response: \"" + response + "\". Status code: \"" + res.statusCode + "\". Outgoing ") +
                                ("request: \"" + options.method + " " + options.host + options.path + "\""));
                            reject(***REMOVED***
                                statusCode: statusCode,
                                error: parsingError,
                            ***REMOVED***);
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***);
            if (timeout) ***REMOVED***
                // Listen to timeouts and throw a network error.
                req.on('socket', function (socket) ***REMOVED***
                    socket.setTimeout(timeout);
                    socket.on('timeout', function () ***REMOVED***
                        req.abort();
                        var networkTimeoutError = new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, host + " network timeout. Please try again.");
                        reject(***REMOVED***
                            statusCode: 408,
                            error: networkTimeoutError,
                        ***REMOVED***);
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED***
            req.on('error', function (error) ***REMOVED***
                var networkRequestError = new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, "A network request error has occurred: " + (error && error.message));
                reject(***REMOVED***
                    statusCode: 502,
                    error: networkRequestError,
                ***REMOVED***);
            ***REMOVED***);
            if (requestData) ***REMOVED***
                req.write(requestData);
            ***REMOVED***
            req.end();
        ***REMOVED***);
    ***REMOVED***;
    return HttpRequestHandler;
***REMOVED***());
exports.HttpRequestHandler = HttpRequestHandler;
/**
 * Class that extends HttpRequestHandler and signs HTTP requests with a service
 * credential access token.
 *
 * @param ***REMOVED***Credential***REMOVED*** credential The service account credential used to
 *     sign HTTP requests.
 * @constructor
 */
var SignedApiRequestHandler = /** @class */ (function (_super) ***REMOVED***
    __extends(SignedApiRequestHandler, _super);
    function SignedApiRequestHandler(app_) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.app_ = app_;
        return _this;
    ***REMOVED***
    /**
     * Sends HTTP requests and returns a promise that resolves with the result.
     *
     * @param ***REMOVED***string***REMOVED*** host The HTTP host.
     * @param ***REMOVED***number***REMOVED*** port The port number.
     * @param ***REMOVED***string***REMOVED*** path The endpoint path.
     * @param ***REMOVED***HttpMethod***REMOVED*** httpMethod The http method.
     * @param ***REMOVED***Object***REMOVED*** data The request JSON.
     * @param ***REMOVED***Object***REMOVED*** headers The request headers.
     * @param ***REMOVED***number***REMOVED*** timeout The request timeout in milliseconds.
     * @return ***REMOVED***Promise***REMOVED*** A promise that resolves with the response.
     */
    SignedApiRequestHandler.prototype.sendRequest = function (host, port, path, httpMethod, data, headers, timeout) ***REMOVED***
        var _this = this;
        return this.app_.INTERNAL.getToken().then(function (accessTokenObj) ***REMOVED***
            var headersCopy = (headers && deep_copy_1.deepCopy(headers)) || ***REMOVED******REMOVED***;
            var authorizationHeaderKey = 'Authorization';
            headersCopy[authorizationHeaderKey] = 'Bearer ' + accessTokenObj.accessToken;
            return _super.prototype.sendRequest.call(_this, host, port, path, httpMethod, data, headersCopy, timeout);
        ***REMOVED***);
    ***REMOVED***;
    return SignedApiRequestHandler;
***REMOVED***(HttpRequestHandler));
exports.SignedApiRequestHandler = SignedApiRequestHandler;
/**
 * Class that defines all the settings for the backend API endpoint.
 *
 * @param ***REMOVED***string***REMOVED*** endpoint The Firebase Auth backend endpoint.
 * @param ***REMOVED***HttpMethod***REMOVED*** httpMethod The http method for that endpoint.
 * @constructor
 */
var ApiSettings = /** @class */ (function () ***REMOVED***
    function ApiSettings(endpoint, httpMethod) ***REMOVED***
        if (httpMethod === void 0) ***REMOVED*** httpMethod = 'POST'; ***REMOVED***
        this.endpoint = endpoint;
        this.httpMethod = httpMethod;
        this.setRequestValidator(null)
            .setResponseValidator(null);
    ***REMOVED***
    /** @return ***REMOVED***string***REMOVED*** The backend API endpoint. */
    ApiSettings.prototype.getEndpoint = function () ***REMOVED***
        return this.endpoint;
    ***REMOVED***;
    /** @return ***REMOVED***HttpMethod***REMOVED*** The request HTTP method. */
    ApiSettings.prototype.getHttpMethod = function () ***REMOVED***
        return this.httpMethod;
    ***REMOVED***;
    /**
     * @param ***REMOVED***ApiCallbackFunction***REMOVED*** requestValidator The request validator.
     * @return ***REMOVED***ApiSettings***REMOVED*** The current API settings instance.
     */
    ApiSettings.prototype.setRequestValidator = function (requestValidator) ***REMOVED***
        var nullFunction = function (request) ***REMOVED*** return undefined; ***REMOVED***;
        this.requestValidator = requestValidator || nullFunction;
        return this;
    ***REMOVED***;
    /** @return ***REMOVED***ApiCallbackFunction***REMOVED*** The request validator. */
    ApiSettings.prototype.getRequestValidator = function () ***REMOVED***
        return this.requestValidator;
    ***REMOVED***;
    /**
     * @param ***REMOVED***ApiCallbackFunction***REMOVED*** responseValidator The response validator.
     * @return ***REMOVED***ApiSettings***REMOVED*** The current API settings instance.
     */
    ApiSettings.prototype.setResponseValidator = function (responseValidator) ***REMOVED***
        var nullFunction = function (request) ***REMOVED*** return undefined; ***REMOVED***;
        this.responseValidator = responseValidator || nullFunction;
        return this;
    ***REMOVED***;
    /** @return ***REMOVED***ApiCallbackFunction***REMOVED*** The response validator. */
    ApiSettings.prototype.getResponseValidator = function () ***REMOVED***
        return this.responseValidator;
    ***REMOVED***;
    return ApiSettings;
***REMOVED***());
exports.ApiSettings = ApiSettings;
