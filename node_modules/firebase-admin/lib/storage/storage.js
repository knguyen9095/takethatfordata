/*! firebase-admin v5.8.2 */
"use strict";
/*!
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var error_1 = require("../utils/error");
var credential_1 = require("../auth/credential");
var validator = require("../utils/validator");
/**
 * Internals of a Storage instance.
 */
var StorageInternals = /** @class */ (function () ***REMOVED***
    function StorageInternals() ***REMOVED***
    ***REMOVED***
    /**
     * Deletes the service and its associated resources.
     *
     * @return ***REMOVED***Promise<()>***REMOVED*** An empty Promise that will be fulfilled when the service is deleted.
     */
    StorageInternals.prototype.delete = function () ***REMOVED***
        // There are no resources to clean up.
        return Promise.resolve();
    ***REMOVED***;
    return StorageInternals;
***REMOVED***());
/**
 * Storage service bound to the provided app.
 */
var Storage = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***FirebaseApp***REMOVED*** app The app for this Storage service.
     * @constructor
     */
    function Storage(app) ***REMOVED***
        this.INTERNAL = new StorageInternals();
        if (!validator.isNonNullObject(app) || !('options' in app)) ***REMOVED***
            throw new error_1.FirebaseError(***REMOVED***
                code: 'storage/invalid-argument',
                message: 'First argument passed to admin.storage() must be a valid Firebase app instance.',
            ***REMOVED***);
        ***REMOVED***
        var storage;
        try ***REMOVED***
            /* tslint:disable-next-line:no-var-requires */
            storage = require('@google-cloud/storage');
        ***REMOVED***
        catch (e) ***REMOVED***
            throw new error_1.FirebaseError(***REMOVED***
                code: 'storage/missing-dependencies',
                message: 'Failed to import the Cloud Storage client library for Node.js. '
                    + 'Make sure to install the "@google-cloud/storage" npm package.',
            ***REMOVED***);
        ***REMOVED***
        var cert = app.options.credential.getCertificate();
        if (cert != null) ***REMOVED***
            // cert is available when the SDK has been initialized with a service account JSON file,
            // or by setting the GOOGLE_APPLICATION_CREDENTIALS envrionment variable.
            this.storageClient = storage(***REMOVED***
                credentials: ***REMOVED***
                    private_key: cert.privateKey,
                    client_email: cert.clientEmail,
                ***REMOVED***,
            ***REMOVED***);
        ***REMOVED***
        else if (app.options.credential instanceof credential_1.ApplicationDefaultCredential) ***REMOVED***
            // Try to use the Google application default credentials.
            this.storageClient = storage();
        ***REMOVED***
        else ***REMOVED***
            throw new error_1.FirebaseError(***REMOVED***
                code: 'storage/invalid-credential',
                message: 'Failed to initialize Google Cloud Storage client with the available credential. ' +
                    'Must initialize the SDK with a certificate credential or application default credentials ' +
                    'to use Cloud Storage API.',
            ***REMOVED***);
        ***REMOVED***
        this.appInternal = app;
    ***REMOVED***
    /**
     * Returns a reference to a Google Cloud Storage bucket. Returned reference can be used to upload
     * and download content from Google Cloud Storage.
     *
     * @param ***REMOVED***string=***REMOVED*** name Optional name of the bucket to be retrieved. If name is not specified,
     *   retrieves a reference to the default bucket.
     * @return ***REMOVED***Bucket***REMOVED*** A Bucket object from the @google-cloud/storage library.
     */
    Storage.prototype.bucket = function (name) ***REMOVED***
        var bucketName;
        if (typeof name !== 'undefined') ***REMOVED***
            bucketName = name;
        ***REMOVED***
        else ***REMOVED***
            bucketName = this.appInternal.options.storageBucket;
        ***REMOVED***
        if (validator.isNonEmptyString(bucketName)) ***REMOVED***
            return this.storageClient.bucket(bucketName);
        ***REMOVED***
        throw new error_1.FirebaseError(***REMOVED***
            code: 'storage/invalid-argument',
            message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' +
                'storageBucket option when initializing the app, or specify the bucket name ' +
                'explicitly when calling the getBucket() method.',
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(Storage.prototype, "app", ***REMOVED***
        /**
         * Returns the app associated with this Storage instance.
         *
         * @return ***REMOVED***FirebaseApp***REMOVED*** The app associated with this Storage instance.
         */
        get: function () ***REMOVED***
            return this.appInternal;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    return Storage;
***REMOVED***());
exports.Storage = Storage;
;
