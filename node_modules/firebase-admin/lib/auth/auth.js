/*! firebase-admin v5.8.2 */
"use strict";
/*!
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var user_record_1 = require("./user-record");
var token_generator_1 = require("./token-generator");
var auth_api_request_1 = require("./auth-api-request");
var error_1 = require("../utils/error");
var validator = require("../utils/validator");
/**
 * Internals of an Auth instance.
 */
var AuthInternals = /** @class */ (function () ***REMOVED***
    function AuthInternals() ***REMOVED***
    ***REMOVED***
    /**
     * Deletes the service and its associated resources.
     *
     * @return ***REMOVED***Promise<()>***REMOVED*** An empty Promise that will be fulfilled when the service is deleted.
     */
    AuthInternals.prototype.delete = function () ***REMOVED***
        // There are no resources to clean up
        return Promise.resolve(undefined);
    ***REMOVED***;
    return AuthInternals;
***REMOVED***());
/**
 * Auth service bound to the provided app.
 */
var Auth = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***Object***REMOVED*** app The app for this Auth service.
     * @constructor
     */
    function Auth(app) ***REMOVED***
        this.INTERNAL = new AuthInternals();
        if (typeof app !== 'object' || app === null || !('options' in app)) ***REMOVED***
            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.auth() must be a valid Firebase app instance.');
        ***REMOVED***
        this.app_ = app;
        // TODO (inlined): plumb this into a factory method for tokenGenerator_ once we
        // can generate custom tokens from access tokens.
        var serviceAccount;
        if (typeof app.options.credential.getCertificate === 'function') ***REMOVED***
            serviceAccount = app.options.credential.getCertificate();
        ***REMOVED***
        if (serviceAccount) ***REMOVED***
            // Cert credentials and Application Default Credentials created from a service account file
            // provide a certificate we can use to mint custom tokens and verify ID tokens.
            this.tokenGenerator_ = new token_generator_1.FirebaseTokenGenerator(serviceAccount);
        ***REMOVED***
        else if (validator.isNonEmptyString(process.env.GCLOUD_PROJECT)) ***REMOVED***
            // Google infrastructure like GAE, GCE, and GCF store the GCP / Firebase project ID in an
            // environment variable that we can use to get verifyIdToken() to work. createCustomToken()
            // still won't work since it requires a private key and client email which we do not have.
            this.tokenGenerator_ = new token_generator_1.FirebaseTokenGenerator(***REMOVED***
                projectId: process.env.GCLOUD_PROJECT,
            ***REMOVED***);
        ***REMOVED***
        // Initialize auth request handler with the app.
        this.authRequestHandler = new auth_api_request_1.FirebaseAuthRequestHandler(app);
    ***REMOVED***
    Object.defineProperty(Auth.prototype, "app", ***REMOVED***
        /**
         * Returns the app associated with this Auth instance.
         *
         * @return ***REMOVED***FirebaseApp***REMOVED*** The app associated with this Auth instance.
         */
        get: function () ***REMOVED***
            return this.app_;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    /**
     * Creates a new custom token that can be sent back to a client to use with
     * signInWithCustomToken().
     *
     * @param ***REMOVED***string***REMOVED*** uid The uid to use as the JWT subject.
     * @param ***REMOVED***Object=***REMOVED*** developerClaims Optional additional claims to include in the JWT payload.
     *
     * @return ***REMOVED***Promise<string>***REMOVED*** A JWT for the provided payload.
     */
    Auth.prototype.createCustomToken = function (uid, developerClaims) ***REMOVED***
        if (typeof this.tokenGenerator_ === 'undefined') ***REMOVED***
            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential to call auth().createCustomToken().');
        ***REMOVED***
        return this.tokenGenerator_.createCustomToken(uid, developerClaims);
    ***REMOVED***;
    ;
    /**
     * Verifies a JWT auth token. Returns a Promise with the tokens claims. Rejects
     * the promise if the token could not be verified. If checkRevoked is set to true,
     * verifies if the session corresponding to the ID token was revoked. If the corresponding
     * user's session was invalidated, an auth/id-token-revoked error is thrown. If not specified
     * the check is not applied.
     *
     * @param ***REMOVED***string***REMOVED*** idToken The JWT to verify.
     * @param ***REMOVED***boolean=***REMOVED*** checkRevoked Whether to check if the ID token is revoked.
     * @return ***REMOVED***Promise<DecodedIdToken>***REMOVED*** A Promise that will be fulfilled after a successful
     *     verification.
     */
    Auth.prototype.verifyIdToken = function (idToken, checkRevoked) ***REMOVED***
        var _this = this;
        if (checkRevoked === void 0) ***REMOVED*** checkRevoked = false; ***REMOVED***
        if (typeof this.tokenGenerator_ === 'undefined') ***REMOVED***
            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential or set your Firebase project ID as the ' +
                'GCLOUD_PROJECT environment variable to call auth().verifyIdToken().');
        ***REMOVED***
        return this.tokenGenerator_.verifyIdToken(idToken)
            .then(function (decodedIdToken) ***REMOVED***
            // Whether to check if the token was revoked.
            if (!checkRevoked) ***REMOVED***
                return decodedIdToken;
            ***REMOVED***
            // Get tokens valid after time for the corresponding user.
            return _this.getUser(decodedIdToken.sub)
                .then(function (user) ***REMOVED***
                // If no tokens valid after time available, token is not revoked.
                if (user.tokensValidAfterTime) ***REMOVED***
                    // Get the ID token authentication time and convert to milliseconds UTC.
                    var authTimeUtc = decodedIdToken.auth_time * 1000;
                    // Get user tokens valid after time in milliseconds UTC.
                    var validSinceUtc = new Date(user.tokensValidAfterTime).getTime();
                    // Check if authentication time is older than valid since time.
                    if (authTimeUtc < validSinceUtc) ***REMOVED***
                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.ID_TOKEN_REVOKED);
                    ***REMOVED***
                ***REMOVED***
                // All checks above passed. Return the decoded token.
                return decodedIdToken;
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Looks up the user identified by the provided user id and returns a promise that is
     * fulfilled with a user record for the given user if that user is found.
     *
     * @param ***REMOVED***string***REMOVED*** uid The uid of the user to look up.
     * @return ***REMOVED***Promise<UserRecord>***REMOVED*** A promise that resolves with the corresponding user record.
     */
    Auth.prototype.getUser = function (uid) ***REMOVED***
        return this.authRequestHandler.getAccountInfoByUid(uid)
            .then(function (response) ***REMOVED***
            // Returns the user record populated with server response.
            return new user_record_1.UserRecord(response.users[0]);
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Looks up the user identified by the provided email and returns a promise that is
     * fulfilled with a user record for the given user if that user is found.
     *
     * @param ***REMOVED***string***REMOVED*** email The email of the user to look up.
     * @return ***REMOVED***Promise<UserRecord>***REMOVED*** A promise that resolves with the corresponding user record.
     */
    Auth.prototype.getUserByEmail = function (email) ***REMOVED***
        return this.authRequestHandler.getAccountInfoByEmail(email)
            .then(function (response) ***REMOVED***
            // Returns the user record populated with server response.
            return new user_record_1.UserRecord(response.users[0]);
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Looks up the user identified by the provided phone number and returns a promise that is
     * fulfilled with a user record for the given user if that user is found.
     *
     * @param ***REMOVED***string***REMOVED*** phoneNumber The phone number of the user to look up.
     * @return ***REMOVED***Promise<UserRecord>***REMOVED*** A promise that resolves with the corresponding user record.
     */
    Auth.prototype.getUserByPhoneNumber = function (phoneNumber) ***REMOVED***
        return this.authRequestHandler.getAccountInfoByPhoneNumber(phoneNumber)
            .then(function (response) ***REMOVED***
            // Returns the user record populated with server response.
            return new user_record_1.UserRecord(response.users[0]);
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Exports a batch of user accounts. Batch size is determined by the maxResults argument.
     * Starting point of the batch is determined by the pageToken argument.
     *
     * @param ***REMOVED***number=***REMOVED*** maxResults The page size, 1000 if undefined. This is also the maximum
     *     allowed limit.
     * @param ***REMOVED***string=***REMOVED*** pageToken The next page token. If not specified, returns users starting
     *     without any offset.
     * @return ***REMOVED***Promise<***REMOVED***users: UserRecord[], pageToken?: string***REMOVED***>***REMOVED*** A promise that resolves with
     *     the current batch of downloaded users and the next page token. For the last page, an
     *     empty list of users and no page token are returned.
     */
    Auth.prototype.listUsers = function (maxResults, pageToken) ***REMOVED***
        return this.authRequestHandler.downloadAccount(maxResults, pageToken)
            .then(function (response) ***REMOVED***
            // List of users to return.
            var users = [];
            // Convert each user response to a UserRecord.
            response.users.forEach(function (userResponse) ***REMOVED***
                users.push(new user_record_1.UserRecord(userResponse));
            ***REMOVED***);
            // Return list of user records and the next page token if available.
            var result = ***REMOVED***
                users: users,
                pageToken: response.nextPageToken,
            ***REMOVED***;
            // Delete result.pageToken if undefined.
            if (typeof result.pageToken === 'undefined') ***REMOVED***
                delete result.pageToken;
            ***REMOVED***
            return result;
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Creates a new user with the properties provided.
     *
     * @param ***REMOVED***CreateRequest***REMOVED*** properties The properties to set on the new user record to be created.
     * @return ***REMOVED***Promise<UserRecord>***REMOVED*** A promise that resolves with the newly created user record.
     */
    Auth.prototype.createUser = function (properties) ***REMOVED***
        var _this = this;
        return this.authRequestHandler.createNewAccount(properties)
            .then(function (uid) ***REMOVED***
            // Return the corresponding user record.
            return _this.getUser(uid);
        ***REMOVED***)
            .catch(function (error) ***REMOVED***
            if (error.code === 'auth/user-not-found') ***REMOVED***
                // Something must have happened after creating the user and then retrieving it.
                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Unable to create the user record provided.');
            ***REMOVED***
            throw error;
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Deletes the user identified by the provided user id and returns a promise that is
     * fulfilled when the user is found and successfully deleted.
     *
     * @param ***REMOVED***string***REMOVED*** uid The uid of the user to delete.
     * @return ***REMOVED***Promise<void>***REMOVED*** A promise that resolves when the user is successfully deleted.
     */
    Auth.prototype.deleteUser = function (uid) ***REMOVED***
        return this.authRequestHandler.deleteAccount(uid)
            .then(function (response) ***REMOVED***
            // Return nothing on success.
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Updates an existing user with the properties provided.
     *
     * @param ***REMOVED***string***REMOVED*** uid The uid identifier of the user to update.
     * @param ***REMOVED***UpdateRequest***REMOVED*** properties The properties to update on the existing user.
     * @return ***REMOVED***Promise<UserRecord>***REMOVED*** A promise that resolves with the modified user record.
     */
    Auth.prototype.updateUser = function (uid, properties) ***REMOVED***
        var _this = this;
        return this.authRequestHandler.updateExistingAccount(uid, properties)
            .then(function (existingUid) ***REMOVED***
            // Return the corresponding user record.
            return _this.getUser(existingUid);
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Sets additional developer claims on an existing user identified by the provided UID.
     *
     * @param ***REMOVED***string***REMOVED*** uid The user to edit.
     * @param ***REMOVED***Object***REMOVED*** customUserClaims The developer claims to set.
     * @return ***REMOVED***Promise<void>***REMOVED*** A promise that resolves when the operation completes
     *     successfully.
     */
    Auth.prototype.setCustomUserClaims = function (uid, customUserClaims) ***REMOVED***
        return this.authRequestHandler.setCustomUserClaims(uid, customUserClaims)
            .then(function (existingUid) ***REMOVED***
            // Return nothing on success.
        ***REMOVED***);
    ***REMOVED***;
    ;
    /**
     * Revokes all refresh tokens for the specified user identified by the provided UID.
     * In addition to revoking all refresh tokens for a user, all ID tokens issued before
     * revocation will also be revoked on the Auth backend. Any request with an ID token
     * generated before revocation will be rejected with a token expired error.
     *
     * @param ***REMOVED***string***REMOVED*** uid The user whose tokens are to be revoked.
     * @return ***REMOVED***Promise<void>***REMOVED*** A promise that resolves when the operation completes
     *     successfully.
     */
    Auth.prototype.revokeRefreshTokens = function (uid) ***REMOVED***
        return this.authRequestHandler.revokeRefreshTokens(uid)
            .then(function (existingUid) ***REMOVED***
            // Return nothing on success.
        ***REMOVED***);
    ***REMOVED***;
    ;
    return Auth;
***REMOVED***());
exports.Auth = Auth;
;
