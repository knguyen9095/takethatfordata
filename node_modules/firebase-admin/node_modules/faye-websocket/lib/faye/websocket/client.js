var util   = require('util'),
    net    = require('net'),
    tls    = require('tls'),
    crypto = require('crypto'),
    url    = require('url'),
    driver = require('websocket-driver'),
    API    = require('./api'),
    Event  = require('./api/event');

var DEFAULT_PORTS    = ***REMOVED***'http:': 80, 'https:': 443, 'ws:':80, 'wss:': 443***REMOVED***,
    SECURE_PROTOCOLS = ['https:', 'wss:'];

var Client = function(_url, protocols, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  this.url     = _url;
  this._driver = driver.client(this.url, ***REMOVED***maxLength: options.maxLength, protocols: protocols***REMOVED***);

  ['open', 'error'].forEach(function(event) ***REMOVED***
    this._driver.on(event, function() ***REMOVED***
      self.headers    = self._driver.headers;
      self.statusCode = self._driver.statusCode;
    ***REMOVED***);
  ***REMOVED***, this);

  var proxy     = options.proxy || ***REMOVED******REMOVED***,
      endpoint  = url.parse(proxy.origin || this.url),
      port      = endpoint.port || DEFAULT_PORTS[endpoint.protocol],
      secure    = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0,
      onConnect = function() ***REMOVED*** self._onConnect() ***REMOVED***,
      originTLS = options.tls || ***REMOVED******REMOVED***,
      socketTLS = proxy.origin ? (proxy.tls || ***REMOVED******REMOVED***) : originTLS,
      self      = this;

  originTLS.ca = originTLS.ca || options.ca;

  this._stream = secure
               ? tls.connect(port, endpoint.hostname, socketTLS, onConnect)
               : net.connect(port, endpoint.hostname, onConnect);

  if (proxy.origin) this._configureProxy(proxy, originTLS);

  API.call(this, options);
***REMOVED***;
util.inherits(Client, API);

Client.prototype._onConnect = function() ***REMOVED***
  var worker = this._proxy || this._driver;
  worker.start();
***REMOVED***;

Client.prototype._configureProxy = function(proxy, originTLS) ***REMOVED***
  var uri    = url.parse(this.url),
      secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0,
      self   = this,
      name;

  this._proxy = this._driver.proxy(proxy.origin);

  if (proxy.headers) ***REMOVED***
    for (name in proxy.headers) this._proxy.setHeader(name, proxy.headers[name]);
  ***REMOVED***

  this._proxy.pipe(this._stream, ***REMOVED***end: false***REMOVED***);
  this._stream.pipe(this._proxy);

  this._proxy.on('connect', function() ***REMOVED***
    if (secure) ***REMOVED***
      var options = ***REMOVED***socket: self._stream, servername: uri.hostname***REMOVED***;
      for (name in originTLS) options[name] = originTLS[name];
      self._stream = tls.connect(options);
      self._configureStream();
    ***REMOVED***
    self._driver.io.pipe(self._stream);
    self._stream.pipe(self._driver.io);
    self._driver.start();
  ***REMOVED***);

  this._proxy.on('error', function(error) ***REMOVED***
    self._driver.emit('error', error);
  ***REMOVED***);
***REMOVED***;

module.exports = Client;
