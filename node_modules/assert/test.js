// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var nodeAssert = require('assert');
var ourAssert = require('./');
var keys = Object.keys;
if (process.env.TEST_NATIVE === true) ***REMOVED***
  tests(nodeAssert, 'node assert');
***REMOVED*** else ***REMOVED***
  tests(ourAssert, 'our assert');
***REMOVED***

function makeBlock(f) ***REMOVED***
  var args = Array.prototype.slice.call(arguments, 1);
  return function() ***REMOVED***
    return f.apply(this, args);
  ***REMOVED***;
***REMOVED***

function tests (assert, what) ***REMOVED***
    test('assert.ok', function () ***REMOVED***
      assert.throws(makeBlock(assert, false), assert.AssertionError, 'ok(false)');

      assert.doesNotThrow(makeBlock(assert, true), assert.AssertionError, 'ok(true)');

      assert.doesNotThrow(makeBlock(assert, 'test', 'ok(\'test\')'));

      assert.throws(makeBlock(assert.ok, false),
                    assert.AssertionError, 'ok(false)');

      assert.doesNotThrow(makeBlock(assert.ok, true),
                          assert.AssertionError, 'ok(true)');

      assert.doesNotThrow(makeBlock(assert.ok, 'test'), 'ok(\'test\')');
    ***REMOVED***);

    test('assert.equal', function () ***REMOVED***
      assert.throws(makeBlock(assert.equal, true, false), assert.AssertionError, 'equal');

      assert.doesNotThrow(makeBlock(assert.equal, null, null), 'equal');

      assert.doesNotThrow(makeBlock(assert.equal, undefined, undefined), 'equal');

      assert.doesNotThrow(makeBlock(assert.equal, null, undefined), 'equal');

      assert.doesNotThrow(makeBlock(assert.equal, true, true), 'equal');

      assert.doesNotThrow(makeBlock(assert.equal, 2, '2'), 'equal');

      assert.doesNotThrow(makeBlock(assert.notEqual, true, false), 'notEqual');

      assert.throws(makeBlock(assert.notEqual, true, true),
                    assert.AssertionError, 'notEqual');
    ***REMOVED***);

    test('assert.strictEqual', function () ***REMOVED***
      assert.throws(makeBlock(assert.strictEqual, 2, '2'),
                    assert.AssertionError, 'strictEqual');

      assert.throws(makeBlock(assert.strictEqual, null, undefined),
                    assert.AssertionError, 'strictEqual');

      assert.doesNotThrow(makeBlock(assert.notStrictEqual, 2, '2'), 'notStrictEqual');
    ***REMOVED***);

    test('assert.deepStrictEqual', function () ***REMOVED***
      assert.throws(makeBlock(assert.deepStrictEqual, [2], ['2']),
                    assert.AssertionError, 'deepStrictEqual');

      assert.throws(makeBlock(assert.deepStrictEqual, [null], [undefined]),
                    assert.AssertionError, 'deepStrictEqual');

      assert.doesNotThrow(makeBlock(assert.notDeepStrictEqual, [2], ['2']), 'notDeepStrictEqual');
    ***REMOVED***);

    test('assert.deepEqual - 7.2', function () ***REMOVED***
      assert.doesNotThrow(makeBlock(assert.deepEqual, new Date(2000, 3, 14),
                          new Date(2000, 3, 14)), 'deepEqual date');

      assert.throws(makeBlock(assert.deepEqual, new Date(), new Date(2000, 3, 14)),
                    assert.AssertionError,
                    'deepEqual date');
    ***REMOVED***);

    test('assert.deepEqual - 7.3', function () ***REMOVED***
      assert.doesNotThrow(makeBlock(assert.deepEqual, /a/, /a/));
      assert.doesNotThrow(makeBlock(assert.deepEqual, /a/g, /a/g));
      assert.doesNotThrow(makeBlock(assert.deepEqual, /a/i, /a/i));
      assert.doesNotThrow(makeBlock(assert.deepEqual, /a/m, /a/m));
      assert.doesNotThrow(makeBlock(assert.deepEqual, /a/igm, /a/igm));
      assert.throws(makeBlock(assert.deepEqual, /ab/, /a/));
      assert.throws(makeBlock(assert.deepEqual, /a/g, /a/));
      assert.throws(makeBlock(assert.deepEqual, /a/i, /a/));
      assert.throws(makeBlock(assert.deepEqual, /a/m, /a/));
      assert.throws(makeBlock(assert.deepEqual, /a/igm, /a/im));

      var re1 = /a/;
      re1.lastIndex = 3;
      assert.throws(makeBlock(assert.deepEqual, re1, /a/));
    ***REMOVED***);

    test('assert.deepEqual - 7.4', function () ***REMOVED***
      assert.doesNotThrow(makeBlock(assert.deepEqual, 4, '4'), 'deepEqual == check');
      assert.doesNotThrow(makeBlock(assert.deepEqual, true, 1), 'deepEqual == check');
      assert.throws(makeBlock(assert.deepEqual, 4, '5'),
                assert.AssertionError,
                'deepEqual == check');
    ***REMOVED***);

    test('assert.deepEqual - 7.5', function () ***REMOVED***
      // having the same number of owned properties && the same set of keys
      assert.doesNotThrow(makeBlock(assert.deepEqual, ***REMOVED***a: 4***REMOVED***, ***REMOVED***a: 4***REMOVED***));
      assert.doesNotThrow(makeBlock(assert.deepEqual, ***REMOVED***a: 4, b: '2'***REMOVED***, ***REMOVED***a: 4, b: '2'***REMOVED***));
      assert.doesNotThrow(makeBlock(assert.deepEqual, [4], ['4']));
      assert.throws(makeBlock(assert.deepEqual, ***REMOVED***a: 4***REMOVED***, ***REMOVED***a: 4, b: true***REMOVED***),
                assert.AssertionError);
      assert.doesNotThrow(makeBlock(assert.deepEqual, ['a'], ***REMOVED***0: 'a'***REMOVED***));
      //(although not necessarily the same order),
      assert.doesNotThrow(makeBlock(assert.deepEqual, ***REMOVED***a: 4, b: '1'***REMOVED***, ***REMOVED***b: '1', a: 4***REMOVED***));
      var a1 = [1, 2, 3];
      var a2 = [1, 2, 3];
      a1.a = 'test';
      a1.b = true;
      a2.b = true;
      a2.a = 'test';
      assert.throws(makeBlock(assert.deepEqual, keys(a1), keys(a2)),
                assert.AssertionError);
      assert.doesNotThrow(makeBlock(assert.deepEqual, a1, a2));
    ***REMOVED***);

    test('assert.deepEqual - ES6 primitives', function () ***REMOVED***
      assert.throws(makeBlock(assert.deepEqual, null, ***REMOVED******REMOVED***), assert.AssertionError);
      assert.throws(makeBlock(assert.deepEqual, undefined, ***REMOVED******REMOVED***), assert.AssertionError);
      assert.throws(makeBlock(assert.deepEqual, 'a', ['a']), assert.AssertionError);
      assert.throws(makeBlock(assert.deepEqual, 'a', ***REMOVED***0: 'a'***REMOVED***), assert.AssertionError);
      assert.throws(makeBlock(assert.deepEqual, 1, ***REMOVED******REMOVED***), assert.AssertionError);
      assert.throws(makeBlock(assert.deepEqual, true, ***REMOVED******REMOVED***), assert.AssertionError);
      if (typeof Symbol === 'symbol') ***REMOVED***
        assert.throws(makeBlock(assert.deepEqual, Symbol(), ***REMOVED******REMOVED***), assert.AssertionError);
      ***REMOVED***
    ***REMOVED***);

    test('assert.deepEqual - object wrappers', function () ***REMOVED***
      assert.doesNotThrow(makeBlock(assert.deepEqual, new String('a'), ['a']));
      assert.doesNotThrow(makeBlock(assert.deepEqual, new String('a'), ***REMOVED***0: 'a'***REMOVED***));
      assert.doesNotThrow(makeBlock(assert.deepEqual, new Number(1), ***REMOVED******REMOVED***));
      assert.doesNotThrow(makeBlock(assert.deepEqual, new Boolean(true), ***REMOVED******REMOVED***));
    ***REMOVED***);

    test('assert.deepEqual - Buffers', function () ***REMOVED***
      assert.doesNotThrow(makeBlock(assert.deepEqual, new Buffer([1, 2, 3]), new Buffer([1, 2, 3])));
      if (typeof global.Uint8Array === 'function') ***REMOVED***
        assert.throws(makeBlock(assert.deepEqual, new Buffer([1, 2, 3]), new Uint8Array([1, 2, 3])));
      ***REMOVED***
      if (typeof global.Uint16Array === 'function') ***REMOVED***
        assert.doesNotThrow(makeBlock(assert.deepEqual, new Uint16Array([1, 2, 3]), new Uint16Array([1, 2, 3])));
      ***REMOVED***
    ***REMOVED***);

    function thrower(errorConstructor) ***REMOVED***
      throw new errorConstructor('test');
    ***REMOVED***

    test('assert - Testing the throwing', function () ***REMOVED***
      var aethrow = makeBlock(thrower, assert.AssertionError);
      aethrow = makeBlock(thrower, assert.AssertionError);

      // the basic calls work
      assert.throws(makeBlock(thrower, assert.AssertionError),
                    assert.AssertionError, 'message');
      assert.throws(makeBlock(thrower, assert.AssertionError), assert.AssertionError);
      assert.throws(makeBlock(thrower, assert.AssertionError));

      // if not passing an error, catch all.
      assert.throws(makeBlock(thrower, TypeError));

      // when passing a type, only catch errors of the appropriate type
      var threw = false;
      try ***REMOVED***
        assert.throws(makeBlock(thrower, TypeError), assert.AssertionError);
      ***REMOVED*** catch (e) ***REMOVED***
        threw = true;
        assert.ok(e instanceof TypeError, 'type');
      ***REMOVED***
      assert.equal(true, threw,
                   'a.throws with an explicit error is eating extra errors',
                   assert.AssertionError);
      threw = false;

      // doesNotThrow should pass through all errors
      try ***REMOVED***
        assert.doesNotThrow(makeBlock(thrower, TypeError), assert.AssertionError);
      ***REMOVED*** catch (e) ***REMOVED***
        threw = true;
        assert.ok(e instanceof TypeError);
      ***REMOVED***
      assert.equal(true, threw,
                   'a.doesNotThrow with an explicit error is eating extra errors');

      // key difference is that throwing our correct error makes an assertion error
      try ***REMOVED***
        assert.doesNotThrow(makeBlock(thrower, TypeError), TypeError);
      ***REMOVED*** catch (e) ***REMOVED***
        threw = true;
        assert.ok(e instanceof assert.AssertionError);
      ***REMOVED***
      assert.equal(true, threw,
                   'a.doesNotThrow is not catching type matching errors');
    ***REMOVED***);

    test('assert.ifError', function () ***REMOVED***
      assert.throws(function() ***REMOVED***assert.ifError(new Error('test error'))***REMOVED***);
      assert.doesNotThrow(function() ***REMOVED***assert.ifError(null)***REMOVED***);
      assert.doesNotThrow(function() ***REMOVED***assert.ifError()***REMOVED***);
    ***REMOVED***);

    test('assert - make sure that validating using constructor really works', function () ***REMOVED***
      var threw = false;
      try ***REMOVED***
        assert.throws(
            function() ***REMOVED***
              throw (***REMOVED******REMOVED***);
            ***REMOVED***,
            Array
        );
      ***REMOVED*** catch (e) ***REMOVED***
        threw = true;
      ***REMOVED***
      assert.ok(threw, 'wrong constructor validation');
    ***REMOVED***);

    test('assert -  use a RegExp to validate error message', function () ***REMOVED***
      assert.throws(makeBlock(thrower, TypeError), /test/);
    ***REMOVED***);

    test('assert - se a fn to validate error object', function () ***REMOVED***
      assert.throws(makeBlock(thrower, TypeError), function(err) ***REMOVED***
        if ((err instanceof TypeError) && /test/.test(err)) ***REMOVED***
          return true;
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***);

    test('assert - Make sure deepEqual doesn\'t loop forever on circular refs', function () ***REMOVED***
      var b = ***REMOVED******REMOVED***;
      b.b = b;

      var c = ***REMOVED******REMOVED***;
      c.b = c;

      var gotError = false;
      var equal = true;
      try ***REMOVED***
        equal = assert.deepEqual(b, c);
      ***REMOVED*** catch (e) ***REMOVED***
        gotError = true;
      ***REMOVED***
      assert.ok(gotError || !equal, gotError ? 'got error': 'are equal');
    ***REMOVED***);

    test('assert - Ensure reflexivity of deepEqual with `arguments` objects', function() ***REMOVED***
        var args = (function() ***REMOVED*** return arguments; ***REMOVED***)();
        assert.throws(makeBlock(assert.deepEqual, [], args), assert.AssertionError);
        assert.throws(makeBlock(assert.deepEqual, args, []), assert.AssertionError);
    ***REMOVED***);

    test('assert - test assertion message', function () ***REMOVED***
      function testAssertionMessage(actual, expected) ***REMOVED***
        try ***REMOVED***
          assert.equal(actual, '');
        ***REMOVED*** catch (e) ***REMOVED***
          assert.equal(e.toString(),
              ['AssertionError:', expected, '==', '\'\''].join(' '));
        ***REMOVED***
      ***REMOVED***
      testAssertionMessage(undefined, 'undefined');
      testAssertionMessage(null, 'null');
      testAssertionMessage(true, 'true');
      testAssertionMessage(false, 'false');
      testAssertionMessage(0, '0');
      testAssertionMessage(100, '100');
      testAssertionMessage(NaN, 'NaN');
      testAssertionMessage(Infinity, 'Infinity');
      testAssertionMessage(-Infinity, '-Infinity');
      testAssertionMessage('', '""');
      testAssertionMessage('foo', '\'foo\'');
      testAssertionMessage([], '[]');
      testAssertionMessage([1, 2, 3], '[ 1, 2, 3 ]');
      testAssertionMessage(new Buffer([1, 2, 3]), '<Buffer 01 02 03>');
      if (typeof global.Uint8Array === 'function' && Object.getOwnPropertyNames( new Uint8Array([])).length === 0) ***REMOVED***
        // todo fix util.inspect
        testAssertionMessage(new Uint8Array([1, 2, 3]), '***REMOVED*** \'0\': 1, \'1\': 2, \'2\': 3 ***REMOVED***');
      ***REMOVED***
      testAssertionMessage(/a/, '/a/');
      testAssertionMessage(function f() ***REMOVED******REMOVED***, '[Function: f]');
      testAssertionMessage(***REMOVED******REMOVED***, '***REMOVED******REMOVED***');
      testAssertionMessage(***REMOVED***a: undefined, b: null***REMOVED***, '***REMOVED*** a: undefined, b: null ***REMOVED***');
      testAssertionMessage(***REMOVED***a: NaN, b: Infinity, c: -Infinity***REMOVED***,
          '***REMOVED*** a: NaN, b: Infinity, c: -Infinity ***REMOVED***');
    ***REMOVED***);

    test('assert - regressions from node.js testcase', function () ***REMOVED***
      var threw = false;

      try ***REMOVED***
        assert.throws(function () ***REMOVED***
          assert.ifError(null);
        ***REMOVED***);
      ***REMOVED*** catch (e) ***REMOVED***
        threw = true;
        assert.equal(e.message, 'Missing expected exception..');
      ***REMOVED***
      assert.ok(threw);

      try ***REMOVED***
        assert.equal(1, 2);
      ***REMOVED*** catch (e) ***REMOVED***
        assert.equal(e.toString().split('\n')[0], 'AssertionError: 1 == 2');
      ***REMOVED***

      try ***REMOVED***
        assert.equal(1, 2, 'oh no');
      ***REMOVED*** catch (e) ***REMOVED***
        assert.equal(e.toString().split('\n')[0], 'AssertionError: oh no');
      ***REMOVED***
    ***REMOVED***);
***REMOVED***
