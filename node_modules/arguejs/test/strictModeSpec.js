define(['argue', 'chai'], function(__, chai) ***REMOVED***"use strict";
  chai.Assertion.includeStack = true;
  var should = chai.should();
  var expect = chai.expect;
  
  if( (***REMOVED******REMOVED***).toString.call(Function('return this')()).match(/\s([a-z|A-Z]+)/)[1] == 'DOMWindow')
    // skip stricMode tests if running in the unstable Phantomjs.
    return; 

  describe('strict mode', function() ***REMOVED***

    it('should be activated now', function() ***REMOVED***
      
      expect( (function () ***REMOVED*** return !this; ***REMOVED***)() ).to.be.true;
      expect( (function () ***REMOVED*** return !this; ***REMOVED***)() ).to.be.true;
      
    ***REMOVED***);    
    it('should not allow arguments catch', function() ***REMOVED***
        
      (function()***REMOVED***
        return arguments.callee;
      ***REMOVED***).should.throw(/.*calle.*strict mode.*/);
          
    ***REMOVED***);
    it('should allow to bypass global restriction', function() ***REMOVED***
          
      should.equal( (function () ***REMOVED***
        return !Function('return this')();
      ***REMOVED***)(), false);
          
    ***REMOVED***);
    it('should not allow arguejs to catch arguments', function() ***REMOVED***
       
      function upper() ***REMOVED***
        return __(***REMOVED******REMOVED***);
      ***REMOVED***
      
      (function()***REMOVED***
        upper();
      ***REMOVED***).should.throw('It is not possible to infer arguments in strict mode. See http://github.com/zvictor/ArgueJs#propagating-arguments for alternatives.');
       
    ***REMOVED***);
    it('should allow arguejs to catch declared arguments', function() ***REMOVED***
      
      function upper() ***REMOVED***
        return __(***REMOVED***foo: String***REMOVED***, arguments);
      ***REMOVED***
      
      should.equal(upper('bar').foo, 'bar');
      
    ***REMOVED***);
    
  ***REMOVED***);
***REMOVED***);
