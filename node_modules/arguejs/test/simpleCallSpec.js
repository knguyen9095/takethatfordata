define(['argue', 'chai'], function(__, chai) ***REMOVED***
  chai.Assertion.includeStack = true;
  var should = chai.should();

  describe('simple calls', function() ***REMOVED***

    describe('when arguments exceed', function() ***REMOVED***

      it('should throw an Error when arguments exceed', function() ***REMOVED***

        function upper() ***REMOVED***
          return __(***REMOVED******REMOVED***);
        ***REMOVED***

        (function()***REMOVED***
          upper("value");
        ***REMOVED***).should.throw('Too many arguments');

      ***REMOVED***);

    ***REMOVED***);

    describe('when a parameter name is numeric', function() ***REMOVED***

      it('should throw an Error', function() ***REMOVED***

        function upper() ***REMOVED***
          return __(***REMOVED***1:null***REMOVED***);
        ***REMOVED***

        (function()***REMOVED***
          upper("value");
        ***REMOVED***).should.throw('NameError: a parameter name can not be numeric');

      ***REMOVED***);

      it('should throw an Error', function() ***REMOVED***

        function upper() ***REMOVED***
          return __(***REMOVED***"1":null***REMOVED***);
        ***REMOVED***

        (function()***REMOVED***
          upper("value");
        ***REMOVED***).should.throw('NameError: a parameter name can not be numeric');

      ***REMOVED***);

    ***REMOVED***);
    
    describe('without signature without upperArguments', function() ***REMOVED***
      function upper() ***REMOVED***
        return __();
      ***REMOVED***

      it('should throw error when called', function() ***REMOVED***
        
        (function()***REMOVED***
          upper();
        ***REMOVED***).should.throw("parameter 'signature' waiting for Object argument but received Undefined");

      ***REMOVED***);

    ***REMOVED***);
    describe('without signature with upperArguments', function() ***REMOVED***
      function upper() ***REMOVED***
        return __(arguments);
      ***REMOVED***

      it('should throw error when called', function() ***REMOVED***

        (function()***REMOVED***
          upper();
        ***REMOVED***).should.throw("parameter 'signature' waiting for Object argument but received Arguments");
        
      ***REMOVED***);

    ***REMOVED***);
    describe('with signature without upperArguments', function() ***REMOVED***
      function upper() ***REMOVED***
        return __(***REMOVED******REMOVED***);
      ***REMOVED***

      it('should return no arguments', function() ***REMOVED***
        
        var instance = upper();

        instance.should.be.an('object');
        instance.should.have.ownProperty('doc');
        instance.doc.should.be.a('function');
        
        delete instance.doc
        instance.should.be.empty;

      ***REMOVED***);

    ***REMOVED***);
    describe('with signature with incompatible upperArguments', function() ***REMOVED***
      function upper() ***REMOVED***
        return __(***REMOVED******REMOVED***, true);
      ***REMOVED***

      it('should throw error when called', function() ***REMOVED***
        
        (function()***REMOVED***
          upper();
        ***REMOVED***).should.throw("parameter 'upperArguments' waiting for Array or Arguments argument but received Boolean");

      ***REMOVED***);

    ***REMOVED***);
    describe('with signature with upperArguments', function() ***REMOVED***
      function upper() ***REMOVED***
        return __(***REMOVED***foo: String***REMOVED***, arguments);
      ***REMOVED***

      it('should have the same behavior as without upperArguments', function() ***REMOVED***
        function upper2() ***REMOVED***
          return __(***REMOVED***foo: String***REMOVED***);
        ***REMOVED***
        
        should.equal(upper('bar').foo, upper2('bar').foo);
        
      ***REMOVED***);

    ***REMOVED***);

  ***REMOVED***);
***REMOVED***);
