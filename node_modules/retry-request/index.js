'use strict';

var request = require('request');
var through = require('through2');

var DEFAULTS = ***REMOVED***
  objectMode: false,
  request: request,
  retries: 2,
  noResponseRetries: 2,
  currentRetryAttempt: 0,
  shouldRetryFn: function (response) ***REMOVED***
    var retryRanges = [
      // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
      // 1xx - Retry (Informational, request still processing)
      // 2xx - Do not retry (Success)
      // 3xx - Do not retry (Redirect)
      // 4xx - Do not retry (Client errors)
      // 429 - Retry ("Too Many Requests")
      // 5xx - Retry (Server errors)
      [100, 199],
      [429, 429],
      [500, 599]
    ];

    var statusCode = response.statusCode;

    var range;
    while ((range = retryRanges.shift())) ***REMOVED***
      if (statusCode >= range[0] && statusCode <= range[1]) ***REMOVED***
        // Not a successful status or redirect.
        return true;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

function retryRequest(requestOpts, opts, callback) ***REMOVED***
  var streamMode = typeof arguments[arguments.length - 1] !== 'function';

  if (typeof opts === 'function') ***REMOVED***
    callback = opts;
  ***REMOVED***

  opts = opts || DEFAULTS;

  if (typeof opts.objectMode === 'undefined') ***REMOVED***
    opts.objectMode = DEFAULTS.objectMode;
  ***REMOVED***
  if (typeof opts.request === 'undefined') ***REMOVED***
    opts.request = DEFAULTS.request;
  ***REMOVED***
  if (typeof opts.retries !== 'number') ***REMOVED***
    opts.retries = DEFAULTS.retries;
  ***REMOVED***
  if (typeof opts.currentRetryAttempt !== 'number') ***REMOVED***
    opts.currentRetryAttempt = DEFAULTS.currentRetryAttempt;
  ***REMOVED***
  if (typeof opts.shouldRetryFn !== 'function') ***REMOVED***
    opts.shouldRetryFn = DEFAULTS.shouldRetryFn;
  ***REMOVED***

  var currentRetryAttempt = opts.currentRetryAttempt;

  var numNoResponseAttempts = 0;
  var streamResponseHandled = false;

  var retryStream;
  var requestStream;
  var delayStream;

  var activeRequest;
  var retryRequest = ***REMOVED***
    abort: function () ***REMOVED***
      if (activeRequest && activeRequest.abort) ***REMOVED***
        activeRequest.abort();
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

  if (streamMode) ***REMOVED***
    retryStream = through(***REMOVED*** objectMode: opts.objectMode ***REMOVED***);
    retryStream.abort = resetStreams;
  ***REMOVED***

  if (currentRetryAttempt > 0) ***REMOVED***
    retryAfterDelay(currentRetryAttempt);
  ***REMOVED*** else ***REMOVED***
    makeRequest();
  ***REMOVED***

  if (streamMode) ***REMOVED***
    return retryStream;
  ***REMOVED*** else ***REMOVED***
    return retryRequest;
  ***REMOVED***

  function resetStreams() ***REMOVED***
    delayStream = null;

    if (requestStream) ***REMOVED***
      requestStream.abort && requestStream.abort();
      requestStream.cancel && requestStream.cancel();

      if (requestStream.destroy) ***REMOVED***
        requestStream.destroy();
      ***REMOVED*** else if (requestStream.end) ***REMOVED***
        requestStream.end();
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  function makeRequest() ***REMOVED***
    currentRetryAttempt++;

    if (streamMode) ***REMOVED***
      streamResponseHandled = false;

      delayStream = through(***REMOVED*** objectMode: opts.objectMode ***REMOVED***);
      requestStream = opts.request(requestOpts);

      setImmediate(function () ***REMOVED***
        retryStream.emit('request');
      ***REMOVED***);

      requestStream
        // gRPC via google-cloud-node can emit an `error` as well as a `response`
        // Whichever it emits, we run with-- we can't run with both. That's what
        // is up with the `streamResponseHandled` tracking.
        .on('error', function (err) ***REMOVED***
          if (streamResponseHandled) ***REMOVED***
            return;
          ***REMOVED***

          streamResponseHandled = true;
          onResponse(err);
        ***REMOVED***)
        .on('response', function (resp, body) ***REMOVED***
          if (streamResponseHandled) ***REMOVED***
            return;
          ***REMOVED***

          streamResponseHandled = true;
          onResponse(null, resp, body);
        ***REMOVED***)
        .on('complete', retryStream.emit.bind(retryStream, 'complete'));

      requestStream.pipe(delayStream);
    ***REMOVED*** else ***REMOVED***
      activeRequest = opts.request(requestOpts, onResponse);
    ***REMOVED***
  ***REMOVED***

  function retryAfterDelay(currentRetryAttempt) ***REMOVED***
    if (streamMode) ***REMOVED***
      resetStreams();
    ***REMOVED***

    setTimeout(makeRequest, getNextRetryDelay(currentRetryAttempt));
  ***REMOVED***

  function onResponse(err, response, body) ***REMOVED***
    // An error such as DNS resolution.
    if (err) ***REMOVED***
      numNoResponseAttempts++;

      if (numNoResponseAttempts <= opts.noResponseRetries) ***REMOVED***
        retryAfterDelay(numNoResponseAttempts);
      ***REMOVED*** else ***REMOVED***
        if (streamMode) ***REMOVED***
          retryStream.emit('error', err);
          retryStream.end();
        ***REMOVED*** else ***REMOVED***
          callback(err, response, body);
        ***REMOVED***
      ***REMOVED***

      return;
    ***REMOVED***

    // Send the response to see if we should try again.
    if (currentRetryAttempt <= opts.retries && opts.shouldRetryFn(response)) ***REMOVED***
      retryAfterDelay(currentRetryAttempt);
      return;
    ***REMOVED***

    // No more attempts need to be made, just continue on.
    if (streamMode) ***REMOVED***
      retryStream.emit('response', response);
      delayStream.pipe(retryStream);
      requestStream.on('error', function (err) ***REMOVED***
        retryStream.destroy(err);
      ***REMOVED***);
    ***REMOVED*** else ***REMOVED***
      callback(err, response, body);
    ***REMOVED***
  ***REMOVED***
***REMOVED***

module.exports = retryRequest;

function getNextRetryDelay(retryNumber) ***REMOVED***
  return (Math.pow(2, retryNumber) * 1000) + Math.floor(Math.random() * 1000);
***REMOVED***

module.exports.getNextRetryDelay = getNextRetryDelay;
