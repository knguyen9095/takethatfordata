***REMOVED***"version":3,"sources":["../src/api/blob.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,iDAAuD;AACvD,mCAAqD;AACrD,uCAAqD;AACrD,6DAIkC;AAClC,qCAAmD;AAEnD,oEAAoE;AACpE;IACE,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC;QACtC,MAAM,IAAI,sBAAc,CACtB,YAAI,CAAC,aAAa,EAClB,oDAAoD,CACrD,CAAC;IACJ,CAAC;AACH,CAAC;AAED,2EAA2E;AAC3E;IACE,EAAE,CAAC,CAAC,CAAC,0BAAe,CAAC,WAAW,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;QACnD,MAAM,IAAI,sBAAc,CACtB,YAAI,CAAC,aAAa,EAClB,yDAAyD,CAC1D,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;;;;;GAMG;AACH;IAOE,cAAoB,YAAoB;QACtC,qBAAqB,EAAE,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAEM,qBAAgB,GAAvB,UAAwB,MAAc;QACpC,4CAAyB,CAAC,uBAAuB,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QACjE,kCAAe,CAAC,uBAAuB,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;QAC9D,qBAAqB,EAAE,CAAC;QACxB,IAAI,CAAC;YACH,IAAM,YAAY,GAAG,0BAAe,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChE,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,sBAAc,CACtB,YAAI,CAAC,gBAAgB,EACrB,+CAA+C,GAAG,CAAC,CACpD,CAAC;QACJ,CAAC;IACH,CAAC;IAEM,mBAAc,GAArB,UAAsB,KAAiB;QACrC,4CAAyB,CAAC,qBAAqB,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAC/D,yBAAyB,EAAE,CAAC;QAC5B,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,YAAY,UAAU,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,oCAAiB,CAAC,qBAAqB,EAAE,YAAY,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QACzE,CAAC;QACD,yEAAyE;QACzE,4EAA4E;QAC5E,8BAA8B;QAC9B,IAAM,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG;aACrC,IAAI,CAAC,KAAK,EAAE,UAAC,IAAY;YACxB,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC;aACD,IAAI,CAAC,EAAE,CAAC,CAAC;QACZ,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC;IAChC,CAAC;IAED,uBAAQ,GAAR;QACE,4CAAyB,CAAC,eAAe,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QACzD,qBAAqB,EAAE,CAAC;QACxB,MAAM,CAAC,0BAAe,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAChE,CAAC;IAED,2BAAY,GAAZ;QACE,4CAAyB,CAAC,mBAAmB,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;QAC7D,yBAAyB,EAAE,CAAC;QAC5B,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACzD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnD,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR;QACE,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;IACjD,CAAC;IAED,sBAAO,GAAP,UAAQ,KAAW;QACjB,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,aAAa,CAAC;IACpD,CAAC;IAED;;;OAGG;IACH,yBAAU,GAAV,UAAW,KAAW;QACpB,MAAM,CAAC,0BAAmB,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;IACtE,CAAC;IACH,WAAC;AAAD,CA3EA,AA2EC,IAAA;AA3EY,oBAAI;AA6EjB,8EAA8E;AAC9E,8EAA8E;AAC9E,0EAA0E;AAC1E,4EAA4E;AAC5E,qBAAqB;AACrB,8EAA8E;AAC9E,iDAAiD;AACjD,8EAA8E;AACnE,QAAA,UAAU,GAAG,4BAAsB,CAC5C,IAAI,EACJ,+DAA+D,CAChE,CAAC","file":"blob.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** PlatformSupport ***REMOVED*** from '../platform/platform';\nimport ***REMOVED*** makeConstructorPrivate ***REMOVED*** from '../util/api';\nimport ***REMOVED*** Code, FirestoreError ***REMOVED*** from '../util/error';\nimport ***REMOVED***\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n***REMOVED*** from '../util/input_validation';\nimport ***REMOVED*** primitiveComparator ***REMOVED*** from '../util/misc';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() ***REMOVED***\n  if (typeof Uint8Array === 'undefined') ***REMOVED***\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  ***REMOVED***\n***REMOVED***\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() ***REMOVED***\n  if (!PlatformSupport.getPlatform().base64Available) ***REMOVED***\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  ***REMOVED***\n***REMOVED***\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob ***REMOVED***\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion.\n  // A binary string is a string with each char as Unicode code point in the\n  // range of [0, 255], essentially simulating a byte array.\n  private _binaryString: string;\n\n  private constructor(binaryString: string) ***REMOVED***\n    assertBase64Available();\n    this._binaryString = binaryString;\n  ***REMOVED***\n\n  static fromBase64String(base64: string): Blob ***REMOVED***\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try ***REMOVED***\n      const binaryString = PlatformSupport.getPlatform().atob(base64);\n      return new Blob(binaryString);\n    ***REMOVED*** catch (e) ***REMOVED***\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    ***REMOVED***\n  ***REMOVED***\n\n  static fromUint8Array(array: Uint8Array): Blob ***REMOVED***\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) ***REMOVED***\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    ***REMOVED***\n    // We can't call array.map directly because it expects the return type to\n    // be a Uint8Array, whereas we can convert it to a regular array by invoking\n    // map on the Array prototype.\n    const binaryString = Array.prototype.map\n      .call(array, (char: number) => ***REMOVED***\n        return String.fromCharCode(char);\n      ***REMOVED***)\n      .join('');\n    return new Blob(binaryString);\n  ***REMOVED***\n\n  toBase64(): string ***REMOVED***\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return PlatformSupport.getPlatform().btoa(this._binaryString);\n  ***REMOVED***\n\n  toUint8Array(): Uint8Array ***REMOVED***\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    const buffer = new Uint8Array(this._binaryString.length);\n    for (let i = 0; i < this._binaryString.length; i++) ***REMOVED***\n      buffer[i] = this._binaryString.charCodeAt(i);\n    ***REMOVED***\n    return buffer;\n  ***REMOVED***\n\n  toString(): string ***REMOVED***\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  ***REMOVED***\n\n  isEqual(other: Blob): boolean ***REMOVED***\n    return this._binaryString === other._binaryString;\n  ***REMOVED***\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: Blob): number ***REMOVED***\n    return primitiveComparator(this._binaryString, other._binaryString);\n  ***REMOVED***\n***REMOVED***\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport let PublicBlob = makeConstructorPrivate(\n  Blob,\n  'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.'\n);\n"]***REMOVED***