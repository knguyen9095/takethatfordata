***REMOVED***"version":3,"sources":["../src/local/remote_document_change_buffer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,oDAA0E;AAG1E,yCAAwC;AAGxC,6DAA2D;AAG3D;;;;;;;;;;;GAWG;AACH;IAGE,oCAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAFpD,YAAO,GAA4B,8BAAgB,EAAE,CAAC;IAEC,CAAC;IAEhE,uDAAuD;IACvD,6CAAQ,GAAR,UAAS,aAA4B;QACnC,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAClE,CAAC;IAED,oEAAoE;IAEpE;;;;;;;;;;OAUG;IACH,6CAAQ,GAAR,UACE,WAAmC,EACnC,WAAwB;QAExB,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAErC,IAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,wCAAkB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,0CAAK,GAAL,UAAM,WAAmC;QAAzC,iBAYC;QAXC,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAErC,IAAM,QAAQ,GAAoC,EAAE,CAAC;QACrD,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,QAAQ;YAC5B,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,oDAAoD;QACpD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,MAAM,CAAC,wCAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,+DAA+D;IACvD,kDAAa,GAArB;QACE,eAAM,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE,oCAAoC,CAAC,CAAC;QACpE,MAAM,CAAC,IAAI,CAAC,OAAQ,CAAC;IACvB,CAAC;IACH,iCAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DY,gEAA0B","file":"remote_document_change_buffer.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** MaybeDocumentMap, maybeDocumentMap ***REMOVED*** from '../model/collections';\nimport ***REMOVED*** MaybeDocument ***REMOVED*** from '../model/document';\nimport ***REMOVED*** DocumentKey ***REMOVED*** from '../model/document_key';\nimport ***REMOVED*** assert ***REMOVED*** from '../util/assert';\n\nimport ***REMOVED*** PersistenceTransaction ***REMOVED*** from './persistence';\nimport ***REMOVED*** PersistencePromise ***REMOVED*** from './persistence_promise';\nimport ***REMOVED*** RemoteDocumentCache ***REMOVED*** from './remote_document_cache';\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * NOTE: This class was introduced in iOS to work around a limitation in\n * LevelDB. Given IndexedDb has full transaction support with\n * read-your-own-writes capability, this class is not technically needed, but\n * has been preserved as a convenience and to aid portability.\n */\nexport class RemoteDocumentChangeBuffer ***REMOVED***\n  private changes: MaybeDocumentMap | null = maybeDocumentMap();\n\n  constructor(private remoteDocumentCache: RemoteDocumentCache) ***REMOVED******REMOVED***\n\n  /** Buffers a `RemoteDocumentCache.addEntry()` call. */\n  addEntry(maybeDocument: MaybeDocument): void ***REMOVED***\n    const changes = this.assertChanges();\n    this.changes = changes.insert(maybeDocument.key, maybeDocument);\n  ***REMOVED***\n\n  // NOTE: removeEntry() is not presently necessary and so is omitted.\n\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> ***REMOVED***\n    const changes = this.assertChanges();\n\n    const bufferedEntry = changes.get(documentKey);\n    if (bufferedEntry) ***REMOVED***\n      return PersistencePromise.resolve(bufferedEntry);\n    ***REMOVED*** else ***REMOVED***\n      return this.remoteDocumentCache.getEntry(transaction, documentKey);\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction: PersistenceTransaction): PersistencePromise<void> ***REMOVED***\n    const changes = this.assertChanges();\n\n    const promises: Array<PersistencePromise<void>> = [];\n    changes.forEach((key, maybeDoc) => ***REMOVED***\n      promises.push(this.remoteDocumentCache.addEntry(transaction, maybeDoc));\n    ***REMOVED***);\n\n    // We should not be used to buffer any more changes.\n    this.changes = null;\n\n    return PersistencePromise.waitFor(promises);\n  ***REMOVED***\n\n  /** Helper to assert this.changes is not null and return it. */\n  private assertChanges(): MaybeDocumentMap ***REMOVED***\n    assert(this.changes !== null, 'Changes have already been applied.');\n    return this.changes!;\n  ***REMOVED***\n***REMOVED***\n"]***REMOVED***