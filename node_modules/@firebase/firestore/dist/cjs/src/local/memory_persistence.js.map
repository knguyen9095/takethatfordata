***REMOVED***"version":3,"sources":["../src/local/memory_persistence.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAGH,yCAAwC;AACxC,mCAAoC;AAEpC,iEAA8D;AAC9D,2DAAwD;AACxD,+EAA2E;AAO3E,IAAM,OAAO,GAAG,mBAAmB,CAAC;AAEpC;;;GAGG;AACH;IAAA;QACE;;;;;;WAMG;QACK,mBAAc,GAAsC,EAAE,CAAC;QACvD,wBAAmB,GAAG,IAAI,wDAAyB,EAAE,CAAC;QACtD,eAAU,GAAG,IAAI,qCAAgB,EAAE,CAAC;QAEpC,YAAO,GAAG,KAAK,CAAC;IAwC1B,CAAC;IAtCC,iCAAK,GAAL;QACE,eAAM,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,mCAAmC,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,uCAAuC;QACvC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,oCAAQ,GAAR;QACE,oDAAoD;QACpD,eAAM,CAAC,IAAI,CAAC,OAAO,EAAE,2CAA2C,CAAC,CAAC;QAClE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,4CAAgB,GAAhB,UAAiB,IAAU;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,KAAK,GAAG,IAAI,2CAAmB,EAAE,CAAC;YAClC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC;QAC5C,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,yCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,kDAAsB,GAAtB;QACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED,0CAAc,GAAd,UACE,MAAc,EACd,SAAyE;QAEzE,WAAK,CAAC,OAAO,EAAE,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAChD,MAAM,CAAC,SAAS,CAAC,IAAI,4BAA4B,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;IACnE,CAAC;IACH,wBAAC;AAAD,CApDA,AAoDC,IAAA;AApDY,8CAAiB;AAsD9B,8EAA8E;AAC9E;IAAA;IAAsE,CAAC;IAAD,mCAAC;AAAD,CAAtE,AAAuE,IAAA","file":"memory_persistence.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** User ***REMOVED*** from '../auth/user';\nimport ***REMOVED*** assert ***REMOVED*** from '../util/assert';\nimport ***REMOVED*** debug ***REMOVED*** from '../util/log';\n\nimport ***REMOVED*** MemoryMutationQueue ***REMOVED*** from './memory_mutation_queue';\nimport ***REMOVED*** MemoryQueryCache ***REMOVED*** from './memory_query_cache';\nimport ***REMOVED*** MemoryRemoteDocumentCache ***REMOVED*** from './memory_remote_document_cache';\nimport ***REMOVED*** MutationQueue ***REMOVED*** from './mutation_queue';\nimport ***REMOVED*** Persistence, PersistenceTransaction ***REMOVED*** from './persistence';\nimport ***REMOVED*** PersistencePromise ***REMOVED*** from './persistence_promise';\nimport ***REMOVED*** QueryCache ***REMOVED*** from './query_cache';\nimport ***REMOVED*** RemoteDocumentCache ***REMOVED*** from './remote_document_cache';\n\nconst LOG_TAG = 'MemoryPersistence';\n\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence ***REMOVED***\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private mutationQueues: ***REMOVED*** [user: string]: MutationQueue ***REMOVED*** = ***REMOVED******REMOVED***;\n  private remoteDocumentCache = new MemoryRemoteDocumentCache();\n  private queryCache = new MemoryQueryCache();\n\n  private started = false;\n\n  start(): Promise<void> ***REMOVED***\n    assert(!this.started, 'MemoryPersistence double-started!');\n    this.started = true;\n    // No durable state to read on startup.\n    return Promise.resolve();\n  ***REMOVED***\n\n  shutdown(): Promise<void> ***REMOVED***\n    // No durable state to ensure is closed on shutdown.\n    assert(this.started, 'MemoryPersistence shutdown without start!');\n    this.started = false;\n    return Promise.resolve();\n  ***REMOVED***\n\n  getMutationQueue(user: User): MutationQueue ***REMOVED***\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) ***REMOVED***\n      queue = new MemoryMutationQueue();\n      this.mutationQueues[user.toKey()] = queue;\n    ***REMOVED***\n    return queue;\n  ***REMOVED***\n\n  getQueryCache(): QueryCache ***REMOVED***\n    return this.queryCache;\n  ***REMOVED***\n\n  getRemoteDocumentCache(): RemoteDocumentCache ***REMOVED***\n    return this.remoteDocumentCache;\n  ***REMOVED***\n\n  runTransaction<T>(\n    action: string,\n    operation: (transaction: PersistenceTransaction) => PersistencePromise<T>\n  ): Promise<T> ***REMOVED***\n    debug(LOG_TAG, 'Starting transaction:', action);\n    return operation(new MemoryPersistenceTransaction()).toPromise();\n  ***REMOVED***\n***REMOVED***\n\n/** Dummy class since memory persistence doesn't actually use transactions. */\nclass MemoryPersistenceTransaction implements PersistenceTransaction ***REMOVED******REMOVED***\n"]***REMOVED***