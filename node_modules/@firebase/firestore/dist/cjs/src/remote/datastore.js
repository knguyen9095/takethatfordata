"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var collections_1 = require("../model/collections");
var assert_1 = require("../util/assert");
var persistent_stream_1 = require("./persistent_stream");
/**
 * Datastore is a wrapper around the external Google Cloud Datastore grpc API,
 * which provides an interface that is more convenient for the rest of the
 * client SDK architecture to consume.
 */
var Datastore = /** @class */ (function () ***REMOVED***
    function Datastore(databaseInfo, queue, connection, credentials, serializer, initialBackoffDelay) ***REMOVED***
        this.databaseInfo = databaseInfo;
        this.queue = queue;
        this.connection = connection;
        this.credentials = credentials;
        this.serializer = serializer;
        this.initialBackoffDelay = initialBackoffDelay;
    ***REMOVED***
    Datastore.prototype.newPersistentWriteStream = function () ***REMOVED***
        return new persistent_stream_1.PersistentWriteStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);
    ***REMOVED***;
    Datastore.prototype.newPersistentWatchStream = function () ***REMOVED***
        return new persistent_stream_1.PersistentListenStream(this.databaseInfo, this.queue, this.connection, this.credentials, this.serializer, this.initialBackoffDelay);
    ***REMOVED***;
    Datastore.prototype.commit = function (mutations) ***REMOVED***
        var _this = this;
        var params = ***REMOVED***
            database: this.serializer.encodedDatabaseId,
            writes: mutations.map(function (m) ***REMOVED*** return _this.serializer.toMutation(m); ***REMOVED***)
        ***REMOVED***;
        return this.invokeRPC('Commit', params).then(function (response) ***REMOVED***
            return _this.serializer.fromWriteResults(response.writeResults);
        ***REMOVED***);
    ***REMOVED***;
    Datastore.prototype.lookup = function (keys) ***REMOVED***
        var _this = this;
        var params = ***REMOVED***
            database: this.serializer.encodedDatabaseId,
            documents: keys.map(function (k) ***REMOVED*** return _this.serializer.toName(k); ***REMOVED***)
        ***REMOVED***;
        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) ***REMOVED***
            var docs = collections_1.maybeDocumentMap();
            response.forEach(function (proto) ***REMOVED***
                var doc = _this.serializer.fromMaybeDocument(proto);
                docs = docs.insert(doc.key, doc);
            ***REMOVED***);
            var result = [];
            keys.forEach(function (key) ***REMOVED***
                var doc = docs.get(key);
                assert_1.assert(!!doc, 'Missing entity in write response for ' + key);
                result.push(doc);
            ***REMOVED***);
            return result;
        ***REMOVED***);
    ***REMOVED***;
    /** Gets an auth token and invokes the provided RPC. */
    Datastore.prototype.invokeRPC = function (rpcName, request) ***REMOVED***
        var _this = this;
        // TODO(mikelehen): Retry (with backoff) on token failures?
        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) ***REMOVED***
            return _this.connection.invokeRPC(rpcName, request, token);
        ***REMOVED***);
    ***REMOVED***;
    /** Gets an auth token and invokes the provided RPC with streamed results. */
    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) ***REMOVED***
        var _this = this;
        // TODO(mikelehen): Retry (with backoff) on token failures?
        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) ***REMOVED***
            return _this.connection.invokeStreamingRPC(rpcName, request, token);
        ***REMOVED***);
    ***REMOVED***;
    return Datastore;
***REMOVED***());
exports.Datastore = Datastore;

//# sourceMappingURL=datastore.js.map
