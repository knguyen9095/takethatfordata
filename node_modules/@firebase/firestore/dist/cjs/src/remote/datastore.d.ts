import ***REMOVED*** CredentialsProvider ***REMOVED*** from '../api/credentials';
import ***REMOVED*** DatabaseInfo ***REMOVED*** from '../core/database_info';
import ***REMOVED*** MaybeDocument ***REMOVED*** from '../model/document';
import ***REMOVED*** DocumentKey ***REMOVED*** from '../model/document_key';
import ***REMOVED*** Mutation, MutationResult ***REMOVED*** from '../model/mutation';
import ***REMOVED*** AsyncQueue ***REMOVED*** from '../util/async_queue';
import ***REMOVED*** Connection ***REMOVED*** from './connection';
import ***REMOVED*** PersistentListenStream, PersistentWriteStream ***REMOVED*** from './persistent_stream';
import ***REMOVED*** JsonProtoSerializer ***REMOVED*** from './serializer';
/**
 * Datastore is a wrapper around the external Google Cloud Datastore grpc API,
 * which provides an interface that is more convenient for the rest of the
 * client SDK architecture to consume.
 */
export declare class Datastore ***REMOVED***
    private databaseInfo;
    private queue;
    private connection;
    private credentials;
    private serializer;
    private initialBackoffDelay;
    constructor(databaseInfo: DatabaseInfo, queue: AsyncQueue, connection: Connection, credentials: CredentialsProvider, serializer: JsonProtoSerializer, initialBackoffDelay?: number);
    newPersistentWriteStream(): PersistentWriteStream;
    newPersistentWatchStream(): PersistentListenStream;
    commit(mutations: Mutation[]): Promise<MutationResult[]>;
    lookup(keys: DocumentKey[]): Promise<MaybeDocument[]>;
    /** Gets an auth token and invokes the provided RPC. */
    private invokeRPC<Req, Resp>(rpcName, request);
    /** Gets an auth token and invokes the provided RPC with streamed results. */
    private invokeStreamingRPC<Req, Resp>(rpcName, request);
***REMOVED***
