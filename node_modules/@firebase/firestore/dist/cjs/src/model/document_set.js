"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var sorted_map_1 = require("../util/sorted_map");
var collections_1 = require("./collections");
var document_key_1 = require("./document_key");
/**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */
var DocumentSet = /** @class */ (function () ***REMOVED***
    /** The default ordering is by key if the comparator is omitted */
    function DocumentSet(comp) ***REMOVED***
        // We are adding document key comparator to the end as it's the only
        // guaranteed unique property of a document.
        if (comp) ***REMOVED***
            this.comparator = function (d1, d2) ***REMOVED***
                return comp(d1, d2) || document_key_1.DocumentKey.comparator(d1.key, d2.key);
            ***REMOVED***;
        ***REMOVED***
        else ***REMOVED***
            this.comparator = function (d1, d2) ***REMOVED***
                return document_key_1.DocumentKey.comparator(d1.key, d2.key);
            ***REMOVED***;
        ***REMOVED***
        this.keyedMap = collections_1.documentMap();
        this.sortedSet = new sorted_map_1.SortedMap(this.comparator);
    ***REMOVED***
    /**
     * Returns an empty copy of the existing DocumentSet, using the same
     * comparator.
     */
    DocumentSet.emptySet = function (oldSet) ***REMOVED***
        return new DocumentSet(oldSet.comparator);
    ***REMOVED***;
    DocumentSet.prototype.has = function (key) ***REMOVED***
        return this.keyedMap.get(key) != null;
    ***REMOVED***;
    DocumentSet.prototype.get = function (key) ***REMOVED***
        return this.keyedMap.get(key);
    ***REMOVED***;
    DocumentSet.prototype.first = function () ***REMOVED***
        return this.sortedSet.minKey();
    ***REMOVED***;
    DocumentSet.prototype.last = function () ***REMOVED***
        return this.sortedSet.maxKey();
    ***REMOVED***;
    DocumentSet.prototype.isEmpty = function () ***REMOVED***
        return this.sortedSet.isEmpty();
    ***REMOVED***;
    /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */
    DocumentSet.prototype.indexOf = function (key) ***REMOVED***
        var doc = this.keyedMap.get(key);
        return doc ? this.sortedSet.indexOf(doc) : -1;
    ***REMOVED***;
    Object.defineProperty(DocumentSet.prototype, "size", ***REMOVED***
        get: function () ***REMOVED***
            return this.sortedSet.size;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    /** Iterates documents in order defined by "comparator" */
    DocumentSet.prototype.forEach = function (cb) ***REMOVED***
        this.sortedSet.inorderTraversal(function (k, v) ***REMOVED***
            cb(k);
            return false;
        ***REMOVED***);
    ***REMOVED***;
    /** Inserts or updates a document with the same key */
    DocumentSet.prototype.add = function (doc) ***REMOVED***
        // First remove the element if we have it.
        var set = this.delete(doc.key);
        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));
    ***REMOVED***;
    /** Deletes a document with a given key */
    DocumentSet.prototype.delete = function (key) ***REMOVED***
        var doc = this.get(key);
        if (!doc) ***REMOVED***
            return this;
        ***REMOVED***
        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));
    ***REMOVED***;
    DocumentSet.prototype.isEqual = function (other) ***REMOVED***
        if (!(other instanceof DocumentSet))
            return false;
        if (this.size !== other.size)
            return false;
        var thisIt = this.sortedSet.getIterator();
        var otherIt = other.sortedSet.getIterator();
        while (thisIt.hasNext()) ***REMOVED***
            var thisDoc = thisIt.getNext().key;
            var otherDoc = otherIt.getNext().key;
            if (!thisDoc.isEqual(otherDoc))
                return false;
        ***REMOVED***
        return true;
    ***REMOVED***;
    DocumentSet.prototype.toString = function () ***REMOVED***
        var docStrings = [];
        this.forEach(function (doc) ***REMOVED***
            docStrings.push(doc.toString());
        ***REMOVED***);
        if (docStrings.length === 0) ***REMOVED***
            return 'DocumentSet ()';
        ***REMOVED***
        else ***REMOVED***
            return 'DocumentSet (\n  ' + docStrings.join('  \n') + '\n)';
        ***REMOVED***
    ***REMOVED***;
    DocumentSet.prototype.copy = function (keyedMap, sortedSet) ***REMOVED***
        var newSet = new DocumentSet();
        newSet.comparator = this.comparator;
        newSet.keyedMap = keyedMap;
        newSet.sortedSet = sortedSet;
        return newSet;
    ***REMOVED***;
    return DocumentSet;
***REMOVED***());
exports.DocumentSet = DocumentSet;

//# sourceMappingURL=document_set.js.map
