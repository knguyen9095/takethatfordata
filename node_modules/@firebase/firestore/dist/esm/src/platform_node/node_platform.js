/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as util from 'util';
import ***REMOVED*** JsonProtoSerializer ***REMOVED*** from '../remote/serializer';
import ***REMOVED*** Code, FirestoreError ***REMOVED*** from '../util/error';
import ***REMOVED*** GrpcConnection ***REMOVED*** from './grpc_connection';
import ***REMOVED*** loadProtos ***REMOVED*** from './load_protos';
var NodePlatform = /** @class */ (function () ***REMOVED***
    function NodePlatform() ***REMOVED***
        this.base64Available = true;
        this.emptyByteString = new Uint8Array(0);
    ***REMOVED***
    NodePlatform.prototype.loadConnection = function (databaseInfo) ***REMOVED***
        var protos = loadProtos();
        return Promise.resolve(new GrpcConnection(protos, databaseInfo));
    ***REMOVED***;
    NodePlatform.prototype.newSerializer = function (partitionId) ***REMOVED***
        return new JsonProtoSerializer(partitionId, ***REMOVED*** useProto3Json: false ***REMOVED***);
    ***REMOVED***;
    NodePlatform.prototype.formatJSON = function (value) ***REMOVED***
        // util.inspect() results in much more readable output than JSON.stringify()
        return util.inspect(value, ***REMOVED*** depth: 100 ***REMOVED***);
    ***REMOVED***;
    NodePlatform.prototype.atob = function (encoded) ***REMOVED***
        // Node actually doesn't validate base64 strings.
        // A quick sanity check that is not a fool-proof validation
        if (/[^-A-Za-z0-9+/=]/.test(encoded)) ***REMOVED***
            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Not a valid Base64 string: ' + encoded);
        ***REMOVED***
        return new Buffer(encoded, 'base64').toString('binary');
    ***REMOVED***;
    NodePlatform.prototype.btoa = function (raw) ***REMOVED***
        return new Buffer(raw, 'binary').toString('base64');
    ***REMOVED***;
    return NodePlatform;
***REMOVED***());
export ***REMOVED*** NodePlatform ***REMOVED***;

//# sourceMappingURL=node_platform.js.map
