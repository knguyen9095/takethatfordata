/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** DocumentKey ***REMOVED*** from '../model/document_key';
import ***REMOVED*** fail ***REMOVED*** from '../util/assert';
import ***REMOVED*** SortedMap ***REMOVED*** from '../util/sorted_map';
export var ChangeType;
(function (ChangeType) ***REMOVED***
    ChangeType[ChangeType["Added"] = 0] = "Added";
    ChangeType[ChangeType["Removed"] = 1] = "Removed";
    ChangeType[ChangeType["Modified"] = 2] = "Modified";
    ChangeType[ChangeType["Metadata"] = 3] = "Metadata";
***REMOVED***)(ChangeType || (ChangeType = ***REMOVED******REMOVED***));
export var SyncState;
(function (SyncState) ***REMOVED***
    SyncState[SyncState["Local"] = 0] = "Local";
    SyncState[SyncState["Synced"] = 1] = "Synced";
***REMOVED***)(SyncState || (SyncState = ***REMOVED******REMOVED***));
/**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */
var DocumentChangeSet = /** @class */ (function () ***REMOVED***
    function DocumentChangeSet() ***REMOVED***
        this.changeMap = new SortedMap(DocumentKey.comparator);
    ***REMOVED***
    DocumentChangeSet.prototype.track = function (change) ***REMOVED***
        var key = change.doc.key;
        var oldChange = this.changeMap.get(key);
        if (!oldChange) ***REMOVED***
            this.changeMap = this.changeMap.insert(key, change);
            return;
        ***REMOVED***
        // Merge the new change with the existing change.
        if (change.type !== ChangeType.Added &&
            oldChange.type === ChangeType.Metadata) ***REMOVED***
            this.changeMap = this.changeMap.insert(key, change);
        ***REMOVED***
        else if (change.type === ChangeType.Metadata &&
            oldChange.type !== ChangeType.Removed) ***REMOVED***
            this.changeMap = this.changeMap.insert(key, ***REMOVED***
                type: oldChange.type,
                doc: change.doc
            ***REMOVED***);
        ***REMOVED***
        else if (change.type === ChangeType.Modified &&
            oldChange.type === ChangeType.Modified) ***REMOVED***
            this.changeMap = this.changeMap.insert(key, ***REMOVED***
                type: ChangeType.Modified,
                doc: change.doc
            ***REMOVED***);
        ***REMOVED***
        else if (change.type === ChangeType.Modified &&
            oldChange.type === ChangeType.Added) ***REMOVED***
            this.changeMap = this.changeMap.insert(key, ***REMOVED***
                type: ChangeType.Added,
                doc: change.doc
            ***REMOVED***);
        ***REMOVED***
        else if (change.type === ChangeType.Removed &&
            oldChange.type === ChangeType.Added) ***REMOVED***
            this.changeMap = this.changeMap.remove(key);
        ***REMOVED***
        else if (change.type === ChangeType.Removed &&
            oldChange.type === ChangeType.Modified) ***REMOVED***
            this.changeMap = this.changeMap.insert(key, ***REMOVED***
                type: ChangeType.Removed,
                doc: oldChange.doc
            ***REMOVED***);
        ***REMOVED***
        else if (change.type === ChangeType.Added &&
            oldChange.type === ChangeType.Removed) ***REMOVED***
            this.changeMap = this.changeMap.insert(key, ***REMOVED***
                type: ChangeType.Modified,
                doc: change.doc
            ***REMOVED***);
        ***REMOVED***
        else ***REMOVED***
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            fail('unsupported combination of changes: ' +
                JSON.stringify(change) +
                ' after ' +
                JSON.stringify(oldChange));
        ***REMOVED***
    ***REMOVED***;
    DocumentChangeSet.prototype.getChanges = function () ***REMOVED***
        var changes = [];
        this.changeMap.inorderTraversal(function (key, change) ***REMOVED***
            changes.push(change);
        ***REMOVED***);
        return changes;
    ***REMOVED***;
    return DocumentChangeSet;
***REMOVED***());
export ***REMOVED*** DocumentChangeSet ***REMOVED***;
var ViewSnapshot = /** @class */ (function () ***REMOVED***
    function ViewSnapshot(query, docs, oldDocs, docChanges, fromCache, hasPendingWrites, syncStateChanged) ***REMOVED***
        this.query = query;
        this.docs = docs;
        this.oldDocs = oldDocs;
        this.docChanges = docChanges;
        this.fromCache = fromCache;
        this.hasPendingWrites = hasPendingWrites;
        this.syncStateChanged = syncStateChanged;
    ***REMOVED***
    ViewSnapshot.prototype.isEqual = function (other) ***REMOVED***
        if (this.fromCache !== other.fromCache ||
            this.hasPendingWrites !== other.hasPendingWrites ||
            this.syncStateChanged !== other.syncStateChanged ||
            !this.query.isEqual(other.query) ||
            !this.docs.isEqual(other.docs) ||
            !this.oldDocs.isEqual(other.oldDocs)) ***REMOVED***
            return false;
        ***REMOVED***
        var changes = this.docChanges;
        var otherChanges = other.docChanges;
        if (changes.length !== otherChanges.length) ***REMOVED***
            return false;
        ***REMOVED***
        for (var i = 0; i < changes.length; i++) ***REMOVED***
            if (changes[i].type !== otherChanges[i].type ||
                !changes[i].doc.isEqual(otherChanges[i].doc)) ***REMOVED***
                return false;
            ***REMOVED***
        ***REMOVED***
        return true;
    ***REMOVED***;
    return ViewSnapshot;
***REMOVED***());
export ***REMOVED*** ViewSnapshot ***REMOVED***;

//# sourceMappingURL=view_snapshot.js.map
