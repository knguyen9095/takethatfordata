/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** documentKeySet ***REMOVED*** from '../model/collections';
import ***REMOVED*** PersistencePromise ***REMOVED*** from './persistence_promise';
/**
 * A garbage collector implementation that does absolutely nothing. It ignores
 * all addGarbageSource and addPotentialGarbageKey messages and and never
 * produces any garbage.
 */
var NoOpGarbageCollector = /** @class */ (function () ***REMOVED***
    function NoOpGarbageCollector() ***REMOVED***
        this.isEager = false;
    ***REMOVED***
    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) ***REMOVED***
        // Not tracking garbage so don't track sources.
    ***REMOVED***;
    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) ***REMOVED***
        // Not tracking garbage so don't track sources.
    ***REMOVED***;
    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) ***REMOVED***
        // Not tracking garbage so ignore.
    ***REMOVED***;
    NoOpGarbageCollector.prototype.collectGarbage = function (txn) ***REMOVED***
        return PersistencePromise.resolve(documentKeySet());
    ***REMOVED***;
    return NoOpGarbageCollector;
***REMOVED***());
export ***REMOVED*** NoOpGarbageCollector ***REMOVED***;

//# sourceMappingURL=no_op_garbage_collector.js.map
