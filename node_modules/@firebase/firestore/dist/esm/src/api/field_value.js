/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = Object.setPrototypeOf ||
        (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
        function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
import ***REMOVED*** makeConstructorPrivate ***REMOVED*** from '../util/api';
/**
 * An opaque base class for FieldValue sentinel objects in our public API,
 * with public static methods for creating said sentinel objects.
 */
// tslint:disable-next-line:class-as-namespace  We use this as a base class.
var FieldValueImpl = /** @class */ (function () ***REMOVED***
    function FieldValueImpl() ***REMOVED***
    ***REMOVED***
    FieldValueImpl.delete = function () ***REMOVED***
        return DeleteFieldValueImpl.instance;
    ***REMOVED***;
    FieldValueImpl.serverTimestamp = function () ***REMOVED***
        return ServerTimestampFieldValueImpl.instance;
    ***REMOVED***;
    FieldValueImpl.prototype.isEqual = function (other) ***REMOVED***
        return this === other;
    ***REMOVED***;
    return FieldValueImpl;
***REMOVED***());
export ***REMOVED*** FieldValueImpl ***REMOVED***;
var DeleteFieldValueImpl = /** @class */ (function (_super) ***REMOVED***
    __extends(DeleteFieldValueImpl, _super);
    function DeleteFieldValueImpl() ***REMOVED***
        return _super.call(this) || this;
    ***REMOVED***
    /** Singleton instance. */
    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();
    return DeleteFieldValueImpl;
***REMOVED***(FieldValueImpl));
export ***REMOVED*** DeleteFieldValueImpl ***REMOVED***;
var ServerTimestampFieldValueImpl = /** @class */ (function (_super) ***REMOVED***
    __extends(ServerTimestampFieldValueImpl, _super);
    function ServerTimestampFieldValueImpl() ***REMOVED***
        return _super.call(this) || this;
    ***REMOVED***
    /** Singleton instance. */
    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();
    return ServerTimestampFieldValueImpl;
***REMOVED***(FieldValueImpl));
export ***REMOVED*** ServerTimestampFieldValueImpl ***REMOVED***;
// Public instance that disallows construction at runtime. This constructor is
// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will
// be called FieldValue publicly. Internally we still use FieldValueImpl which
// has a type-checked private constructor. Note that FieldValueImpl and
// PublicFieldValue can be used interchangeably in instanceof checks.
// For our internal TypeScript code PublicFieldValue doesn't exist as a type,
// and so we need to use FieldValueImpl as type and export it too.
// tslint:disable-next-line:variable-name  We treat this as a class name.
export var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');

//# sourceMappingURL=field_value.js.map
