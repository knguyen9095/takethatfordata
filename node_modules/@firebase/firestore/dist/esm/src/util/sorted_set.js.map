***REMOVED***"version":3,"sources":["../src/util/sorted_set.ts"],"names":[],"mappings":"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","file":"sorted_set.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** SortedMap, SortedMapIterator ***REMOVED*** from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> ***REMOVED***\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) ***REMOVED***\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  ***REMOVED***\n\n  /**\n   * Creates a SortedSet from the keys of the map.\n   * This is currently implemented as an O(n) copy.\n   */\n  static fromMapKeys<K, V>(map: SortedMap<K, V>): SortedSet<K> ***REMOVED***\n    let keys = new SortedSet<K>(map.comparator);\n    map.forEach(key => ***REMOVED***\n      keys = keys.add(key);\n    ***REMOVED***);\n    return keys;\n  ***REMOVED***\n\n  has(elem: T): boolean ***REMOVED***\n    return this.data.get(elem) !== null;\n  ***REMOVED***\n\n  first(): T | null ***REMOVED***\n    return this.data.minKey();\n  ***REMOVED***\n\n  last(): T | null ***REMOVED***\n    return this.data.maxKey();\n  ***REMOVED***\n\n  get size(): number ***REMOVED***\n    return this.data.size;\n  ***REMOVED***\n\n  indexOf(elem: T): number ***REMOVED***\n    return this.data.indexOf(elem);\n  ***REMOVED***\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void ***REMOVED***\n    this.data.inorderTraversal((k: T, v: boolean) => ***REMOVED***\n      cb(k);\n      return false;\n    ***REMOVED***);\n  ***REMOVED***\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void ***REMOVED***\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) ***REMOVED***\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) return;\n      cb(elem.key);\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void ***REMOVED***\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) ***REMOVED***\n      iter = this.data.getIteratorFrom(start);\n    ***REMOVED*** else ***REMOVED***\n      iter = this.data.getIterator();\n    ***REMOVED***\n    while (iter.hasNext()) ***REMOVED***\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) return;\n    ***REMOVED***\n  ***REMOVED***\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null ***REMOVED***\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  ***REMOVED***\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> ***REMOVED***\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  ***REMOVED***\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> ***REMOVED***\n    if (!this.has(elem)) return this;\n    return this.copy(this.data.remove(elem));\n  ***REMOVED***\n\n  isEmpty(): boolean ***REMOVED***\n    return this.data.isEmpty();\n  ***REMOVED***\n\n  unionWith(other: SortedSet<T>): SortedSet<T> ***REMOVED***\n    let result: SortedSet<T> = this;\n    other.forEach(elem => ***REMOVED***\n      result = result.add(elem);\n    ***REMOVED***);\n    return result;\n  ***REMOVED***\n\n  isEqual(other: SortedSet<T>): boolean ***REMOVED***\n    if (!(other instanceof SortedSet)) return false;\n    if (this.size !== other.size) return false;\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) ***REMOVED***\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) return false;\n    ***REMOVED***\n    return true;\n  ***REMOVED***\n\n  toString(): string ***REMOVED***\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  ***REMOVED***\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> ***REMOVED***\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  ***REMOVED***\n***REMOVED***\n"]***REMOVED***