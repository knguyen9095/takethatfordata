***REMOVED***"version":3,"sources":["../src/util/node_api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAIH;;;GAGG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,sBACJ,MAA2C;IAE3C,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,OAA4B,EAAE,MAA+B;QAC5D,MAAM,CAAC,UAAC,KAAa,EAAE,KAAS;YAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CACF,CAAC;AACJ,CAAC","file":"node_api.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** AnyJs ***REMOVED*** from './misc';\n\n/*\n * Utilities for dealing with node.js-style APIs. See nodePromise for more\n * details.\n */\n\n/**\n * Creates a node-style callback that resolves or rejects a new Promise. The\n * callback is passed to the given action which can then use the callback as\n * a parameter to a node-style function.\n *\n * The intent is to directly bridge a node-style function (which takes a\n * callback) into a Promise without manually converting between the node-style\n * callback and the promise at each call.\n *\n * In effect it allows you to convert:\n *\n * @example\n * new Promise((resolve: (value?: fs.Stats) => void,\n *              reject: (error?: any) => void) => ***REMOVED***\n *   fs.stat(path, (error?: any, stat?: fs.Stats) => ***REMOVED***\n *     if (error) ***REMOVED***\n *       reject(error);\n *     ***REMOVED*** else ***REMOVED***\n *       resolve(stat);\n *     ***REMOVED***\n *   ***REMOVED***);\n * ***REMOVED***);\n *\n * Into\n * @example\n * nodePromise((callback: NodeCallback<fs.Stats>) => ***REMOVED***\n *   fs.stat(path, callback);\n * ***REMOVED***);\n *\n * @param action a function that takes a node-style callback as an argument and\n *     then uses that callback to invoke some node-style API.\n * @return a new Promise which will be rejected if the callback is given the\n *     first Error parameter or will resolve to the value given otherwise.\n */\nexport function nodePromise<R>(\n  action: (callback: NodeCallback<R>) => void\n): Promise<R> ***REMOVED***\n  return new Promise(\n    (resolve: (value?: R) => void, reject: (error?: AnyJs) => void) => ***REMOVED***\n      action((error?: AnyJs, value?: R) => ***REMOVED***\n        if (error) ***REMOVED***\n          reject(error);\n        ***REMOVED*** else ***REMOVED***\n          resolve(value);\n        ***REMOVED***\n      ***REMOVED***);\n    ***REMOVED***\n  );\n***REMOVED***\n\n/**\n * A node-style callback which passes an Error as the first argument if there\n * was an error, or passes null and a proper value\n */\nexport interface NodeCallback<R> ***REMOVED***\n  (error?: AnyJs, value?: R): void;\n***REMOVED***\n"]***REMOVED***