/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** assert ***REMOVED*** from './assert';
export function contains(obj, key) ***REMOVED***
    return Object.prototype.hasOwnProperty.call(obj, key);
***REMOVED***
export function get(obj, key) ***REMOVED***
    return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;
***REMOVED***
export function size(obj) ***REMOVED***
    var count = 0;
    for (var key in obj) ***REMOVED***
        if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
            count++;
        ***REMOVED***
    ***REMOVED***
    return count;
***REMOVED***
/** Returns the given value if it's defined or the defaultValue otherwise. */
export function defaulted(value, defaultValue) ***REMOVED***
    return value !== undefined ? value : defaultValue;
***REMOVED***
export function forEachNumber(obj, fn) ***REMOVED***
    for (var key in obj) ***REMOVED***
        if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
            var num = Number(key);
            if (!isNaN(num)) ***REMOVED***
                fn(num, obj[key]);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
***REMOVED***
export function forEach(obj, fn) ***REMOVED***
    for (var key in obj) ***REMOVED***
        if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
            fn(key, obj[key]);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
export function lookupOrInsert(obj, key, valFn) ***REMOVED***
    if (!contains(obj, key)) ***REMOVED***
        obj[key] = valFn();
    ***REMOVED***
    return obj[key];
***REMOVED***
export function isEmpty(obj) ***REMOVED***
    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');
    for (var key in obj) ***REMOVED***
        if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
            return false;
        ***REMOVED***
    ***REMOVED***
    return true;
***REMOVED***
export function shallowCopy(obj) ***REMOVED***
    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');
    var result = ***REMOVED******REMOVED***;
    for (var key in obj) ***REMOVED***
        if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
            result[key] = obj[key];
        ***REMOVED***
    ***REMOVED***
    return result;
***REMOVED***

//# sourceMappingURL=obj.js.map
