/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** fail ***REMOVED*** from '../util/assert';
import ***REMOVED*** DocumentKey ***REMOVED*** from './document_key';
var Document = /** @class */ (function () ***REMOVED***
    function Document(key, version, data, options) ***REMOVED***
        this.key = key;
        this.version = version;
        this.data = data;
        this.hasLocalMutations = options.hasLocalMutations;
    ***REMOVED***
    Document.prototype.field = function (path) ***REMOVED***
        return this.data.field(path);
    ***REMOVED***;
    Document.prototype.fieldValue = function (path) ***REMOVED***
        var field = this.field(path);
        return field ? field.value() : undefined;
    ***REMOVED***;
    Document.prototype.value = function () ***REMOVED***
        return this.data.value();
    ***REMOVED***;
    Document.prototype.isEqual = function (other) ***REMOVED***
        return (other instanceof Document &&
            this.key.isEqual(other.key) &&
            this.version.isEqual(other.version) &&
            this.data.isEqual(other.data) &&
            this.hasLocalMutations === other.hasLocalMutations);
    ***REMOVED***;
    Document.prototype.toString = function () ***REMOVED***
        return ("Document(" + this.key + ", " + this.version + ", " + this.data.toString() + ", " +
            ("***REMOVED***hasLocalMutations: " + this.hasLocalMutations + "***REMOVED***)"));
    ***REMOVED***;
    Document.compareByKey = function (d1, d2) ***REMOVED***
        return DocumentKey.comparator(d1.key, d2.key);
    ***REMOVED***;
    Document.compareByField = function (field, d1, d2) ***REMOVED***
        var v1 = d1.field(field);
        var v2 = d2.field(field);
        if (v1 !== undefined && v2 !== undefined) ***REMOVED***
            return v1.compareTo(v2);
        ***REMOVED***
        else ***REMOVED***
            return fail("Trying to compare documents on fields that don't exist");
        ***REMOVED***
    ***REMOVED***;
    return Document;
***REMOVED***());
export ***REMOVED*** Document ***REMOVED***;
/**
 * A class representing a deleted document.
 * Version is set to 0 if we don't point to any specific time, otherwise it
 * denotes time we know it didn't exist at.
 */
var NoDocument = /** @class */ (function () ***REMOVED***
    function NoDocument(key, version) ***REMOVED***
        this.key = key;
        this.version = version;
    ***REMOVED***
    NoDocument.prototype.toString = function () ***REMOVED***
        return "NoDocument(" + this.key + ", " + this.version + ")";
    ***REMOVED***;
    NoDocument.prototype.isEqual = function (other) ***REMOVED***
        return (other &&
            other.version.isEqual(this.version) &&
            other.key.isEqual(this.key));
    ***REMOVED***;
    NoDocument.compareByKey = function (d1, d2) ***REMOVED***
        return DocumentKey.comparator(d1.key, d2.key);
    ***REMOVED***;
    return NoDocument;
***REMOVED***());
export ***REMOVED*** NoDocument ***REMOVED***;

//# sourceMappingURL=document.js.map
