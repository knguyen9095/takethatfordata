// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.api;

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/api/annotations;annotations";
option java_multiple_files = true;
option java_outer_classname = "HttpProto";
option java_package = "com.google.api";
option objc_class_prefix = "GAPI";


// Defines the HTTP configuration for a service. It contains a list of
// [HttpRule][google.api.HttpRule], each specifying the mapping of an RPC method
// to one or more HTTP REST API methods.
message Http ***REMOVED***
  // A list of HTTP configuration rules that apply to individual API methods.
  //
  // **NOTE:** All service configuration rules follow "last one wins" order.
  repeated HttpRule rules = 1;
***REMOVED***

// `HttpRule` defines the mapping of an RPC method to one or more HTTP
// REST APIs.  The mapping determines what portions of the request
// message are populated from the path, query parameters, or body of
// the HTTP request.  The mapping is typically specified as an
// `google.api.http` annotation, see "google/api/annotations.proto"
// for details.
//
// The mapping consists of a field specifying the path template and
// method kind.  The path template can refer to fields in the request
// message, as in the example below which describes a REST GET
// operation on a resource collection of messages:
//
//
//     service Messaging ***REMOVED***
//       rpc GetMessage(GetMessageRequest) returns (Message) ***REMOVED***
//         option (google.api.http).get = "/v1/messages/***REMOVED***message_id***REMOVED***/***REMOVED***sub.subfield***REMOVED***";
//       ***REMOVED***
//     ***REMOVED***
//     message GetMessageRequest ***REMOVED***
//       message SubMessage ***REMOVED***
//         string subfield = 1;
//       ***REMOVED***
//       string message_id = 1; // mapped to the URL
//       SubMessage sub = 2;    // `sub.subfield` is url-mapped
//     ***REMOVED***
//     message Message ***REMOVED***
//       string text = 1; // content of the resource
//     ***REMOVED***
//
// The same http annotation can alternatively be expressed inside the
// `GRPC API Configuration` YAML file.
//
//     http:
//       rules:
//         - selector: <proto_package_name>.Messaging.GetMessage
//           get: /v1/messages/***REMOVED***message_id***REMOVED***/***REMOVED***sub.subfield***REMOVED***
//
// This definition enables an automatic, bidrectional mapping of HTTP
// JSON to RPC. Example:
//
// HTTP | RPC
// -----|-----
// `GET /v1/messages/123456/foo`  | `GetMessage(message_id: "123456" sub: SubMessage(subfield: "foo"))`
//
// In general, not only fields but also field paths can be referenced
// from a path pattern. Fields mapped to the path pattern cannot be
// repeated and must have a primitive (non-message) type.
//
// Any fields in the request message which are not bound by the path
// pattern automatically become (optional) HTTP query
// parameters. Assume the following definition of the request message:
//
//
//     message GetMessageRequest ***REMOVED***
//       message SubMessage ***REMOVED***
//         string subfield = 1;
//       ***REMOVED***
//       string message_id = 1; // mapped to the URL
//       int64 revision = 2;    // becomes a parameter
//       SubMessage sub = 3;    // `sub.subfield` becomes a parameter
//     ***REMOVED***
//
//
// This enables a HTTP JSON to RPC mapping as below:
//
// HTTP | RPC
// -----|-----
// `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))`
//
// Note that fields which are mapped to HTTP parameters must have a
// primitive type or a repeated primitive type. Message types are not
// allowed. In the case of a repeated type, the parameter can be
// repeated in the URL, as in `...?param=A&param=B`.
//
// For HTTP method kinds which allow a request body, the `body` field
// specifies the mapping. Consider a REST update method on the
// message resource collection:
//
//
//     service Messaging ***REMOVED***
//       rpc UpdateMessage(UpdateMessageRequest) returns (Message) ***REMOVED***
//         option (google.api.http) = ***REMOVED***
//           put: "/v1/messages/***REMOVED***message_id***REMOVED***"
//           body: "message"
//         ***REMOVED***;
//       ***REMOVED***
//     ***REMOVED***
//     message UpdateMessageRequest ***REMOVED***
//       string message_id = 1; // mapped to the URL
//       Message message = 2;   // mapped to the body
//     ***REMOVED***
//
//
// The following HTTP JSON to RPC mapping is enabled, where the
// representation of the JSON in the request body is determined by
// protos JSON encoding:
//
// HTTP | RPC
// -----|-----
// `PUT /v1/messages/123456 ***REMOVED*** "text": "Hi!" ***REMOVED***` | `UpdateMessage(message_id: "123456" message ***REMOVED*** text: "Hi!" ***REMOVED***)`
//
// The special name `*` can be used in the body mapping to define that
// every field not bound by the path template should be mapped to the
// request body.  This enables the following alternative definition of
// the update method:
//
//     service Messaging ***REMOVED***
//       rpc UpdateMessage(Message) returns (Message) ***REMOVED***
//         option (google.api.http) = ***REMOVED***
//           put: "/v1/messages/***REMOVED***message_id***REMOVED***"
//           body: "*"
//         ***REMOVED***;
//       ***REMOVED***
//     ***REMOVED***
//     message Message ***REMOVED***
//       string message_id = 1;
//       string text = 2;
//     ***REMOVED***
//
//
// The following HTTP JSON to RPC mapping is enabled:
//
// HTTP | RPC
// -----|-----
// `PUT /v1/messages/123456 ***REMOVED*** "text": "Hi!" ***REMOVED***` | `UpdateMessage(message_id: "123456" text: "Hi!")`
//
// Note that when using `*` in the body mapping, it is not possible to
// have HTTP parameters, as all fields not bound by the path end in
// the body. This makes this option more rarely used in practice of
// defining REST APIs. The common usage of `*` is in custom methods
// which don't use the URL at all for transferring data.
//
// It is possible to define multiple HTTP methods for one RPC by using
// the `additional_bindings` option. Example:
//
//     service Messaging ***REMOVED***
//       rpc GetMessage(GetMessageRequest) returns (Message) ***REMOVED***
//         option (google.api.http) = ***REMOVED***
//           get: "/v1/messages/***REMOVED***message_id***REMOVED***"
//           additional_bindings ***REMOVED***
//             get: "/v1/users/***REMOVED***user_id***REMOVED***/messages/***REMOVED***message_id***REMOVED***"
//           ***REMOVED***
//         ***REMOVED***;
//       ***REMOVED***
//     ***REMOVED***
//     message GetMessageRequest ***REMOVED***
//       string message_id = 1;
//       string user_id = 2;
//     ***REMOVED***
//
//
// This enables the following two alternative HTTP JSON to RPC
// mappings:
//
// HTTP | RPC
// -----|-----
// `GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
// `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")`
//
// # Rules for HTTP mapping
//
// The rules for mapping HTTP path, query parameters, and body fields
// to the request message are as follows:
//
// 1. The `body` field specifies either `*` or a field path, or is
//    omitted. If omitted, it assumes there is no HTTP body.
// 2. Leaf fields (recursive expansion of nested messages in the
//    request) can be classified into three types:
//     (a) Matched in the URL template.
//     (b) Covered by body (if body is `*`, everything except (a) fields;
//         else everything under the body field)
//     (c) All other fields.
// 3. URL query parameters found in the HTTP request are mapped to (c) fields.
// 4. Any body sent with an HTTP request can contain only (b) fields.
//
// The syntax of the path template is as follows:
//
//     Template = "/" Segments [ Verb ] ;
//     Segments = Segment ***REMOVED*** "/" Segment ***REMOVED*** ;
//     Segment  = "*" | "**" | LITERAL | Variable ;
//     Variable = "***REMOVED***" FieldPath [ "=" Segments ] "***REMOVED***" ;
//     FieldPath = IDENT ***REMOVED*** "." IDENT ***REMOVED*** ;
//     Verb     = ":" LITERAL ;
//
// The syntax `*` matches a single path segment. It follows the semantics of
// [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String
// Expansion.
//
// The syntax `**` matches zero or more path segments. It follows the semantics
// of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.3 Reserved
// Expansion. NOTE: it must be the last segment in the path except the Verb.
//
// The syntax `LITERAL` matches literal text in the URL path.
//
// The syntax `Variable` matches the entire path as specified by its template;
// this nested template must not contain further variables. If a variable
// matches a single path segment, its template may be omitted, e.g. `***REMOVED***var***REMOVED***`
// is equivalent to `***REMOVED***var=****REMOVED***`.
//
// NOTE: the field paths in variables and in the `body` must not refer to
// repeated fields or map fields.
//
// Use CustomHttpPattern to specify any HTTP method that is not included in the
// `pattern` field, such as HEAD, or "*" to leave the HTTP method unspecified for
// a given URL path rule. The wild-card rule is useful for services that provide
// content to Web (HTML) clients.
message HttpRule ***REMOVED***
  // Selects methods to which this rule applies.
  //
  // Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
  string selector = 1;

  // Determines the URL pattern is matched by this rules. This pattern can be
  // used with any of the ***REMOVED***get|put|post|delete|patch***REMOVED*** methods. A custom method
  // can be defined using the 'custom' field.
  oneof pattern ***REMOVED***
    // Used for listing and getting information about resources.
    string get = 2;

    // Used for updating a resource.
    string put = 3;

    // Used for creating a resource.
    string post = 4;

    // Used for deleting a resource.
    string delete = 5;

    // Used for updating a resource.
    string patch = 6;

    // Custom pattern is used for defining custom verbs.
    CustomHttpPattern custom = 8;
  ***REMOVED***

  // The name of the request field whose value is mapped to the HTTP body, or
  // `*` for mapping all fields not captured by the path pattern to the HTTP
  // body. NOTE: the referred field must not be a repeated field and must be
  // present at the top-level of request message type.
  string body = 7;

  // Additional HTTP bindings for the selector. Nested bindings must
  // not contain an `additional_bindings` field themselves (that is,
  // the nesting may only be one level deep).
  repeated HttpRule additional_bindings = 11;
***REMOVED***

// A custom pattern is used for defining custom HTTP verb.
message CustomHttpPattern ***REMOVED***
  // The name of this custom HTTP verb.
  string kind = 1;

  // The path matched by this custom verb.
  string path = 2;
***REMOVED***
