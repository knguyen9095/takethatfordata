'use strict'
var Plumbing = require('./plumbing.js')
var hasUnicode = require('has-unicode')
var hasColor = require('./has-color.js')
var onExit = require('signal-exit')
var defaultThemes = require('./themes')
var setInterval = require('./set-interval.js')
var process = require('./process.js')
var setImmediate = require('./set-immediate')

module.exports = Gauge

function callWith (obj, method) ***REMOVED***
  return function () ***REMOVED***
    return method.call(obj)
  ***REMOVED***
***REMOVED***

function Gauge (arg1, arg2) ***REMOVED***
  var options, writeTo
  if (arg1 && arg1.write) ***REMOVED***
    writeTo = arg1
    options = arg2 || ***REMOVED******REMOVED***
  ***REMOVED*** else if (arg2 && arg2.write) ***REMOVED***
    writeTo = arg2
    options = arg1 || ***REMOVED******REMOVED***
  ***REMOVED*** else ***REMOVED***
    writeTo = process.stderr
    options = arg1 || arg2 || ***REMOVED******REMOVED***
  ***REMOVED***

  this._status = ***REMOVED***
    spun: 0,
    section: '',
    subsection: ''
  ***REMOVED***
  this._paused = false // are we paused for back pressure?
  this._disabled = true // are all progress bar updates disabled?
  this._showing = false // do we WANT the progress bar on screen
  this._onScreen = false // IS the progress bar on screen
  this._needsRedraw = false // should we print something at next tick?
  this._hideCursor = options.hideCursor == null ? true : options.hideCursor
  this._fixedFramerate = options.fixedFramerate == null
    ? !(/^v0\.8\./.test(process.version))
    : options.fixedFramerate
  this._lastUpdateAt = null
  this._updateInterval = options.updateInterval == null ? 50 : options.updateInterval

  this._themes = options.themes || defaultThemes
  this._theme = options.theme
  var theme = this._computeTheme(options.theme)
  var template = options.template || [
    ***REMOVED***type: 'progressbar', length: 20***REMOVED***,
    ***REMOVED***type: 'activityIndicator', kerning: 1, length: 1***REMOVED***,
    ***REMOVED***type: 'section', kerning: 1, default: ''***REMOVED***,
    ***REMOVED***type: 'subsection', kerning: 1, default: ''***REMOVED***
  ]
  this.setWriteTo(writeTo, options.tty)
  var PlumbingClass = options.Plumbing || Plumbing
  this._gauge = new PlumbingClass(theme, template, this.getWidth())

  this._$$doRedraw = callWith(this, this._doRedraw)
  this._$$handleSizeChange = callWith(this, this._handleSizeChange)

  this._cleanupOnExit = options.cleanupOnExit == null || options.cleanupOnExit
  this._removeOnExit = null

  if (options.enabled || (options.enabled == null && this._tty && this._tty.isTTY)) ***REMOVED***
    this.enable()
  ***REMOVED*** else ***REMOVED***
    this.disable()
  ***REMOVED***
***REMOVED***
Gauge.prototype = ***REMOVED******REMOVED***

Gauge.prototype.isEnabled = function () ***REMOVED***
  return !this._disabled
***REMOVED***

Gauge.prototype.setTemplate = function (template) ***REMOVED***
  this._gauge.setTemplate(template)
  if (this._showing) this._requestRedraw()
***REMOVED***

Gauge.prototype._computeTheme = function (theme) ***REMOVED***
  if (!theme) theme = ***REMOVED******REMOVED***
  if (typeof theme === 'string') ***REMOVED***
    theme = this._themes.getTheme(theme)
  ***REMOVED*** else if (theme && (Object.keys(theme).length === 0 || theme.hasUnicode != null || theme.hasColor != null)) ***REMOVED***
    var useUnicode = theme.hasUnicode == null ? hasUnicode() : theme.hasUnicode
    var useColor = theme.hasColor == null ? hasColor : theme.hasColor
    theme = this._themes.getDefault(***REMOVED***hasUnicode: useUnicode, hasColor: useColor, platform: theme.platform***REMOVED***)
  ***REMOVED***
  return theme
***REMOVED***

Gauge.prototype.setThemeset = function (themes) ***REMOVED***
  this._themes = themes
  this.setTheme(this._theme)
***REMOVED***

Gauge.prototype.setTheme = function (theme) ***REMOVED***
  this._gauge.setTheme(this._computeTheme(theme))
  if (this._showing) this._requestRedraw()
  this._theme = theme
***REMOVED***

Gauge.prototype._requestRedraw = function () ***REMOVED***
  this._needsRedraw = true
  if (!this._fixedFramerate) this._doRedraw()
***REMOVED***

Gauge.prototype.getWidth = function () ***REMOVED***
  return ((this._tty && this._tty.columns) || 80) - 1
***REMOVED***

Gauge.prototype.setWriteTo = function (writeTo, tty) ***REMOVED***
  var enabled = !this._disabled
  if (enabled) this.disable()
  this._writeTo = writeTo
  this._tty = tty ||
    (writeTo === process.stderr && process.stdout.isTTY && process.stdout) ||
    (writeTo.isTTY && writeTo) ||
    this._tty
  if (this._gauge) this._gauge.setWidth(this.getWidth())
  if (enabled) this.enable()
***REMOVED***

Gauge.prototype.enable = function () ***REMOVED***
  if (!this._disabled) return
  this._disabled = false
  if (this._tty) this._enableEvents()
  if (this._showing) this.show()
***REMOVED***

Gauge.prototype.disable = function () ***REMOVED***
  if (this._disabled) return
  if (this._showing) ***REMOVED***
    this._lastUpdateAt = null
    this._showing = false
    this._doRedraw()
    this._showing = true
  ***REMOVED***
  this._disabled = true
  if (this._tty) this._disableEvents()
***REMOVED***

Gauge.prototype._enableEvents = function () ***REMOVED***
  if (this._cleanupOnExit) ***REMOVED***
    this._removeOnExit = onExit(callWith(this, this.disable))
  ***REMOVED***
  this._tty.on('resize', this._$$handleSizeChange)
  if (this._fixedFramerate) ***REMOVED***
    this.redrawTracker = setInterval(this._$$doRedraw, this._updateInterval)
    if (this.redrawTracker.unref) this.redrawTracker.unref()
  ***REMOVED***
***REMOVED***

Gauge.prototype._disableEvents = function () ***REMOVED***
  this._tty.removeListener('resize', this._$$handleSizeChange)
  if (this._fixedFramerate) clearInterval(this.redrawTracker)
  if (this._removeOnExit) this._removeOnExit()
***REMOVED***

Gauge.prototype.hide = function (cb) ***REMOVED***
  if (this._disabled) return cb && process.nextTick(cb)
  if (!this._showing) return cb && process.nextTick(cb)
  this._showing = false
  this._doRedraw()
  cb && setImmediate(cb)
***REMOVED***

Gauge.prototype.show = function (section, completed) ***REMOVED***
  this._showing = true
  if (typeof section === 'string') ***REMOVED***
    this._status.section = section
  ***REMOVED*** else if (typeof section === 'object') ***REMOVED***
    var sectionKeys = Object.keys(section)
    for (var ii = 0; ii < sectionKeys.length; ++ii) ***REMOVED***
      var key = sectionKeys[ii]
      this._status[key] = section[key]
    ***REMOVED***
  ***REMOVED***
  if (completed != null) this._status.completed = completed
  if (this._disabled) return
  this._requestRedraw()
***REMOVED***

Gauge.prototype.pulse = function (subsection) ***REMOVED***
  this._status.subsection = subsection || ''
  this._status.spun ++
  if (this._disabled) return
  if (!this._showing) return
  this._requestRedraw()
***REMOVED***

Gauge.prototype._handleSizeChange = function () ***REMOVED***
  this._gauge.setWidth(this._tty.columns - 1)
  this._requestRedraw()
***REMOVED***

Gauge.prototype._doRedraw = function () ***REMOVED***
  if (this._disabled || this._paused) return
  if (!this._fixedFramerate) ***REMOVED***
    var now = Date.now()
    if (this._lastUpdateAt && now - this._lastUpdateAt < this._updateInterval) return
    this._lastUpdateAt = now
  ***REMOVED***
  if (!this._showing && this._onScreen) ***REMOVED***
    this._onScreen = false
    var result = this._gauge.hide()
    if (this._hideCursor) ***REMOVED***
      result += this._gauge.showCursor()
    ***REMOVED***
    return this._writeTo.write(result)
  ***REMOVED***
  if (!this._showing && !this._onScreen) return
  if (this._showing && !this._onScreen) ***REMOVED***
    this._onScreen = true
    this._needsRedraw = true
    if (this._hideCursor) ***REMOVED***
      this._writeTo.write(this._gauge.hideCursor())
    ***REMOVED***
  ***REMOVED***
  if (!this._needsRedraw) return
  if (!this._writeTo.write(this._gauge.show(this._status))) ***REMOVED***
    this._paused = true
    this._writeTo.on('drain', callWith(this, function () ***REMOVED***
      this._paused = false
      this._doRedraw()
    ***REMOVED***))
  ***REMOVED***
***REMOVED***
