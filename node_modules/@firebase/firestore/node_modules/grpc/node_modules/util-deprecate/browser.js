
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param ***REMOVED***Function***REMOVED*** fn - the function to deprecate
 * @param ***REMOVED***String***REMOVED*** msg - the string to print to the console when `fn` is invoked
 * @returns ***REMOVED***Function***REMOVED*** a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) ***REMOVED***
  if (config('noDeprecation')) ***REMOVED***
    return fn;
  ***REMOVED***

  var warned = false;
  function deprecated() ***REMOVED***
    if (!warned) ***REMOVED***
      if (config('throwDeprecation')) ***REMOVED***
        throw new Error(msg);
      ***REMOVED*** else if (config('traceDeprecation')) ***REMOVED***
        console.trace(msg);
      ***REMOVED*** else ***REMOVED***
        console.warn(msg);
      ***REMOVED***
      warned = true;
    ***REMOVED***
    return fn.apply(this, arguments);
  ***REMOVED***

  return deprecated;
***REMOVED***

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param ***REMOVED***String***REMOVED*** name
 * @returns ***REMOVED***Boolean***REMOVED***
 * @api private
 */

function config (name) ***REMOVED***
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try ***REMOVED***
    if (!global.localStorage) return false;
  ***REMOVED*** catch (_) ***REMOVED***
    return false;
  ***REMOVED***
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
***REMOVED***
