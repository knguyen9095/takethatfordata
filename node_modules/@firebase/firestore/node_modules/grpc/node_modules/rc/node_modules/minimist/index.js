module.exports = function (args, opts) ***REMOVED***
    if (!opts) opts = ***REMOVED******REMOVED***;
    
    var flags = ***REMOVED*** bools : ***REMOVED******REMOVED***, strings : ***REMOVED******REMOVED***, unknownFn: null ***REMOVED***;

    if (typeof opts['unknown'] === 'function') ***REMOVED***
        flags.unknownFn = opts['unknown'];
    ***REMOVED***

    if (typeof opts['boolean'] === 'boolean' && opts['boolean']) ***REMOVED***
      flags.allBools = true;
    ***REMOVED*** else ***REMOVED***
      [].concat(opts['boolean']).filter(Boolean).forEach(function (key) ***REMOVED***
          flags.bools[key] = true;
      ***REMOVED***);
    ***REMOVED***
    
    var aliases = ***REMOVED******REMOVED***;
    Object.keys(opts.alias || ***REMOVED******REMOVED***).forEach(function (key) ***REMOVED***
        aliases[key] = [].concat(opts.alias[key]);
        aliases[key].forEach(function (x) ***REMOVED***
            aliases[x] = [key].concat(aliases[key].filter(function (y) ***REMOVED***
                return x !== y;
            ***REMOVED***));
        ***REMOVED***);
    ***REMOVED***);

    [].concat(opts.string).filter(Boolean).forEach(function (key) ***REMOVED***
        flags.strings[key] = true;
        if (aliases[key]) ***REMOVED***
            flags.strings[aliases[key]] = true;
        ***REMOVED***
     ***REMOVED***);

    var defaults = opts['default'] || ***REMOVED******REMOVED***;
    
    var argv = ***REMOVED*** _ : [] ***REMOVED***;
    Object.keys(flags.bools).forEach(function (key) ***REMOVED***
        setArg(key, defaults[key] === undefined ? false : defaults[key]);
    ***REMOVED***);
    
    var notFlags = [];

    if (args.indexOf('--') !== -1) ***REMOVED***
        notFlags = args.slice(args.indexOf('--')+1);
        args = args.slice(0, args.indexOf('--'));
    ***REMOVED***

    function argDefined(key, arg) ***REMOVED***
        return (flags.allBools && /^--[^=]+$/.test(arg)) ||
            flags.strings[key] || flags.bools[key] || aliases[key];
    ***REMOVED***

    function setArg (key, val, arg) ***REMOVED***
        if (arg && flags.unknownFn && !argDefined(key, arg)) ***REMOVED***
            if (flags.unknownFn(arg) === false) return;
        ***REMOVED***

        var value = !flags.strings[key] && isNumber(val)
            ? Number(val) : val
        ;
        setKey(argv, key.split('.'), value);
        
        (aliases[key] || []).forEach(function (x) ***REMOVED***
            setKey(argv, x.split('.'), value);
        ***REMOVED***);
    ***REMOVED***

    function setKey (obj, keys, value) ***REMOVED***
        var o = obj;
        keys.slice(0,-1).forEach(function (key) ***REMOVED***
            if (o[key] === undefined) o[key] = ***REMOVED******REMOVED***;
            o = o[key];
        ***REMOVED***);

        var key = keys[keys.length - 1];
        if (o[key] === undefined || flags.bools[key] || typeof o[key] === 'boolean') ***REMOVED***
            o[key] = value;
        ***REMOVED***
        else if (Array.isArray(o[key])) ***REMOVED***
            o[key].push(value);
        ***REMOVED***
        else ***REMOVED***
            o[key] = [ o[key], value ];
        ***REMOVED***
    ***REMOVED***
    
    function aliasIsBoolean(key) ***REMOVED***
      return aliases[key].some(function (x) ***REMOVED***
          return flags.bools[x];
      ***REMOVED***);
    ***REMOVED***

    for (var i = 0; i < args.length; i++) ***REMOVED***
        var arg = args[i];
        
        if (/^--.+=/.test(arg)) ***REMOVED***
            // Using [\s\S] instead of . because js doesn't support the
            // 'dotall' regex modifier. See:
            // http://stackoverflow.com/a/1068308/13216
            var m = arg.match(/^--([^=]+)=([\s\S]*)$/);
            var key = m[1];
            var value = m[2];
            if (flags.bools[key]) ***REMOVED***
                value = value !== 'false';
            ***REMOVED***
            setArg(key, value, arg);
        ***REMOVED***
        else if (/^--no-.+/.test(arg)) ***REMOVED***
            var key = arg.match(/^--no-(.+)/)[1];
            setArg(key, false, arg);
        ***REMOVED***
        else if (/^--.+/.test(arg)) ***REMOVED***
            var key = arg.match(/^--(.+)/)[1];
            var next = args[i + 1];
            if (next !== undefined && !/^-/.test(next)
            && !flags.bools[key]
            && !flags.allBools
            && (aliases[key] ? !aliasIsBoolean(key) : true)) ***REMOVED***
                setArg(key, next, arg);
                i++;
            ***REMOVED***
            else if (/^(true|false)$/.test(next)) ***REMOVED***
                setArg(key, next === 'true', arg);
                i++;
            ***REMOVED***
            else ***REMOVED***
                setArg(key, flags.strings[key] ? '' : true, arg);
            ***REMOVED***
        ***REMOVED***
        else if (/^-[^-]+/.test(arg)) ***REMOVED***
            var letters = arg.slice(1,-1).split('');
            
            var broken = false;
            for (var j = 0; j < letters.length; j++) ***REMOVED***
                var next = arg.slice(j+2);
                
                if (next === '-') ***REMOVED***
                    setArg(letters[j], next, arg)
                    continue;
                ***REMOVED***
                
                if (/[A-Za-z]/.test(letters[j]) && /=/.test(next)) ***REMOVED***
                    setArg(letters[j], next.split('=')[1], arg);
                    broken = true;
                    break;
                ***REMOVED***
                
                if (/[A-Za-z]/.test(letters[j])
                && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) ***REMOVED***
                    setArg(letters[j], next, arg);
                    broken = true;
                    break;
                ***REMOVED***
                
                if (letters[j+1] && letters[j+1].match(/\W/)) ***REMOVED***
                    setArg(letters[j], arg.slice(j+2), arg);
                    broken = true;
                    break;
                ***REMOVED***
                else ***REMOVED***
                    setArg(letters[j], flags.strings[letters[j]] ? '' : true, arg);
                ***REMOVED***
            ***REMOVED***
            
            var key = arg.slice(-1)[0];
            if (!broken && key !== '-') ***REMOVED***
                if (args[i+1] && !/^(-|--)[^-]/.test(args[i+1])
                && !flags.bools[key]
                && (aliases[key] ? !aliasIsBoolean(key) : true)) ***REMOVED***
                    setArg(key, args[i+1], arg);
                    i++;
                ***REMOVED***
                else if (args[i+1] && /true|false/.test(args[i+1])) ***REMOVED***
                    setArg(key, args[i+1] === 'true', arg);
                    i++;
                ***REMOVED***
                else ***REMOVED***
                    setArg(key, flags.strings[key] ? '' : true, arg);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            if (!flags.unknownFn || flags.unknownFn(arg) !== false) ***REMOVED***
                argv._.push(
                    flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)
                );
            ***REMOVED***
            if (opts.stopEarly) ***REMOVED***
                argv._.push.apply(argv._, args.slice(i + 1));
                break;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    
    Object.keys(defaults).forEach(function (key) ***REMOVED***
        if (!hasKey(argv, key.split('.'))) ***REMOVED***
            setKey(argv, key.split('.'), defaults[key]);
            
            (aliases[key] || []).forEach(function (x) ***REMOVED***
                setKey(argv, x.split('.'), defaults[key]);
            ***REMOVED***);
        ***REMOVED***
    ***REMOVED***);
    
    if (opts['--']) ***REMOVED***
        argv['--'] = new Array();
        notFlags.forEach(function(key) ***REMOVED***
            argv['--'].push(key);
        ***REMOVED***);
    ***REMOVED***
    else ***REMOVED***
        notFlags.forEach(function(key) ***REMOVED***
            argv._.push(key);
        ***REMOVED***);
    ***REMOVED***

    return argv;
***REMOVED***;

function hasKey (obj, keys) ***REMOVED***
    var o = obj;
    keys.slice(0,-1).forEach(function (key) ***REMOVED***
        o = (o[key] || ***REMOVED******REMOVED***);
    ***REMOVED***);

    var key = keys[keys.length - 1];
    return key in o;
***REMOVED***

function isNumber (x) ***REMOVED***
    if (typeof x === 'number') return true;
    if (/^0x[0-9a-f]+$/i.test(x)) return true;
    return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
***REMOVED***

