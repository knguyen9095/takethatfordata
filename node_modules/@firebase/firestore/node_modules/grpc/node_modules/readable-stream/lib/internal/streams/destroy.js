'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) ***REMOVED***
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) ***REMOVED***
    if (cb) ***REMOVED***
      cb(err);
    ***REMOVED*** else if (err && (!this._writableState || !this._writableState.errorEmitted)) ***REMOVED***
      processNextTick(emitErrorNT, this, err);
    ***REMOVED***
    return;
  ***REMOVED***

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) ***REMOVED***
    this._readableState.destroyed = true;
  ***REMOVED***

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) ***REMOVED***
    this._writableState.destroyed = true;
  ***REMOVED***

  this._destroy(err || null, function (err) ***REMOVED***
    if (!cb && err) ***REMOVED***
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) ***REMOVED***
        _this._writableState.errorEmitted = true;
      ***REMOVED***
    ***REMOVED*** else if (cb) ***REMOVED***
      cb(err);
    ***REMOVED***
  ***REMOVED***);
***REMOVED***

function undestroy() ***REMOVED***
  if (this._readableState) ***REMOVED***
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  ***REMOVED***

  if (this._writableState) ***REMOVED***
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  ***REMOVED***
***REMOVED***

function emitErrorNT(self, err) ***REMOVED***
  self.emit('error', err);
***REMOVED***

module.exports = ***REMOVED***
  destroy: destroy,
  undestroy: undestroy
***REMOVED***;