'use strict';

var platform = require('os').platform();
var spawnSync = require('child_process').spawnSync;
var readdirSync = require('fs').readdirSync;

var GLIBC = 'glibc';
var MUSL = 'musl';

var spawnOptions = ***REMOVED***
  encoding: 'utf8',
  env: process.env
***REMOVED***;

if (!spawnSync) ***REMOVED***
  spawnSync = function () ***REMOVED***
    return ***REMOVED*** status: 126, stdout: '', stderr: '' ***REMOVED***;
  ***REMOVED***;
***REMOVED***

function contains (needle) ***REMOVED***
  return function (haystack) ***REMOVED***
    return haystack.indexOf(needle) !== -1;
  ***REMOVED***;
***REMOVED***

function versionFromMuslLdd (out) ***REMOVED***
  return out.split(/[\r\n]+/)[1].trim().split(/\s/)[1];
***REMOVED***

function safeReaddirSync (path) ***REMOVED***
  try ***REMOVED***
    return readdirSync(path);
  ***REMOVED*** catch (e) ***REMOVED******REMOVED***
  return [];
***REMOVED***

var family = '';
var version = '';
var method = '';

if (platform === 'linux') ***REMOVED***
  // Try getconf
  var glibc = spawnSync('getconf', ['GNU_LIBC_VERSION'], spawnOptions);
  if (glibc.status === 0) ***REMOVED***
    family = GLIBC;
    version = glibc.stdout.trim().split(' ')[1];
    method = 'getconf';
  ***REMOVED*** else ***REMOVED***
    // Try ldd
    var ldd = spawnSync('ldd', ['--version'], spawnOptions);
    if (ldd.status === 0 && ldd.stdout.indexOf(MUSL) !== -1) ***REMOVED***
      family = MUSL;
      version = versionFromMuslLdd(ldd.stdout);
      method = 'ldd';
    ***REMOVED*** else if (ldd.status === 1 && ldd.stderr.indexOf(MUSL) !== -1) ***REMOVED***
      family = MUSL;
      version = versionFromMuslLdd(ldd.stderr);
      method = 'ldd';
    ***REMOVED*** else ***REMOVED***
      // Try filesystem (family only)
      var lib = safeReaddirSync('/lib');
      if (lib.some(contains('-linux-gnu'))) ***REMOVED***
        family = GLIBC;
        method = 'filesystem';
      ***REMOVED*** else if (lib.some(contains('libc.musl-'))) ***REMOVED***
        family = MUSL;
        method = 'filesystem';
      ***REMOVED*** else if (lib.some(contains('ld-musl-'))) ***REMOVED***
        family = MUSL;
        method = 'filesystem';
      ***REMOVED*** else ***REMOVED***
        var usrSbin = safeReaddirSync('/usr/sbin');
        if (usrSbin.some(contains('glibc'))) ***REMOVED***
          family = GLIBC;
          method = 'filesystem';
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***

var isNonGlibcLinux = (family !== '' && family !== GLIBC);

module.exports = ***REMOVED***
  GLIBC: GLIBC,
  MUSL: MUSL,
  family: family,
  version: version,
  method: method,
  isNonGlibcLinux: isNonGlibcLinux
***REMOVED***;
