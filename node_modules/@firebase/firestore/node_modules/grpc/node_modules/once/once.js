var wrappy = require('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () ***REMOVED***
  Object.defineProperty(Function.prototype, 'once', ***REMOVED***
    value: function () ***REMOVED***
      return once(this)
    ***REMOVED***,
    configurable: true
  ***REMOVED***)

  Object.defineProperty(Function.prototype, 'onceStrict', ***REMOVED***
    value: function () ***REMOVED***
      return onceStrict(this)
    ***REMOVED***,
    configurable: true
  ***REMOVED***)
***REMOVED***)

function once (fn) ***REMOVED***
  var f = function () ***REMOVED***
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  ***REMOVED***
  f.called = false
  return f
***REMOVED***

function onceStrict (fn) ***REMOVED***
  var f = function () ***REMOVED***
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  ***REMOVED***
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
***REMOVED***
