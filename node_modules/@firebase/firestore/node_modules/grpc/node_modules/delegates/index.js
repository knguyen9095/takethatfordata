
/**
 * Expose `Delegator`.
 */

module.exports = Delegator;

/**
 * Initialize a delegator.
 *
 * @param ***REMOVED***Object***REMOVED*** proto
 * @param ***REMOVED***String***REMOVED*** target
 * @api public
 */

function Delegator(proto, target) ***REMOVED***
  if (!(this instanceof Delegator)) return new Delegator(proto, target);
  this.proto = proto;
  this.target = target;
  this.methods = [];
  this.getters = [];
  this.setters = [];
  this.fluents = [];
***REMOVED***

/**
 * Delegate method `name`.
 *
 * @param ***REMOVED***String***REMOVED*** name
 * @return ***REMOVED***Delegator***REMOVED*** self
 * @api public
 */

Delegator.prototype.method = function(name)***REMOVED***
  var proto = this.proto;
  var target = this.target;
  this.methods.push(name);

  proto[name] = function()***REMOVED***
    return this[target][name].apply(this[target], arguments);
  ***REMOVED***;

  return this;
***REMOVED***;

/**
 * Delegator accessor `name`.
 *
 * @param ***REMOVED***String***REMOVED*** name
 * @return ***REMOVED***Delegator***REMOVED*** self
 * @api public
 */

Delegator.prototype.access = function(name)***REMOVED***
  return this.getter(name).setter(name);
***REMOVED***;

/**
 * Delegator getter `name`.
 *
 * @param ***REMOVED***String***REMOVED*** name
 * @return ***REMOVED***Delegator***REMOVED*** self
 * @api public
 */

Delegator.prototype.getter = function(name)***REMOVED***
  var proto = this.proto;
  var target = this.target;
  this.getters.push(name);

  proto.__defineGetter__(name, function()***REMOVED***
    return this[target][name];
  ***REMOVED***);

  return this;
***REMOVED***;

/**
 * Delegator setter `name`.
 *
 * @param ***REMOVED***String***REMOVED*** name
 * @return ***REMOVED***Delegator***REMOVED*** self
 * @api public
 */

Delegator.prototype.setter = function(name)***REMOVED***
  var proto = this.proto;
  var target = this.target;
  this.setters.push(name);

  proto.__defineSetter__(name, function(val)***REMOVED***
    return this[target][name] = val;
  ***REMOVED***);

  return this;
***REMOVED***;

/**
 * Delegator fluent accessor
 *
 * @param ***REMOVED***String***REMOVED*** name
 * @return ***REMOVED***Delegator***REMOVED*** self
 * @api public
 */

Delegator.prototype.fluent = function (name) ***REMOVED***
  var proto = this.proto;
  var target = this.target;
  this.fluents.push(name);

  proto[name] = function(val)***REMOVED***
    if ('undefined' != typeof val) ***REMOVED***
      this[target][name] = val;
      return this;
    ***REMOVED*** else ***REMOVED***
      return this[target][name];
    ***REMOVED***
  ***REMOVED***;

  return this;
***REMOVED***;
