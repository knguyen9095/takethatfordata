module.exports = FileWriter

var fs = require('graceful-fs')
var Writer = require('./writer.js')
var inherits = require('inherits')
var EOF = ***REMOVED******REMOVED***

inherits(FileWriter, Writer)

function FileWriter (props) ***REMOVED***
  var self = this
  if (!(self instanceof FileWriter)) ***REMOVED***
    throw new Error('FileWriter must be called as constructor.')
  ***REMOVED***

  // should already be established as a File type
  if (props.type !== 'File' || !props.File) ***REMOVED***
    throw new Error('Non-file type ' + props.type)
  ***REMOVED***

  self._buffer = []
  self._bytesWritten = 0

  Writer.call(this, props)
***REMOVED***

FileWriter.prototype._create = function () ***REMOVED***
  var self = this
  if (self._stream) return

  var so = ***REMOVED******REMOVED***
  if (self.props.flags) so.flags = self.props.flags
  so.mode = Writer.filemode
  if (self._old && self._old.blksize) so.bufferSize = self._old.blksize

  self._stream = fs.createWriteStream(self._path, so)

  self._stream.on('open', function () ***REMOVED***
    // console.error("FW open", self._buffer, self._path)
    self.ready = true
    self._buffer.forEach(function (c) ***REMOVED***
      if (c === EOF) self._stream.end()
      else self._stream.write(c)
    ***REMOVED***)
    self.emit('ready')
    // give this a kick just in case it needs it.
    self.emit('drain')
  ***REMOVED***)

  self._stream.on('error', function (er) ***REMOVED*** self.emit('error', er) ***REMOVED***)

  self._stream.on('drain', function () ***REMOVED*** self.emit('drain') ***REMOVED***)

  self._stream.on('close', function () ***REMOVED***
    // console.error('\n\nFW Stream Close', self._path, self.size)
    self._finish()
  ***REMOVED***)
***REMOVED***

FileWriter.prototype.write = function (c) ***REMOVED***
  var self = this

  self._bytesWritten += c.length

  if (!self.ready) ***REMOVED***
    if (!Buffer.isBuffer(c) && typeof c !== 'string') ***REMOVED***
      throw new Error('invalid write data')
    ***REMOVED***
    self._buffer.push(c)
    return false
  ***REMOVED***

  var ret = self._stream.write(c)
  // console.error('\t-- fw wrote, _stream says', ret, self._stream._queue.length)

  // allow 2 buffered writes, because otherwise there's just too
  // much stop and go bs.
  if (ret === false && self._stream._queue) ***REMOVED***
    return self._stream._queue.length <= 2
  ***REMOVED*** else ***REMOVED***
    return ret
  ***REMOVED***
***REMOVED***

FileWriter.prototype.end = function (c) ***REMOVED***
  var self = this

  if (c) self.write(c)

  if (!self.ready) ***REMOVED***
    self._buffer.push(EOF)
    return false
  ***REMOVED***

  return self._stream.end()
***REMOVED***

FileWriter.prototype._finish = function () ***REMOVED***
  var self = this
  if (typeof self.size === 'number' && self._bytesWritten !== self.size) ***REMOVED***
    self.error(
      'Did not get expected byte count.\n' +
      'expect: ' + self.size + '\n' +
      'actual: ' + self._bytesWritten)
  ***REMOVED***
  Writer.prototype._finish.call(self)
***REMOVED***
