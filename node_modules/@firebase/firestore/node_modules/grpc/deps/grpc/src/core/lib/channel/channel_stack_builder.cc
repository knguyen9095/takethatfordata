/*
 *
 * Copyright 2016 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include "src/core/lib/channel/channel_stack_builder.h"

#include <string.h>

#include <grpc/support/alloc.h>
#include <grpc/support/string_util.h>

grpc_core::TraceFlag grpc_trace_channel_stack_builder(false,
                                                      "channel_stack_builder");

typedef struct filter_node ***REMOVED***
  struct filter_node* next;
  struct filter_node* prev;
  const grpc_channel_filter* filter;
  grpc_post_filter_create_init_func init;
  void* init_arg;
***REMOVED*** filter_node;

struct grpc_channel_stack_builder ***REMOVED***
  // sentinel nodes for filters that have been added
  filter_node begin;
  filter_node end;
  // various set/get-able parameters
  grpc_channel_args* args;
  grpc_transport* transport;
  char* target;
  const char* name;
***REMOVED***;

struct grpc_channel_stack_builder_iterator ***REMOVED***
  grpc_channel_stack_builder* builder;
  filter_node* node;
***REMOVED***;

grpc_channel_stack_builder* grpc_channel_stack_builder_create(void) ***REMOVED***
  grpc_channel_stack_builder* b =
      (grpc_channel_stack_builder*)gpr_zalloc(sizeof(*b));

  b->begin.filter = nullptr;
  b->end.filter = nullptr;
  b->begin.next = &b->end;
  b->begin.prev = &b->end;
  b->end.next = &b->begin;
  b->end.prev = &b->begin;

  return b;
***REMOVED***

void grpc_channel_stack_builder_set_target(grpc_channel_stack_builder* b,
                                           const char* target) ***REMOVED***
  gpr_free(b->target);
  b->target = gpr_strdup(target);
***REMOVED***

const char* grpc_channel_stack_builder_get_target(
    grpc_channel_stack_builder* b) ***REMOVED***
  return b->target;
***REMOVED***

static grpc_channel_stack_builder_iterator* create_iterator_at_filter_node(
    grpc_channel_stack_builder* builder, filter_node* node) ***REMOVED***
  grpc_channel_stack_builder_iterator* it =
      (grpc_channel_stack_builder_iterator*)gpr_malloc(sizeof(*it));
  it->builder = builder;
  it->node = node;
  return it;
***REMOVED***

void grpc_channel_stack_builder_iterator_destroy(
    grpc_channel_stack_builder_iterator* it) ***REMOVED***
  gpr_free(it);
***REMOVED***

grpc_channel_stack_builder_iterator*
grpc_channel_stack_builder_create_iterator_at_first(
    grpc_channel_stack_builder* builder) ***REMOVED***
  return create_iterator_at_filter_node(builder, &builder->begin);
***REMOVED***

grpc_channel_stack_builder_iterator*
grpc_channel_stack_builder_create_iterator_at_last(
    grpc_channel_stack_builder* builder) ***REMOVED***
  return create_iterator_at_filter_node(builder, &builder->end);
***REMOVED***

bool grpc_channel_stack_builder_iterator_is_end(
    grpc_channel_stack_builder_iterator* iterator) ***REMOVED***
  return iterator->node == &iterator->builder->end;
***REMOVED***

const char* grpc_channel_stack_builder_iterator_filter_name(
    grpc_channel_stack_builder_iterator* iterator) ***REMOVED***
  if (iterator->node->filter == nullptr) return nullptr;
  return iterator->node->filter->name;
***REMOVED***

bool grpc_channel_stack_builder_move_next(
    grpc_channel_stack_builder_iterator* iterator) ***REMOVED***
  if (iterator->node == &iterator->builder->end) return false;
  iterator->node = iterator->node->next;
  return true;
***REMOVED***

bool grpc_channel_stack_builder_move_prev(
    grpc_channel_stack_builder_iterator* iterator) ***REMOVED***
  if (iterator->node == &iterator->builder->begin) return false;
  iterator->node = iterator->node->prev;
  return true;
***REMOVED***

grpc_channel_stack_builder_iterator* grpc_channel_stack_builder_iterator_find(
    grpc_channel_stack_builder* builder, const char* filter_name) ***REMOVED***
  GPR_ASSERT(filter_name != nullptr);
  grpc_channel_stack_builder_iterator* it =
      grpc_channel_stack_builder_create_iterator_at_first(builder);
  while (grpc_channel_stack_builder_move_next(it)) ***REMOVED***
    if (grpc_channel_stack_builder_iterator_is_end(it)) break;
    const char* filter_name_at_it =
        grpc_channel_stack_builder_iterator_filter_name(it);
    if (strcmp(filter_name, filter_name_at_it) == 0) break;
  ***REMOVED***
  return it;
***REMOVED***

bool grpc_channel_stack_builder_move_prev(
    grpc_channel_stack_builder_iterator* iterator);

void grpc_channel_stack_builder_set_name(grpc_channel_stack_builder* builder,
                                         const char* name) ***REMOVED***
  GPR_ASSERT(builder->name == nullptr);
  builder->name = name;
***REMOVED***

void grpc_channel_stack_builder_set_channel_arguments(
    grpc_exec_ctx* exec_ctx, grpc_channel_stack_builder* builder,
    const grpc_channel_args* args) ***REMOVED***
  if (builder->args != nullptr) ***REMOVED***
    grpc_channel_args_destroy(exec_ctx, builder->args);
  ***REMOVED***
  builder->args = grpc_channel_args_copy(args);
***REMOVED***

void grpc_channel_stack_builder_set_transport(
    grpc_channel_stack_builder* builder, grpc_transport* transport) ***REMOVED***
  GPR_ASSERT(builder->transport == nullptr);
  builder->transport = transport;
***REMOVED***

grpc_transport* grpc_channel_stack_builder_get_transport(
    grpc_channel_stack_builder* builder) ***REMOVED***
  return builder->transport;
***REMOVED***

const grpc_channel_args* grpc_channel_stack_builder_get_channel_arguments(
    grpc_channel_stack_builder* builder) ***REMOVED***
  return builder->args;
***REMOVED***

bool grpc_channel_stack_builder_append_filter(
    grpc_channel_stack_builder* builder, const grpc_channel_filter* filter,
    grpc_post_filter_create_init_func post_init_func, void* user_data) ***REMOVED***
  grpc_channel_stack_builder_iterator* it =
      grpc_channel_stack_builder_create_iterator_at_last(builder);
  bool ok = grpc_channel_stack_builder_add_filter_before(
      it, filter, post_init_func, user_data);
  grpc_channel_stack_builder_iterator_destroy(it);
  return ok;
***REMOVED***

bool grpc_channel_stack_builder_remove_filter(
    grpc_channel_stack_builder* builder, const char* filter_name) ***REMOVED***
  grpc_channel_stack_builder_iterator* it =
      grpc_channel_stack_builder_iterator_find(builder, filter_name);
  if (grpc_channel_stack_builder_iterator_is_end(it)) ***REMOVED***
    grpc_channel_stack_builder_iterator_destroy(it);
    return false;
  ***REMOVED***
  it->node->prev->next = it->node->next;
  it->node->next->prev = it->node->prev;
  gpr_free(it->node);
  grpc_channel_stack_builder_iterator_destroy(it);
  return true;
***REMOVED***

bool grpc_channel_stack_builder_prepend_filter(
    grpc_channel_stack_builder* builder, const grpc_channel_filter* filter,
    grpc_post_filter_create_init_func post_init_func, void* user_data) ***REMOVED***
  grpc_channel_stack_builder_iterator* it =
      grpc_channel_stack_builder_create_iterator_at_first(builder);
  bool ok = grpc_channel_stack_builder_add_filter_after(
      it, filter, post_init_func, user_data);
  grpc_channel_stack_builder_iterator_destroy(it);
  return ok;
***REMOVED***

static void add_after(filter_node* before, const grpc_channel_filter* filter,
                      grpc_post_filter_create_init_func post_init_func,
                      void* user_data) ***REMOVED***
  filter_node* new_node = (filter_node*)gpr_malloc(sizeof(*new_node));
  new_node->next = before->next;
  new_node->prev = before;
  new_node->next->prev = new_node->prev->next = new_node;
  new_node->filter = filter;
  new_node->init = post_init_func;
  new_node->init_arg = user_data;
***REMOVED***

bool grpc_channel_stack_builder_add_filter_before(
    grpc_channel_stack_builder_iterator* iterator,
    const grpc_channel_filter* filter,
    grpc_post_filter_create_init_func post_init_func, void* user_data) ***REMOVED***
  if (iterator->node == &iterator->builder->begin) return false;
  add_after(iterator->node->prev, filter, post_init_func, user_data);
  return true;
***REMOVED***

bool grpc_channel_stack_builder_add_filter_after(
    grpc_channel_stack_builder_iterator* iterator,
    const grpc_channel_filter* filter,
    grpc_post_filter_create_init_func post_init_func, void* user_data) ***REMOVED***
  if (iterator->node == &iterator->builder->end) return false;
  add_after(iterator->node, filter, post_init_func, user_data);
  return true;
***REMOVED***

void grpc_channel_stack_builder_destroy(grpc_exec_ctx* exec_ctx,
                                        grpc_channel_stack_builder* builder) ***REMOVED***
  filter_node* p = builder->begin.next;
  while (p != &builder->end) ***REMOVED***
    filter_node* next = p->next;
    gpr_free(p);
    p = next;
  ***REMOVED***
  if (builder->args != nullptr) ***REMOVED***
    grpc_channel_args_destroy(exec_ctx, builder->args);
  ***REMOVED***
  gpr_free(builder->target);
  gpr_free(builder);
***REMOVED***

grpc_error* grpc_channel_stack_builder_finish(
    grpc_exec_ctx* exec_ctx, grpc_channel_stack_builder* builder,
    size_t prefix_bytes, int initial_refs, grpc_iomgr_cb_func destroy,
    void* destroy_arg, void** result) ***REMOVED***
  // count the number of filters
  size_t num_filters = 0;
  for (filter_node* p = builder->begin.next; p != &builder->end; p = p->next) ***REMOVED***
    num_filters++;
  ***REMOVED***

  // create an array of filters
  const grpc_channel_filter** filters =
      (const grpc_channel_filter**)gpr_malloc(sizeof(*filters) * num_filters);
  size_t i = 0;
  for (filter_node* p = builder->begin.next; p != &builder->end; p = p->next) ***REMOVED***
    filters[i++] = p->filter;
  ***REMOVED***

  // calculate the size of the channel stack
  size_t channel_stack_size = grpc_channel_stack_size(filters, num_filters);

  // allocate memory, with prefix_bytes followed by channel_stack_size
  *result = gpr_zalloc(prefix_bytes + channel_stack_size);
  // fetch a pointer to the channel stack
  grpc_channel_stack* channel_stack =
      (grpc_channel_stack*)((char*)(*result) + prefix_bytes);
  // and initialize it
  grpc_error* error = grpc_channel_stack_init(
      exec_ctx, initial_refs, destroy,
      destroy_arg == nullptr ? *result : destroy_arg, filters, num_filters,
      builder->args, builder->transport, builder->name, channel_stack);

  if (error != GRPC_ERROR_NONE) ***REMOVED***
    grpc_channel_stack_destroy(exec_ctx, channel_stack);
    gpr_free(*result);
    *result = nullptr;
  ***REMOVED*** else ***REMOVED***
    // run post-initialization functions
    i = 0;
    for (filter_node* p = builder->begin.next; p != &builder->end;
         p = p->next) ***REMOVED***
      if (p->init != nullptr) ***REMOVED***
        p->init(channel_stack, grpc_channel_stack_element(channel_stack, i),
                p->init_arg);
      ***REMOVED***
      i++;
    ***REMOVED***
  ***REMOVED***

  grpc_channel_stack_builder_destroy(exec_ctx, builder);
  gpr_free((grpc_channel_filter**)filters);

  return error;
***REMOVED***
