/*
 *
 * Copyright 2015 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include "src/core/ext/transport/chttp2/transport/stream_map.h"

#include <string.h>

#include <grpc/support/alloc.h>
#include <grpc/support/log.h>
#include <grpc/support/useful.h>

void grpc_chttp2_stream_map_init(grpc_chttp2_stream_map* map,
                                 size_t initial_capacity) ***REMOVED***
  GPR_ASSERT(initial_capacity > 1);
  map->keys = (uint32_t*)gpr_malloc(sizeof(uint32_t) * initial_capacity);
  map->values = (void**)gpr_malloc(sizeof(void*) * initial_capacity);
  map->count = 0;
  map->free = 0;
  map->capacity = initial_capacity;
***REMOVED***

void grpc_chttp2_stream_map_destroy(grpc_chttp2_stream_map* map) ***REMOVED***
  gpr_free(map->keys);
  gpr_free(map->values);
***REMOVED***

static size_t compact(uint32_t* keys, void** values, size_t count) ***REMOVED***
  size_t i, out;

  for (i = 0, out = 0; i < count; i++) ***REMOVED***
    if (values[i]) ***REMOVED***
      keys[out] = keys[i];
      values[out] = values[i];
      out++;
    ***REMOVED***
  ***REMOVED***

  return out;
***REMOVED***

void grpc_chttp2_stream_map_add(grpc_chttp2_stream_map* map, uint32_t key,
                                void* value) ***REMOVED***
  size_t count = map->count;
  size_t capacity = map->capacity;
  uint32_t* keys = map->keys;
  void** values = map->values;

  GPR_ASSERT(count == 0 || keys[count - 1] < key);
  GPR_ASSERT(value);
  GPR_ASSERT(grpc_chttp2_stream_map_find(map, key) == nullptr);

  if (count == capacity) ***REMOVED***
    if (map->free > capacity / 4) ***REMOVED***
      count = compact(keys, values, count);
      map->free = 0;
    ***REMOVED*** else ***REMOVED***
      /* resize when less than 25% of the table is free, because compaction
         won't help much */
      map->capacity = capacity = 3 * capacity / 2;
      map->keys = keys =
          (uint32_t*)gpr_realloc(keys, capacity * sizeof(uint32_t));
      map->values = values =
          (void**)gpr_realloc(values, capacity * sizeof(void*));
    ***REMOVED***
  ***REMOVED***

  keys[count] = key;
  values[count] = value;
  map->count = count + 1;
***REMOVED***

static void** find(grpc_chttp2_stream_map* map, uint32_t key) ***REMOVED***
  size_t min_idx = 0;
  size_t max_idx = map->count;
  size_t mid_idx;
  uint32_t* keys = map->keys;
  void** values = map->values;
  uint32_t mid_key;

  if (max_idx == 0) return nullptr;

  while (min_idx < max_idx) ***REMOVED***
    /* find the midpoint, avoiding overflow */
    mid_idx = min_idx + ((max_idx - min_idx) / 2);
    mid_key = keys[mid_idx];

    if (mid_key < key) ***REMOVED***
      min_idx = mid_idx + 1;
    ***REMOVED*** else if (mid_key > key) ***REMOVED***
      max_idx = mid_idx;
    ***REMOVED*** else /* mid_key == key */
    ***REMOVED***
      return &values[mid_idx];
    ***REMOVED***
  ***REMOVED***

  return nullptr;
***REMOVED***

void* grpc_chttp2_stream_map_delete(grpc_chttp2_stream_map* map, uint32_t key) ***REMOVED***
  void** pvalue = find(map, key);
  void* out = nullptr;
  if (pvalue != nullptr) ***REMOVED***
    out = *pvalue;
    *pvalue = nullptr;
    map->free += (out != nullptr);
    /* recognize complete emptyness and ensure we can skip
     * defragmentation later */
    if (map->free == map->count) ***REMOVED***
      map->free = map->count = 0;
    ***REMOVED***
    GPR_ASSERT(grpc_chttp2_stream_map_find(map, key) == nullptr);
  ***REMOVED***
  return out;
***REMOVED***

void* grpc_chttp2_stream_map_find(grpc_chttp2_stream_map* map, uint32_t key) ***REMOVED***
  void** pvalue = find(map, key);
  return pvalue != nullptr ? *pvalue : nullptr;
***REMOVED***

size_t grpc_chttp2_stream_map_size(grpc_chttp2_stream_map* map) ***REMOVED***
  return map->count - map->free;
***REMOVED***

void* grpc_chttp2_stream_map_rand(grpc_chttp2_stream_map* map) ***REMOVED***
  if (map->count == map->free) ***REMOVED***
    return nullptr;
  ***REMOVED***
  if (map->free != 0) ***REMOVED***
    map->count = compact(map->keys, map->values, map->count);
    map->free = 0;
    GPR_ASSERT(map->count > 0);
  ***REMOVED***
  return map->values[((size_t)rand()) % map->count];
***REMOVED***

void grpc_chttp2_stream_map_for_each(grpc_chttp2_stream_map* map,
                                     void (*f)(void* user_data, uint32_t key,
                                               void* value),
                                     void* user_data) ***REMOVED***
  size_t i;

  for (i = 0; i < map->count; i++) ***REMOVED***
    if (map->values[i]) ***REMOVED***
      f(user_data, map->keys[i], map->values[i]);
    ***REMOVED***
  ***REMOVED***
***REMOVED***
