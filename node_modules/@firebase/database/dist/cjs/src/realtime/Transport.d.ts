/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** RepoInfo ***REMOVED*** from '../core/RepoInfo';
export interface TransportConstructor ***REMOVED***
    new (connId: string, repoInfo: RepoInfo, transportSessionId?: string, lastSessionId?: string): Transport;
    isAvailable: () => boolean;
    responsesRequiredToBeHealthy?: number;
    healthyTimeout?: number;
***REMOVED***
export declare abstract class Transport ***REMOVED***
    /**
     * Bytes received since connection started.
     * @type ***REMOVED***number***REMOVED***
     */
    abstract bytesReceived: number;
    /**
     * Bytes sent since connection started.
     * @type ***REMOVED***number***REMOVED***
     */
    abstract bytesSent: number;
    /**
     * An identifier for this connection, used for logging
     * @type ***REMOVED***string***REMOVED***
     */
    abstract connId: string;
    /**
     *
     * @param ***REMOVED***string***REMOVED*** connId An identifier for this connection, used for logging
     * @param ***REMOVED***RepoInfo***REMOVED*** repoInfo The info for the endpoint to send data to.
     * @param ***REMOVED***string=***REMOVED*** transportSessionId Optional transportSessionId if this is connecting to an existing transport session
     * @param ***REMOVED***string=***REMOVED*** lastSessionId Optional lastSessionId if there was a previous connection
     * @interface
     */
    constructor(connId: string, repoInfo: RepoInfo, transportSessionId?: string, lastSessionId?: string);
    /**
     * @param ***REMOVED***function(Object)***REMOVED*** onMessage Callback when messages arrive
     * @param ***REMOVED***function()***REMOVED*** onDisconnect Callback with connection lost.
     */
    abstract open(onMessage: (a: Object) => void, onDisconnect: (a?: boolean) => void): void;
    abstract start(): void;
    abstract close(): void;
    /**
     * @param ***REMOVED***!Object***REMOVED*** data The JSON data to transmit
     */
    abstract send(data: Object): void;
    abstract markConnectionHealthy(): void;
    abstract markConnectionHealthy(): void;
***REMOVED***
export interface TransportConstructor ***REMOVED***
    new (connId: string, RepoInfo: any, transportSessionId?: string, lastSessionId?: string): any;
***REMOVED***
