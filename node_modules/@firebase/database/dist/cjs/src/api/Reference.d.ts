/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** OnDisconnect ***REMOVED*** from './onDisconnect';
import ***REMOVED*** TransactionResult ***REMOVED*** from './TransactionResult';
import ***REMOVED*** Query ***REMOVED*** from './Query';
import ***REMOVED*** Repo ***REMOVED*** from '../core/Repo';
import ***REMOVED*** Path ***REMOVED*** from '../core/util/Path';
import ***REMOVED*** Database ***REMOVED*** from './Database';
import ***REMOVED*** DataSnapshot ***REMOVED*** from './DataSnapshot';
export interface ReferenceConstructor ***REMOVED***
    new (repo: Repo, path: Path): Reference;
***REMOVED***
export declare class Reference extends Query ***REMOVED***
    then: (a?: any) => Promise<any>;
    catch: (a?: Error) => Promise<any>;
    /**
     * Call options:
     *   new Reference(Repo, Path) or
     *   new Reference(url: string, string|RepoManager)
     *
     * Externally - this is the firebase.database.Reference type.
     *
     * @param ***REMOVED***!Repo***REMOVED*** repo
     * @param ***REMOVED***(!Path)***REMOVED*** path
     * @extends ***REMOVED***Query***REMOVED***
     */
    constructor(repo: Repo, path: Path);
    /** @return ***REMOVED***?string***REMOVED*** */
    getKey(): string | null;
    /**
     * @param ***REMOVED***!(string|Path)***REMOVED*** pathString
     * @return ***REMOVED***!Reference***REMOVED***
     */
    child(pathString: string | Path): Reference;
    /** @return ***REMOVED***?Reference***REMOVED*** */
    getParent(): Reference | null;
    /** @return ***REMOVED***!Reference***REMOVED*** */
    getRoot(): Reference;
    /** @return ***REMOVED***!Database***REMOVED*** */
    databaseProp(): Database;
    /**
     * @param ***REMOVED*******REMOVED*** newVal
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!Promise***REMOVED***
     */
    set(newVal: any, onComplete?: (a: Error | null) => void): Promise<any>;
    /**
     * @param ***REMOVED***!Object***REMOVED*** objectToMerge
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!Promise***REMOVED***
     */
    update(objectToMerge: Object, onComplete?: (a: Error | null) => void): Promise<any>;
    /**
     * @param ***REMOVED*******REMOVED*** newVal
     * @param ***REMOVED***string|number|null***REMOVED*** newPriority
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!Promise***REMOVED***
     */
    setWithPriority(newVal: any, newPriority: string | number | null, onComplete?: (a: Error | null) => void): Promise<any>;
    /**
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!Promise***REMOVED***
     */
    remove(onComplete?: (a: Error | null) => void): Promise<any>;
    /**
     * @param ***REMOVED***function(*):****REMOVED*** transactionUpdate
     * @param ***REMOVED***(function(?Error, boolean, ?DataSnapshot))=***REMOVED*** onComplete
     * @param ***REMOVED***boolean=***REMOVED*** applyLocally
     * @return ***REMOVED***!Promise***REMOVED***
     */
    transaction(transactionUpdate: (a: any) => any, onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void, applyLocally?: boolean): Promise<TransactionResult>;
    /**
     * @param ***REMOVED***string|number|null***REMOVED*** priority
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!Promise***REMOVED***
     */
    setPriority(priority: string | number | null, onComplete?: (a: Error | null) => void): Promise<any>;
    /**
     * @param ***REMOVED****=***REMOVED*** value
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!Reference***REMOVED***
     */
    push(value?: any, onComplete?: (a: Error | null) => void): Reference;
    /**
     * @return ***REMOVED***!OnDisconnect***REMOVED***
     */
    onDisconnect(): OnDisconnect;
    readonly database: Database;
    readonly key: string | null;
    readonly parent: Reference | null;
    readonly root: Reference;
***REMOVED***
