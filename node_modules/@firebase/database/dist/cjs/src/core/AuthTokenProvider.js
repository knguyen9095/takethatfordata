"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var util_1 = require("./util/util");
/**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */
var AuthTokenProvider = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***!FirebaseApp***REMOVED*** app_
     */
    function AuthTokenProvider(app_) ***REMOVED***
        this.app_ = app_;
    ***REMOVED***
    /**
     * @param ***REMOVED***boolean***REMOVED*** forceRefresh
     * @return ***REMOVED***!Promise<FirebaseAuthTokenData>***REMOVED***
     */
    AuthTokenProvider.prototype.getToken = function (forceRefresh) ***REMOVED***
        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, 
        // .catch
        function (error) ***REMOVED***
            // TODO: Need to figure out all the cases this is raised and whether
            // this makes sense.
            if (error && error.code === 'auth/token-not-initialized') ***REMOVED***
                util_1.log('Got auth/token-not-initialized error.  Treating as null token.');
                return null;
            ***REMOVED***
            else ***REMOVED***
                return Promise.reject(error);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;
    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) ***REMOVED***
        // TODO: We might want to wrap the listener and call it with no args to
        // avoid a leaky abstraction, but that makes removing the listener harder.
        this.app_['INTERNAL']['addAuthTokenListener'](listener);
    ***REMOVED***;
    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) ***REMOVED***
        this.app_['INTERNAL']['removeAuthTokenListener'](listener);
    ***REMOVED***;
    AuthTokenProvider.prototype.notifyForInvalidToken = function () ***REMOVED***
        var errorMessage = 'Provided authentication credentials for the app named "' +
            this.app_.name +
            '" are invalid. This usually indicates your app was not ' +
            'initialized correctly. ';
        if ('credential' in this.app_.options) ***REMOVED***
            errorMessage +=
                'Make sure the "credential" property provided to initializeApp() ' +
                    'is authorized to access the specified "databaseURL" and is from the correct ' +
                    'project.';
        ***REMOVED***
        else if ('serviceAccount' in this.app_.options) ***REMOVED***
            errorMessage +=
                'Make sure the "serviceAccount" property provided to initializeApp() ' +
                    'is authorized to access the specified "databaseURL" and is from the correct ' +
                    'project.';
        ***REMOVED***
        else ***REMOVED***
            errorMessage +=
                'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                    'initializeApp() match the values provided for your app at ' +
                    'https://console.firebase.google.com/.';
        ***REMOVED***
        util_1.warn(errorMessage);
    ***REMOVED***;
    return AuthTokenProvider;
***REMOVED***());
exports.AuthTokenProvider = AuthTokenProvider;

//# sourceMappingURL=AuthTokenProvider.js.map
