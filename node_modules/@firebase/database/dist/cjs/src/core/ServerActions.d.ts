/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** Query ***REMOVED*** from '../api/Query';
/**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */
export declare abstract class ServerActions ***REMOVED***
    /**
     * @param ***REMOVED***!Query***REMOVED*** query
     * @param ***REMOVED***function():string***REMOVED*** currentHashFn
     * @param ***REMOVED***?number***REMOVED*** tag
     * @param ***REMOVED***function(string, *)***REMOVED*** onComplete
     */
    abstract listen(query: Query, currentHashFn: () => string, tag: number | null, onComplete: (a: string, b: any) => void): void;
    /**
     * Remove a listen.
     *
     * @param ***REMOVED***!Query***REMOVED*** query
     * @param ***REMOVED***?number***REMOVED*** tag
     */
    abstract unlisten(query: Query, tag: number | null): void;
    /**
     * @param ***REMOVED***string***REMOVED*** pathString
     * @param ***REMOVED*******REMOVED*** data
     * @param ***REMOVED***function(string, string)=***REMOVED*** onComplete
     * @param ***REMOVED***string=***REMOVED*** hash
     */
    put(pathString: string, data: any, onComplete?: (a: string, b: string) => void, hash?: string): void;
    /**
     * @param ***REMOVED***string***REMOVED*** pathString
     * @param ***REMOVED*******REMOVED*** data
     * @param ***REMOVED***function(string, ?string)***REMOVED*** onComplete
     * @param ***REMOVED***string=***REMOVED*** hash
     */
    merge(pathString: string, data: any, onComplete: (a: string, b: string | null) => void, hash?: string): void;
    /**
     * Refreshes the auth token for the current connection.
     * @param ***REMOVED***string***REMOVED*** token The authentication token
     */
    refreshAuthToken(token: string): void;
    /**
     * @param ***REMOVED***string***REMOVED*** pathString
     * @param ***REMOVED*******REMOVED*** data
     * @param ***REMOVED***function(string, string)=***REMOVED*** onComplete
     */
    onDisconnectPut(pathString: string, data: any, onComplete?: (a: string, b: string) => void): void;
    /**
     * @param ***REMOVED***string***REMOVED*** pathString
     * @param ***REMOVED*******REMOVED*** data
     * @param ***REMOVED***function(string, string)=***REMOVED*** onComplete
     */
    onDisconnectMerge(pathString: string, data: any, onComplete?: (a: string, b: string) => void): void;
    /**
     * @param ***REMOVED***string***REMOVED*** pathString
     * @param ***REMOVED***function(string, string)=***REMOVED*** onComplete
     */
    onDisconnectCancel(pathString: string, onComplete?: (a: string, b: string) => void): void;
    /**
     * @param ***REMOVED***Object.<string, *>***REMOVED*** stats
     */
    reportStats(stats: ***REMOVED***
        [k: string]: any;
    ***REMOVED***): void;
***REMOVED***
