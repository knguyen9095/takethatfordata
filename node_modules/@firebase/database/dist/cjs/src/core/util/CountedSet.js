"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var util_1 = require("@firebase/util");
/**
 * Implements a set with a count of elements.
 *
 * @template K, V
 */
var CountedSet = /** @class */ (function () ***REMOVED***
    function CountedSet() ***REMOVED***
        this.set = ***REMOVED******REMOVED***;
    ***REMOVED***
    /**
     * @param ***REMOVED***!K***REMOVED*** item
     * @param ***REMOVED***V***REMOVED*** val
     */
    CountedSet.prototype.add = function (item, val) ***REMOVED***
        this.set[item] = val !== null ? val : true;
    ***REMOVED***;
    /**
     * @param ***REMOVED***!K***REMOVED*** key
     * @return ***REMOVED***boolean***REMOVED***
     */
    CountedSet.prototype.contains = function (key) ***REMOVED***
        return util_1.contains(this.set, key);
    ***REMOVED***;
    /**
     * @param ***REMOVED***!K***REMOVED*** item
     * @return ***REMOVED***V***REMOVED***
     */
    CountedSet.prototype.get = function (item) ***REMOVED***
        return this.contains(item) ? this.set[item] : undefined;
    ***REMOVED***;
    /**
     * @param ***REMOVED***!K***REMOVED*** item
     */
    CountedSet.prototype.remove = function (item) ***REMOVED***
        delete this.set[item];
    ***REMOVED***;
    /**
     * Deletes everything in the set
     */
    CountedSet.prototype.clear = function () ***REMOVED***
        this.set = ***REMOVED******REMOVED***;
    ***REMOVED***;
    /**
     * True if there's nothing in the set
     * @return ***REMOVED***boolean***REMOVED***
     */
    CountedSet.prototype.isEmpty = function () ***REMOVED***
        return util_1.isEmpty(this.set);
    ***REMOVED***;
    /**
     * @return ***REMOVED***number***REMOVED*** The number of items in the set
     */
    CountedSet.prototype.count = function () ***REMOVED***
        return util_1.getCount(this.set);
    ***REMOVED***;
    /**
     * Run a function on each k,v pair in the set
     * @param ***REMOVED***function(K, V)***REMOVED*** fn
     */
    CountedSet.prototype.each = function (fn) ***REMOVED***
        util_1.forEach(this.set, function (k, v) ***REMOVED*** return fn(k, v); ***REMOVED***);
    ***REMOVED***;
    /**
     * Mostly for debugging
     * @return ***REMOVED***Array.<K>***REMOVED*** The keys present in this CountedSet
     */
    CountedSet.prototype.keys = function () ***REMOVED***
        var keys = [];
        util_1.forEach(this.set, function (k) ***REMOVED***
            keys.push(k);
        ***REMOVED***);
        return keys;
    ***REMOVED***;
    return CountedSet;
***REMOVED***());
exports.CountedSet = CountedSet;

//# sourceMappingURL=CountedSet.js.map
