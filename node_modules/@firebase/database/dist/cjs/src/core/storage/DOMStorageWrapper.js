"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var util_1 = require("@firebase/util");
/**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 * @constructor
 */
var DOMStorageWrapper = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***Storage***REMOVED*** domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
     */
    function DOMStorageWrapper(domStorage_) ***REMOVED***
        this.domStorage_ = domStorage_;
        // Use a prefix to avoid collisions with other stuff saved by the app.
        this.prefix_ = 'firebase:';
    ***REMOVED***
    /**
     * @param ***REMOVED***string***REMOVED*** key The key to save the value under
     * @param ***REMOVED***?Object***REMOVED*** value The value being stored, or null to remove the key.
     */
    DOMStorageWrapper.prototype.set = function (key, value) ***REMOVED***
        if (value == null) ***REMOVED***
            this.domStorage_.removeItem(this.prefixedName_(key));
        ***REMOVED***
        else ***REMOVED***
            this.domStorage_.setItem(this.prefixedName_(key), util_1.stringify(value));
        ***REMOVED***
    ***REMOVED***;
    /**
     * @param ***REMOVED***string***REMOVED*** key
     * @return ***REMOVED*******REMOVED*** The value that was stored under this key, or null
     */
    DOMStorageWrapper.prototype.get = function (key) ***REMOVED***
        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
        if (storedVal == null) ***REMOVED***
            return null;
        ***REMOVED***
        else ***REMOVED***
            return util_1.jsonEval(storedVal);
        ***REMOVED***
    ***REMOVED***;
    /**
     * @param ***REMOVED***string***REMOVED*** key
     */
    DOMStorageWrapper.prototype.remove = function (key) ***REMOVED***
        this.domStorage_.removeItem(this.prefixedName_(key));
    ***REMOVED***;
    /**
     * @param ***REMOVED***string***REMOVED*** name
     * @return ***REMOVED***string***REMOVED***
     */
    DOMStorageWrapper.prototype.prefixedName_ = function (name) ***REMOVED***
        return this.prefix_ + name;
    ***REMOVED***;
    DOMStorageWrapper.prototype.toString = function () ***REMOVED***
        return this.domStorage_.toString();
    ***REMOVED***;
    return DOMStorageWrapper;
***REMOVED***());
exports.DOMStorageWrapper = DOMStorageWrapper;

//# sourceMappingURL=DOMStorageWrapper.js.map
