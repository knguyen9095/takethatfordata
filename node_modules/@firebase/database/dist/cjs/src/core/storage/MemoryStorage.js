"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var util_1 = require("@firebase/util");
/**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 *
 * @constructor
 */
var MemoryStorage = /** @class */ (function () ***REMOVED***
    function MemoryStorage() ***REMOVED***
        this.cache_ = ***REMOVED******REMOVED***;
        this.isInMemoryStorage = true;
    ***REMOVED***
    MemoryStorage.prototype.set = function (key, value) ***REMOVED***
        if (value == null) ***REMOVED***
            delete this.cache_[key];
        ***REMOVED***
        else ***REMOVED***
            this.cache_[key] = value;
        ***REMOVED***
    ***REMOVED***;
    MemoryStorage.prototype.get = function (key) ***REMOVED***
        if (util_1.contains(this.cache_, key)) ***REMOVED***
            return this.cache_[key];
        ***REMOVED***
        return null;
    ***REMOVED***;
    MemoryStorage.prototype.remove = function (key) ***REMOVED***
        delete this.cache_[key];
    ***REMOVED***;
    return MemoryStorage;
***REMOVED***());
exports.MemoryStorage = MemoryStorage;

//# sourceMappingURL=MemoryStorage.js.map
