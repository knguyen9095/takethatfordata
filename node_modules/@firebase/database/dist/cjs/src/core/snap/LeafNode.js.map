***REMOVED***"version":3,"sources":["../src/core/snap/LeafNode.ts"],"names":[],"mappings":"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","file":"LeafNode.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert ***REMOVED*** from '@firebase/util';\nimport ***REMOVED*** doubleToIEEE754String, sha1 ***REMOVED*** from '../util/util';\nimport ***REMOVED*** priorityHashText, validatePriorityNode ***REMOVED*** from './snap';\nimport ***REMOVED*** Node ***REMOVED*** from './Node';\nimport ***REMOVED*** Path ***REMOVED*** from '../util/Path';\nimport ***REMOVED*** Index ***REMOVED*** from './indexes/Index';\nimport ***REMOVED*** ChildrenNodeConstructor ***REMOVED*** from './ChildrenNode';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node ***REMOVED***\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) ***REMOVED***\n    __childrenNodeConstructor = val;\n  ***REMOVED***\n\n  static get __childrenNodeConstructor() ***REMOVED***\n    return __childrenNodeConstructor;\n  ***REMOVED***\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type ***REMOVED***Array.<!string>***REMOVED***\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements ***REMOVED***Node***REMOVED***\n   * @param ***REMOVED***!(string|number|boolean|Object)***REMOVED*** value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param ***REMOVED***!Node=***REMOVED*** priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | object,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) ***REMOVED***\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  ***REMOVED***\n\n  /** @inheritDoc */\n  isLeafNode(): boolean ***REMOVED***\n    return true;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getPriority(): Node ***REMOVED***\n    return this.priorityNode_;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node ***REMOVED***\n    return new LeafNode(this.value_, newPriorityNode);\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node ***REMOVED***\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') ***REMOVED***\n      return this.priorityNode_;\n    ***REMOVED*** else ***REMOVED***\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getChild(path: Path): Node ***REMOVED***\n    if (path.isEmpty()) ***REMOVED***\n      return this;\n    ***REMOVED*** else if (path.getFront() === '.priority') ***REMOVED***\n      return this.priorityNode_;\n    ***REMOVED*** else ***REMOVED***\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean ***REMOVED***\n    return false;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: String, childNode: Node): null ***REMOVED***\n    return null;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node ***REMOVED***\n    if (childName === '.priority') ***REMOVED***\n      return this.updatePriority(newChildNode);\n    ***REMOVED*** else if (newChildNode.isEmpty() && childName !== '.priority') ***REMOVED***\n      return this;\n    ***REMOVED*** else ***REMOVED***\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node ***REMOVED***\n    const front = path.getFront();\n    if (front === null) ***REMOVED***\n      return newChildNode;\n    ***REMOVED*** else if (newChildNode.isEmpty() && front !== '.priority') ***REMOVED***\n      return this;\n    ***REMOVED*** else ***REMOVED***\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  isEmpty(): boolean ***REMOVED***\n    return false;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  numChildren(): number ***REMOVED***\n    return 0;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): any ***REMOVED***\n    return false;\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): Object ***REMOVED***\n    if (exportFormat && !this.getPriority().isEmpty())\n      return ***REMOVED***\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      ***REMOVED***;\n    else return this.getValue();\n  ***REMOVED***\n\n  /** @inheritDoc */\n  hash(): string ***REMOVED***\n    if (this.lazyHash_ === null) ***REMOVED***\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') ***REMOVED***\n        toHash += doubleToIEEE754String(this.value_ as number);\n      ***REMOVED*** else ***REMOVED***\n        toHash += this.value_;\n      ***REMOVED***\n      this.lazyHash_ = sha1(toHash);\n    ***REMOVED***\n    return this.lazyHash_;\n  ***REMOVED***\n\n  /**\n   * Returns the value of the leaf node.\n   * @return ***REMOVED***Object|string|number|boolean***REMOVED*** The value of the node.\n   */\n  getValue(): object | string | number | boolean ***REMOVED***\n    return this.value_;\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number ***REMOVED***\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) ***REMOVED***\n      return 1;\n    ***REMOVED*** else if (other instanceof LeafNode.__childrenNodeConstructor) ***REMOVED***\n      return -1;\n    ***REMOVED*** else ***REMOVED***\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param ***REMOVED***!LeafNode***REMOVED*** otherLeaf\n   * @return ***REMOVED***!number***REMOVED***\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number ***REMOVED***\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) ***REMOVED***\n      // Same type, compare values\n      if (thisLeafType === 'object') ***REMOVED***\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      ***REMOVED*** else ***REMOVED***\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) ***REMOVED***\n          return -1;\n        ***REMOVED*** else if (this.value_ === otherLeaf.value_) ***REMOVED***\n          return 0;\n        ***REMOVED*** else ***REMOVED***\n          return 1;\n        ***REMOVED***\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n      return thisIndex - otherIndex;\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node ***REMOVED***\n    return this;\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean ***REMOVED***\n    return true;\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean ***REMOVED***\n    /**\n     * @inheritDoc\n     */\n    if (other === this) ***REMOVED***\n      return true;\n    ***REMOVED*** else if (other.isLeafNode()) ***REMOVED***\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    ***REMOVED*** else ***REMOVED***\n      return false;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n"]***REMOVED***