***REMOVED***"version":3,"sources":["../src/core/snap/ChildrenNode.ts"],"names":[],"mappings":"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","file":"ChildrenNode.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert ***REMOVED*** from '@firebase/util';\nimport ***REMOVED*** sha1, MAX_NAME, MIN_NAME ***REMOVED*** from '../util/util';\nimport ***REMOVED*** SortedMap, SortedMapIterator ***REMOVED*** from '../util/SortedMap';\nimport ***REMOVED*** Node, NamedNode ***REMOVED*** from './Node';\nimport ***REMOVED*** validatePriorityNode, priorityHashText, setMaxNode ***REMOVED*** from './snap';\nimport ***REMOVED***\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n***REMOVED*** from './indexes/PriorityIndex';\nimport ***REMOVED*** KEY_INDEX, KeyIndex ***REMOVED*** from './indexes/KeyIndex';\nimport ***REMOVED*** IndexMap ***REMOVED*** from './IndexMap';\nimport ***REMOVED*** LeafNode ***REMOVED*** from './LeafNode';\nimport ***REMOVED*** NAME_COMPARATOR ***REMOVED*** from './comparators';\nimport ***REMOVED*** Index ***REMOVED*** from './indexes/Index';\nimport ***REMOVED*** Path ***REMOVED*** from '../util/Path';\n\nexport interface ChildrenNodeConstructor ***REMOVED***\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n***REMOVED***\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements ***REMOVED***Node***REMOVED***\n */\nexport class ChildrenNode implements Node ***REMOVED***\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode ***REMOVED***\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  ***REMOVED***\n\n  /**\n   *\n   * @param ***REMOVED***!SortedMap.<string, !Node>***REMOVED*** children_ List of children\n   * of this node..\n   * @param ***REMOVED***?Node***REMOVED*** priorityNode_ The priority of this node (as a snapshot node).\n   * @param ***REMOVED***!IndexMap***REMOVED*** indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) ***REMOVED***\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) ***REMOVED***\n      validatePriorityNode(this.priorityNode_);\n    ***REMOVED***\n\n    if (this.children_.isEmpty()) ***REMOVED***\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  isLeafNode(): boolean ***REMOVED***\n    return false;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getPriority(): Node ***REMOVED***\n    return this.priorityNode_ || EMPTY_NODE;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node ***REMOVED***\n    if (this.children_.isEmpty()) ***REMOVED***\n      // Don't allow priorities on empty nodes\n      return this;\n    ***REMOVED*** else ***REMOVED***\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node ***REMOVED***\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') ***REMOVED***\n      return this.getPriority();\n    ***REMOVED*** else ***REMOVED***\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getChild(path: Path): Node ***REMOVED***\n    const front = path.getFront();\n    if (front === null) return this;\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  ***REMOVED***\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean ***REMOVED***\n    return this.children_.get(childName) !== null;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node ***REMOVED***\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') ***REMOVED***\n      return this.updatePriority(newChildNode);\n    ***REMOVED*** else ***REMOVED***\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap, newPriority;\n      if (newChildNode.isEmpty()) ***REMOVED***\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      ***REMOVED*** else ***REMOVED***\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      ***REMOVED***\n\n      newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node ***REMOVED***\n    const front = path.getFront();\n    if (front === null) ***REMOVED***\n      return newChildNode;\n    ***REMOVED*** else ***REMOVED***\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  isEmpty(): boolean ***REMOVED***\n    return this.children_.isEmpty();\n  ***REMOVED***\n\n  /** @inheritDoc */\n  numChildren(): number ***REMOVED***\n    return this.children_.count();\n  ***REMOVED***\n\n  /**\n   * @private\n   * @type ***REMOVED***RegExp***REMOVED***\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object ***REMOVED***\n    if (this.isEmpty()) return null;\n\n    const obj: ***REMOVED*** [k: string]: Object ***REMOVED*** = ***REMOVED******REMOVED***;\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function(key: string, childNode: Node) ***REMOVED***\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) ***REMOVED***\n        maxKey = Math.max(maxKey, Number(key));\n      ***REMOVED*** else ***REMOVED***\n        allIntegerKeys = false;\n      ***REMOVED***\n    ***REMOVED***);\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) ***REMOVED***\n      // convert to array.\n      const array: Object[] = [];\n      for (let key in obj) array[(key as any) as number] = obj[key];\n\n      return array;\n    ***REMOVED*** else ***REMOVED***\n      if (exportFormat && !this.getPriority().isEmpty()) ***REMOVED***\n        obj['.priority'] = this.getPriority().val();\n      ***REMOVED***\n      return obj;\n    ***REMOVED***\n  ***REMOVED***\n\n  /** @inheritDoc */\n  hash(): string ***REMOVED***\n    if (this.lazyHash_ === null) ***REMOVED***\n      let toHash = '';\n      if (!this.getPriority().isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n\n      this.forEachChild(PRIORITY_INDEX, function(key, childNode) ***REMOVED***\n        const childHash = childNode.hash();\n        if (childHash !== '') toHash += ':' + key + ':' + childHash;\n      ***REMOVED***);\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    ***REMOVED***\n    return this.lazyHash_;\n  ***REMOVED***\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string ***REMOVED***\n    const idx = this.resolveIndex_(index);\n    if (idx) ***REMOVED***\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    ***REMOVED*** else ***REMOVED***\n      return this.children_.getPredecessorKey(childName);\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***?string***REMOVED***\n   */\n  getFirstChildName(indexDefinition: Index): string | null ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    ***REMOVED*** else ***REMOVED***\n      return this.children_.minKey();\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***?NamedNode***REMOVED***\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null ***REMOVED***\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) ***REMOVED***\n      return new NamedNode(minKey, this.children_.get(minKey));\n    ***REMOVED*** else ***REMOVED***\n      return null;\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***?string***REMOVED***\n   */\n  getLastChildName(indexDefinition: Index): string | null ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    ***REMOVED*** else ***REMOVED***\n      return this.children_.maxKey();\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***?NamedNode***REMOVED***\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null ***REMOVED***\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) ***REMOVED***\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    ***REMOVED*** else ***REMOVED***\n      return null;\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(index: Index, action: (key: string, node: Node) => void): any ***REMOVED***\n    const idx = this.resolveIndex_(index);\n    if (idx) ***REMOVED***\n      return idx.inorderTraversal(function(wrappedNode) ***REMOVED***\n        return action(wrappedNode.name, wrappedNode.node);\n      ***REMOVED***);\n    ***REMOVED*** else ***REMOVED***\n      return this.children_.inorderTraversal(action);\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***SortedMapIterator***REMOVED***\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  ***REMOVED***\n\n  /**\n   *\n   * @param ***REMOVED***!NamedNode***REMOVED*** startPost\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***!SortedMapIterator***REMOVED***\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      return idx.getIteratorFrom(startPost, key => key);\n    ***REMOVED*** else ***REMOVED***\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) ***REMOVED***\n        iterator.getNext();\n        next = iterator.peek();\n      ***REMOVED***\n      return iterator;\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***!SortedMapIterator***REMOVED***\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  ***REMOVED***\n\n  /**\n   * @param ***REMOVED***!NamedNode***REMOVED*** endPost\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***!SortedMapIterator***REMOVED***\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      return idx.getReverseIteratorFrom(endPost, function(key) ***REMOVED***\n        return key;\n      ***REMOVED***);\n    ***REMOVED*** else ***REMOVED***\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) ***REMOVED***\n        iterator.getNext();\n        next = iterator.peek();\n      ***REMOVED***\n      return iterator;\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number ***REMOVED***\n    if (this.isEmpty()) ***REMOVED***\n      if (other.isEmpty()) ***REMOVED***\n        return 0;\n      ***REMOVED*** else ***REMOVED***\n        return -1;\n      ***REMOVED***\n    ***REMOVED*** else if (other.isLeafNode() || other.isEmpty()) ***REMOVED***\n      return 1;\n    ***REMOVED*** else if (other === MAX_NODE) ***REMOVED***\n      return -1;\n    ***REMOVED*** else ***REMOVED***\n      // Must be another node with children.\n      return 0;\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node ***REMOVED***\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) ***REMOVED***\n      return this;\n    ***REMOVED*** else ***REMOVED***\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean ***REMOVED***\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  ***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean ***REMOVED***\n    if (other === this) ***REMOVED***\n      return true;\n    ***REMOVED*** else if (other.isLeafNode()) ***REMOVED***\n      return false;\n    ***REMOVED*** else ***REMOVED***\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) ***REMOVED***\n        return false;\n      ***REMOVED*** else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) ***REMOVED***\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) ***REMOVED***\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) ***REMOVED***\n            return false;\n          ***REMOVED***\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        ***REMOVED***\n        return thisCurrent === null && otherCurrent === null;\n      ***REMOVED*** else ***REMOVED***\n        return false;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***?SortedMap.<NamedNode, Node>***REMOVED***\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null ***REMOVED***\n    if (indexDefinition === KEY_INDEX) ***REMOVED***\n      return null;\n    ***REMOVED*** else ***REMOVED***\n      return this.indexMap_.get(indexDefinition.toString());\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n/**\n * @constructor\n * @extends ***REMOVED***ChildrenNode***REMOVED***\n * @private\n */\nexport class MaxNode extends ChildrenNode ***REMOVED***\n  constructor() ***REMOVED***\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  ***REMOVED***\n\n  compareTo(other: Node): number ***REMOVED***\n    if (other === this) ***REMOVED***\n      return 0;\n    ***REMOVED*** else ***REMOVED***\n      return 1;\n    ***REMOVED***\n  ***REMOVED***\n\n  equals(other: Node): boolean ***REMOVED***\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  ***REMOVED***\n\n  getPriority(): MaxNode ***REMOVED***\n    return this;\n  ***REMOVED***\n\n  getImmediateChild(childName: string): ChildrenNode ***REMOVED***\n    return ChildrenNode.EMPTY_NODE;\n  ***REMOVED***\n\n  isEmpty(): boolean ***REMOVED***\n    return false;\n  ***REMOVED***\n***REMOVED***\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type ***REMOVED***!MAX_NODE***REMOVED***\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' ***REMOVED***\n  interface NamedNode ***REMOVED***\n    MIN: NamedNode;\n    MAX: NamedNode;\n  ***REMOVED***\n***REMOVED***\n\nObject.defineProperties(NamedNode, ***REMOVED***\n  MIN: ***REMOVED***\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  ***REMOVED***,\n  MAX: ***REMOVED***\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  ***REMOVED***\n***REMOVED***);\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n"]***REMOVED***