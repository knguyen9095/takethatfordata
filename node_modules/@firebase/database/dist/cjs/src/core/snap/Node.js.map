***REMOVED***"version":3,"sources":["../src/core/snap/Node.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AA0IH;;;;;;GAMG;AACH;IACE,mBAAmB,IAAY,EAAS,IAAU;QAA/B,SAAI,GAAJ,IAAI,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAEtD;;;;;OAKG;IACI,cAAI,GAAX,UAAY,IAAY,EAAE,IAAU;QAClC,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IACH,gBAAC;AAAD,CAZA,AAYC,IAAA;AAZY,8BAAS","file":"Node.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Path ***REMOVED*** from '../util/Path';\nimport ***REMOVED*** Index ***REMOVED*** from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node ***REMOVED***\n  /**\n   * Whether this node is a leaf node.\n   * @return ***REMOVED***boolean***REMOVED*** Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return ***REMOVED***!Node***REMOVED*** The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param ***REMOVED***!Node***REMOVED*** newPriorityNode New priority to set for the node.\n   * @return ***REMOVED***!Node***REMOVED*** Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param ***REMOVED***string***REMOVED*** childName The name of the child to retrieve.\n   * @return ***REMOVED***!Node***REMOVED*** The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param ***REMOVED***!Path***REMOVED*** path The path of the child to retrieve.\n   * @return ***REMOVED***!Node***REMOVED*** The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param ***REMOVED***!string***REMOVED*** childName The name of the child to find the predecessor of.\n   * @param ***REMOVED***!Node***REMOVED*** childNode The node to find the predecessor of.\n   * @param ***REMOVED***!Index***REMOVED*** index The index to use to determine the predecessor\n   * @return ***REMOVED***?string***REMOVED*** The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: String,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param ***REMOVED***string***REMOVED*** childName The name of the child to update.\n   * @param ***REMOVED***!Node***REMOVED*** newChildNode The new child node\n   * @return ***REMOVED***!Node***REMOVED*** The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param ***REMOVED***!Path***REMOVED*** path The path of the child to update.\n   * @param ***REMOVED***!Node***REMOVED*** newChildNode The new child node, which may be an empty node\n   * @return ***REMOVED***!Node***REMOVED*** The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param ***REMOVED***!string***REMOVED*** childName\n   * @return ***REMOVED***boolean***REMOVED***\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return ***REMOVED***boolean***REMOVED*** True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return ***REMOVED***number***REMOVED*** The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param ***REMOVED***!Index***REMOVED*** index\n   * @param ***REMOVED***function(string, !Node)***REMOVED*** action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return ***REMOVED*******REMOVED*** The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): any;\n\n  /**\n   * @param ***REMOVED***boolean=***REMOVED*** exportFormat True for export format (also wire protocol format).\n   * @return ***REMOVED*******REMOVED*** Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): Object;\n\n  /**\n   * @return ***REMOVED***string***REMOVED*** hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param ***REMOVED***!Node***REMOVED*** other Another node\n   * @return ***REMOVED***!number***REMOVED*** -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param ***REMOVED***!Node***REMOVED*** other\n   * @return ***REMOVED***boolean***REMOVED*** Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***!Node***REMOVED*** This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param ***REMOVED***!Index***REMOVED*** indexDefinition\n   * @return ***REMOVED***boolean***REMOVED***\n   */\n  isIndexed(indexDefinition: Index): boolean;\n***REMOVED***\n\n/**\n *\n * @param ***REMOVED***!string***REMOVED*** name\n * @param ***REMOVED***!Node***REMOVED*** node\n * @constructor\n * @struct\n */\nexport class NamedNode ***REMOVED***\n  constructor(public name: string, public node: Node) ***REMOVED******REMOVED***\n\n  /**\n   *\n   * @param ***REMOVED***!string***REMOVED*** name\n   * @param ***REMOVED***!Node***REMOVED*** node\n   * @return ***REMOVED***NamedNode***REMOVED***\n   */\n  static Wrap(name: string, node: Node) ***REMOVED***\n    return new NamedNode(name, node);\n  ***REMOVED***\n***REMOVED***\n"]***REMOVED***