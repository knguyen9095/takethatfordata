import ***REMOVED*** View ***REMOVED*** from './view/View';
import ***REMOVED*** Operation ***REMOVED*** from './operation/Operation';
import ***REMOVED*** WriteTreeRef ***REMOVED*** from './WriteTree';
import ***REMOVED*** Query ***REMOVED*** from '../api/Query';
import ***REMOVED*** EventRegistration ***REMOVED*** from './view/EventRegistration';
import ***REMOVED*** Node ***REMOVED*** from './snap/Node';
import ***REMOVED*** Path ***REMOVED*** from './util/Path';
import ***REMOVED*** Event ***REMOVED*** from './view/Event';
import ***REMOVED*** ReferenceConstructor ***REMOVED*** from '../api/Reference';
/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */
export declare class SyncPoint ***REMOVED***
    static __referenceConstructor: ReferenceConstructor;
    /**
     * The Views being tracked at this location in the tree, stored as a map where the key is a
     * queryId and the value is the View for that query.
     *
     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
     *
     * @type ***REMOVED***!Object.<!string, !View>***REMOVED***
     * @private
     */
    private views_;
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    isEmpty(): boolean;
    /**
     *
     * @param ***REMOVED***!Operation***REMOVED*** operation
     * @param ***REMOVED***!WriteTreeRef***REMOVED*** writesCache
     * @param ***REMOVED***?Node***REMOVED*** optCompleteServerCache
     * @return ***REMOVED***!Array.<!Event>***REMOVED***
     */
    applyOperation(operation: Operation, writesCache: WriteTreeRef, optCompleteServerCache: Node | null): Event[];
    /**
     * Add an event callback for the specified query.
     *
     * @param ***REMOVED***!Query***REMOVED*** query
     * @param ***REMOVED***!EventRegistration***REMOVED*** eventRegistration
     * @param ***REMOVED***!WriteTreeRef***REMOVED*** writesCache
     * @param ***REMOVED***?Node***REMOVED*** serverCache Complete server cache, if we have it.
     * @param ***REMOVED***boolean***REMOVED*** serverCacheComplete
     * @return ***REMOVED***!Array.<!Event>***REMOVED*** Events to raise.
     */
    addEventRegistration(query: Query, eventRegistration: EventRegistration, writesCache: WriteTreeRef, serverCache: Node | null, serverCacheComplete: boolean): Event[];
    /**
     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
     *
     * If query is the default query, we'll check all views for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
     *
     * @param ***REMOVED***!Query***REMOVED*** query
     * @param ***REMOVED***?EventRegistration***REMOVED*** eventRegistration If null, remove all callbacks.
     * @param ***REMOVED***Error=***REMOVED*** cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return ***REMOVED******REMOVED***removed:!Array.<!Query>, events:!Array.<!Event>***REMOVED******REMOVED*** removed queries and any cancel events
     */
    removeEventRegistration(query: Query, eventRegistration: EventRegistration | null, cancelError?: Error): ***REMOVED***
        removed: Query[];
        events: Event[];
    ***REMOVED***;
    /**
     * @return ***REMOVED***!Array.<!View>***REMOVED***
     */
    getQueryViews(): View[];
    /**
     *
     * @param ***REMOVED***!Path***REMOVED*** path The path to the desired complete snapshot
     * @return ***REMOVED***?Node***REMOVED*** A complete cache, if it exists
     */
    getCompleteServerCache(path: Path): Node | null;
    /**
     * @param ***REMOVED***!Query***REMOVED*** query
     * @return ***REMOVED***?View***REMOVED***
     */
    viewForQuery(query: Query): View | null;
    /**
     * @param ***REMOVED***!Query***REMOVED*** query
     * @return ***REMOVED***boolean***REMOVED***
     */
    viewExistsForQuery(query: Query): boolean;
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    hasCompleteView(): boolean;
    /**
     * @return ***REMOVED***?View***REMOVED***
     */
    getCompleteView(): View | null;
***REMOVED***
