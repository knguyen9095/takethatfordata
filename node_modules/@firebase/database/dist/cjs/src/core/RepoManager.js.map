***REMOVED***"version":3,"sources":["../src/core/RepoManager.ts"],"names":[],"mappings":"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","file":"RepoManager.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp ***REMOVED*** from '@firebase/app-types';\nimport ***REMOVED*** safeGet ***REMOVED*** from '@firebase/util';\nimport ***REMOVED*** Repo ***REMOVED*** from './Repo';\nimport ***REMOVED*** fatal ***REMOVED*** from './util/util';\nimport ***REMOVED*** parseRepoInfo ***REMOVED*** from './util/libs/parser';\nimport ***REMOVED*** validateUrl ***REMOVED*** from './util/validation';\nimport './Repo_transaction';\nimport ***REMOVED*** Database ***REMOVED*** from '../api/Database';\nimport ***REMOVED*** RepoInfo ***REMOVED*** from './RepoInfo';\n\n/** @const ***REMOVED***string***REMOVED*** */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager ***REMOVED***\n  /**\n   * @private ***REMOVED***!Object.<string, Object<string, !fb.core.Repo>>***REMOVED***\n   */\n  private repos_: ***REMOVED***\n    [appName: string]: ***REMOVED***\n      [dbUrl: string]: Repo;\n    ***REMOVED***;\n  ***REMOVED*** = ***REMOVED******REMOVED***;\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private ***REMOVED***boolean***REMOVED***\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager ***REMOVED***\n    if (!_staticInstance) ***REMOVED***\n      _staticInstance = new RepoManager();\n    ***REMOVED***\n    return _staticInstance;\n  ***REMOVED***\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() ***REMOVED***\n    for (const appName in this.repos_) ***REMOVED***\n      for (const dbUrl in this.repos_[appName]) ***REMOVED***\n        this.repos_[appName][dbUrl].interrupt();\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n\n  resume() ***REMOVED***\n    for (const appName in this.repos_) ***REMOVED***\n      for (const dbUrl in this.repos_[appName]) ***REMOVED***\n        this.repos_[appName][dbUrl].resume();\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param ***REMOVED***!FirebaseApp***REMOVED*** app\n   * @return ***REMOVED***!Database***REMOVED***\n   */\n  databaseFromApp(app: FirebaseApp, url?: string): Database ***REMOVED***\n    const dbUrl: string = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) ***REMOVED***\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.initializeApp().'\n      );\n    ***REMOVED***\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) ***REMOVED***\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    ***REMOVED***\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  ***REMOVED***\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param ***REMOVED***!Repo***REMOVED*** repo\n   */\n  deleteRepo(repo: Repo) ***REMOVED***\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) ***REMOVED***\n      fatal(\n        `Database $***REMOVED***repo.app.name***REMOVED***($***REMOVED***repo.repoInfo_***REMOVED***) has already been deleted.`\n      );\n    ***REMOVED***\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  ***REMOVED***\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param ***REMOVED***!RepoInfo***REMOVED*** repoInfo The metadata about the Repo\n   * @param ***REMOVED***!FirebaseApp***REMOVED*** app\n   * @return ***REMOVED***!Repo***REMOVED*** The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo ***REMOVED***\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) ***REMOVED***\n      appRepos = ***REMOVED******REMOVED***;\n      this.repos_[app.name] = appRepos;\n    ***REMOVED***\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) ***REMOVED***\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    ***REMOVED***\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  ***REMOVED***\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param ***REMOVED***boolean***REMOVED*** forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) ***REMOVED***\n    this.useRestClient_ = forceRestClient;\n  ***REMOVED***\n***REMOVED***\n"]***REMOVED***