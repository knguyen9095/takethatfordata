import ***REMOVED*** ServerActions ***REMOVED*** from './ServerActions';
import ***REMOVED*** RepoInfo ***REMOVED*** from './RepoInfo';
import ***REMOVED*** AuthTokenProvider ***REMOVED*** from './AuthTokenProvider';
import ***REMOVED*** Query ***REMOVED*** from '../api/Query';
/**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */
export declare class ReadonlyRestClient extends ServerActions ***REMOVED***
    private repoInfo_;
    private onDataUpdate_;
    private authTokenProvider_;
    reportStats(stats: ***REMOVED***
        [k: string]: any;
    ***REMOVED***): void;
    /** @private ***REMOVED***function(...[*])***REMOVED*** */
    private log_;
    /**
     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
     * that's been removed. :-/
     *
     * @private ***REMOVED***!Object.<string, !Object>***REMOVED***
     */
    private listens_;
    /**
     * @param ***REMOVED***!Query***REMOVED*** query
     * @param ***REMOVED***?number=***REMOVED*** tag
     * @return ***REMOVED***string***REMOVED***
     * @private
     */
    static getListenId_(query: Query, tag?: number | null): string;
    /**
     * @param ***REMOVED***!RepoInfo***REMOVED*** repoInfo_ Data about the namespace we are connecting to
     * @param ***REMOVED***function(string, *, boolean, ?number)***REMOVED*** onDataUpdate_ A callback for new data from the server
     * @param ***REMOVED***AuthTokenProvider***REMOVED*** authTokenProvider_
     * @implements ***REMOVED***ServerActions***REMOVED***
     */
    constructor(repoInfo_: RepoInfo, onDataUpdate_: (a: string, b: any, c: boolean, d: number | null) => void, authTokenProvider_: AuthTokenProvider);
    /** @inheritDoc */
    listen(query: Query, currentHashFn: () => string, tag: number | null, onComplete: (a: string, b: any) => void): void;
    /** @inheritDoc */
    unlisten(query: Query, tag: number | null): void;
    /** @inheritDoc */
    refreshAuthToken(token: string): void;
    /**
     * Performs a REST request to the given path, with the provided query string parameters,
     * and any auth credentials we have.
     *
     * @param ***REMOVED***!string***REMOVED*** pathString
     * @param ***REMOVED***!Object.<string, *>***REMOVED*** queryStringParameters
     * @param ***REMOVED***?function(?number, *=)***REMOVED*** callback
     * @private
     */
    private restRequest_(pathString, queryStringParameters, callback);
***REMOVED***
