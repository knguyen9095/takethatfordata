"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var util_1 = require("@firebase/util");
var util_2 = require("../util/util");
var KeyIndex_1 = require("../snap/indexes/KeyIndex");
var PriorityIndex_1 = require("../snap/indexes/PriorityIndex");
var ValueIndex_1 = require("../snap/indexes/ValueIndex");
var PathIndex_1 = require("../snap/indexes/PathIndex");
var IndexedFilter_1 = require("./filter/IndexedFilter");
var LimitedFilter_1 = require("./filter/LimitedFilter");
var RangedFilter_1 = require("./filter/RangedFilter");
var util_3 = require("@firebase/util");
/**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 * @constructor
 */
var QueryParams = /** @class */ (function () ***REMOVED***
    function QueryParams() ***REMOVED***
        this.limitSet_ = false;
        this.startSet_ = false;
        this.startNameSet_ = false;
        this.endSet_ = false;
        this.endNameSet_ = false;
        this.limit_ = 0;
        this.viewFrom_ = '';
        this.indexStartValue_ = null;
        this.indexStartName_ = '';
        this.indexEndValue_ = null;
        this.indexEndName_ = '';
        this.index_ = PriorityIndex_1.PRIORITY_INDEX;
    ***REMOVED***
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    QueryParams.prototype.hasStart = function () ***REMOVED***
        return this.startSet_;
    ***REMOVED***;
    /**
     * @return ***REMOVED***boolean***REMOVED*** True if it would return from left.
     */
    QueryParams.prototype.isViewFromLeft = function () ***REMOVED***
        if (this.viewFrom_ === '') ***REMOVED***
            // limit(), rather than limitToFirst or limitToLast was called.
            // This means that only one of startSet_ and endSet_ is true. Use them
            // to calculate which side of the view to anchor to. If neither is set,
            // anchor to the end.
            return this.startSet_;
        ***REMOVED***
        else ***REMOVED***
            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
        ***REMOVED***
    ***REMOVED***;
    /**
     * Only valid to call if hasStart() returns true
     * @return ***REMOVED*******REMOVED***
     */
    QueryParams.prototype.getIndexStartValue = function () ***REMOVED***
        util_1.assert(this.startSet_, 'Only valid if start has been set');
        return this.indexStartValue_;
    ***REMOVED***;
    /**
     * Only valid to call if hasStart() returns true.
     * Returns the starting key name for the range defined by these query parameters
     * @return ***REMOVED***!string***REMOVED***
     */
    QueryParams.prototype.getIndexStartName = function () ***REMOVED***
        util_1.assert(this.startSet_, 'Only valid if start has been set');
        if (this.startNameSet_) ***REMOVED***
            return this.indexStartName_;
        ***REMOVED***
        else ***REMOVED***
            return util_2.MIN_NAME;
        ***REMOVED***
    ***REMOVED***;
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    QueryParams.prototype.hasEnd = function () ***REMOVED***
        return this.endSet_;
    ***REMOVED***;
    /**
     * Only valid to call if hasEnd() returns true.
     * @return ***REMOVED*******REMOVED***
     */
    QueryParams.prototype.getIndexEndValue = function () ***REMOVED***
        util_1.assert(this.endSet_, 'Only valid if end has been set');
        return this.indexEndValue_;
    ***REMOVED***;
    /**
     * Only valid to call if hasEnd() returns true.
     * Returns the end key name for the range defined by these query parameters
     * @return ***REMOVED***!string***REMOVED***
     */
    QueryParams.prototype.getIndexEndName = function () ***REMOVED***
        util_1.assert(this.endSet_, 'Only valid if end has been set');
        if (this.endNameSet_) ***REMOVED***
            return this.indexEndName_;
        ***REMOVED***
        else ***REMOVED***
            return util_2.MAX_NAME;
        ***REMOVED***
    ***REMOVED***;
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    QueryParams.prototype.hasLimit = function () ***REMOVED***
        return this.limitSet_;
    ***REMOVED***;
    /**
     * @return ***REMOVED***boolean***REMOVED*** True if a limit has been set and it has been explicitly anchored
     */
    QueryParams.prototype.hasAnchoredLimit = function () ***REMOVED***
        return this.limitSet_ && this.viewFrom_ !== '';
    ***REMOVED***;
    /**
     * Only valid to call if hasLimit() returns true
     * @return ***REMOVED***!number***REMOVED***
     */
    QueryParams.prototype.getLimit = function () ***REMOVED***
        util_1.assert(this.limitSet_, 'Only valid if limit has been set');
        return this.limit_;
    ***REMOVED***;
    /**
     * @return ***REMOVED***!Index***REMOVED***
     */
    QueryParams.prototype.getIndex = function () ***REMOVED***
        return this.index_;
    ***REMOVED***;
    /**
     * @return ***REMOVED***!QueryParams***REMOVED***
     * @private
     */
    QueryParams.prototype.copy_ = function () ***REMOVED***
        var copy = new QueryParams();
        copy.limitSet_ = this.limitSet_;
        copy.limit_ = this.limit_;
        copy.startSet_ = this.startSet_;
        copy.indexStartValue_ = this.indexStartValue_;
        copy.startNameSet_ = this.startNameSet_;
        copy.indexStartName_ = this.indexStartName_;
        copy.endSet_ = this.endSet_;
        copy.indexEndValue_ = this.indexEndValue_;
        copy.endNameSet_ = this.endNameSet_;
        copy.indexEndName_ = this.indexEndName_;
        copy.index_ = this.index_;
        copy.viewFrom_ = this.viewFrom_;
        return copy;
    ***REMOVED***;
    /**
     * @param ***REMOVED***!number***REMOVED*** newLimit
     * @return ***REMOVED***!QueryParams***REMOVED***
     */
    QueryParams.prototype.limit = function (newLimit) ***REMOVED***
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = '';
        return newParams;
    ***REMOVED***;
    /**
     * @param ***REMOVED***!number***REMOVED*** newLimit
     * @return ***REMOVED***!QueryParams***REMOVED***
     */
    QueryParams.prototype.limitToFirst = function (newLimit) ***REMOVED***
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
        return newParams;
    ***REMOVED***;
    /**
     * @param ***REMOVED***!number***REMOVED*** newLimit
     * @return ***REMOVED***!QueryParams***REMOVED***
     */
    QueryParams.prototype.limitToLast = function (newLimit) ***REMOVED***
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
        return newParams;
    ***REMOVED***;
    /**
     * @param ***REMOVED*******REMOVED*** indexValue
     * @param ***REMOVED***?string=***REMOVED*** key
     * @return ***REMOVED***!QueryParams***REMOVED***
     */
    QueryParams.prototype.startAt = function (indexValue, key) ***REMOVED***
        var newParams = this.copy_();
        newParams.startSet_ = true;
        if (!(indexValue !== undefined)) ***REMOVED***
            indexValue = null;
        ***REMOVED***
        newParams.indexStartValue_ = indexValue;
        if (key != null) ***REMOVED***
            newParams.startNameSet_ = true;
            newParams.indexStartName_ = key;
        ***REMOVED***
        else ***REMOVED***
            newParams.startNameSet_ = false;
            newParams.indexStartName_ = '';
        ***REMOVED***
        return newParams;
    ***REMOVED***;
    /**
     * @param ***REMOVED*******REMOVED*** indexValue
     * @param ***REMOVED***?string=***REMOVED*** key
     * @return ***REMOVED***!QueryParams***REMOVED***
     */
    QueryParams.prototype.endAt = function (indexValue, key) ***REMOVED***
        var newParams = this.copy_();
        newParams.endSet_ = true;
        if (!(indexValue !== undefined)) ***REMOVED***
            indexValue = null;
        ***REMOVED***
        newParams.indexEndValue_ = indexValue;
        if (key !== undefined) ***REMOVED***
            newParams.endNameSet_ = true;
            newParams.indexEndName_ = key;
        ***REMOVED***
        else ***REMOVED***
            newParams.endNameSet_ = false;
            newParams.indexEndName_ = '';
        ***REMOVED***
        return newParams;
    ***REMOVED***;
    /**
     * @param ***REMOVED***!Index***REMOVED*** index
     * @return ***REMOVED***!QueryParams***REMOVED***
     */
    QueryParams.prototype.orderBy = function (index) ***REMOVED***
        var newParams = this.copy_();
        newParams.index_ = index;
        return newParams;
    ***REMOVED***;
    /**
     * @return ***REMOVED***!Object***REMOVED***
     */
    QueryParams.prototype.getQueryObject = function () ***REMOVED***
        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
        var obj = ***REMOVED******REMOVED***;
        if (this.startSet_) ***REMOVED***
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
            if (this.startNameSet_) ***REMOVED***
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
            ***REMOVED***
        ***REMOVED***
        if (this.endSet_) ***REMOVED***
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
            if (this.endNameSet_) ***REMOVED***
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
            ***REMOVED***
        ***REMOVED***
        if (this.limitSet_) ***REMOVED***
            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
            var viewFrom = this.viewFrom_;
            if (viewFrom === '') ***REMOVED***
                if (this.isViewFromLeft()) ***REMOVED***
                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                ***REMOVED***
                else ***REMOVED***
                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                ***REMOVED***
            ***REMOVED***
            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
        ***REMOVED***
        // For now, priority index is the default, so we only specify if it's some other index
        if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) ***REMOVED***
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
        ***REMOVED***
        return obj;
    ***REMOVED***;
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    QueryParams.prototype.loadsAllData = function () ***REMOVED***
        return !(this.startSet_ || this.endSet_ || this.limitSet_);
    ***REMOVED***;
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    QueryParams.prototype.isDefault = function () ***REMOVED***
        return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;
    ***REMOVED***;
    /**
     * @return ***REMOVED***!NodeFilter***REMOVED***
     */
    QueryParams.prototype.getNodeFilter = function () ***REMOVED***
        if (this.loadsAllData()) ***REMOVED***
            return new IndexedFilter_1.IndexedFilter(this.getIndex());
        ***REMOVED***
        else if (this.hasLimit()) ***REMOVED***
            return new LimitedFilter_1.LimitedFilter(this);
        ***REMOVED***
        else ***REMOVED***
            return new RangedFilter_1.RangedFilter(this);
        ***REMOVED***
    ***REMOVED***;
    /**
     * Returns a set of REST query string parameters representing this query.
     *
     * @return ***REMOVED***!Object.<string,*>***REMOVED*** query string parameters
     */
    QueryParams.prototype.toRestQueryStringParameters = function () ***REMOVED***
        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
        var qs = ***REMOVED******REMOVED***;
        if (this.isDefault()) ***REMOVED***
            return qs;
        ***REMOVED***
        var orderBy;
        if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) ***REMOVED***
            orderBy = REST_CONSTANTS.PRIORITY_INDEX;
        ***REMOVED***
        else if (this.index_ === ValueIndex_1.VALUE_INDEX) ***REMOVED***
            orderBy = REST_CONSTANTS.VALUE_INDEX;
        ***REMOVED***
        else if (this.index_ === KeyIndex_1.KEY_INDEX) ***REMOVED***
            orderBy = REST_CONSTANTS.KEY_INDEX;
        ***REMOVED***
        else ***REMOVED***
            util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');
            orderBy = this.index_.toString();
        ***REMOVED***
        qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);
        if (this.startSet_) ***REMOVED***
            qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);
            if (this.startNameSet_) ***REMOVED***
                qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);
            ***REMOVED***
        ***REMOVED***
        if (this.endSet_) ***REMOVED***
            qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);
            if (this.endNameSet_) ***REMOVED***
                qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);
            ***REMOVED***
        ***REMOVED***
        if (this.limitSet_) ***REMOVED***
            if (this.isViewFromLeft()) ***REMOVED***
                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
            ***REMOVED***
            else ***REMOVED***
                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
            ***REMOVED***
        ***REMOVED***
        return qs;
    ***REMOVED***;
    /**
     * Wire Protocol Constants
     * @const
     * @enum ***REMOVED***string***REMOVED***
     * @private
     */
    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = ***REMOVED***
        INDEX_START_VALUE: 'sp',
        INDEX_START_NAME: 'sn',
        INDEX_END_VALUE: 'ep',
        INDEX_END_NAME: 'en',
        LIMIT: 'l',
        VIEW_FROM: 'vf',
        VIEW_FROM_LEFT: 'l',
        VIEW_FROM_RIGHT: 'r',
        INDEX: 'i'
    ***REMOVED***;
    /**
     * REST Query Constants
     * @const
     * @enum ***REMOVED***string***REMOVED***
     * @private
     */
    QueryParams.REST_QUERY_CONSTANTS_ = ***REMOVED***
        ORDER_BY: 'orderBy',
        PRIORITY_INDEX: '$priority',
        VALUE_INDEX: '$value',
        KEY_INDEX: '$key',
        START_AT: 'startAt',
        END_AT: 'endAt',
        LIMIT_TO_FIRST: 'limitToFirst',
        LIMIT_TO_LAST: 'limitToLast'
    ***REMOVED***;
    /**
     * Default, empty query parameters
     * @type ***REMOVED***!QueryParams***REMOVED***
     * @const
     */
    QueryParams.DEFAULT = new QueryParams();
    return QueryParams;
***REMOVED***());
exports.QueryParams = QueryParams;

//# sourceMappingURL=QueryParams.js.map
