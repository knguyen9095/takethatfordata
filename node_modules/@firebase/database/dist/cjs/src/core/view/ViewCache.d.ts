import ***REMOVED*** CacheNode ***REMOVED*** from './CacheNode';
import ***REMOVED*** Node ***REMOVED*** from '../snap/Node';
/**
 * Stores the data we have cached for a view.
 *
 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
 *
 * @constructor
 */
export declare class ViewCache ***REMOVED***
    private readonly eventCache_;
    private readonly serverCache_;
    /**
     *
     * @param ***REMOVED***!CacheNode***REMOVED*** eventCache_
     * @param ***REMOVED***!CacheNode***REMOVED*** serverCache_
     */
    constructor(eventCache_: CacheNode, serverCache_: CacheNode);
    /**
     * @const
     * @type ***REMOVED***ViewCache***REMOVED***
     */
    static Empty: ViewCache;
    /**
     * @param ***REMOVED***!Node***REMOVED*** eventSnap
     * @param ***REMOVED***boolean***REMOVED*** complete
     * @param ***REMOVED***boolean***REMOVED*** filtered
     * @return ***REMOVED***!ViewCache***REMOVED***
     */
    updateEventSnap(eventSnap: Node, complete: boolean, filtered: boolean): ViewCache;
    /**
     * @param ***REMOVED***!Node***REMOVED*** serverSnap
     * @param ***REMOVED***boolean***REMOVED*** complete
     * @param ***REMOVED***boolean***REMOVED*** filtered
     * @return ***REMOVED***!ViewCache***REMOVED***
     */
    updateServerSnap(serverSnap: Node, complete: boolean, filtered: boolean): ViewCache;
    /**
     * @return ***REMOVED***!CacheNode***REMOVED***
     */
    getEventCache(): CacheNode;
    /**
     * @return ***REMOVED***?Node***REMOVED***
     */
    getCompleteEventSnap(): Node | null;
    /**
     * @return ***REMOVED***!CacheNode***REMOVED***
     */
    getServerCache(): CacheNode;
    /**
     * @return ***REMOVED***?Node***REMOVED***
     */
    getCompleteServerSnap(): Node | null;
***REMOVED***
