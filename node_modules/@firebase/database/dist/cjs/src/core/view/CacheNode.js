"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
/**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */
var CacheNode = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***!Node***REMOVED*** node_
     * @param ***REMOVED***boolean***REMOVED*** fullyInitialized_
     * @param ***REMOVED***boolean***REMOVED*** filtered_
     */
    function CacheNode(node_, fullyInitialized_, filtered_) ***REMOVED***
        this.node_ = node_;
        this.fullyInitialized_ = fullyInitialized_;
        this.filtered_ = filtered_;
    ***REMOVED***
    /**
     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
     * @return ***REMOVED***boolean***REMOVED***
     */
    CacheNode.prototype.isFullyInitialized = function () ***REMOVED***
        return this.fullyInitialized_;
    ***REMOVED***;
    /**
     * Returns whether this node is potentially missing children due to a filter applied to the node
     * @return ***REMOVED***boolean***REMOVED***
     */
    CacheNode.prototype.isFiltered = function () ***REMOVED***
        return this.filtered_;
    ***REMOVED***;
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @return ***REMOVED***boolean***REMOVED***
     */
    CacheNode.prototype.isCompleteForPath = function (path) ***REMOVED***
        if (path.isEmpty()) ***REMOVED***
            return this.isFullyInitialized() && !this.filtered_;
        ***REMOVED***
        var childKey = path.getFront();
        return this.isCompleteForChild(childKey);
    ***REMOVED***;
    /**
     * @param ***REMOVED***!string***REMOVED*** key
     * @return ***REMOVED***boolean***REMOVED***
     */
    CacheNode.prototype.isCompleteForChild = function (key) ***REMOVED***
        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
    ***REMOVED***;
    /**
     * @return ***REMOVED***!Node***REMOVED***
     */
    CacheNode.prototype.getNode = function () ***REMOVED***
        return this.node_;
    ***REMOVED***;
    return CacheNode;
***REMOVED***());
exports.CacheNode = CacheNode;

//# sourceMappingURL=CacheNode.js.map
