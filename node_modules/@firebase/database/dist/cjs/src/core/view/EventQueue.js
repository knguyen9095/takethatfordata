"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var util_1 = require("../util/util");
/**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 * @constructor
 */
var EventQueue = /** @class */ (function () ***REMOVED***
    function EventQueue() ***REMOVED***
        /**
         * @private
         * @type ***REMOVED***!Array.<EventList>***REMOVED***
         */
        this.eventLists_ = [];
        /**
         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
         * @private
         * @type ***REMOVED***!number***REMOVED***
         */
        this.recursionDepth_ = 0;
    ***REMOVED***
    /**
     * @param ***REMOVED***!Array.<Event>***REMOVED*** eventDataList The new events to queue.
     */
    EventQueue.prototype.queueEvents = function (eventDataList) ***REMOVED***
        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
        var currList = null;
        for (var i = 0; i < eventDataList.length; i++) ***REMOVED***
            var eventData = eventDataList[i];
            var eventPath = eventData.getPath();
            if (currList !== null && !eventPath.equals(currList.getPath())) ***REMOVED***
                this.eventLists_.push(currList);
                currList = null;
            ***REMOVED***
            if (currList === null) ***REMOVED***
                currList = new EventList(eventPath);
            ***REMOVED***
            currList.add(eventData);
        ***REMOVED***
        if (currList) ***REMOVED***
            this.eventLists_.push(currList);
        ***REMOVED***
    ***REMOVED***;
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones)
     * for the specified path.
     *
     * It is assumed that the new events are all for the specified path.
     *
     * @param ***REMOVED***!Path***REMOVED*** path The path to raise events for.
     * @param ***REMOVED***!Array.<Event>***REMOVED*** eventDataList The new events to raise.
     */
    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) ***REMOVED***
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) ***REMOVED***
            return eventPath.equals(path);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones) for
     * locations related to the specified change path (i.e. all ancestors and descendants).
     *
     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
     *
     * @param ***REMOVED***!Path***REMOVED*** changedPath The path to raise events for.
     * @param ***REMOVED***!Array.<!Event>***REMOVED*** eventDataList The events to raise
     */
    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) ***REMOVED***
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) ***REMOVED***
            return eventPath.contains(changedPath) || changedPath.contains(eventPath);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * @param ***REMOVED***!function(!Path):boolean***REMOVED*** predicate
     * @private
     */
    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) ***REMOVED***
        this.recursionDepth_++;
        var sentAll = true;
        for (var i = 0; i < this.eventLists_.length; i++) ***REMOVED***
            var eventList = this.eventLists_[i];
            if (eventList) ***REMOVED***
                var eventPath = eventList.getPath();
                if (predicate(eventPath)) ***REMOVED***
                    this.eventLists_[i].raise();
                    this.eventLists_[i] = null;
                ***REMOVED***
                else ***REMOVED***
                    sentAll = false;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        if (sentAll) ***REMOVED***
            this.eventLists_ = [];
        ***REMOVED***
        this.recursionDepth_--;
    ***REMOVED***;
    return EventQueue;
***REMOVED***());
exports.EventQueue = EventQueue;
/**
 * @param ***REMOVED***!Path***REMOVED*** path
 * @constructor
 */
var EventList = /** @class */ (function () ***REMOVED***
    function EventList(path_) ***REMOVED***
        this.path_ = path_;
        /**
         * @type ***REMOVED***!Array.<Event>***REMOVED***
         * @private
         */
        this.events_ = [];
    ***REMOVED***
    /**
     * @param ***REMOVED***!Event***REMOVED*** eventData
     */
    EventList.prototype.add = function (eventData) ***REMOVED***
        this.events_.push(eventData);
    ***REMOVED***;
    /**
     * Iterates through the list and raises each event
     */
    EventList.prototype.raise = function () ***REMOVED***
        for (var i = 0; i < this.events_.length; i++) ***REMOVED***
            var eventData = this.events_[i];
            if (eventData !== null) ***REMOVED***
                this.events_[i] = null;
                var eventFn = eventData.getEventRunner();
                if (util_1.logger) ***REMOVED***
                    util_1.log('event: ' + eventData.toString());
                ***REMOVED***
                util_1.exceptionGuard(eventFn);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    /**
     * @return ***REMOVED***!Path***REMOVED***
     */
    EventList.prototype.getPath = function () ***REMOVED***
        return this.path_;
    ***REMOVED***;
    return EventList;
***REMOVED***());
exports.EventList = EventList;

//# sourceMappingURL=EventQueue.js.map
