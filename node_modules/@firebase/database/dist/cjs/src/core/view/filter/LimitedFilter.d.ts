import ***REMOVED*** Node ***REMOVED*** from '../../snap/Node';
import ***REMOVED*** NodeFilter ***REMOVED*** from './NodeFilter';
import ***REMOVED*** Index ***REMOVED*** from '../../snap/indexes/Index';
import ***REMOVED*** IndexedFilter ***REMOVED*** from './IndexedFilter';
import ***REMOVED*** QueryParams ***REMOVED*** from '../QueryParams';
import ***REMOVED*** Path ***REMOVED*** from '../../util/Path';
import ***REMOVED*** CompleteChildSource ***REMOVED*** from '../CompleteChildSource';
import ***REMOVED*** ChildChangeAccumulator ***REMOVED*** from '../ChildChangeAccumulator';
/**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 *
 * @constructor
 * @implements ***REMOVED***NodeFilter***REMOVED***
 */
export declare class LimitedFilter implements NodeFilter ***REMOVED***
    /**
     * @const
     * @type ***REMOVED***RangedFilter***REMOVED***
     * @private
     */
    private readonly rangedFilter_;
    /**
     * @const
     * @type ***REMOVED***!Index***REMOVED***
     * @private
     */
    private readonly index_;
    /**
     * @const
     * @type ***REMOVED***number***REMOVED***
     * @private
     */
    private readonly limit_;
    /**
     * @const
     * @type ***REMOVED***boolean***REMOVED***
     * @private
     */
    private readonly reverse_;
    /**
     * @param ***REMOVED***!QueryParams***REMOVED*** params
     */
    constructor(params: QueryParams);
    /**
     * @inheritDoc
     */
    updateChild(snap: Node, key: string, newChild: Node, affectedPath: Path, source: CompleteChildSource, optChangeAccumulator: ChildChangeAccumulator | null): Node;
    /**
     * @inheritDoc
     */
    updateFullNode(oldSnap: Node, newSnap: Node, optChangeAccumulator: ChildChangeAccumulator | null): Node;
    /**
     * @inheritDoc
     */
    updatePriority(oldSnap: Node, newPriority: Node): Node;
    /**
     * @inheritDoc
     */
    filtersNodes(): boolean;
    /**
     * @inheritDoc
     */
    getIndexedFilter(): IndexedFilter;
    /**
     * @inheritDoc
     */
    getIndex(): Index;
    /**
     * @param ***REMOVED***!Node***REMOVED*** snap
     * @param ***REMOVED***string***REMOVED*** childKey
     * @param ***REMOVED***!Node***REMOVED*** childSnap
     * @param ***REMOVED***!CompleteChildSource***REMOVED*** source
     * @param ***REMOVED***?ChildChangeAccumulator***REMOVED*** changeAccumulator
     * @return ***REMOVED***!Node***REMOVED***
     * @private
     */
    private fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator);
***REMOVED***
