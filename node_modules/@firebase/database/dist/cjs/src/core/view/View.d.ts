import ***REMOVED*** ViewCache ***REMOVED*** from './ViewCache';
import ***REMOVED*** Operation ***REMOVED*** from '../operation/Operation';
import ***REMOVED*** Change ***REMOVED*** from './Change';
import ***REMOVED*** Query ***REMOVED*** from '../../api/Query';
import ***REMOVED*** EventRegistration ***REMOVED*** from './EventRegistration';
import ***REMOVED*** Node ***REMOVED*** from '../snap/Node';
import ***REMOVED*** Path ***REMOVED*** from '../util/Path';
import ***REMOVED*** WriteTreeRef ***REMOVED*** from '../WriteTree';
import ***REMOVED*** Event ***REMOVED*** from './Event';
/**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 * @constructor
 */
export declare class View ***REMOVED***
    private query_;
    private processor_;
    private viewCache_;
    private eventRegistrations_;
    private eventGenerator_;
    /**
     *
     * @param ***REMOVED***!Query***REMOVED*** query_
     * @param ***REMOVED***!ViewCache***REMOVED*** initialViewCache
     */
    constructor(query_: Query, initialViewCache: ViewCache);
    /**
     * @return ***REMOVED***!Query***REMOVED***
     */
    getQuery(): Query;
    /**
     * @return ***REMOVED***?Node***REMOVED***
     */
    getServerCache(): Node | null;
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @return ***REMOVED***?Node***REMOVED***
     */
    getCompleteServerCache(path: Path): Node | null;
    /**
     * @return ***REMOVED***boolean***REMOVED***
     */
    isEmpty(): boolean;
    /**
     * @param ***REMOVED***!EventRegistration***REMOVED*** eventRegistration
     */
    addEventRegistration(eventRegistration: EventRegistration): void;
    /**
     * @param ***REMOVED***?EventRegistration***REMOVED*** eventRegistration If null, remove all callbacks.
     * @param ***REMOVED***Error=***REMOVED*** cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return ***REMOVED***!Array.<!Event>***REMOVED*** Cancel events, if cancelError was provided.
     */
    removeEventRegistration(eventRegistration: EventRegistration | null, cancelError?: Error): Event[];
    /**
     * Applies the given Operation, updates our cache, and returns the appropriate events.
     *
     * @param ***REMOVED***!Operation***REMOVED*** operation
     * @param ***REMOVED***!WriteTreeRef***REMOVED*** writesCache
     * @param ***REMOVED***?Node***REMOVED*** completeServerCache
     * @return ***REMOVED***!Array.<!Event>***REMOVED***
     */
    applyOperation(operation: Operation, writesCache: WriteTreeRef, completeServerCache: Node | null): Event[];
    /**
     * @param ***REMOVED***!EventRegistration***REMOVED*** registration
     * @return ***REMOVED***!Array.<!Event>***REMOVED***
     */
    getInitialEvents(registration: EventRegistration): Event[];
    /**
     * @private
     * @param ***REMOVED***!Array.<!Change>***REMOVED*** changes
     * @param ***REMOVED***!Node***REMOVED*** eventCache
     * @param ***REMOVED***EventRegistration=***REMOVED*** eventRegistration
     * @return ***REMOVED***!Array.<!Event>***REMOVED***
     */
    generateEventsForChanges_(changes: Change[], eventCache: Node, eventRegistration?: EventRegistration): Event[];
***REMOVED***
