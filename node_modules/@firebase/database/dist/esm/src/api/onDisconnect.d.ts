import ***REMOVED*** Repo ***REMOVED*** from '../core/Repo';
import ***REMOVED*** Path ***REMOVED*** from '../core/util/Path';
/**
 * @constructor
 */
export declare class OnDisconnect ***REMOVED***
    private repo_;
    private path_;
    /**
     * @param ***REMOVED***!Repo***REMOVED*** repo_
     * @param ***REMOVED***!Path***REMOVED*** path_
     */
    constructor(repo_: Repo, path_: Path);
    /**
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!firebase.Promise***REMOVED***
     */
    cancel(onComplete?: (a: Error | null) => void): Promise<void>;
    /**
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!firebase.Promise***REMOVED***
     */
    remove(onComplete?: (a: Error | null) => void): Promise<void>;
    /**
     * @param ***REMOVED*******REMOVED*** value
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!firebase.Promise***REMOVED***
     */
    set(value: any, onComplete?: (a: Error | null) => void): Promise<void>;
    /**
     * @param ***REMOVED*******REMOVED*** value
     * @param ***REMOVED***number|string|null***REMOVED*** priority
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!firebase.Promise***REMOVED***
     */
    setWithPriority(value: any, priority: number | string | null, onComplete?: (a: Error | null) => void): Promise<void>;
    /**
     * @param ***REMOVED***!Object***REMOVED*** objectToMerge
     * @param ***REMOVED***function(?Error)=***REMOVED*** onComplete
     * @return ***REMOVED***!firebase.Promise***REMOVED***
     */
    update(objectToMerge: object, onComplete?: (a: Error | null) => void): Promise<void>;
***REMOVED***
