import ***REMOVED*** Reference ***REMOVED*** from './Reference';
import ***REMOVED*** Repo ***REMOVED*** from '../core/Repo';
import ***REMOVED*** FirebaseApp ***REMOVED*** from '@firebase/app-types';
import ***REMOVED*** FirebaseService ***REMOVED*** from '@firebase/app-types/private';
/**
 * Class representing a firebase database.
 * @implements ***REMOVED***FirebaseService***REMOVED***
 */
export declare class Database implements FirebaseService ***REMOVED***
    private repo_;
    INTERNAL: DatabaseInternals;
    private root_;
    static readonly ServerValue: ***REMOVED***
        TIMESTAMP: ***REMOVED***
            '.sv': string;
        ***REMOVED***;
    ***REMOVED***;
    /**
     * The constructor should not be called by users of our public API.
     * @param ***REMOVED***!Repo***REMOVED*** repo_
     */
    constructor(repo_: Repo);
    readonly app: FirebaseApp;
    /**
     * Returns a reference to the root or the path specified in opt_pathString.
     * @param ***REMOVED***string=***REMOVED*** pathString
     * @return ***REMOVED***!Reference***REMOVED*** Firebase reference.
     */
    ref(pathString?: string): Reference;
    /**
     * Returns a reference to the root or the path specified in url.
     * We throw a exception if the url is not in the same domain as the
     * current repo.
     * @param ***REMOVED***string***REMOVED*** url
     * @return ***REMOVED***!Reference***REMOVED*** Firebase reference.
     */
    refFromURL(url: string): Reference;
    /**
     * @param ***REMOVED***string***REMOVED*** apiName
     */
    private checkDeleted_(apiName);
    goOffline(): void;
    goOnline(): void;
***REMOVED***
export declare class DatabaseInternals ***REMOVED***
    database: Database;
    /** @param ***REMOVED***!Database***REMOVED*** database */
    constructor(database: Database);
    /** @return ***REMOVED***Promise<void>***REMOVED*** */
    delete(): Promise<void>;
***REMOVED***
