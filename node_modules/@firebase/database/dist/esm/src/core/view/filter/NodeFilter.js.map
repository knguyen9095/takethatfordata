***REMOVED***"version":3,"sources":["../src/core/view/filter/NodeFilter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","file":"NodeFilter.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Node ***REMOVED*** from '../../snap/Node';\nimport ***REMOVED*** Path ***REMOVED*** from '../../util/Path';\nimport ***REMOVED*** CompleteChildSource ***REMOVED*** from '../CompleteChildSource';\nimport ***REMOVED*** ChildChangeAccumulator ***REMOVED*** from '../ChildChangeAccumulator';\nimport ***REMOVED*** Index ***REMOVED*** from '../../snap/indexes/Index';\n\n/**\n * NodeFilter is used to update nodes and complete children of nodes while applying queries on the fly and keeping\n * track of any child changes. This class does not track value changes as value changes depend on more\n * than just the node itself. Different kind of queries require different kind of implementations of this interface.\n * @interface\n */\nexport interface NodeFilter ***REMOVED***\n  /**\n   * Update a single complete child in the snap. If the child equals the old child in the snap, this is a no-op.\n   * The method expects an indexed snap.\n   *\n   * @param ***REMOVED***!Node***REMOVED*** snap\n   * @param ***REMOVED***string***REMOVED*** key\n   * @param ***REMOVED***!Node***REMOVED*** newChild\n   * @param ***REMOVED***!Path***REMOVED*** affectedPath\n   * @param ***REMOVED***!CompleteChildSource***REMOVED*** source\n   * @param ***REMOVED***?ChildChangeAccumulator***REMOVED*** optChangeAccumulator\n   * @return ***REMOVED***!Node***REMOVED***\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node;\n\n  /**\n   * Update a node in full and output any resulting change from this complete update.\n   *\n   * @param ***REMOVED***!Node***REMOVED*** oldSnap\n   * @param ***REMOVED***!Node***REMOVED*** newSnap\n   * @param ***REMOVED***?ChildChangeAccumulator***REMOVED*** optChangeAccumulator\n   * @return ***REMOVED***!Node***REMOVED***\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node;\n\n  /**\n   * Update the priority of the root node\n   *\n   * @param ***REMOVED***!Node***REMOVED*** oldSnap\n   * @param ***REMOVED***!Node***REMOVED*** newPriority\n   * @return ***REMOVED***!Node***REMOVED***\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node;\n\n  /**\n   * Returns true if children might be filtered due to query criteria\n   *\n   * @return ***REMOVED***boolean***REMOVED***\n   */\n  filtersNodes(): boolean;\n\n  /**\n   * Returns the index filter that this filter uses to get a NodeFilter that doesn't filter any children.\n   * @return ***REMOVED***!NodeFilter***REMOVED***\n   */\n  getIndexedFilter(): NodeFilter;\n\n  /**\n   * Returns the index that this filter uses\n   * @return ***REMOVED***!Index***REMOVED***\n   */\n  getIndex(): Index;\n***REMOVED***\n"]***REMOVED***