/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** stringify ***REMOVED*** from '@firebase/util';
/**
 * Encapsulates the data needed to raise an event
 * @implements ***REMOVED***Event***REMOVED***
 */
var DataEvent = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***!string***REMOVED*** eventType One of: value, child_added, child_changed, child_moved, child_removed
     * @param ***REMOVED***!EventRegistration***REMOVED*** eventRegistration The function to call to with the event data. User provided
     * @param ***REMOVED***!DataSnapshot***REMOVED*** snapshot The data backing the event
     * @param ***REMOVED***?string=***REMOVED*** prevName Optional, the name of the previous child for child_* events.
     */
    function DataEvent(eventType, eventRegistration, snapshot, prevName) ***REMOVED***
        this.eventType = eventType;
        this.eventRegistration = eventRegistration;
        this.snapshot = snapshot;
        this.prevName = prevName;
    ***REMOVED***
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getPath = function () ***REMOVED***
        var ref = this.snapshot.getRef();
        if (this.eventType === 'value') ***REMOVED***
            return ref.path;
        ***REMOVED***
        else ***REMOVED***
            return ref.getParent().path;
        ***REMOVED***
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getEventType = function () ***REMOVED***
        return this.eventType;
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getEventRunner = function () ***REMOVED***
        return this.eventRegistration.getEventRunner(this);
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    DataEvent.prototype.toString = function () ***REMOVED***
        return (this.getPath().toString() +
            ':' +
            this.eventType +
            ':' +
            stringify(this.snapshot.exportVal()));
    ***REMOVED***;
    return DataEvent;
***REMOVED***());
export ***REMOVED*** DataEvent ***REMOVED***;
var CancelEvent = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***EventRegistration***REMOVED*** eventRegistration
     * @param ***REMOVED***Error***REMOVED*** error
     * @param ***REMOVED***!Path***REMOVED*** path
     */
    function CancelEvent(eventRegistration, error, path) ***REMOVED***
        this.eventRegistration = eventRegistration;
        this.error = error;
        this.path = path;
    ***REMOVED***
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getPath = function () ***REMOVED***
        return this.path;
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getEventType = function () ***REMOVED***
        return 'cancel';
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getEventRunner = function () ***REMOVED***
        return this.eventRegistration.getEventRunner(this);
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.toString = function () ***REMOVED***
        return this.path.toString() + ':cancel';
    ***REMOVED***;
    return CancelEvent;
***REMOVED***());
export ***REMOVED*** CancelEvent ***REMOVED***;

//# sourceMappingURL=Event.js.map
