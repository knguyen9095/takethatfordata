/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = Object.setPrototypeOf ||
        (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
        function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
import ***REMOVED*** Index ***REMOVED*** from './Index';
import ***REMOVED*** NamedNode ***REMOVED*** from '../Node';
import ***REMOVED*** nameCompare, MAX_NAME ***REMOVED*** from '../../util/util';
import ***REMOVED*** assert, assertionError ***REMOVED*** from '@firebase/util';
var __EMPTY_NODE;
var KeyIndex = /** @class */ (function (_super) ***REMOVED***
    __extends(KeyIndex, _super);
    function KeyIndex() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    Object.defineProperty(KeyIndex, "__EMPTY_NODE", ***REMOVED***
        get: function () ***REMOVED***
            return __EMPTY_NODE;
        ***REMOVED***,
        set: function (val) ***REMOVED***
            __EMPTY_NODE = val;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.compare = function (a, b) ***REMOVED***
        return nameCompare(a.name, b.name);
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.isDefinedOn = function (node) ***REMOVED***
        // We could probably return true here (since every node has a key), but it's never called
        // so just leaving unimplemented for now.
        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) ***REMOVED***
        return false; // The key for a node never changes.
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.minPost = function () ***REMOVED***
        return NamedNode.MIN;
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.maxPost = function () ***REMOVED***
        // TODO: This should really be created once and cached in a static property, but
        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
        return new NamedNode(MAX_NAME, __EMPTY_NODE);
    ***REMOVED***;
    /**
     * @param ***REMOVED*******REMOVED*** indexValue
     * @param ***REMOVED***string***REMOVED*** name
     * @return ***REMOVED***!NamedNode***REMOVED***
     */
    KeyIndex.prototype.makePost = function (indexValue, name) ***REMOVED***
        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
        // We just use empty node, but it'll never be compared, since our comparator only looks at name.
        return new NamedNode(indexValue, __EMPTY_NODE);
    ***REMOVED***;
    /**
     * @return ***REMOVED***!string***REMOVED*** String representation for inclusion in a query spec
     */
    KeyIndex.prototype.toString = function () ***REMOVED***
        return '.key';
    ***REMOVED***;
    return KeyIndex;
***REMOVED***(Index));
export ***REMOVED*** KeyIndex ***REMOVED***;
export var KEY_INDEX = new KeyIndex();

//# sourceMappingURL=KeyIndex.js.map
