/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = Object.setPrototypeOf ||
        (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
        function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
import ***REMOVED*** assert ***REMOVED*** from '@firebase/util';
import ***REMOVED*** nameCompare, MAX_NAME ***REMOVED*** from '../../util/util';
import ***REMOVED*** Index ***REMOVED*** from './Index';
import ***REMOVED*** ChildrenNode, MAX_NODE ***REMOVED*** from '../ChildrenNode';
import ***REMOVED*** NamedNode ***REMOVED*** from '../Node';
import ***REMOVED*** nodeFromJSON ***REMOVED*** from '../nodeFromJSON';
/**
 * @param ***REMOVED***!Path***REMOVED*** indexPath
 * @constructor
 * @extends ***REMOVED***Index***REMOVED***
 */
var PathIndex = /** @class */ (function (_super) ***REMOVED***
    __extends(PathIndex, _super);
    function PathIndex(indexPath_) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.indexPath_ = indexPath_;
        assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
        return _this;
    ***REMOVED***
    /**
     * @param ***REMOVED***!Node***REMOVED*** snap
     * @return ***REMOVED***!Node***REMOVED***
     * @protected
     */
    PathIndex.prototype.extractChild = function (snap) ***REMOVED***
        return snap.getChild(this.indexPath_);
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    PathIndex.prototype.isDefinedOn = function (node) ***REMOVED***
        return !node.getChild(this.indexPath_).isEmpty();
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    PathIndex.prototype.compare = function (a, b) ***REMOVED***
        var aChild = this.extractChild(a.node);
        var bChild = this.extractChild(b.node);
        var indexCmp = aChild.compareTo(bChild);
        if (indexCmp === 0) ***REMOVED***
            return nameCompare(a.name, b.name);
        ***REMOVED***
        else ***REMOVED***
            return indexCmp;
        ***REMOVED***
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    PathIndex.prototype.makePost = function (indexValue, name) ***REMOVED***
        var valueNode = nodeFromJSON(indexValue);
        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
        return new NamedNode(name, node);
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    PathIndex.prototype.maxPost = function () ***REMOVED***
        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
        return new NamedNode(MAX_NAME, node);
    ***REMOVED***;
    /**
     * @inheritDoc
     */
    PathIndex.prototype.toString = function () ***REMOVED***
        return this.indexPath_.slice().join('/');
    ***REMOVED***;
    return PathIndex;
***REMOVED***(Index));
export ***REMOVED*** PathIndex ***REMOVED***;

//# sourceMappingURL=PathIndex.js.map
