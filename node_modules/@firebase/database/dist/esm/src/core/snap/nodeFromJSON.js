/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** ChildrenNode ***REMOVED*** from './ChildrenNode';
import ***REMOVED*** LeafNode ***REMOVED*** from './LeafNode';
import ***REMOVED*** NamedNode ***REMOVED*** from './Node';
import ***REMOVED*** forEach, contains ***REMOVED*** from '@firebase/util';
import ***REMOVED*** assert ***REMOVED*** from '@firebase/util';
import ***REMOVED*** buildChildSet ***REMOVED*** from './childSet';
import ***REMOVED*** NAME_COMPARATOR, NAME_ONLY_COMPARATOR ***REMOVED*** from './comparators';
import ***REMOVED*** IndexMap ***REMOVED*** from './IndexMap';
import ***REMOVED*** PRIORITY_INDEX, setNodeFromJSON ***REMOVED*** from './indexes/PriorityIndex';
var USE_HINZE = true;
/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param ***REMOVED*******REMOVED*** json JSON to create a node for.
 * @param ***REMOVED***?string|?number=***REMOVED*** priority Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 * @return ***REMOVED***!Node***REMOVED***
 */
export function nodeFromJSON(json, priority) ***REMOVED***
    if (priority === void 0) ***REMOVED*** priority = null; ***REMOVED***
    if (json === null) ***REMOVED***
        return ChildrenNode.EMPTY_NODE;
    ***REMOVED***
    if (typeof json === 'object' && '.priority' in json) ***REMOVED***
        priority = json['.priority'];
    ***REMOVED***
    assert(priority === null ||
        typeof priority === 'string' ||
        typeof priority === 'number' ||
        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) ***REMOVED***
        json = json['.value'];
    ***REMOVED***
    // Valid leaf nodes include non-objects or server-value wrapper objects
    if (typeof json !== 'object' || '.sv' in json) ***REMOVED***
        var jsonLeaf = json;
        return new LeafNode(jsonLeaf, nodeFromJSON(priority));
    ***REMOVED***
    if (!(json instanceof Array) && USE_HINZE) ***REMOVED***
        var children_1 = [];
        var childrenHavePriority_1 = false;
        var hinzeJsonObj_1 = json;
        forEach(hinzeJsonObj_1, function (key, child) ***REMOVED***
            if (typeof key !== 'string' || key.substring(0, 1) !== '.') ***REMOVED***
                // Ignore metadata nodes
                var childNode = nodeFromJSON(hinzeJsonObj_1[key]);
                if (!childNode.isEmpty()) ***REMOVED***
                    childrenHavePriority_1 =
                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                    children_1.push(new NamedNode(key, childNode));
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***);
        if (children_1.length == 0) ***REMOVED***
            return ChildrenNode.EMPTY_NODE;
        ***REMOVED***
        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) ***REMOVED*** return namedNode.name; ***REMOVED***, NAME_COMPARATOR);
        if (childrenHavePriority_1) ***REMOVED***
            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap(***REMOVED*** '.priority': sortedChildSet ***REMOVED***, ***REMOVED*** '.priority': PRIORITY_INDEX ***REMOVED***));
        ***REMOVED***
        else ***REMOVED***
            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
        ***REMOVED***
    ***REMOVED***
    else ***REMOVED***
        var node_1 = ChildrenNode.EMPTY_NODE;
        var jsonObj_1 = json;
        forEach(jsonObj_1, function (key, childData) ***REMOVED***
            if (contains(jsonObj_1, key)) ***REMOVED***
                if (key.substring(0, 1) !== '.') ***REMOVED***
                    // ignore metadata nodes.
                    var childNode = nodeFromJSON(childData);
                    if (childNode.isLeafNode() || !childNode.isEmpty())
                        node_1 = node_1.updateImmediateChild(key, childNode);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***);
        return node_1.updatePriority(nodeFromJSON(priority));
    ***REMOVED***
***REMOVED***
setNodeFromJSON(nodeFromJSON);

//# sourceMappingURL=nodeFromJSON.js.map
