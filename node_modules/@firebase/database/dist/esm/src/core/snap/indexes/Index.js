/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** NamedNode ***REMOVED*** from '../Node';
import ***REMOVED*** MIN_NAME ***REMOVED*** from '../../util/util';
/**
 *
 * @constructor
 */
var Index = /** @class */ (function () ***REMOVED***
    function Index() ***REMOVED***
    ***REMOVED***
    /**
     * @return ***REMOVED***function(!NamedNode, !NamedNode):number***REMOVED*** A standalone comparison function for
     * this index
     */
    Index.prototype.getCompare = function () ***REMOVED***
        return this.compare.bind(this);
    ***REMOVED***;
    /**
     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
     *
     * @param ***REMOVED***!Node***REMOVED*** oldNode
     * @param ***REMOVED***!Node***REMOVED*** newNode
     * @return ***REMOVED***boolean***REMOVED*** True if the portion of the snapshot being indexed changed between oldNode and newNode
     */
    Index.prototype.indexedValueChanged = function (oldNode, newNode) ***REMOVED***
        var oldWrapped = new NamedNode(MIN_NAME, oldNode);
        var newWrapped = new NamedNode(MIN_NAME, newNode);
        return this.compare(oldWrapped, newWrapped) !== 0;
    ***REMOVED***;
    /**
     * @return ***REMOVED***!NamedNode***REMOVED*** a node wrapper that will sort equal to or less than
     * any other node wrapper, using this index
     */
    Index.prototype.minPost = function () ***REMOVED***
        return NamedNode.MIN;
    ***REMOVED***;
    return Index;
***REMOVED***());
export ***REMOVED*** Index ***REMOVED***;

//# sourceMappingURL=Index.js.map
