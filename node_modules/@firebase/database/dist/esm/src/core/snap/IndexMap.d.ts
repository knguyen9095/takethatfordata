import ***REMOVED*** NamedNode, Node ***REMOVED*** from './Node';
import ***REMOVED*** SortedMap ***REMOVED*** from '../util/SortedMap';
import ***REMOVED*** Index ***REMOVED*** from './indexes/Index';
/**
 *
 * @param ***REMOVED***Object.<string, FallbackType|SortedMap.<NamedNode, Node>>***REMOVED*** indexes
 * @param ***REMOVED***Object.<string, Index>***REMOVED*** indexSet
 * @constructor
 */
export declare class IndexMap ***REMOVED***
    private indexes_;
    private indexSet_;
    /**
     * The default IndexMap for nodes without a priority
     * @type ***REMOVED***!IndexMap***REMOVED***
     * @const
     */
    static readonly Default: IndexMap;
    constructor(indexes_: ***REMOVED***
        [k: string]: SortedMap<NamedNode, Node> | object;
    ***REMOVED***, indexSet_: ***REMOVED***
        [k: string]: Index;
    ***REMOVED***);
    /**
     *
     * @param ***REMOVED***!string***REMOVED*** indexKey
     * @return ***REMOVED***?SortedMap.<NamedNode, Node>***REMOVED***
     */
    get(indexKey: string): SortedMap<NamedNode, Node> | null;
    /**
     * @param ***REMOVED***!Index***REMOVED*** indexDefinition
     * @return ***REMOVED***boolean***REMOVED***
     */
    hasIndex(indexDefinition: Index): boolean;
    /**
     * @param ***REMOVED***!Index***REMOVED*** indexDefinition
     * @param ***REMOVED***!SortedMap.<string, !Node>***REMOVED*** existingChildren
     * @return ***REMOVED***!IndexMap***REMOVED***
     */
    addIndex(indexDefinition: Index, existingChildren: SortedMap<string, Node>): IndexMap;
    /**
     * Ensure that this node is properly tracked in any indexes that we're maintaining
     * @param ***REMOVED***!NamedNode***REMOVED*** namedNode
     * @param ***REMOVED***!SortedMap.<string, !Node>***REMOVED*** existingChildren
     * @return ***REMOVED***!IndexMap***REMOVED***
     */
    addToIndexes(namedNode: NamedNode, existingChildren: SortedMap<string, Node>): IndexMap;
    /**
     * Create a new IndexMap instance with the given value removed
     * @param ***REMOVED***!NamedNode***REMOVED*** namedNode
     * @param ***REMOVED***!SortedMap.<string, !Node>***REMOVED*** existingChildren
     * @return ***REMOVED***!IndexMap***REMOVED***
     */
    removeFromIndexes(namedNode: NamedNode, existingChildren: SortedMap<string, Node>): IndexMap;
***REMOVED***
