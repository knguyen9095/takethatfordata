***REMOVED***"version":3,"sources":["../src/core/operation/AckUserWrite.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AACpC,OAAO,EAAa,eAAe,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAGxE;IAOE;;;;;OAKG;IACH;QACE,iBAAiB,CAAQ,IAAU;QACnC,iBAAiB,CAAQ,YAAoC;QAC7D,iBAAiB,CAAQ,MAAe;QAFf,SAAI,GAAJ,IAAI,CAAM;QACV,iBAAY,GAAZ,YAAY,CAAwB;QACpC,WAAM,GAAN,MAAM,CAAS;QAf1C,kBAAkB;QAClB,SAAI,GAAG,aAAa,CAAC,cAAc,CAAC;QAEpC,kBAAkB;QAClB,WAAM,GAAG,eAAe,CAAC,IAAI,CAAC;IAY3B,CAAC;IAEJ;;OAEG;IACH,wCAAiB,GAAjB,UAAkB,SAAiB;QACjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACzB,MAAM,CACJ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,SAAS,EAClC,+CAA+C,CAChD,CAAC;YACF,MAAM,CAAC,IAAI,YAAY,CACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EACpB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,MAAM,CACZ,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAC3C,MAAM,CACJ,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,EACpC,0DAA0D,CAC3D,CAAC;YACF,wEAAwE;YACxE,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IACH,mBAAC;AAAD,CA7CA,AA6CC,IAAA","file":"AckUserWrite.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert ***REMOVED*** from '@firebase/util';\nimport ***REMOVED*** Path ***REMOVED*** from '../util/Path';\nimport ***REMOVED*** Operation, OperationSource, OperationType ***REMOVED*** from './Operation';\nimport ***REMOVED*** ImmutableTree ***REMOVED*** from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation ***REMOVED***\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param ***REMOVED***!Path***REMOVED*** path\n   * @param ***REMOVED***!ImmutableTree<!boolean>***REMOVED*** affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param ***REMOVED***!boolean***REMOVED*** revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) ***REMOVED******REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite ***REMOVED***\n    if (!this.path.isEmpty()) ***REMOVED***\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    ***REMOVED*** else if (this.affectedTree.value != null) ***REMOVED***\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    ***REMOVED*** else ***REMOVED***\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n"]***REMOVED***