/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** assert ***REMOVED*** from '@firebase/util';
import ***REMOVED*** Path ***REMOVED*** from '../util/Path';
import ***REMOVED*** OperationSource, OperationType ***REMOVED*** from './Operation';
var AckUserWrite = /** @class */ (function () ***REMOVED***
    /**
     *
     * @param ***REMOVED***!Path***REMOVED*** path
     * @param ***REMOVED***!ImmutableTree<!boolean>***REMOVED*** affectedTree A tree containing true for each affected path. Affected paths can't overlap.
     * @param ***REMOVED***!boolean***REMOVED*** revert
     */
    function AckUserWrite(
        /**@inheritDoc */ path, 
        /**@inheritDoc */ affectedTree, 
        /**@inheritDoc */ revert) ***REMOVED***
        this.path = path;
        this.affectedTree = affectedTree;
        this.revert = revert;
        /** @inheritDoc */
        this.type = OperationType.ACK_USER_WRITE;
        /** @inheritDoc */
        this.source = OperationSource.User;
    ***REMOVED***
    /**
     * @inheritDoc
     */
    AckUserWrite.prototype.operationForChild = function (childName) ***REMOVED***
        if (!this.path.isEmpty()) ***REMOVED***
            assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
        ***REMOVED***
        else if (this.affectedTree.value != null) ***REMOVED***
            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
            // All child locations are affected as well; just return same operation.
            return this;
        ***REMOVED***
        else ***REMOVED***
            var childTree = this.affectedTree.subtree(new Path(childName));
            return new AckUserWrite(Path.Empty, childTree, this.revert);
        ***REMOVED***
    ***REMOVED***;
    return AckUserWrite;
***REMOVED***());
export ***REMOVED*** AckUserWrite ***REMOVED***;

//# sourceMappingURL=AckUserWrite.js.map
