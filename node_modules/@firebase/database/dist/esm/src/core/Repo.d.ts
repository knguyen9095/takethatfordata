import ***REMOVED*** Path ***REMOVED*** from './util/Path';
import ***REMOVED*** PersistentConnection ***REMOVED*** from './PersistentConnection';
import ***REMOVED*** FirebaseApp ***REMOVED*** from '@firebase/app-types';
import ***REMOVED*** RepoInfo ***REMOVED*** from './RepoInfo';
import ***REMOVED*** Database ***REMOVED*** from '../api/Database';
import ***REMOVED*** Query ***REMOVED*** from '../api/Query';
import ***REMOVED*** EventRegistration ***REMOVED*** from './view/EventRegistration';
/**
 * A connection to a single data repository.
 */
export declare class Repo ***REMOVED***
    repoInfo_: RepoInfo;
    app: FirebaseApp;
    dataUpdateCount: number;
    private infoSyncTree_;
    private serverSyncTree_;
    private stats_;
    private statsListener_;
    private eventQueue_;
    private nextWriteId_;
    private server_;
    private statsReporter_;
    private transactions_init_;
    private infoData_;
    private abortTransactions_;
    private rerunTransactions_;
    private interceptServerDataCallback_;
    private __database;
    private onDisconnect_;
    /**
     * TODO: This should be @private but it's used by test_access.js and internal.js
     * @type ***REMOVED***?PersistentConnection***REMOVED***
     */
    persistentConnection_: PersistentConnection | null;
    /**
     * @param ***REMOVED***!RepoInfo***REMOVED*** repoInfo_
     * @param ***REMOVED***boolean***REMOVED*** forceRestClient
     * @param ***REMOVED***!FirebaseApp***REMOVED*** app
     */
    constructor(repoInfo_: RepoInfo, forceRestClient: boolean, app: FirebaseApp);
    /**
     * @return ***REMOVED***string***REMOVED***  The URL corresponding to the root of this Firebase.
     */
    toString(): string;
    /**
     * @return ***REMOVED***!string***REMOVED*** The namespace represented by the repo.
     */
    name(): string;
    /**
     * @return ***REMOVED***!number***REMOVED*** The time in milliseconds, taking the server offset into account if we have one.
     */
    serverTime(): number;
    /**
     * Generate ServerValues using some variables from the repo object.
     * @return ***REMOVED***!Object***REMOVED***
     */
    generateServerValues(): Object;
    /**
     * Called by realtime when we get new messages from the server.
     *
     * @private
     * @param ***REMOVED***string***REMOVED*** pathString
     * @param ***REMOVED*******REMOVED*** data
     * @param ***REMOVED***boolean***REMOVED*** isMerge
     * @param ***REMOVED***?number***REMOVED*** tag
     */
    private onDataUpdate_(pathString, data, isMerge, tag);
    /**
     * TODO: This should be @private but it's used by test_access.js and internal.js
     * @param ***REMOVED***?function(!string, *):****REMOVED*** callback
     * @private
     */
    interceptServerData_(callback: ((a: string, b: any) => any) | null): void;
    /**
     * @param ***REMOVED***!boolean***REMOVED*** connectStatus
     * @private
     */
    private onConnectStatus_(connectStatus);
    /**
     * @param ***REMOVED***!Object***REMOVED*** updates
     * @private
     */
    private onServerInfoUpdate_(updates);
    /**
     *
     * @param ***REMOVED***!string***REMOVED*** pathString
     * @param ***REMOVED*******REMOVED*** value
     * @private
     */
    private updateInfo_(pathString, value);
    /**
     * @return ***REMOVED***!number***REMOVED***
     * @private
     */
    private getNextWriteId_();
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @param ***REMOVED*******REMOVED*** newVal
     * @param ***REMOVED***number|string|null***REMOVED*** newPriority
     * @param ***REMOVED***?function(?Error, *=)***REMOVED*** onComplete
     */
    setWithPriority(path: Path, newVal: any, newPriority: number | string | null, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @param ***REMOVED***!Object***REMOVED*** childrenToMerge
     * @param ***REMOVED***?function(?Error, *=)***REMOVED*** onComplete
     */
    update(path: Path, childrenToMerge: ***REMOVED***
        [k: string]: any;
    ***REMOVED***, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;
    /**
     * Applies all of the changes stored up in the onDisconnect_ tree.
     * @private
     */
    private runOnDisconnectEvents_();
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @param ***REMOVED***?function(?Error, *=)***REMOVED*** onComplete
     */
    onDisconnectCancel(path: Path, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @param ***REMOVED*******REMOVED*** value
     * @param ***REMOVED***?function(?Error, *=)***REMOVED*** onComplete
     */
    onDisconnectSet(path: Path, value: any, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @param ***REMOVED*******REMOVED*** value
     * @param ***REMOVED*******REMOVED*** priority
     * @param ***REMOVED***?function(?Error, *=)***REMOVED*** onComplete
     */
    onDisconnectSetWithPriority(path: Path, value: any, priority: any, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;
    /**
     * @param ***REMOVED***!Path***REMOVED*** path
     * @param ***REMOVED*******REMOVED*** childrenToMerge
     * @param ***REMOVED***?function(?Error, *=)***REMOVED*** onComplete
     */
    onDisconnectUpdate(path: Path, childrenToMerge: ***REMOVED***
        [k: string]: any;
    ***REMOVED***, onComplete: ((status: Error | null, errorReason?: string) => void) | null): void;
    /**
     * @param ***REMOVED***!Query***REMOVED*** query
     * @param ***REMOVED***!EventRegistration***REMOVED*** eventRegistration
     */
    addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration): void;
    /**
     * @param ***REMOVED***!Query***REMOVED*** query
     * @param ***REMOVED***?EventRegistration***REMOVED*** eventRegistration
     */
    removeEventCallbackForQuery(query: Query, eventRegistration: EventRegistration): void;
    interrupt(): void;
    resume(): void;
    stats(showDelta?: boolean): void;
    statsIncrementCounter(metric: string): void;
    /**
     * @param ***REMOVED***...****REMOVED*** var_args
     * @private
     */
    private log_(...var_args);
    /**
     * @param ***REMOVED***?function(?Error, *=)***REMOVED*** callback
     * @param ***REMOVED***!string***REMOVED*** status
     * @param ***REMOVED***?string=***REMOVED*** errorReason
     */
    callOnCompleteCallback(callback: ((status: Error | null, errorReason?: string) => void) | null, status: string, errorReason?: string | null): void;
    readonly database: Database;
***REMOVED***
