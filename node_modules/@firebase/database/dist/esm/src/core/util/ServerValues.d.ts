import ***REMOVED*** SparseSnapshotTree ***REMOVED*** from '../SparseSnapshotTree';
import ***REMOVED*** Node ***REMOVED*** from '../snap/Node';
/**
 * Generate placeholders for deferred values.
 * @param ***REMOVED***?Object***REMOVED*** values
 * @return ***REMOVED***!Object***REMOVED***
 */
export declare const generateWithValues: (values: ***REMOVED***
    [k: string]: any;
***REMOVED***) => ***REMOVED***
    [k: string]: any;
***REMOVED***;
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 * @param ***REMOVED***(Object|string|number|boolean)***REMOVED*** value
 * @param ***REMOVED***!Object***REMOVED*** serverValues
 * @return ***REMOVED***!(string|number|boolean)***REMOVED***
 */
export declare const resolveDeferredValue: (value: string | number | boolean | ***REMOVED***
    [k: string]: any;
***REMOVED***, serverValues: ***REMOVED***
    [k: string]: any;
***REMOVED***) => string | number | boolean;
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param ***REMOVED***!SparseSnapshotTree***REMOVED*** tree
 * @param ***REMOVED***!Object***REMOVED*** serverValues
 * @return ***REMOVED***!SparseSnapshotTree***REMOVED***
 */
export declare const resolveDeferredValueTree: (tree: SparseSnapshotTree, serverValues: Object) => SparseSnapshotTree;
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 * @param ***REMOVED***!Node***REMOVED*** node
 * @param ***REMOVED***!Object***REMOVED*** serverValues
 * @return ***REMOVED***!Node***REMOVED***
 */
export declare const resolveDeferredValueSnapshot: (node: Node, serverValues: Object) => Node;
