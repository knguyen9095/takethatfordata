/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import firebase from '@firebase/app';
import ***REMOVED*** Database ***REMOVED*** from './src/api/Database';
import ***REMOVED*** Query ***REMOVED*** from './src/api/Query';
import ***REMOVED*** Reference ***REMOVED*** from './src/api/Reference';
import ***REMOVED*** enableLogging ***REMOVED*** from './src/core/util/util';
import ***REMOVED*** RepoManager ***REMOVED*** from './src/core/RepoManager';
import * as INTERNAL from './src/api/internal';
import * as TEST_ACCESS from './src/api/test_access';
import ***REMOVED*** isNodeSdk ***REMOVED*** from '@firebase/util';
import './src/nodePatches';
/**
 * A one off register function which returns a database based on the app and
 * passed database URL.
 *
 * @param app A valid FirebaseApp-like object
 * @param url A valid Firebase databaseURL
 */
var ServerValue = Database.ServerValue;
export function initStandalone(app, url) ***REMOVED***
    return ***REMOVED***
        instance: RepoManager.getInstance().databaseFromApp(app, url),
        namespace: ***REMOVED***
            Reference: Reference,
            Query: Query,
            Database: Database,
            enableLogging: enableLogging,
            INTERNAL: INTERNAL,
            ServerValue: ServerValue,
            TEST_ACCESS: TEST_ACCESS
        ***REMOVED***
    ***REMOVED***;
***REMOVED***
export function registerDatabase(instance) ***REMOVED***
    // Register the Database Service with the 'firebase' namespace.
    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) ***REMOVED*** return RepoManager.getInstance().databaseFromApp(app, url); ***REMOVED***, 
    // firebase.database namespace properties
    ***REMOVED***
        Reference: Reference,
        Query: Query,
        Database: Database,
        enableLogging: enableLogging,
        INTERNAL: INTERNAL,
        ServerValue: ServerValue,
        TEST_ACCESS: TEST_ACCESS
    ***REMOVED***, null, true);
    if (isNodeSdk()) ***REMOVED***
        module.exports = Object.assign(***REMOVED******REMOVED***, namespace, ***REMOVED*** initStandalone: initStandalone ***REMOVED***);
    ***REMOVED***
***REMOVED***
registerDatabase(firebase);
// Types to export for the admin SDK
export ***REMOVED*** Database, Query, Reference, enableLogging, ServerValue ***REMOVED***;
export ***REMOVED*** DataSnapshot ***REMOVED*** from './src/api/DataSnapshot';
export ***REMOVED*** OnDisconnect ***REMOVED*** from './src/api/onDisconnect';

//# sourceMappingURL=index.node.js.map
