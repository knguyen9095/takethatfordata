"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var chai_1 = require("chai");
var errors_1 = require("../src/errors");
var errors = ***REMOVED***
    'generic-error': 'Unknown error',
    'file-not-found': "Could not find file: '***REMOVED***$file***REMOVED***'",
    'anon-replace': 'Hello, ***REMOVED***$repl_***REMOVED***!'
***REMOVED***;
var error = new errors_1.ErrorFactory('fake', 'Fake', errors);
describe('FirebaseError', function () ***REMOVED***
    it('create', function () ***REMOVED***
        var e = error.create('generic-error');
        chai_1.assert.equal(e.code, 'fake/generic-error');
        chai_1.assert.equal(e.message, 'Fake: Unknown error (fake/generic-error).');
    ***REMOVED***);
    it('String replacement', function () ***REMOVED***
        var e = error.create('file-not-found', ***REMOVED*** file: 'foo.txt' ***REMOVED***);
        chai_1.assert.equal(e.code, 'fake/file-not-found');
        chai_1.assert.equal(e.message, "Fake: Could not find file: 'foo.txt' (fake/file-not-found).");
        chai_1.assert.equal(e.file, 'foo.txt');
    ***REMOVED***);
    it('Anonymous String replacement', function () ***REMOVED***
        var e = error.create('anon-replace', ***REMOVED*** repl_: 'world' ***REMOVED***);
        chai_1.assert.equal(e.code, 'fake/anon-replace');
        chai_1.assert.equal(e.message, 'Fake: Hello, world! (fake/anon-replace).');
        chai_1.assert.isUndefined(e.repl_);
    ***REMOVED***);
    it('Missing template', function () ***REMOVED***
        // Cast to avoid compile-time error.
        var e = error.create('no-such-code');
        chai_1.assert.equal(e.code, 'fake/no-such-code');
        chai_1.assert.equal(e.message, 'Fake: Error (fake/no-such-code).');
    ***REMOVED***);
    it('Missing replacement', function () ***REMOVED***
        var e = error.create('file-not-found', ***REMOVED*** fileX: 'foo.txt' ***REMOVED***);
        chai_1.assert.equal(e.code, 'fake/file-not-found');
        chai_1.assert.equal(e.message, "Fake: Could not find file: '<file?>' (fake/file-not-found).");
    ***REMOVED***);
***REMOVED***);
// Run the stack trace tests with, and without, Error.captureStackTrace
var realCapture = errors_1.patchCapture();
stackTests(realCapture);
stackTests(undefined);
function stackTests(fakeCapture) ***REMOVED***
    var saveCapture;
    describe('Error#stack tests - Error.captureStackTrace is ' +
        (fakeCapture ? 'defined' : 'NOT defined'), function () ***REMOVED***
        before(function () ***REMOVED***
            saveCapture = errors_1.patchCapture(fakeCapture);
        ***REMOVED***);
        after(function () ***REMOVED***
            errors_1.patchCapture(saveCapture);
        ***REMOVED***);
        it('has stack', function () ***REMOVED***
            var e = error.create('generic-error');
            // Multi-line match trick - .* does not match \n
            chai_1.assert.match(e.stack, /FirebaseError[\s\S]/);
        ***REMOVED***);
        it('stack frames', function () ***REMOVED***
            try ***REMOVED***
                dummy1();
                chai_1.assert.ok(false);
            ***REMOVED***
            catch (e) ***REMOVED***
                chai_1.assert.match(e.stack, /dummy2[\s\S]*?dummy1/);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***
function dummy1() ***REMOVED***
    dummy2();
***REMOVED***
function dummy2() ***REMOVED***
    var error = new errors_1.ErrorFactory('dummy', 'Dummy', errors);
    throw error.create('generic-error');
***REMOVED***

//# sourceMappingURL=errors.test.js.map
