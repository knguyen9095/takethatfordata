"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var ERROR_NAME = 'FirebaseError';
var captureStackTrace = Error
    .captureStackTrace;
// Export for faking in tests
function patchCapture(captureFake) ***REMOVED***
    var result = captureStackTrace;
    captureStackTrace = captureFake;
    return result;
***REMOVED***
exports.patchCapture = patchCapture;
var FirebaseError = /** @class */ (function () ***REMOVED***
    function FirebaseError(code, message) ***REMOVED***
        this.code = code;
        this.message = message;
        var stack;
        // We want the stack value, if implemented by Error
        if (captureStackTrace) ***REMOVED***
            // Patches this.stack, omitted calls above ErrorFactory#create
            captureStackTrace(this, ErrorFactory.prototype.create);
        ***REMOVED***
        else ***REMOVED***
            var err_1 = Error.apply(this, arguments);
            this.name = ERROR_NAME;
            // Make non-enumerable getter for the property.
            Object.defineProperty(this, 'stack', ***REMOVED***
                get: function () ***REMOVED***
                    return err_1.stack;
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***
    ***REMOVED***
    return FirebaseError;
***REMOVED***());
exports.FirebaseError = FirebaseError;
// Back-door inheritance
FirebaseError.prototype = Object.create(Error.prototype);
FirebaseError.prototype.constructor = FirebaseError;
FirebaseError.prototype.name = ERROR_NAME;
var ErrorFactory = /** @class */ (function () ***REMOVED***
    function ErrorFactory(service, serviceName, errors) ***REMOVED***
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
        // Matches ***REMOVED***$name***REMOVED***, by default.
        this.pattern = /\***REMOVED***\$([^***REMOVED***]+)***REMOVED***/g;
        // empty
    ***REMOVED***
    ErrorFactory.prototype.create = function (code, data) ***REMOVED***
        if (data === undefined) ***REMOVED***
            data = ***REMOVED******REMOVED***;
        ***REMOVED***
        var template = this.errors[code];
        var fullCode = this.service + '/' + code;
        var message;
        if (template === undefined) ***REMOVED***
            message = 'Error';
        ***REMOVED***
        else ***REMOVED***
            message = template.replace(this.pattern, function (match, key) ***REMOVED***
                var value = data[key];
                return value !== undefined ? value.toString() : '<' + key + '?>';
            ***REMOVED***);
        ***REMOVED***
        // Service: Error message (service/code).
        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
        var err = new FirebaseError(fullCode, message);
        // Populate the Error object with message parts for programmatic
        // accesses (e.g., e.file).
        for (var prop in data) ***REMOVED***
            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') ***REMOVED***
                continue;
            ***REMOVED***
            err[prop] = data[prop];
        ***REMOVED***
        return err;
    ***REMOVED***;
    return ErrorFactory;
***REMOVED***());
exports.ErrorFactory = ErrorFactory;

//# sourceMappingURL=errors.js.map
