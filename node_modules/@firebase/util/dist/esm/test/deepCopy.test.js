/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ***REMOVED*** assert ***REMOVED*** from 'chai';
import ***REMOVED*** deepCopy, deepExtend ***REMOVED*** from '../src/deepCopy';
describe('deepCopy()', function () ***REMOVED***
    it('Scalars', function () ***REMOVED***
        assert.strictEqual(deepCopy(true), true);
        assert.strictEqual(deepCopy(123), 123);
        assert.strictEqual(deepCopy('abc'), 'abc');
    ***REMOVED***);
    it('Date', function () ***REMOVED***
        var d = new Date();
        assert.deepEqual(deepCopy(d), d);
    ***REMOVED***);
    it('Object', function () ***REMOVED***
        assert.deepEqual(deepCopy(***REMOVED******REMOVED***), ***REMOVED******REMOVED***);
        assert.deepEqual(deepCopy(***REMOVED*** a: 123 ***REMOVED***), ***REMOVED*** a: 123 ***REMOVED***);
        assert.deepEqual(deepCopy(***REMOVED*** a: ***REMOVED*** b: 123 ***REMOVED*** ***REMOVED***), ***REMOVED*** a: ***REMOVED*** b: 123 ***REMOVED*** ***REMOVED***);
    ***REMOVED***);
    it('Array', function () ***REMOVED***
        assert.deepEqual(deepCopy([]), []);
        assert.deepEqual(deepCopy([123, 456]), [123, 456]);
        assert.deepEqual(deepCopy([123, [456]]), [123, [456]]);
    ***REMOVED***);
***REMOVED***);
describe('deepExtend', function () ***REMOVED***
    it('Scalars', function () ***REMOVED***
        assert.strictEqual(deepExtend(1, true), true);
        assert.strictEqual(deepExtend(undefined, 123), 123);
        assert.strictEqual(deepExtend('was', 'abc'), 'abc');
    ***REMOVED***);
    it('Date', function () ***REMOVED***
        var d = new Date();
        assert.deepEqual(deepExtend(new Date(), d), d);
    ***REMOVED***);
    it('Object', function () ***REMOVED***
        assert.deepEqual(deepExtend(***REMOVED*** old: 123 ***REMOVED***, ***REMOVED******REMOVED***), ***REMOVED*** old: 123 ***REMOVED***);
        assert.deepEqual(deepExtend(***REMOVED*** old: 123 ***REMOVED***, ***REMOVED*** s: 'hello' ***REMOVED***), ***REMOVED***
            old: 123,
            s: 'hello'
        ***REMOVED***);
        assert.deepEqual(deepExtend(***REMOVED*** old: 123, a: ***REMOVED*** c: 'in-old' ***REMOVED*** ***REMOVED***, ***REMOVED*** a: ***REMOVED*** b: 123 ***REMOVED*** ***REMOVED***), ***REMOVED*** old: 123, a: ***REMOVED*** b: 123, c: 'in-old' ***REMOVED*** ***REMOVED***);
    ***REMOVED***);
    it('Array', function () ***REMOVED***
        assert.deepEqual(deepExtend([1], []), []);
        assert.deepEqual(deepExtend([1], [123, 456]), [123, 456]);
        assert.deepEqual(deepExtend([1], [123, [456]]), [123, [456]]);
    ***REMOVED***);
    it('Array is copied - not referenced', function () ***REMOVED***
        var o1 = ***REMOVED*** a: [1] ***REMOVED***;
        var o2 = ***REMOVED*** a: [2] ***REMOVED***;
        assert.deepEqual(deepExtend(o1, o2), ***REMOVED*** a: [2] ***REMOVED***);
        o2.a.push(3);
        assert.deepEqual(o1, ***REMOVED*** a: [2] ***REMOVED***);
    ***REMOVED***);
    it('Array with undefined elements', function () ***REMOVED***
        var a = [];
        a[3] = '3';
        var b = deepExtend(undefined, a);
        assert.deepEqual(b, [, , , '3']);
    ***REMOVED***);
    it('Function', function () ***REMOVED***
        var source = function () ***REMOVED***
            /*_*/
        ***REMOVED***;
        var target = deepExtend(***REMOVED***
            a: function () ***REMOVED***
                /*_*/
            ***REMOVED***
        ***REMOVED***, ***REMOVED*** a: source ***REMOVED***);
        assert.deepEqual(***REMOVED*** a: source ***REMOVED***, target);
        assert.strictEqual(source, target.a);
    ***REMOVED***);
***REMOVED***);

//# sourceMappingURL=deepCopy.test.js.map
