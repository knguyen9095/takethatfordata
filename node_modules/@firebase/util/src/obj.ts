/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/

export const contains = function(obj, key) ***REMOVED***
  return Object.prototype.hasOwnProperty.call(obj, key);
***REMOVED***;

export const safeGet = function(obj, key) ***REMOVED***
  if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
  // else return undefined.
***REMOVED***;

/**
 * Enumerates the keys/values in an object, excluding keys defined on the prototype.
 *
 * @param ***REMOVED***?Object.<K,V>***REMOVED*** obj Object to enumerate.
 * @param ***REMOVED***!function(K, V)***REMOVED*** fn Function to call for each key and value.
 * @template K,V
 */
export const forEach = function(obj, fn) ***REMOVED***
  for (var key in obj) ***REMOVED***
    if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
      fn(key, obj[key]);
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/**
 * Copies all the (own) properties from one object to another.
 * @param ***REMOVED***!Object***REMOVED*** objTo
 * @param ***REMOVED***!Object***REMOVED*** objFrom
 * @return ***REMOVED***!Object***REMOVED*** objTo
 */
export const extend = function(objTo, objFrom) ***REMOVED***
  forEach(objFrom, function(key, value) ***REMOVED***
    objTo[key] = value;
  ***REMOVED***);
  return objTo;
***REMOVED***;

/**
 * Returns a clone of the specified object.
 * @param ***REMOVED***!Object***REMOVED*** obj
 * @return ***REMOVED***!Object***REMOVED*** cloned obj.
 */
export const clone = function(obj) ***REMOVED***
  return extend(***REMOVED******REMOVED***, obj);
***REMOVED***;

/**
 * Returns true if obj has typeof "object" and is not null.  Unlike goog.isObject(), does not return true
 * for functions.
 *
 * @param obj ***REMOVED*******REMOVED*** A potential object.
 * @returns ***REMOVED***boolean***REMOVED*** True if it's an object.
 */
export const isNonNullObject = function(obj) ***REMOVED***
  return typeof obj === 'object' && obj !== null;
***REMOVED***;

export const isEmpty = function(obj) ***REMOVED***
  for (var key in obj) ***REMOVED***
    return false;
  ***REMOVED***
  return true;
***REMOVED***;

export const getCount = function(obj) ***REMOVED***
  var rv = 0;
  for (var key in obj) ***REMOVED***
    rv++;
  ***REMOVED***
  return rv;
***REMOVED***;

export const map = function(obj, f, opt_obj?) ***REMOVED***
  var res = ***REMOVED******REMOVED***;
  for (var key in obj) ***REMOVED***
    res[key] = f.call(opt_obj, obj[key], key, obj);
  ***REMOVED***
  return res;
***REMOVED***;

export const findKey = function(obj, fn, opt_this?) ***REMOVED***
  for (var key in obj) ***REMOVED***
    if (fn.call(opt_this, obj[key], key, obj)) ***REMOVED***
      return key;
    ***REMOVED***
  ***REMOVED***
  return undefined;
***REMOVED***;

export const findValue = function(obj, fn, opt_this?) ***REMOVED***
  var key = findKey(obj, fn, opt_this);
  return key && obj[key];
***REMOVED***;

export const getAnyKey = function(obj) ***REMOVED***
  for (var key in obj) ***REMOVED***
    return key;
  ***REMOVED***
***REMOVED***;

export const getValues = function(obj) ***REMOVED***
  var res = [];
  var i = 0;
  for (var key in obj) ***REMOVED***
    res[i++] = obj[key];
  ***REMOVED***
  return res;
***REMOVED***;

/**
 * Tests whether every key/value pair in an object pass the test implemented
 * by the provided function
 *
 * @param ***REMOVED***?Object.<K,V>***REMOVED*** obj Object to test.
 * @param ***REMOVED***!function(K, V)***REMOVED*** fn Function to call for each key and value.
 * @template K,V
 */
export const every = function<V>(
  obj: Object,
  fn: (k: string, v?: V) => boolean
): boolean ***REMOVED***
  for (let key in obj) ***REMOVED***
    if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***
      if (!fn(key, obj[key])) ***REMOVED***
        return false;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  return true;
***REMOVED***;
