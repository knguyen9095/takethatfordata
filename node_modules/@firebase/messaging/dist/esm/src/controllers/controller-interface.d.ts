import TokenManager from '../models/token-manager';
export default class ControllerInterface ***REMOVED***
    app: any;
    INTERNAL: any;
    protected errorFactory_: any;
    private messagingSenderId_;
    private tokenManager_;
    /**
     * An interface of the Messaging Service API
     * @param ***REMOVED***!firebase.app.App***REMOVED*** app
     */
    constructor(app: any);
    /**
     * @export
     * @return ***REMOVED***Promise<string> | Promise<null>***REMOVED*** Returns a promise that
     * resolves to an FCM token.
     */
    getToken(): Promise<any>;
    /**
     * This method deletes tokens that the token manager looks after and then
     * unregisters the push subscription if it exists.
     * @export
     * @param ***REMOVED***string***REMOVED*** token
     * @return ***REMOVED***Promise<void>***REMOVED***
     */
    deleteToken(token: any): Promise<boolean>;
    getSWRegistration_(): Promise<ServiceWorkerRegistration>;
    requestPermission(): void;
    /**
     * @export
     * @param ***REMOVED***!ServiceWorkerRegistration***REMOVED*** registration
     */
    useServiceWorker(registration: any): void;
    /**
     * @export
     * @param ***REMOVED***!firebase.Observer|function(*)***REMOVED*** nextOrObserver
     * @param ***REMOVED***function(!Error)=***REMOVED*** optError
     * @param ***REMOVED***function()=***REMOVED*** optCompleted
     * @return ***REMOVED***!function()***REMOVED***
     */
    onMessage(nextOrObserver: any, optError: any, optCompleted: any): void;
    /**
     * @export
     * @param ***REMOVED***!firebase.Observer|function()***REMOVED*** nextOrObserver An observer object
     * or a function triggered on token refresh.
     * @param ***REMOVED***function(!Error)=***REMOVED*** optError Optional A function
     * triggered on token refresh error.
     * @param ***REMOVED***function()=***REMOVED*** optCompleted Optional function triggered when the
     * observer is removed.
     * @return ***REMOVED***!function()***REMOVED*** The unsubscribe function for the observer.
     */
    onTokenRefresh(nextOrObserver: any, optError: any, optCompleted: any): void;
    /**
     * @export
     * @param ***REMOVED***function(Object)***REMOVED*** callback
     */
    setBackgroundMessageHandler(callback: any): void;
    /**
     * This method is required to adhere to the Firebase interface.
     * It closes any currently open indexdb database connections.
     */
    delete(): Promise<void>;
    /**
     * Returns the current Notification Permission state.
     * @private
     * @return ***REMOVED***string***REMOVED*** The currenct permission state.
     */
    getNotificationPermission_(): any;
    /**
     * @protected
     * @returns ***REMOVED***TokenManager***REMOVED***
     */
    getTokenManager(): TokenManager;
***REMOVED***
