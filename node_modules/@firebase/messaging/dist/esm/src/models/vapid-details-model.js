/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = Object.setPrototypeOf ||
        (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
        function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
import DBInterface from './db-interface';
import Errors from './errors';
var FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';
var DB_VERSION = 1;
var VapidDetailsModel = /** @class */ (function (_super) ***REMOVED***
    __extends(VapidDetailsModel, _super);
    function VapidDetailsModel() ***REMOVED***
        return _super.call(this, VapidDetailsModel.dbName, DB_VERSION) || this;
    ***REMOVED***
    Object.defineProperty(VapidDetailsModel, "dbName", ***REMOVED***
        get: function () ***REMOVED***
            return 'fcm_vapid_details_db';
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    /**
     * @override
     * @param ***REMOVED***IDBDatabase***REMOVED*** db
     */
    VapidDetailsModel.prototype.onDBUpgrade = function (db) ***REMOVED***
        db.createObjectStore(FCM_VAPID_OBJ_STORE, ***REMOVED***
            keyPath: 'swScope'
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Given a service worker scope, this method will look up the vapid key
     * in indexedDB.
     * @param ***REMOVED***string***REMOVED*** swScope
     * @return ***REMOVED***Promise<string>***REMOVED*** The vapid key associated with that scope.
     */
    VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) ***REMOVED***
        if (typeof swScope !== 'string' || swScope.length === 0) ***REMOVED***
            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));
        ***REMOVED***
        return this.openDatabase().then(function (db) ***REMOVED***
            return new Promise(function (resolve, reject) ***REMOVED***
                var transaction = db.transaction([FCM_VAPID_OBJ_STORE]);
                var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);
                var scopeRequest = objectStore.get(swScope);
                scopeRequest.onerror = function (event) ***REMOVED***
                    reject(event.target.error);
                ***REMOVED***;
                scopeRequest.onsuccess = function (event) ***REMOVED***
                    var result = event.target.result;
                    var vapidKey = null;
                    if (result) ***REMOVED***
                        vapidKey = result.vapidKey;
                    ***REMOVED***
                    resolve(vapidKey);
                ***REMOVED***;
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Save a vapid key against a swScope for later date.
     * @param  ***REMOVED***string***REMOVED*** swScope The service worker scope to be associated with
     * this push subscription.
     * @param ***REMOVED***string***REMOVED*** vapidKey The public vapid key to be associated with
     * the swScope.
     * @return ***REMOVED***Promise<void>***REMOVED***
     */
    VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) ***REMOVED***
        var _this = this;
        if (typeof swScope !== 'string' || swScope.length === 0) ***REMOVED***
            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));
        ***REMOVED***
        if (typeof vapidKey !== 'string' || vapidKey.length === 0) ***REMOVED***
            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));
        ***REMOVED***
        var details = ***REMOVED***
            swScope: swScope,
            vapidKey: vapidKey
        ***REMOVED***;
        return this.openDatabase().then(function (db) ***REMOVED***
            return new Promise(function (resolve, reject) ***REMOVED***
                var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);
                var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);
                var request = objectStore.put(details);
                request.onerror = function (event) ***REMOVED***
                    reject(event.target.error);
                ***REMOVED***;
                request.onsuccess = function (event) ***REMOVED***
                    resolve();
                ***REMOVED***;
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * This method deletes details of the current FCM VAPID key for a SW scope.
     * @param ***REMOVED***string***REMOVED*** swScope Scope to be deleted
     * @return ***REMOVED***Promise<string>***REMOVED*** Resolves once the scope / vapid details have been
     * deleted and returns the deleted vapid key.
     */
    VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) ***REMOVED***
        var _this = this;
        return this.getVapidFromSWScope(swScope).then(function (vapidKey) ***REMOVED***
            if (!vapidKey) ***REMOVED***
                throw _this.errorFactory_.create(Errors.codes.DELETE_SCOPE_NOT_FOUND);
            ***REMOVED***
            return _this.openDatabase().then(function (db) ***REMOVED***
                return new Promise(function (resolve, reject) ***REMOVED***
                    var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);
                    var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);
                    var request = objectStore.delete(swScope);
                    request.onerror = function (event) ***REMOVED***
                        reject(event.target.error);
                    ***REMOVED***;
                    request.onsuccess = function (event) ***REMOVED***
                        if (event.target.result === 0) ***REMOVED***
                            reject(_this.errorFactory_.create(Errors.codes.FAILED_DELETE_VAPID_KEY));
                            return;
                        ***REMOVED***
                        resolve(vapidKey);
                    ***REMOVED***;
                ***REMOVED***);
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    return VapidDetailsModel;
***REMOVED***(DBInterface));
export default VapidDetailsModel;

//# sourceMappingURL=vapid-details-model.js.map
