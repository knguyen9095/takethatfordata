/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var util_1 = require("@firebase/util");
var errors_1 = require("./errors");
var DBInterface = /** @class */ (function () ***REMOVED***
    /**
     * @param ***REMOVED***string***REMOVED*** dbName
     * @param ***REMOVED***number***REMOVED*** dbVersion
     */
    function DBInterface(dbName, dbVersion) ***REMOVED***
        this.errorFactory_ = new util_1.ErrorFactory('messaging', 'Messaging', errors_1.default.map);
        this.dbName_ = dbName;
        this.dbVersion_ = dbVersion;
        this.openDbPromise_ = null;
        this.TRANSACTION_READ_WRITE = 'readwrite';
    ***REMOVED***
    /**
     * Get the indexedDB as a promsie.
     * @protected
     * @return ***REMOVED***!Promise<!IDBDatabase>***REMOVED*** The IndexedDB database
     */
    DBInterface.prototype.openDatabase = function () ***REMOVED***
        var _this = this;
        if (this.openDbPromise_) ***REMOVED***
            return this.openDbPromise_;
        ***REMOVED***
        this.openDbPromise_ = new Promise(function (resolve, reject) ***REMOVED***
            var request = indexedDB.open(_this.dbName_, _this.dbVersion_);
            request.onerror = function (event) ***REMOVED***
                reject(event.target.error);
            ***REMOVED***;
            request.onsuccess = function (event) ***REMOVED***
                resolve(event.target.result);
            ***REMOVED***;
            request.onupgradeneeded = function (event) ***REMOVED***
                var db = event.target.result;
                _this.onDBUpgrade(db);
            ***REMOVED***;
        ***REMOVED***);
        return this.openDbPromise_;
    ***REMOVED***;
    /**
     * Close the currently open database.
     * @return ***REMOVED***!Promise***REMOVED*** Returns the result of the promise chain.
     */
    DBInterface.prototype.closeDatabase = function () ***REMOVED***
        var _this = this;
        return Promise.resolve().then(function () ***REMOVED***
            if (_this.openDbPromise_) ***REMOVED***
                return _this.openDbPromise_.then(function (db) ***REMOVED***
                    db.close();
                    _this.openDbPromise_ = null;
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;
    /**
     * @protected
     * @param ***REMOVED***!IDBDatabase***REMOVED*** db
     */
    DBInterface.prototype.onDBUpgrade = function (db) ***REMOVED***
        throw this.errorFactory_.create(errors_1.default.codes.SHOULD_BE_INHERITED);
    ***REMOVED***;
    return DBInterface;
***REMOVED***());
exports.default = DBInterface;

//# sourceMappingURL=db-interface.js.map
