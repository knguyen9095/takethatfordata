"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
/**
 * @fileoverview Functionality related to the parsing/composition of bucket/
 * object location.
 */
var errorsExports = require("./error");
/**
 * @struct
 */
var Location = /** @class */ (function () ***REMOVED***
    function Location(bucket, path) ***REMOVED***
        this.bucket = bucket;
        this.path_ = path;
    ***REMOVED***
    Object.defineProperty(Location.prototype, "path", ***REMOVED***
        get: function () ***REMOVED***
            return this.path_;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    Location.prototype.fullServerUrl = function () ***REMOVED***
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
    ***REMOVED***;
    Location.prototype.bucketOnlyServerUrl = function () ***REMOVED***
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o';
    ***REMOVED***;
    Location.makeFromBucketSpec = function (bucketString) ***REMOVED***
        var bucketLocation;
        try ***REMOVED***
            bucketLocation = Location.makeFromUrl(bucketString);
        ***REMOVED***
        catch (e) ***REMOVED***
            // Not valid URL, use as-is. This lets you put bare bucket names in
            // config.
            return new Location(bucketString, '');
        ***REMOVED***
        if (bucketLocation.path === '') ***REMOVED***
            return bucketLocation;
        ***REMOVED***
        else ***REMOVED***
            throw errorsExports.invalidDefaultBucket(bucketString);
        ***REMOVED***
    ***REMOVED***;
    Location.makeFromUrl = function (url) ***REMOVED***
        var location = null;
        var bucketDomain = '([A-Za-z0-9.\\-]+)';
        function gsModify(loc) ***REMOVED***
            if (loc.path.charAt(loc.path.length - 1) === '/') ***REMOVED***
                loc.path_ = loc.path_.slice(0, -1);
            ***REMOVED***
        ***REMOVED***
        var gsPath = '(/(.*))?$';
        var path = '(/([^?#]*).*)?$';
        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
        var gsIndices = ***REMOVED*** bucket: 1, path: 3 ***REMOVED***;
        function httpModify(loc) ***REMOVED***
            loc.path_ = decodeURIComponent(loc.path);
        ***REMOVED***
        var version = 'v[A-Za-z0-9_]+';
        var httpRegex = new RegExp('^https?://firebasestorage\\.googleapis\\.com/' +
            version +
            '/b/' +
            bucketDomain +
            '/o' +
            path, 'i');
        var httpIndices = ***REMOVED*** bucket: 1, path: 3 ***REMOVED***;
        var groups = [
            ***REMOVED*** regex: gsRegex, indices: gsIndices, postModify: gsModify ***REMOVED***,
            ***REMOVED*** regex: httpRegex, indices: httpIndices, postModify: httpModify ***REMOVED***
        ];
        for (var i = 0; i < groups.length; i++) ***REMOVED***
            var group = groups[i];
            var captures = group.regex.exec(url);
            if (captures) ***REMOVED***
                var bucketValue = captures[group.indices.bucket];
                var pathValue = captures[group.indices.path];
                if (!pathValue) ***REMOVED***
                    pathValue = '';
                ***REMOVED***
                location = new Location(bucketValue, pathValue);
                group.postModify(location);
                break;
            ***REMOVED***
        ***REMOVED***
        if (location == null) ***REMOVED***
            throw errorsExports.invalidUrl(url);
        ***REMOVED***
        return location;
    ***REMOVED***;
    return Location;
***REMOVED***());
exports.Location = Location;

//# sourceMappingURL=location.js.map
