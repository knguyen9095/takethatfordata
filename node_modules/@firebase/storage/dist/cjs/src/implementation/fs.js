"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var type = require("./type");
function getBlobBuilder() ***REMOVED***
    if (typeof BlobBuilder !== 'undefined') ***REMOVED***
        return BlobBuilder;
    ***REMOVED***
    else if (typeof WebKitBlobBuilder !== 'undefined') ***REMOVED***
        return WebKitBlobBuilder;
    ***REMOVED***
    else ***REMOVED***
        return undefined;
    ***REMOVED***
***REMOVED***
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param var_args The values that will make up the resulting blob.
 * @return The blob.
 */
function getBlob() ***REMOVED***
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        var_args[_i] = arguments[_i];
    ***REMOVED***
    var BlobBuilder = getBlobBuilder();
    if (BlobBuilder !== undefined) ***REMOVED***
        var bb = new BlobBuilder();
        for (var i = 0; i < var_args.length; i++) ***REMOVED***
            bb.append(var_args[i]);
        ***REMOVED***
        return bb.getBlob();
    ***REMOVED***
    else ***REMOVED***
        if (type.isNativeBlobDefined()) ***REMOVED***
            return new Blob(var_args);
        ***REMOVED***
        else ***REMOVED***
            throw Error("This browser doesn't seem to support creating Blobs");
        ***REMOVED***
    ***REMOVED***
***REMOVED***
exports.getBlob = getBlob;
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */
function sliceBlob(blob, start, end) ***REMOVED***
    if (blob.webkitSlice) ***REMOVED***
        return blob.webkitSlice(start, end);
    ***REMOVED***
    else if (blob.mozSlice) ***REMOVED***
        return blob.mozSlice(start, end);
    ***REMOVED***
    else if (blob.slice) ***REMOVED***
        return blob.slice(start, end);
    ***REMOVED***
    return null;
***REMOVED***
exports.sliceBlob = sliceBlob;

//# sourceMappingURL=fs.js.map
