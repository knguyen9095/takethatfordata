***REMOVED***"version":3,"sources":["../index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,QAAQ,MAAM,eAAe,CAAC;AAGrC,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAC3D,OAAO,EAAE,SAAS,EAAE,MAAM,gCAAgC,CAAC;AAC3D,OAAO,EAAE,SAAS,EAAE,MAAM,gCAAgC,CAAC;AAC3D,OAAO,EAAE,SAAS,EAAE,MAAM,gCAAgC,CAAC;AAC3D,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAGxC;;GAEG;AACH,IAAM,YAAY,GAAG,SAAS,CAAC;AAE/B,iBACE,GAAgB,EAChB,MAAW,EACX,OAAgB;IAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,SAAS,EAAE,EAAE,OAAO,CAAQ,CAAC;AAC3D,CAAC;AAED,MAAM,0BAA0B,QAAQ;IACtC,IAAI,gBAAgB,GAAG;QACrB,YAAY;QACZ,SAAS,EAAE,SAAS;QACpB,SAAS,EAAE,SAAS;QACpB,YAAY,EAAE,YAAY;QAC1B,OAAO,EAAE,OAAO;QAChB,SAAS,EAAE,SAAS;KACrB,CAAC;IACF,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAC/B,YAAY,EACZ,OAAiC,EACjC,gBAAgB,EAChB,SAAS;IACT,4CAA4C;IAC5C,IAAI,CACL,CAAC;AACJ,CAAC;AAED,eAAe,CAAC,QAAQ,CAAC,CAAC","file":"index.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport ***REMOVED*** FirebaseApp ***REMOVED*** from '@firebase/app-types';\nimport ***REMOVED*** FirebaseServiceFactory ***REMOVED*** from '@firebase/app-types/private';\nimport ***REMOVED*** StringFormat ***REMOVED*** from './src/implementation/string';\nimport ***REMOVED*** TaskEvent ***REMOVED*** from './src/implementation/taskenums';\nimport ***REMOVED*** TaskState ***REMOVED*** from './src/implementation/taskenums';\nimport ***REMOVED*** XhrIoPool ***REMOVED*** from './src/implementation/xhriopool';\nimport ***REMOVED*** Reference ***REMOVED*** from './src/reference';\nimport ***REMOVED*** Service ***REMOVED*** from './src/service';\nimport * as types from '@firebase/storage-types';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  app: FirebaseApp,\n  unused: any,\n  opt_url?: string\n): types.FirebaseStorage ***REMOVED***\n  return new Service(app, new XhrIoPool(), opt_url) as any;\n***REMOVED***\n\nexport function registerStorage(instance) ***REMOVED***\n  let namespaceExports = ***REMOVED***\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: Service,\n    Reference: Reference\n  ***REMOVED***;\n  instance.INTERNAL.registerService(\n    STORAGE_TYPE,\n    factory as FirebaseServiceFactory,\n    namespaceExports,\n    undefined,\n    // Allow multiple storage instances per app.\n    true\n  );\n***REMOVED***\n\nregisterStorage(firebase);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-types' ***REMOVED***\n  interface FirebaseNamespace ***REMOVED***\n    storage?: ***REMOVED***\n      (app?: FirebaseApp): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: ***REMOVED***\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      ***REMOVED***;\n      TaskEvent: ***REMOVED***\n        STATE_CHANGED: types.TaskEvent;\n      ***REMOVED***;\n      TaskState: ***REMOVED***\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      ***REMOVED***;\n    ***REMOVED***;\n  ***REMOVED***\n  interface FirebaseApp ***REMOVED***\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  ***REMOVED***\n***REMOVED***\n"]***REMOVED***