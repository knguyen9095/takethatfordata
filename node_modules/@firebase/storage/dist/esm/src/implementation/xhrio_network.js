/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as errorsExports from './error';
import * as object from './object';
import * as promiseimpl from './promise_external';
import * as type from './type';
import * as XhrIoExports from './xhrio';
/**
 * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
 * doesn't work in React Native on Android.
 */
var NetworkXhrIo = /** @class */ (function () ***REMOVED***
    function NetworkXhrIo() ***REMOVED***
        var _this = this;
        this.sent_ = false;
        this.xhr_ = new XMLHttpRequest();
        this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;
        this.sendPromise_ = promiseimpl.make(function (resolve, reject) ***REMOVED***
            _this.xhr_.addEventListener('abort', function (event) ***REMOVED***
                _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;
                resolve(_this);
            ***REMOVED***);
            _this.xhr_.addEventListener('error', function (event) ***REMOVED***
                _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;
                resolve(_this);
            ***REMOVED***);
            _this.xhr_.addEventListener('load', function (event) ***REMOVED***
                resolve(_this);
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***
    /**
     * @override
     */
    NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) ***REMOVED***
        var _this = this;
        if (this.sent_) ***REMOVED***
            throw errorsExports.internalError('cannot .send() more than once');
        ***REMOVED***
        this.sent_ = true;
        this.xhr_.open(method, url, true);
        if (type.isDef(opt_headers)) ***REMOVED***
            var headers = opt_headers;
            object.forEach(headers, function (key, val) ***REMOVED***
                _this.xhr_.setRequestHeader(key, val.toString());
            ***REMOVED***);
        ***REMOVED***
        if (type.isDef(opt_body)) ***REMOVED***
            this.xhr_.send(opt_body);
        ***REMOVED***
        else ***REMOVED***
            this.xhr_.send();
        ***REMOVED***
        return this.sendPromise_;
    ***REMOVED***;
    /**
     * @override
     */
    NetworkXhrIo.prototype.getErrorCode = function () ***REMOVED***
        if (!this.sent_) ***REMOVED***
            throw errorsExports.internalError('cannot .getErrorCode() before sending');
        ***REMOVED***
        return this.errorCode_;
    ***REMOVED***;
    /**
     * @override
     */
    NetworkXhrIo.prototype.getStatus = function () ***REMOVED***
        if (!this.sent_) ***REMOVED***
            throw errorsExports.internalError('cannot .getStatus() before sending');
        ***REMOVED***
        try ***REMOVED***
            return this.xhr_.status;
        ***REMOVED***
        catch (e) ***REMOVED***
            return -1;
        ***REMOVED***
    ***REMOVED***;
    /**
     * @override
     */
    NetworkXhrIo.prototype.getResponseText = function () ***REMOVED***
        if (!this.sent_) ***REMOVED***
            throw errorsExports.internalError('cannot .getResponseText() before sending');
        ***REMOVED***
        return this.xhr_.responseText;
    ***REMOVED***;
    /**
     * Aborts the request.
     * @override
     */
    NetworkXhrIo.prototype.abort = function () ***REMOVED***
        this.xhr_.abort();
    ***REMOVED***;
    /**
     * @override
     */
    NetworkXhrIo.prototype.getResponseHeader = function (header) ***REMOVED***
        return this.xhr_.getResponseHeader(header);
    ***REMOVED***;
    /**
     * @override
     */
    NetworkXhrIo.prototype.addUploadProgressListener = function (listener) ***REMOVED***
        if (type.isDef(this.xhr_.upload)) ***REMOVED***
            this.xhr_.upload.addEventListener('progress', listener);
        ***REMOVED***
    ***REMOVED***;
    /**
     * @override
     */
    NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) ***REMOVED***
        if (type.isDef(this.xhr_.upload)) ***REMOVED***
            this.xhr_.upload.removeEventListener('progress', listener);
        ***REMOVED***
    ***REMOVED***;
    return NetworkXhrIo;
***REMOVED***());
export ***REMOVED*** NetworkXhrIo ***REMOVED***;

//# sourceMappingURL=xhrio_network.js.map
