var path = require("path");
var fs = require("fs");
fs.existsSync = fs.existsSync || path.existsSync;
var interpret = require("interpret");
var prepareOptions = require("../lib/prepareOptions");

module.exports = function(yargs, argv, convertOptions) ***REMOVED***

	var options = [];

	// Shortcuts
	if(argv.d) ***REMOVED***
		argv.debug = true;
		argv["output-pathinfo"] = true;
		if(!argv.devtool) ***REMOVED***
			argv.devtool = "eval-cheap-module-source-map";
		***REMOVED***
	***REMOVED***
	if(argv.p) ***REMOVED***
		argv["optimize-minimize"] = true;
		argv["define"] = [].concat(argv["define"] || []).concat("process.env.NODE_ENV=\"production\"");
	***REMOVED***

	var configFileLoaded = false;
	var configFiles = [];
	var extensions = Object.keys(interpret.extensions).sort(function(a, b) ***REMOVED***
		return a === ".js" ? -1 : b === ".js" ? 1 : a.length - b.length;
	***REMOVED***);
	var defaultConfigFiles = ["webpack.config", "webpackfile"].map(function(filename) ***REMOVED***
		return extensions.map(function(ext) ***REMOVED***
			return ***REMOVED***
				path: path.resolve(filename + ext),
				ext: ext
			***REMOVED***;
		***REMOVED***);
	***REMOVED***).reduce(function(a, i) ***REMOVED***
		return a.concat(i);
	***REMOVED***, []);

	var i;
	if(argv.config) ***REMOVED***
		var getConfigExtension = function getConfigExtension(configPath) ***REMOVED***
			for(i = extensions.length - 1; i >= 0; i--) ***REMOVED***
				var tmpExt = extensions[i];
				if(configPath.indexOf(tmpExt, configPath.length - tmpExt.length) > -1) ***REMOVED***
					return tmpExt;
				***REMOVED***
			***REMOVED***
			return path.extname(configPath);
		***REMOVED***;

		var mapConfigArg = function mapConfigArg(configArg) ***REMOVED***
			var resolvedPath = path.resolve(configArg);
			var extension = getConfigExtension(resolvedPath);
			return ***REMOVED***
				path: resolvedPath,
				ext: extension
			***REMOVED***;
		***REMOVED***;

		var configArgList = Array.isArray(argv.config) ? argv.config : [argv.config];
		configFiles = configArgList.map(mapConfigArg);
	***REMOVED*** else ***REMOVED***
		for(i = 0; i < defaultConfigFiles.length; i++) ***REMOVED***
			var webpackConfig = defaultConfigFiles[i].path;
			if(fs.existsSync(webpackConfig)) ***REMOVED***
				configFiles.push(***REMOVED***
					path: webpackConfig,
					ext: defaultConfigFiles[i].ext
				***REMOVED***);
				break;
			***REMOVED***
		***REMOVED***
	***REMOVED***

	if(configFiles.length > 0) ***REMOVED***
		var registerCompiler = function registerCompiler(moduleDescriptor) ***REMOVED***
			if(moduleDescriptor) ***REMOVED***
				if(typeof moduleDescriptor === "string") ***REMOVED***
					require(moduleDescriptor);
				***REMOVED*** else if(!Array.isArray(moduleDescriptor)) ***REMOVED***
					moduleDescriptor.register(require(moduleDescriptor.module));
				***REMOVED*** else ***REMOVED***
					for(var i = 0; i < moduleDescriptor.length; i++) ***REMOVED***
						try ***REMOVED***
							registerCompiler(moduleDescriptor[i]);
							break;
						***REMOVED*** catch(e) ***REMOVED***
							// do nothing
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***;

		var requireConfig = function requireConfig(configPath) ***REMOVED***
			var options = require(configPath);
			options = prepareOptions(options, argv);
			return options;
		***REMOVED***;

		configFiles.forEach(function(file) ***REMOVED***
			registerCompiler(interpret.extensions[file.ext]);
			options.push(requireConfig(file.path));
		***REMOVED***);
		configFileLoaded = true;
	***REMOVED***

	if(!configFileLoaded) ***REMOVED***
		return processConfiguredOptions(***REMOVED******REMOVED***);
	***REMOVED*** else if(options.length === 1) ***REMOVED***
		return processConfiguredOptions(options[0]);
	***REMOVED*** else ***REMOVED***
		return processConfiguredOptions(options);
	***REMOVED***

	function processConfiguredOptions(options) ***REMOVED***
		if(options === null || typeof options !== "object") ***REMOVED***
			console.error("Config did not export an object or a function returning an object.");
			process.exit(-1); // eslint-disable-line
		***REMOVED***

		// process Promise
		if(typeof options.then === "function") ***REMOVED***
			return options.then(processConfiguredOptions);
		***REMOVED***

		// process ES6 default
		if(typeof options === "object" && typeof options.default === "object") ***REMOVED***
			return processConfiguredOptions(options.default);
		***REMOVED***

		// filter multi-config by name
		if(Array.isArray(options) && argv["config-name"]) ***REMOVED***
			var namedOptions = options.filter(function(opt) ***REMOVED***
				return opt.name === argv["config-name"];
			***REMOVED***);
			if(namedOptions.length === 0) ***REMOVED***
				console.error("Configuration with name '" + argv["config-name"] + "' was not found.");
				process.exit(-1); // eslint-disable-line
			***REMOVED*** else if(namedOptions.length === 1) ***REMOVED***
				return processConfiguredOptions(namedOptions[0]);
			***REMOVED***
			options = namedOptions;
		***REMOVED***

		if(Array.isArray(options)) ***REMOVED***
			options.forEach(processOptions);
		***REMOVED*** else ***REMOVED***
			processOptions(options);
		***REMOVED***

		if(argv.context) ***REMOVED***
			options.context = path.resolve(argv.context);
		***REMOVED***
		if(!options.context) ***REMOVED***
			options.context = process.cwd();
		***REMOVED***

		if(argv.watch) ***REMOVED***
			options.watch = true;
		***REMOVED***

		if(argv["watch-aggregate-timeout"]) ***REMOVED***
			options.watchOptions = options.watchOptions || ***REMOVED******REMOVED***;
			options.watchOptions.aggregateTimeout = +argv["watch-aggregate-timeout"];
		***REMOVED***

		if(typeof argv["watch-poll"] !== "undefined") ***REMOVED***
			options.watchOptions = options.watchOptions || ***REMOVED******REMOVED***;
			if(argv["watch-poll"] === "true" || argv["watch-poll"] === "")
				options.watchOptions.poll = true;
			else if(!isNaN(argv["watch-poll"]))
				options.watchOptions.poll = +argv["watch-poll"];
		***REMOVED***

		if(argv["watch-stdin"]) ***REMOVED***
			options.watchOptions = options.watchOptions || ***REMOVED******REMOVED***;
			options.watchOptions.stdin = true;
			options.watch = true;
		***REMOVED***

		return options;
	***REMOVED***

	function processOptions(options) ***REMOVED***
		var noOutputFilenameDefined = !options.output || !options.output.filename;

		function ifArg(name, fn, init, finalize) ***REMOVED***
			if(Array.isArray(argv[name])) ***REMOVED***
				if(init) ***REMOVED***
					init();
				***REMOVED***
				argv[name].forEach(fn);
				if(finalize) ***REMOVED***
					finalize();
				***REMOVED***
			***REMOVED*** else if(typeof argv[name] !== "undefined" && argv[name] !== null) ***REMOVED***
				if(init) ***REMOVED***
					init();
				***REMOVED***
				fn(argv[name], -1);
				if(finalize) ***REMOVED***
					finalize();
				***REMOVED***
			***REMOVED***
		***REMOVED***

		function ifArgPair(name, fn, init, finalize) ***REMOVED***
			ifArg(name, function(content, idx) ***REMOVED***
				var i = content.indexOf("=");
				if(i < 0) ***REMOVED***
					return fn(null, content, idx);
				***REMOVED*** else ***REMOVED***
					return fn(content.substr(0, i), content.substr(i + 1), idx);
				***REMOVED***
			***REMOVED***, init, finalize);
		***REMOVED***

		function ifBooleanArg(name, fn) ***REMOVED***
			ifArg(name, function(bool) ***REMOVED***
				if(bool) ***REMOVED***
					fn();
				***REMOVED***
			***REMOVED***);
		***REMOVED***

		function mapArgToBoolean(name, optionName) ***REMOVED***
			ifArg(name, function(bool) ***REMOVED***
				if(bool === true)
					options[optionName || name] = true;
				else if(bool === false)
					options[optionName || name] = false;
			***REMOVED***);
		***REMOVED***

		function loadPlugin(name) ***REMOVED***
			var loadUtils = require("loader-utils");
			var args;
			try ***REMOVED***
				var p = name && name.indexOf("?");
				if(p > -1) ***REMOVED***
					args = loadUtils.parseQuery(name.substring(p));
					name = name.substring(0, p);
				***REMOVED***
			***REMOVED*** catch(e) ***REMOVED***
				console.log("Invalid plugin arguments " + name + " (" + e + ").");
				process.exit(-1); // eslint-disable-line
			***REMOVED***

			var path;
			try ***REMOVED***
				var resolve = require("enhanced-resolve");
				path = resolve.sync(process.cwd(), name);
			***REMOVED*** catch(e) ***REMOVED***
				console.log("Cannot resolve plugin " + name + ".");
				process.exit(-1); // eslint-disable-line
			***REMOVED***
			var Plugin;
			try ***REMOVED***
				Plugin = require(path);
			***REMOVED*** catch(e) ***REMOVED***
				console.log("Cannot load plugin " + name + ". (" + path + ")");
				throw e;
			***REMOVED***
			try ***REMOVED***
				return new Plugin(args);
			***REMOVED*** catch(e) ***REMOVED***
				console.log("Cannot instantiate plugin " + name + ". (" + path + ")");
				throw e;
			***REMOVED***
		***REMOVED***

		function ensureObject(parent, name) ***REMOVED***
			if(typeof parent[name] !== "object" || parent[name] === null) ***REMOVED***
				parent[name] = ***REMOVED******REMOVED***;
			***REMOVED***
		***REMOVED***

		function ensureArray(parent, name) ***REMOVED***
			if(!Array.isArray(parent[name])) ***REMOVED***
				parent[name] = [];
			***REMOVED***
		***REMOVED***

		ifArgPair("entry", function(name, entry) ***REMOVED***
			if(typeof options.entry[name] !== "undefined" && options.entry[name] !== null) ***REMOVED***
				options.entry[name] = [].concat(options.entry[name]).concat(entry);
			***REMOVED*** else ***REMOVED***
				options.entry[name] = entry;
			***REMOVED***
		***REMOVED***, function() ***REMOVED***
			ensureObject(options, "entry");
		***REMOVED***);

		function bindRules(arg) ***REMOVED***
			ifArgPair(arg, function(name, binding) ***REMOVED***
				if(name === null) ***REMOVED***
					name = binding;
					binding += "-loader";
				***REMOVED***
				var rule = ***REMOVED***
					test: new RegExp("\\." + name.replace(/[\-\[\]\/\***REMOVED***\***REMOVED***\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + "$"), // eslint-disable-line no-useless-escape
					loader: binding
				***REMOVED***;
				if(arg === "module-bind-pre") ***REMOVED***
					rule.enforce = "pre";
				***REMOVED*** else if(arg === "module-bind-post") ***REMOVED***
					rule.enforce = "post";
				***REMOVED***
				options.module.rules.push(rule);
			***REMOVED***, function() ***REMOVED***
				ensureObject(options, "module");
				ensureArray(options.module, "rules");
			***REMOVED***);
		***REMOVED***
		bindRules("module-bind");
		bindRules("module-bind-pre");
		bindRules("module-bind-post");

		var defineObject;
		ifArgPair("define", function(name, value) ***REMOVED***
			if(name === null) ***REMOVED***
				name = value;
				value = true;
			***REMOVED***
			defineObject[name] = value;
		***REMOVED***, function() ***REMOVED***
			defineObject = ***REMOVED******REMOVED***;
		***REMOVED***, function() ***REMOVED***
			ensureArray(options, "plugins");
			var DefinePlugin = require("../lib/DefinePlugin");
			options.plugins.push(new DefinePlugin(defineObject));
		***REMOVED***);

		ifArg("output-path", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.path = path.resolve(value);
		***REMOVED***);

		ifArg("output-filename", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.filename = value;
			noOutputFilenameDefined = false;
		***REMOVED***);

		ifArg("output-chunk-filename", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.chunkFilename = value;
		***REMOVED***);

		ifArg("output-source-map-filename", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.sourceMapFilename = value;
		***REMOVED***);

		ifArg("output-public-path", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.publicPath = value;
		***REMOVED***);

		ifArg("output-jsonp-function", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.jsonpFunction = value;
		***REMOVED***);

		ifBooleanArg("output-pathinfo", function() ***REMOVED***
			ensureObject(options, "output");
			options.output.pathinfo = true;
		***REMOVED***);

		ifArg("output-library", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.library = value;
		***REMOVED***);

		ifArg("output-library-target", function(value) ***REMOVED***
			ensureObject(options, "output");
			options.output.libraryTarget = value;
		***REMOVED***);

		ifArg("records-input-path", function(value) ***REMOVED***
			options.recordsInputPath = path.resolve(value);
		***REMOVED***);

		ifArg("records-output-path", function(value) ***REMOVED***
			options.recordsOutputPath = path.resolve(value);
		***REMOVED***);

		ifArg("records-path", function(value) ***REMOVED***
			options.recordsPath = path.resolve(value);
		***REMOVED***);

		ifArg("target", function(value) ***REMOVED***
			options.target = value;
		***REMOVED***);

		mapArgToBoolean("cache");

		ifBooleanArg("hot", function() ***REMOVED***
			ensureArray(options, "plugins");
			var HotModuleReplacementPlugin = require("../lib/HotModuleReplacementPlugin");
			options.plugins.push(new HotModuleReplacementPlugin());
		***REMOVED***);

		ifBooleanArg("debug", function() ***REMOVED***
			ensureArray(options, "plugins");
			var LoaderOptionsPlugin = require("../lib/LoaderOptionsPlugin");
			options.plugins.push(new LoaderOptionsPlugin(***REMOVED***
				debug: true
			***REMOVED***));
		***REMOVED***);

		ifArg("devtool", function(value) ***REMOVED***
			options.devtool = value;
		***REMOVED***);

		function processResolveAlias(arg, key) ***REMOVED***
			ifArgPair(arg, function(name, value) ***REMOVED***
				if(!name) ***REMOVED***
					throw new Error("--" + arg + " <string>=<string>");
				***REMOVED***
				ensureObject(options, key);
				ensureObject(options[key], "alias");
				options[key].alias[name] = value;
			***REMOVED***);
		***REMOVED***
		processResolveAlias("resolve-alias", "resolve");
		processResolveAlias("resolve-loader-alias", "resolveLoader");

		ifArg("resolve-extensions", function(value) ***REMOVED***
			ensureObject(options, "resolve");
			if(Array.isArray(value)) ***REMOVED***
				options.resolve.extensions = value;
			***REMOVED*** else ***REMOVED***
				options.resolve.extensions = value.split(/,\s*/);
			***REMOVED***
		***REMOVED***);

		ifArg("optimize-max-chunks", function(value) ***REMOVED***
			ensureArray(options, "plugins");
			var LimitChunkCountPlugin = require("../lib/optimize/LimitChunkCountPlugin");
			options.plugins.push(new LimitChunkCountPlugin(***REMOVED***
				maxChunks: parseInt(value, 10)
			***REMOVED***));
		***REMOVED***);

		ifArg("optimize-min-chunk-size", function(value) ***REMOVED***
			ensureArray(options, "plugins");
			var MinChunkSizePlugin = require("../lib/optimize/MinChunkSizePlugin");
			options.plugins.push(new MinChunkSizePlugin(***REMOVED***
				minChunkSize: parseInt(value, 10)
			***REMOVED***));
		***REMOVED***);

		ifBooleanArg("optimize-minimize", function() ***REMOVED***
			ensureArray(options, "plugins");
			var UglifyJsPlugin = require("../lib/optimize/UglifyJsPlugin");
			var LoaderOptionsPlugin = require("../lib/LoaderOptionsPlugin");
			options.plugins.push(new UglifyJsPlugin(***REMOVED***
				sourceMap: options.devtool && (options.devtool.indexOf("sourcemap") >= 0 || options.devtool.indexOf("source-map") >= 0)
			***REMOVED***));
			options.plugins.push(new LoaderOptionsPlugin(***REMOVED***
				minimize: true
			***REMOVED***));
		***REMOVED***);

		ifArg("prefetch", function(request) ***REMOVED***
			ensureArray(options, "plugins");
			var PrefetchPlugin = require("../lib/PrefetchPlugin");
			options.plugins.push(new PrefetchPlugin(request));
		***REMOVED***);

		ifArg("provide", function(value) ***REMOVED***
			ensureArray(options, "plugins");
			var idx = value.indexOf("=");
			var name;
			if(idx >= 0) ***REMOVED***
				name = value.substr(0, idx);
				value = value.substr(idx + 1);
			***REMOVED*** else ***REMOVED***
				name = value;
			***REMOVED***
			var ProvidePlugin = require("../lib/ProvidePlugin");
			options.plugins.push(new ProvidePlugin(name, value));
		***REMOVED***);

		ifArg("plugin", function(value) ***REMOVED***
			ensureArray(options, "plugins");
			options.plugins.push(loadPlugin(value));
		***REMOVED***);

		mapArgToBoolean("bail");

		mapArgToBoolean("profile");

		if(noOutputFilenameDefined) ***REMOVED***
			ensureObject(options, "output");
			if(convertOptions && convertOptions.outputFilename) ***REMOVED***
				options.output.path = path.resolve(path.dirname(convertOptions.outputFilename));
				options.output.filename = path.basename(convertOptions.outputFilename);
			***REMOVED*** else if(argv._.length > 0) ***REMOVED***
				options.output.filename = argv._.pop();
				options.output.path = path.resolve(path.dirname(options.output.filename));
				options.output.filename = path.basename(options.output.filename);
			***REMOVED*** else if(configFileLoaded) ***REMOVED***
				throw new Error("'output.filename' is required, either in config file or as --output-filename");
			***REMOVED*** else ***REMOVED***
				console.error("No configuration file found and no output filename configured via CLI option.");
				console.error("A configuration file could be named 'webpack.config.js' in the current directory.");
				console.error("Use --help to display the CLI options.");
				process.exit(-1); // eslint-disable-line
			***REMOVED***
		***REMOVED***

		if(argv._.length > 0) ***REMOVED***
			if(Array.isArray(options.entry) || typeof options.entry === "string") ***REMOVED***
				options.entry = ***REMOVED***
					main: options.entry
				***REMOVED***;
			***REMOVED***
			ensureObject(options, "entry");

			var addTo = function addTo(name, entry) ***REMOVED***
				if(options.entry[name]) ***REMOVED***
					if(!Array.isArray(options.entry[name])) ***REMOVED***
						options.entry[name] = [options.entry[name]];
					***REMOVED***
					options.entry[name].push(entry);
				***REMOVED*** else ***REMOVED***
					options.entry[name] = entry;
				***REMOVED***
			***REMOVED***;
			argv._.forEach(function(content) ***REMOVED***
				var i = content.indexOf("=");
				var j = content.indexOf("?");
				if(i < 0 || (j >= 0 && j < i)) ***REMOVED***
					var resolved = path.resolve(content);
					if(fs.existsSync(resolved)) ***REMOVED***
						addTo("main", `$***REMOVED***resolved***REMOVED***$***REMOVED***fs.statSync(resolved).isDirectory() ? path.sep : ""***REMOVED***`);
					***REMOVED*** else ***REMOVED***
						addTo("main", content);
					***REMOVED***
				***REMOVED*** else ***REMOVED***
					addTo(content.substr(0, i), content.substr(i + 1));
				***REMOVED***
			***REMOVED***);
		***REMOVED***

		if(!options.entry) ***REMOVED***
			if(configFileLoaded) ***REMOVED***
				console.error("Configuration file found but no entry configured.");
			***REMOVED*** else ***REMOVED***
				console.error("No configuration file found and no entry configured via CLI option.");
				console.error("When using the CLI you need to provide at least two arguments: entry and output.");
				console.error("A configuration file could be named 'webpack.config.js' in the current directory.");
			***REMOVED***
			console.error("Use --help to display the CLI options.");
			process.exit(-1); // eslint-disable-line
		***REMOVED***
	***REMOVED***
***REMOVED***;
