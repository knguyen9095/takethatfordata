const command = require('./command')()
const YError = require('./yerror')

const positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth']

module.exports = function (expected, callerArguments, length) ***REMOVED***
  // TODO: should this eventually raise an exception.
  try ***REMOVED***
    // preface the argument description with "cmd", so
    // that we can run it through yargs' command parser.
    var position = 0
    var parsed = ***REMOVED***demanded: [], optional: []***REMOVED***
    if (typeof expected === 'object') ***REMOVED***
      length = callerArguments
      callerArguments = expected
    ***REMOVED*** else ***REMOVED***
      parsed = command.parseCommand('cmd ' + expected)
    ***REMOVED***
    const args = [].slice.call(callerArguments)

    while (args.length && args[args.length - 1] === undefined) args.pop()
    length = length || args.length

    if (length < parsed.demanded.length) ***REMOVED***
      throw new YError('Not enough arguments provided. Expected ' + parsed.demanded.length +
        ' but received ' + args.length + '.')
    ***REMOVED***

    const totalCommands = parsed.demanded.length + parsed.optional.length
    if (length > totalCommands) ***REMOVED***
      throw new YError('Too many arguments provided. Expected max ' + totalCommands +
        ' but received ' + length + '.')
    ***REMOVED***

    parsed.demanded.forEach(function (demanded) ***REMOVED***
      const arg = args.shift()
      const observedType = guessType(arg)
      const matchingTypes = demanded.cmd.filter(function (type) ***REMOVED***
        return type === observedType || type === '*'
      ***REMOVED***)
      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position, false)
      position += 1
    ***REMOVED***)

    parsed.optional.forEach(function (optional) ***REMOVED***
      if (args.length === 0) return
      const arg = args.shift()
      const observedType = guessType(arg)
      const matchingTypes = optional.cmd.filter(function (type) ***REMOVED***
        return type === observedType || type === '*'
      ***REMOVED***)
      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position, true)
      position += 1
    ***REMOVED***)
  ***REMOVED*** catch (err) ***REMOVED***
    console.warn(err.stack)
  ***REMOVED***
***REMOVED***

function guessType (arg) ***REMOVED***
  if (Array.isArray(arg)) ***REMOVED***
    return 'array'
  ***REMOVED*** else if (arg === null) ***REMOVED***
    return 'null'
  ***REMOVED***
  return typeof arg
***REMOVED***

function argumentTypeError (observedType, allowedTypes, position, optional) ***REMOVED***
  throw new YError('Invalid ' + (positionName[position] || 'manyith') + ' argument.' +
    ' Expected ' + allowedTypes.join(' or ') + ' but received ' + observedType + '.')
***REMOVED***
