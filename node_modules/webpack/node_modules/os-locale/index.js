'use strict';
const execa = require('execa');
const lcid = require('lcid');
const mem = require('mem');

const defaultOpts = ***REMOVED***spawn: true***REMOVED***;
const defaultLocale = 'en_US';

function getEnvLocale(env) ***REMOVED***
	env = env || process.env;
	return env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;
***REMOVED***

function parseLocale(x) ***REMOVED***
	const env = x.split('\n').reduce((env, def) => ***REMOVED***
		def = def.split('=');
		env[def[0]] = def[1].replace(/^"|"$/g, '');
		return env;
	***REMOVED***, ***REMOVED******REMOVED***);
	return getEnvLocale(env);
***REMOVED***

function getLocale(str) ***REMOVED***
	return (str && str.replace(/[.:].*/, ''));
***REMOVED***

function getAppleLocale() ***REMOVED***
	return execa.stdout('defaults', ['read', '-g', 'AppleLocale']);
***REMOVED***

function getAppleLocaleSync() ***REMOVED***
	return execa.sync('defaults', ['read', '-g', 'AppleLocale']).stdout;
***REMOVED***

function getUnixLocale() ***REMOVED***
	if (process.platform === 'darwin') ***REMOVED***
		return getAppleLocale();
	***REMOVED***

	return execa.stdout('locale')
		.then(stdout => getLocale(parseLocale(stdout)));
***REMOVED***

function getUnixLocaleSync() ***REMOVED***
	if (process.platform === 'darwin') ***REMOVED***
		return getAppleLocaleSync();
	***REMOVED***

	return getLocale(parseLocale(execa.sync('locale').stdout));
***REMOVED***

function getWinLocale() ***REMOVED***
	return execa.stdout('wmic', ['os', 'get', 'locale'])
		.then(stdout => ***REMOVED***
			const lcidCode = parseInt(stdout.replace('Locale', ''), 16);
			return lcid.from(lcidCode);
		***REMOVED***);
***REMOVED***

function getWinLocaleSync() ***REMOVED***
	const stdout = execa.sync('wmic', ['os', 'get', 'locale']).stdout;
	const lcidCode = parseInt(stdout.replace('Locale', ''), 16);
	return lcid.from(lcidCode);
***REMOVED***

module.exports = mem(opts => ***REMOVED***
	opts = opts || defaultOpts;
	const envLocale = getEnvLocale();
	let thenable;

	if (envLocale || opts.spawn === false) ***REMOVED***
		thenable = Promise.resolve(getLocale(envLocale));
	***REMOVED*** else if (process.platform === 'win32') ***REMOVED***
		thenable = getWinLocale();
	***REMOVED*** else ***REMOVED***
		thenable = getUnixLocale();
	***REMOVED***

	return thenable.then(locale => locale || defaultLocale)
		.catch(() => defaultLocale);
***REMOVED***);

module.exports.sync = mem(opts => ***REMOVED***
	opts = opts || defaultOpts;
	const envLocale = getEnvLocale();
	let res;

	if (envLocale || opts.spawn === false) ***REMOVED***
		res = getLocale(envLocale);
	***REMOVED*** else ***REMOVED***
		try ***REMOVED***
			if (process.platform === 'win32') ***REMOVED***
				res = getWinLocaleSync();
			***REMOVED*** else ***REMOVED***
				res = getUnixLocaleSync();
			***REMOVED***
		***REMOVED*** catch (err) ***REMOVED******REMOVED***
	***REMOVED***

	return res || defaultLocale;
***REMOVED***);
