// Reserved word lists for various dialects of the language

var reservedWords = ***REMOVED***
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
***REMOVED***;

// And the keywords

var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

var keywords = ***REMOVED***
  5: ecma5AndLessKeywords,
  6: ecma5AndLessKeywords + " const class extends export import super"
***REMOVED***;

var keywordRelationalOperator = /^in(stanceof)?$/;

// ## Character categories

// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
// Generated by `bin/generate-identifier-regex.js`.

var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d01-\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf8\u1cf9\u1dc0-\u1df5\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

// These are a run-length and offset encoded representation of the
// >0xffff code points that are a valid part of identifiers. The
// offset starts at 0x10000, and each pair of numbers represents an
// offset to the next range, and then a size of the range. They were
// generated by bin/generate-identifier-regex.js

// eslint-disable-next-line comma-spacing
var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541];

// eslint-disable-next-line comma-spacing
var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];

// This has a complexity linear to the value of the code. The
// assumption is that looking up astral identifier characters is
// rare.
function isInAstralSet(code, set) ***REMOVED***
  var pos = 0x10000;
  for (var i = 0; i < set.length; i += 2) ***REMOVED***
    pos += set[i];
    if (pos > code) ***REMOVED*** return false ***REMOVED***
    pos += set[i + 1];
    if (pos >= code) ***REMOVED*** return true ***REMOVED***
  ***REMOVED***
***REMOVED***

// Test whether a given character code starts an identifier.

function isIdentifierStart(code, astral) ***REMOVED***
  if (code < 65) ***REMOVED*** return code === 36 ***REMOVED***
  if (code < 91) ***REMOVED*** return true ***REMOVED***
  if (code < 97) ***REMOVED*** return code === 95 ***REMOVED***
  if (code < 123) ***REMOVED*** return true ***REMOVED***
  if (code <= 0xffff) ***REMOVED*** return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) ***REMOVED***
  if (astral === false) ***REMOVED*** return false ***REMOVED***
  return isInAstralSet(code, astralIdentifierStartCodes)
***REMOVED***

// Test whether a given character is part of an identifier.

function isIdentifierChar(code, astral) ***REMOVED***
  if (code < 48) ***REMOVED*** return code === 36 ***REMOVED***
  if (code < 58) ***REMOVED*** return true ***REMOVED***
  if (code < 65) ***REMOVED*** return false ***REMOVED***
  if (code < 91) ***REMOVED*** return true ***REMOVED***
  if (code < 97) ***REMOVED*** return code === 95 ***REMOVED***
  if (code < 123) ***REMOVED*** return true ***REMOVED***
  if (code <= 0xffff) ***REMOVED*** return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) ***REMOVED***
  if (astral === false) ***REMOVED*** return false ***REMOVED***
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
***REMOVED***

// ## Token types

// The assignment of fine-grained, information-carrying type objects
// allows the tokenizer to store the information it has about a
// token in a way that is very cheap for the parser to look up.

// All token type variables start with an underscore, to make them
// easy to recognize.

// The `beforeExpr` property is used to disambiguate between regular
// expressions and divisions. It is set on all token types that can
// be followed by an expression (thus, a slash after them would be a
// regular expression).
//
// The `startsExpr` property is used to check if the token ends a
// `yield` expression. It is set on all token types that either can
// directly start an expression (like a quotation mark) or can
// continue an expression (like the body of a string).
//
// `isLoop` marks a keyword as starting a loop, which is important
// to know when parsing a label, in order to allow or disallow
// continue jumps to that label.

var TokenType = function TokenType(label, conf) ***REMOVED***
  if ( conf === void 0 ) conf = ***REMOVED******REMOVED***;

  this.label = label;
  this.keyword = conf.keyword;
  this.beforeExpr = !!conf.beforeExpr;
  this.startsExpr = !!conf.startsExpr;
  this.isLoop = !!conf.isLoop;
  this.isAssign = !!conf.isAssign;
  this.prefix = !!conf.prefix;
  this.postfix = !!conf.postfix;
  this.binop = conf.binop || null;
  this.updateContext = null;
***REMOVED***;

function binop(name, prec) ***REMOVED***
  return new TokenType(name, ***REMOVED***beforeExpr: true, binop: prec***REMOVED***)
***REMOVED***
var beforeExpr = ***REMOVED***beforeExpr: true***REMOVED***;
var startsExpr = ***REMOVED***startsExpr: true***REMOVED***;

// Map keyword names to token types.

var keywords$1 = ***REMOVED******REMOVED***;

// Succinct definitions of keyword token types
function kw(name, options) ***REMOVED***
  if ( options === void 0 ) options = ***REMOVED******REMOVED***;

  options.keyword = name;
  return keywords$1[name] = new TokenType(name, options)
***REMOVED***

var types = ***REMOVED***
  num: new TokenType("num", startsExpr),
  regexp: new TokenType("regexp", startsExpr),
  string: new TokenType("string", startsExpr),
  name: new TokenType("name", startsExpr),
  eof: new TokenType("eof"),

  // Punctuation token types.
  bracketL: new TokenType("[", ***REMOVED***beforeExpr: true, startsExpr: true***REMOVED***),
  bracketR: new TokenType("]"),
  braceL: new TokenType("***REMOVED***", ***REMOVED***beforeExpr: true, startsExpr: true***REMOVED***),
  braceR: new TokenType("***REMOVED***"),
  parenL: new TokenType("(", ***REMOVED***beforeExpr: true, startsExpr: true***REMOVED***),
  parenR: new TokenType(")"),
  comma: new TokenType(",", beforeExpr),
  semi: new TokenType(";", beforeExpr),
  colon: new TokenType(":", beforeExpr),
  dot: new TokenType("."),
  question: new TokenType("?", beforeExpr),
  arrow: new TokenType("=>", beforeExpr),
  template: new TokenType("template"),
  invalidTemplate: new TokenType("invalidTemplate"),
  ellipsis: new TokenType("...", beforeExpr),
  backQuote: new TokenType("`", startsExpr),
  dollarBraceL: new TokenType("$***REMOVED***", ***REMOVED***beforeExpr: true, startsExpr: true***REMOVED***),

  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.

  eq: new TokenType("=", ***REMOVED***beforeExpr: true, isAssign: true***REMOVED***),
  assign: new TokenType("_=", ***REMOVED***beforeExpr: true, isAssign: true***REMOVED***),
  incDec: new TokenType("++/--", ***REMOVED***prefix: true, postfix: true, startsExpr: true***REMOVED***),
  prefix: new TokenType("!/~", ***REMOVED***beforeExpr: true, prefix: true, startsExpr: true***REMOVED***),
  logicalOR: binop("||", 1),
  logicalAND: binop("&&", 2),
  bitwiseOR: binop("|", 3),
  bitwiseXOR: binop("^", 4),
  bitwiseAND: binop("&", 5),
  equality: binop("==/!=/===/!==", 6),
  relational: binop("</>/<=/>=", 7),
  bitShift: binop("<</>>/>>>", 8),
  plusMin: new TokenType("+/-", ***REMOVED***beforeExpr: true, binop: 9, prefix: true, startsExpr: true***REMOVED***),
  modulo: binop("%", 10),
  star: binop("*", 10),
  slash: binop("/", 10),
  starstar: new TokenType("**", ***REMOVED***beforeExpr: true***REMOVED***),

  // Keyword token types.
  _break: kw("break"),
  _case: kw("case", beforeExpr),
  _catch: kw("catch"),
  _continue: kw("continue"),
  _debugger: kw("debugger"),
  _default: kw("default", beforeExpr),
  _do: kw("do", ***REMOVED***isLoop: true, beforeExpr: true***REMOVED***),
  _else: kw("else", beforeExpr),
  _finally: kw("finally"),
  _for: kw("for", ***REMOVED***isLoop: true***REMOVED***),
  _function: kw("function", startsExpr),
  _if: kw("if"),
  _return: kw("return", beforeExpr),
  _switch: kw("switch"),
  _throw: kw("throw", beforeExpr),
  _try: kw("try"),
  _var: kw("var"),
  _const: kw("const"),
  _while: kw("while", ***REMOVED***isLoop: true***REMOVED***),
  _with: kw("with"),
  _new: kw("new", ***REMOVED***beforeExpr: true, startsExpr: true***REMOVED***),
  _this: kw("this", startsExpr),
  _super: kw("super", startsExpr),
  _class: kw("class", startsExpr),
  _extends: kw("extends", beforeExpr),
  _export: kw("export"),
  _import: kw("import"),
  _null: kw("null", startsExpr),
  _true: kw("true", startsExpr),
  _false: kw("false", startsExpr),
  _in: kw("in", ***REMOVED***beforeExpr: true, binop: 7***REMOVED***),
  _instanceof: kw("instanceof", ***REMOVED***beforeExpr: true, binop: 7***REMOVED***),
  _typeof: kw("typeof", ***REMOVED***beforeExpr: true, prefix: true, startsExpr: true***REMOVED***),
  _void: kw("void", ***REMOVED***beforeExpr: true, prefix: true, startsExpr: true***REMOVED***),
  _delete: kw("delete", ***REMOVED***beforeExpr: true, prefix: true, startsExpr: true***REMOVED***)
***REMOVED***;

// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.

var lineBreak = /\r\n?|\n|\u2028|\u2029/;
var lineBreakG = new RegExp(lineBreak.source, "g");

function isNewLine(code) ***REMOVED***
  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029
***REMOVED***

var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

var ref = Object.prototype;
var hasOwnProperty = ref.hasOwnProperty;
var toString = ref.toString;

// Checks if an object has a property.

function has(obj, propName) ***REMOVED***
  return hasOwnProperty.call(obj, propName)
***REMOVED***

var isArray = Array.isArray || (function (obj) ***REMOVED*** return (
  toString.call(obj) === "[object Array]"
); ***REMOVED***);

// These are used when `options.locations` is on, for the
// `startLoc` and `endLoc` properties.

var Position = function Position(line, col) ***REMOVED***
  this.line = line;
  this.column = col;
***REMOVED***;

Position.prototype.offset = function offset (n) ***REMOVED***
  return new Position(this.line, this.column + n)
***REMOVED***;

var SourceLocation = function SourceLocation(p, start, end) ***REMOVED***
  this.start = start;
  this.end = end;
  if (p.sourceFile !== null) ***REMOVED*** this.source = p.sourceFile; ***REMOVED***
***REMOVED***;

// The `getLineInfo` function is mostly useful when the
// `locations` option is off (for performance reasons) and you
// want to find the line/column position for a given character
// offset. `input` should be the code string that the offset refers
// into.

function getLineInfo(input, offset) ***REMOVED***
  for (var line = 1, cur = 0;;) ***REMOVED***
    lineBreakG.lastIndex = cur;
    var match = lineBreakG.exec(input);
    if (match && match.index < offset) ***REMOVED***
      ++line;
      cur = match.index + match[0].length;
    ***REMOVED*** else ***REMOVED***
      return new Position(line, offset - cur)
    ***REMOVED***
  ***REMOVED***
***REMOVED***

// A second optional argument can be given to further configure
// the parser process. These options are recognized:

var defaultOptions = ***REMOVED***
  // `ecmaVersion` indicates the ECMAScript version to parse. Must
  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support
  // for strict mode, the set of reserved words, and support for
  // new syntax features. The default is 7.
  ecmaVersion: 7,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called
  // when a semicolon is automatically inserted. It will be passed
  // th position of the comma as an offset, and if `locations` is
  // enabled, it is given the location as a `***REMOVED***line, column***REMOVED***` object
  // as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: false,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program.
  allowImportExportEverywhere: false,
  // When enabled, hashbang directive in the beginning of file
  // is allowed and treated as a line comment.
  allowHashBang: false,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `***REMOVED***line, column***REMOVED***` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: false,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `***REMOVED***line, column***REMOVED***` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: false,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: false,
  plugins: ***REMOVED******REMOVED***
***REMOVED***;

// Interpret and default an options object

function getOptions(opts) ***REMOVED***
  var options = ***REMOVED******REMOVED***;

  for (var opt in defaultOptions)
    ***REMOVED*** options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; ***REMOVED***

  if (options.ecmaVersion >= 2015)
    ***REMOVED*** options.ecmaVersion -= 2009; ***REMOVED***

  if (options.allowReserved == null)
    ***REMOVED*** options.allowReserved = options.ecmaVersion < 5; ***REMOVED***

  if (isArray(options.onToken)) ***REMOVED***
    var tokens = options.onToken;
    options.onToken = function (token) ***REMOVED*** return tokens.push(token); ***REMOVED***;
  ***REMOVED***
  if (isArray(options.onComment))
    ***REMOVED*** options.onComment = pushComment(options, options.onComment); ***REMOVED***

  return options
***REMOVED***

function pushComment(options, array) ***REMOVED***
  return function(block, text, start, end, startLoc, endLoc) ***REMOVED***
    var comment = ***REMOVED***
      type: block ? "Block" : "Line",
      value: text,
      start: start,
      end: end
    ***REMOVED***;
    if (options.locations)
      ***REMOVED*** comment.loc = new SourceLocation(this, startLoc, endLoc); ***REMOVED***
    if (options.ranges)
      ***REMOVED*** comment.range = [start, end]; ***REMOVED***
    array.push(comment);
  ***REMOVED***
***REMOVED***

// Registered plugins
var plugins = ***REMOVED******REMOVED***;

function keywordRegexp(words) ***REMOVED***
  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
***REMOVED***

var Parser = function Parser(options, input, startPos) ***REMOVED***
  this.options = options = getOptions(options);
  this.sourceFile = options.sourceFile;
  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);
  var reserved = "";
  if (!options.allowReserved) ***REMOVED***
    for (var v = options.ecmaVersion;; v--)
      ***REMOVED*** if (reserved = reservedWords[v]) ***REMOVED*** break ***REMOVED*** ***REMOVED***
    if (options.sourceType == "module") ***REMOVED*** reserved += " await"; ***REMOVED***
  ***REMOVED***
  this.reservedWords = keywordRegexp(reserved);
  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
  this.reservedWordsStrict = keywordRegexp(reservedStrict);
  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + reservedWords.strictBind);
  this.input = String(input);

  // Used to signal to callers of `readWord1` whether the word
  // contained any escape sequences. This is needed because words with
  // escape sequences must not be interpreted as keywords.
  this.containsEsc = false;

  // Load plugins
  this.loadPlugins(options.plugins);

  // Set up token state

  // The current position of the tokenizer in the input.
  if (startPos) ***REMOVED***
    this.pos = startPos;
    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
  ***REMOVED*** else ***REMOVED***
    this.pos = this.lineStart = 0;
    this.curLine = 1;
  ***REMOVED***

  // Properties of the current token:
  // Its type
  this.type = types.eof;
  // For tokens that include more information than their type, the value
  this.value = null;
  // Its start and end offset
  this.start = this.end = this.pos;
  // And, if locations are used, the ***REMOVED***line, column***REMOVED*** object
  // corresponding to those offsets
  this.startLoc = this.endLoc = this.curPosition();

  // Position information for the previous token
  this.lastTokEndLoc = this.lastTokStartLoc = null;
  this.lastTokStart = this.lastTokEnd = this.pos;

  // The context stack is used to superficially track syntactic
  // context to predict whether a regular expression is allowed in a
  // given position.
  this.context = this.initialContext();
  this.exprAllowed = true;

  // Figure out if it's a module code.
  this.inModule = options.sourceType === "module";
  this.strict = this.inModule || this.strictDirective(this.pos);

  // Used to signify the start of a potential arrow function
  this.potentialArrowAt = -1;

  // Flags to track whether we are in a function, a generator, an async function.
  this.inFunction = this.inGenerator = this.inAsync = false;
  // Positions to delayed-check that yield/await does not exist in default parameters.
  this.yieldPos = this.awaitPos = 0;
  // Labels in scope.
  this.labels = [];

  // If enabled, skip leading hashbang line.
  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
    ***REMOVED*** this.skipLineComment(2); ***REMOVED***

  // Scope tracking for duplicate variable names (see scope.js)
  this.scopeStack = [];
  this.enterFunctionScope();
***REMOVED***;

// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them
Parser.prototype.isKeyword = function isKeyword (word) ***REMOVED*** return this.keywords.test(word) ***REMOVED***;
Parser.prototype.isReservedWord = function isReservedWord (word) ***REMOVED*** return this.reservedWords.test(word) ***REMOVED***;

Parser.prototype.extend = function extend (name, f) ***REMOVED***
  this[name] = f(this[name]);
***REMOVED***;

Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) ***REMOVED***
    var this$1 = this;

  for (var name in pluginConfigs) ***REMOVED***
    var plugin = plugins[name];
    if (!plugin) ***REMOVED*** throw new Error("Plugin '" + name + "' not found") ***REMOVED***
    plugin(this$1, pluginConfigs[name]);
  ***REMOVED***
***REMOVED***;

Parser.prototype.parse = function parse () ***REMOVED***
  var node = this.options.program || this.startNode();
  this.nextToken();
  return this.parseTopLevel(node)
***REMOVED***;

var pp = Parser.prototype;

// ## Parser utilities

var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;
pp.strictDirective = function(start) ***REMOVED***
  var this$1 = this;

  for (;;) ***REMOVED***
    skipWhiteSpace.lastIndex = start;
    start += skipWhiteSpace.exec(this$1.input)[0].length;
    var match = literal.exec(this$1.input.slice(start));
    if (!match) ***REMOVED*** return false ***REMOVED***
    if ((match[1] || match[2]) == "use strict") ***REMOVED*** return true ***REMOVED***
    start += match[0].length;
  ***REMOVED***
***REMOVED***;

// Predicate that tests whether the next token is of the given
// type, and if yes, consumes it as a side effect.

pp.eat = function(type) ***REMOVED***
  if (this.type === type) ***REMOVED***
    this.next();
    return true
  ***REMOVED*** else ***REMOVED***
    return false
  ***REMOVED***
***REMOVED***;

// Tests whether parsed token is a contextual keyword.

pp.isContextual = function(name) ***REMOVED***
  return this.type === types.name && this.value === name && !this.containsEsc
***REMOVED***;

// Consumes contextual keyword if possible.

pp.eatContextual = function(name) ***REMOVED***
  if (!this.isContextual(name)) ***REMOVED*** return false ***REMOVED***
  this.next();
  return true
***REMOVED***;

// Asserts that following token is given contextual keyword.

pp.expectContextual = function(name) ***REMOVED***
  if (!this.eatContextual(name)) ***REMOVED*** this.unexpected(); ***REMOVED***
***REMOVED***;

// Test whether a semicolon can be inserted at the current position.

pp.canInsertSemicolon = function() ***REMOVED***
  return this.type === types.eof ||
    this.type === types.braceR ||
    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
***REMOVED***;

pp.insertSemicolon = function() ***REMOVED***
  if (this.canInsertSemicolon()) ***REMOVED***
    if (this.options.onInsertedSemicolon)
      ***REMOVED*** this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); ***REMOVED***
    return true
  ***REMOVED***
***REMOVED***;

// Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.

pp.semicolon = function() ***REMOVED***
  if (!this.eat(types.semi) && !this.insertSemicolon()) ***REMOVED*** this.unexpected(); ***REMOVED***
***REMOVED***;

pp.afterTrailingComma = function(tokType, notNext) ***REMOVED***
  if (this.type == tokType) ***REMOVED***
    if (this.options.onTrailingComma)
      ***REMOVED*** this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); ***REMOVED***
    if (!notNext)
      ***REMOVED*** this.next(); ***REMOVED***
    return true
  ***REMOVED***
***REMOVED***;

// Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error.

pp.expect = function(type) ***REMOVED***
  this.eat(type) || this.unexpected();
***REMOVED***;

// Raise an unexpected token error.

pp.unexpected = function(pos) ***REMOVED***
  this.raise(pos != null ? pos : this.start, "Unexpected token");
***REMOVED***;

function DestructuringErrors() ***REMOVED***
  this.shorthandAssign =
  this.trailingComma =
  this.parenthesizedAssign =
  this.parenthesizedBind =
  this.doubleProto =
    -1;
***REMOVED***

pp.checkPatternErrors = function(refDestructuringErrors, isAssign) ***REMOVED***
  if (!refDestructuringErrors) ***REMOVED*** return ***REMOVED***
  if (refDestructuringErrors.trailingComma > -1)
    ***REMOVED*** this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); ***REMOVED***
  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
  if (parens > -1) ***REMOVED*** this.raiseRecoverable(parens, "Parenthesized pattern"); ***REMOVED***
***REMOVED***;

pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) ***REMOVED***
  if (!refDestructuringErrors) ***REMOVED*** return false ***REMOVED***
  var shorthandAssign = refDestructuringErrors.shorthandAssign;
  var doubleProto = refDestructuringErrors.doubleProto;
  if (!andThrow) ***REMOVED*** return shorthandAssign >= 0 || doubleProto >= 0 ***REMOVED***
  if (shorthandAssign >= 0)
    ***REMOVED*** this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); ***REMOVED***
  if (doubleProto >= 0)
    ***REMOVED*** this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); ***REMOVED***
***REMOVED***;

pp.checkYieldAwaitInDefaultParams = function() ***REMOVED***
  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
    ***REMOVED*** this.raise(this.yieldPos, "Yield expression cannot be a default value"); ***REMOVED***
  if (this.awaitPos)
    ***REMOVED*** this.raise(this.awaitPos, "Await expression cannot be a default value"); ***REMOVED***
***REMOVED***;

pp.isSimpleAssignTarget = function(expr) ***REMOVED***
  if (expr.type === "ParenthesizedExpression")
    ***REMOVED*** return this.isSimpleAssignTarget(expr.expression) ***REMOVED***
  return expr.type === "Identifier" || expr.type === "MemberExpression"
***REMOVED***;

var pp$1 = Parser.prototype;

// ### Statement parsing

// Parse a program. Initializes the parser, reads any number of
// statements, and wraps them in a Program node.  Optionally takes a
// `program` argument.  If present, the statements will be appended
// to its body instead of creating a new node.

pp$1.parseTopLevel = function(node) ***REMOVED***
  var this$1 = this;

  var exports = ***REMOVED******REMOVED***;
  if (!node.body) ***REMOVED*** node.body = []; ***REMOVED***
  while (this.type !== types.eof) ***REMOVED***
    var stmt = this$1.parseStatement(true, true, exports);
    node.body.push(stmt);
  ***REMOVED***
  this.adaptDirectivePrologue(node.body);
  this.next();
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    node.sourceType = this.options.sourceType;
  ***REMOVED***
  return this.finishNode(node, "Program")
***REMOVED***;

var loopLabel = ***REMOVED***kind: "loop"***REMOVED***;
var switchLabel = ***REMOVED***kind: "switch"***REMOVED***;

pp$1.isLet = function() ***REMOVED***
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) ***REMOVED*** return false ***REMOVED***
  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
  if (nextCh === 91 || nextCh == 123) ***REMOVED*** return true ***REMOVED*** // '***REMOVED***' and '['
  if (isIdentifierStart(nextCh, true)) ***REMOVED***
    var pos = next + 1;
    while (isIdentifierChar(this.input.charCodeAt(pos), true)) ***REMOVED*** ++pos; ***REMOVED***
    var ident = this.input.slice(next, pos);
    if (!keywordRelationalOperator.test(ident)) ***REMOVED*** return true ***REMOVED***
  ***REMOVED***
  return false
***REMOVED***;

// check 'async [no LineTerminator here] function'
// - 'async /*foo*/ function' is OK.
// - 'async /*\n*/ function' is invalid.
pp$1.isAsyncFunction = function() ***REMOVED***
  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
    ***REMOVED*** return false ***REMOVED***

  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length;
  return !lineBreak.test(this.input.slice(this.pos, next)) &&
    this.input.slice(next, next + 8) === "function" &&
    (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))
***REMOVED***;

// Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.

pp$1.parseStatement = function(declaration, topLevel, exports) ***REMOVED***
  var starttype = this.type, node = this.startNode(), kind;

  if (this.isLet()) ***REMOVED***
    starttype = types._var;
    kind = "let";
  ***REMOVED***

  // Most types of statements are recognized by the keyword they
  // start with. Many are trivial to parse, some require a bit of
  // complexity.

  switch (starttype) ***REMOVED***
  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
  case types._debugger: return this.parseDebuggerStatement(node)
  case types._do: return this.parseDoStatement(node)
  case types._for: return this.parseForStatement(node)
  case types._function:
    if (!declaration && this.options.ecmaVersion >= 6) ***REMOVED*** this.unexpected(); ***REMOVED***
    return this.parseFunctionStatement(node, false)
  case types._class:
    if (!declaration) ***REMOVED*** this.unexpected(); ***REMOVED***
    return this.parseClass(node, true)
  case types._if: return this.parseIfStatement(node)
  case types._return: return this.parseReturnStatement(node)
  case types._switch: return this.parseSwitchStatement(node)
  case types._throw: return this.parseThrowStatement(node)
  case types._try: return this.parseTryStatement(node)
  case types._const: case types._var:
    kind = kind || this.value;
    if (!declaration && kind != "var") ***REMOVED*** this.unexpected(); ***REMOVED***
    return this.parseVarStatement(node, kind)
  case types._while: return this.parseWhileStatement(node)
  case types._with: return this.parseWithStatement(node)
  case types.braceL: return this.parseBlock()
  case types.semi: return this.parseEmptyStatement(node)
  case types._export:
  case types._import:
    if (!this.options.allowImportExportEverywhere) ***REMOVED***
      if (!topLevel)
        ***REMOVED*** this.raise(this.start, "'import' and 'export' may only appear at the top level"); ***REMOVED***
      if (!this.inModule)
        ***REMOVED*** this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); ***REMOVED***
    ***REMOVED***
    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)

    // If the statement does not start with a statement keyword or a
    // brace, it's an ExpressionStatement or LabeledStatement. We
    // simply start parsing an expression, and afterwards, if the
    // next token is a colon and the expression was a simple
    // Identifier node, we switch to interpreting it as a label.
  default:
    if (this.isAsyncFunction()) ***REMOVED***
      if (!declaration) ***REMOVED*** this.unexpected(); ***REMOVED***
      this.next();
      return this.parseFunctionStatement(node, true)
    ***REMOVED***

    var maybeName = this.value, expr = this.parseExpression();
    if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon))
      ***REMOVED*** return this.parseLabeledStatement(node, maybeName, expr) ***REMOVED***
    else ***REMOVED*** return this.parseExpressionStatement(node, expr) ***REMOVED***
  ***REMOVED***
***REMOVED***;

pp$1.parseBreakContinueStatement = function(node, keyword) ***REMOVED***
  var this$1 = this;

  var isBreak = keyword == "break";
  this.next();
  if (this.eat(types.semi) || this.insertSemicolon()) ***REMOVED*** node.label = null; ***REMOVED***
  else if (this.type !== types.name) ***REMOVED*** this.unexpected(); ***REMOVED***
  else ***REMOVED***
    node.label = this.parseIdent();
    this.semicolon();
  ***REMOVED***

  // Verify that there is an actual destination to break or
  // continue to.
  var i = 0;
  for (; i < this.labels.length; ++i) ***REMOVED***
    var lab = this$1.labels[i];
    if (node.label == null || lab.name === node.label.name) ***REMOVED***
      if (lab.kind != null && (isBreak || lab.kind === "loop")) ***REMOVED*** break ***REMOVED***
      if (node.label && isBreak) ***REMOVED*** break ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  if (i === this.labels.length) ***REMOVED*** this.raise(node.start, "Unsyntactic " + keyword); ***REMOVED***
  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
***REMOVED***;

pp$1.parseDebuggerStatement = function(node) ***REMOVED***
  this.next();
  this.semicolon();
  return this.finishNode(node, "DebuggerStatement")
***REMOVED***;

pp$1.parseDoStatement = function(node) ***REMOVED***
  this.next();
  this.labels.push(loopLabel);
  node.body = this.parseStatement(false);
  this.labels.pop();
  this.expect(types._while);
  node.test = this.parseParenExpression();
  if (this.options.ecmaVersion >= 6)
    ***REMOVED*** this.eat(types.semi); ***REMOVED***
  else
    ***REMOVED*** this.semicolon(); ***REMOVED***
  return this.finishNode(node, "DoWhileStatement")
***REMOVED***;

// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.

pp$1.parseForStatement = function(node) ***REMOVED***
  this.next();
  var awaitAt = (this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual("await")) ? this.lastTokStart : -1;
  this.labels.push(loopLabel);
  this.enterLexicalScope();
  this.expect(types.parenL);
  if (this.type === types.semi) ***REMOVED***
    if (awaitAt > -1) ***REMOVED*** this.unexpected(awaitAt); ***REMOVED***
    return this.parseFor(node, null)
  ***REMOVED***
  var isLet = this.isLet();
  if (this.type === types._var || this.type === types._const || isLet) ***REMOVED***
    var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
    this.next();
    this.parseVar(init$1, true, kind);
    this.finishNode(init$1, "VariableDeclaration");
    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1 &&
        !(kind !== "var" && init$1.declarations[0].init)) ***REMOVED***
      if (this.options.ecmaVersion >= 9) ***REMOVED***
        if (this.type === types._in) ***REMOVED***
          if (awaitAt > -1) ***REMOVED*** this.unexpected(awaitAt); ***REMOVED***
        ***REMOVED*** else ***REMOVED*** node.await = awaitAt > -1; ***REMOVED***
      ***REMOVED***
      return this.parseForIn(node, init$1)
    ***REMOVED***
    if (awaitAt > -1) ***REMOVED*** this.unexpected(awaitAt); ***REMOVED***
    return this.parseFor(node, init$1)
  ***REMOVED***
  var refDestructuringErrors = new DestructuringErrors;
  var init = this.parseExpression(true, refDestructuringErrors);
  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) ***REMOVED***
    if (this.options.ecmaVersion >= 9) ***REMOVED***
      if (this.type === types._in) ***REMOVED***
        if (awaitAt > -1) ***REMOVED*** this.unexpected(awaitAt); ***REMOVED***
      ***REMOVED*** else ***REMOVED*** node.await = awaitAt > -1; ***REMOVED***
    ***REMOVED***
    this.toAssignable(init, false, refDestructuringErrors);
    this.checkLVal(init);
    return this.parseForIn(node, init)
  ***REMOVED*** else ***REMOVED***
    this.checkExpressionErrors(refDestructuringErrors, true);
  ***REMOVED***
  if (awaitAt > -1) ***REMOVED*** this.unexpected(awaitAt); ***REMOVED***
  return this.parseFor(node, init)
***REMOVED***;

pp$1.parseFunctionStatement = function(node, isAsync) ***REMOVED***
  this.next();
  return this.parseFunction(node, true, false, isAsync)
***REMOVED***;

pp$1.parseIfStatement = function(node) ***REMOVED***
  this.next();
  node.test = this.parseParenExpression();
  // allow function declarations in branches, but only in non-strict mode
  node.consequent = this.parseStatement(!this.strict && this.type == types._function);
  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type == types._function) : null;
  return this.finishNode(node, "IfStatement")
***REMOVED***;

pp$1.parseReturnStatement = function(node) ***REMOVED***
  if (!this.inFunction && !this.options.allowReturnOutsideFunction)
    ***REMOVED*** this.raise(this.start, "'return' outside of function"); ***REMOVED***
  this.next();

  // In `return` (and `break`/`continue`), the keywords with
  // optional arguments, we eagerly look for a semicolon or the
  // possibility to insert one.

  if (this.eat(types.semi) || this.insertSemicolon()) ***REMOVED*** node.argument = null; ***REMOVED***
  else ***REMOVED*** node.argument = this.parseExpression(); this.semicolon(); ***REMOVED***
  return this.finishNode(node, "ReturnStatement")
***REMOVED***;

pp$1.parseSwitchStatement = function(node) ***REMOVED***
  var this$1 = this;

  this.next();
  node.discriminant = this.parseParenExpression();
  node.cases = [];
  this.expect(types.braceL);
  this.labels.push(switchLabel);
  this.enterLexicalScope();

  // Statements under must be grouped (by label) in SwitchCase
  // nodes. `cur` is used to keep the node that we are currently
  // adding statements to.

  var cur;
  for (var sawDefault = false; this.type != types.braceR;) ***REMOVED***
    if (this$1.type === types._case || this$1.type === types._default) ***REMOVED***
      var isCase = this$1.type === types._case;
      if (cur) ***REMOVED*** this$1.finishNode(cur, "SwitchCase"); ***REMOVED***
      node.cases.push(cur = this$1.startNode());
      cur.consequent = [];
      this$1.next();
      if (isCase) ***REMOVED***
        cur.test = this$1.parseExpression();
      ***REMOVED*** else ***REMOVED***
        if (sawDefault) ***REMOVED*** this$1.raiseRecoverable(this$1.lastTokStart, "Multiple default clauses"); ***REMOVED***
        sawDefault = true;
        cur.test = null;
      ***REMOVED***
      this$1.expect(types.colon);
    ***REMOVED*** else ***REMOVED***
      if (!cur) ***REMOVED*** this$1.unexpected(); ***REMOVED***
      cur.consequent.push(this$1.parseStatement(true));
    ***REMOVED***
  ***REMOVED***
  this.exitLexicalScope();
  if (cur) ***REMOVED*** this.finishNode(cur, "SwitchCase"); ***REMOVED***
  this.next(); // Closing brace
  this.labels.pop();
  return this.finishNode(node, "SwitchStatement")
***REMOVED***;

pp$1.parseThrowStatement = function(node) ***REMOVED***
  this.next();
  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
    ***REMOVED*** this.raise(this.lastTokEnd, "Illegal newline after throw"); ***REMOVED***
  node.argument = this.parseExpression();
  this.semicolon();
  return this.finishNode(node, "ThrowStatement")
***REMOVED***;

// Reused empty array added for node fields that are always empty.

var empty = [];

pp$1.parseTryStatement = function(node) ***REMOVED***
  this.next();
  node.block = this.parseBlock();
  node.handler = null;
  if (this.type === types._catch) ***REMOVED***
    var clause = this.startNode();
    this.next();
    this.expect(types.parenL);
    clause.param = this.parseBindingAtom();
    this.enterLexicalScope();
    this.checkLVal(clause.param, "let");
    this.expect(types.parenR);
    clause.body = this.parseBlock(false);
    this.exitLexicalScope();
    node.handler = this.finishNode(clause, "CatchClause");
  ***REMOVED***
  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
  if (!node.handler && !node.finalizer)
    ***REMOVED*** this.raise(node.start, "Missing catch or finally clause"); ***REMOVED***
  return this.finishNode(node, "TryStatement")
***REMOVED***;

pp$1.parseVarStatement = function(node, kind) ***REMOVED***
  this.next();
  this.parseVar(node, false, kind);
  this.semicolon();
  return this.finishNode(node, "VariableDeclaration")
***REMOVED***;

pp$1.parseWhileStatement = function(node) ***REMOVED***
  this.next();
  node.test = this.parseParenExpression();
  this.labels.push(loopLabel);
  node.body = this.parseStatement(false);
  this.labels.pop();
  return this.finishNode(node, "WhileStatement")
***REMOVED***;

pp$1.parseWithStatement = function(node) ***REMOVED***
  if (this.strict) ***REMOVED*** this.raise(this.start, "'with' in strict mode"); ***REMOVED***
  this.next();
  node.object = this.parseParenExpression();
  node.body = this.parseStatement(false);
  return this.finishNode(node, "WithStatement")
***REMOVED***;

pp$1.parseEmptyStatement = function(node) ***REMOVED***
  this.next();
  return this.finishNode(node, "EmptyStatement")
***REMOVED***;

pp$1.parseLabeledStatement = function(node, maybeName, expr) ***REMOVED***
  var this$1 = this;

  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)
    ***REMOVED***
    var label = list[i$1];

    if (label.name === maybeName)
      ***REMOVED*** this$1.raise(expr.start, "Label '" + maybeName + "' is already declared");
  ***REMOVED*** ***REMOVED***
  var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
  for (var i = this.labels.length - 1; i >= 0; i--) ***REMOVED***
    var label$1 = this$1.labels[i];
    if (label$1.statementStart == node.start) ***REMOVED***
      // Update information about previous labels on this node
      label$1.statementStart = this$1.start;
      label$1.kind = kind;
    ***REMOVED*** else ***REMOVED*** break ***REMOVED***
  ***REMOVED***
  this.labels.push(***REMOVED***name: maybeName, kind: kind, statementStart: this.start***REMOVED***);
  node.body = this.parseStatement(true);
  if (node.body.type == "ClassDeclaration" ||
      node.body.type == "VariableDeclaration" && node.body.kind != "var" ||
      node.body.type == "FunctionDeclaration" && (this.strict || node.body.generator))
    ***REMOVED*** this.raiseRecoverable(node.body.start, "Invalid labeled declaration"); ***REMOVED***
  this.labels.pop();
  node.label = expr;
  return this.finishNode(node, "LabeledStatement")
***REMOVED***;

pp$1.parseExpressionStatement = function(node, expr) ***REMOVED***
  node.expression = expr;
  this.semicolon();
  return this.finishNode(node, "ExpressionStatement")
***REMOVED***;

// Parse a semicolon-enclosed block of statements, handling `"use
// strict"` declarations when `allowStrict` is true (used for
// function bodies).

pp$1.parseBlock = function(createNewLexicalScope) ***REMOVED***
  var this$1 = this;
  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;

  var node = this.startNode();
  node.body = [];
  this.expect(types.braceL);
  if (createNewLexicalScope) ***REMOVED***
    this.enterLexicalScope();
  ***REMOVED***
  while (!this.eat(types.braceR)) ***REMOVED***
    var stmt = this$1.parseStatement(true);
    node.body.push(stmt);
  ***REMOVED***
  if (createNewLexicalScope) ***REMOVED***
    this.exitLexicalScope();
  ***REMOVED***
  return this.finishNode(node, "BlockStatement")
***REMOVED***;

// Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.

pp$1.parseFor = function(node, init) ***REMOVED***
  node.init = init;
  this.expect(types.semi);
  node.test = this.type === types.semi ? null : this.parseExpression();
  this.expect(types.semi);
  node.update = this.type === types.parenR ? null : this.parseExpression();
  this.expect(types.parenR);
  this.exitLexicalScope();
  node.body = this.parseStatement(false);
  this.labels.pop();
  return this.finishNode(node, "ForStatement")
***REMOVED***;

// Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.

pp$1.parseForIn = function(node, init) ***REMOVED***
  var type = this.type === types._in ? "ForInStatement" : "ForOfStatement";
  this.next();
  if (type == "ForInStatement") ***REMOVED***
    if (init.type === "AssignmentPattern" ||
      (init.type === "VariableDeclaration" && init.declarations[0].init != null &&
       (this.strict || init.declarations[0].id.type !== "Identifier")))
      ***REMOVED*** this.raise(init.start, "Invalid assignment in for-in loop head"); ***REMOVED***
  ***REMOVED***
  node.left = init;
  node.right = type == "ForInStatement" ? this.parseExpression() : this.parseMaybeAssign();
  this.expect(types.parenR);
  this.exitLexicalScope();
  node.body = this.parseStatement(false);
  this.labels.pop();
  return this.finishNode(node, type)
***REMOVED***;

// Parse a list of variable declarations.

pp$1.parseVar = function(node, isFor, kind) ***REMOVED***
  var this$1 = this;

  node.declarations = [];
  node.kind = kind;
  for (;;) ***REMOVED***
    var decl = this$1.startNode();
    this$1.parseVarId(decl, kind);
    if (this$1.eat(types.eq)) ***REMOVED***
      decl.init = this$1.parseMaybeAssign(isFor);
    ***REMOVED*** else if (kind === "const" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual("of")))) ***REMOVED***
      this$1.unexpected();
    ***REMOVED*** else if (decl.id.type != "Identifier" && !(isFor && (this$1.type === types._in || this$1.isContextual("of")))) ***REMOVED***
      this$1.raise(this$1.lastTokEnd, "Complex binding patterns require an initialization value");
    ***REMOVED*** else ***REMOVED***
      decl.init = null;
    ***REMOVED***
    node.declarations.push(this$1.finishNode(decl, "VariableDeclarator"));
    if (!this$1.eat(types.comma)) ***REMOVED*** break ***REMOVED***
  ***REMOVED***
  return node
***REMOVED***;

pp$1.parseVarId = function(decl, kind) ***REMOVED***
  decl.id = this.parseBindingAtom(kind);
  this.checkLVal(decl.id, kind, false);
***REMOVED***;

// Parse a function declaration or literal (depending on the
// `isStatement` parameter).

pp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) ***REMOVED***
  this.initFunction(node);
  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync)
    ***REMOVED*** node.generator = this.eat(types.star); ***REMOVED***
  if (this.options.ecmaVersion >= 8)
    ***REMOVED*** node.async = !!isAsync; ***REMOVED***

  if (isStatement) ***REMOVED***
    node.id = isStatement === "nullableID" && this.type != types.name ? null : this.parseIdent();
    if (node.id) ***REMOVED***
      this.checkLVal(node.id, "var");
    ***REMOVED***
  ***REMOVED***

  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,
      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;
  this.inGenerator = node.generator;
  this.inAsync = node.async;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.inFunction = true;
  this.enterFunctionScope();

  if (!isStatement)
    ***REMOVED*** node.id = this.type == types.name ? this.parseIdent() : null; ***REMOVED***

  this.parseFunctionParams(node);
  this.parseFunctionBody(node, allowExpressionBody);

  this.inGenerator = oldInGen;
  this.inAsync = oldInAsync;
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.inFunction = oldInFunc;
  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression")
***REMOVED***;

pp$1.parseFunctionParams = function(node) ***REMOVED***
  this.expect(types.parenL);
  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
***REMOVED***;

// Parse a class declaration or literal (depending on the
// `isStatement` parameter).

pp$1.parseClass = function(node, isStatement) ***REMOVED***
  var this$1 = this;

  this.next();

  this.parseClassId(node, isStatement);
  this.parseClassSuper(node);
  var classBody = this.startNode();
  var hadConstructor = false;
  classBody.body = [];
  this.expect(types.braceL);
  while (!this.eat(types.braceR)) ***REMOVED***
    var member = this$1.parseClassMember(classBody);
    if (member && member.type === "MethodDefinition" && member.kind === "constructor") ***REMOVED***
      if (hadConstructor) ***REMOVED*** this$1.raise(member.start, "Duplicate constructor in the same class"); ***REMOVED***
      hadConstructor = true;
    ***REMOVED***
  ***REMOVED***
  node.body = this.finishNode(classBody, "ClassBody");
  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
***REMOVED***;

pp$1.parseClassMember = function(classBody) ***REMOVED***
  var this$1 = this;

  if (this.eat(types.semi)) ***REMOVED*** return null ***REMOVED***

  var method = this.startNode();
  var tryContextual = function (k, noLineBreak) ***REMOVED***
    if ( noLineBreak === void 0 ) noLineBreak = false;

    var start = this$1.start, startLoc = this$1.startLoc;
    if (!this$1.eatContextual(k)) ***REMOVED*** return false ***REMOVED***
    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) ***REMOVED*** return true ***REMOVED***
    if (method.key) ***REMOVED*** this$1.unexpected(); ***REMOVED***
    method.computed = false;
    method.key = this$1.startNodeAt(start, startLoc);
    method.key.name = k;
    this$1.finishNode(method.key, "Identifier");
    return false
  ***REMOVED***;

  method.kind = "method";
  method.static = tryContextual("static");
  var isGenerator = this.eat(types.star);
  var isAsync = false;
  if (!isGenerator) ***REMOVED***
    if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) ***REMOVED***
      isAsync = true;
      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
    ***REMOVED*** else if (tryContextual("get")) ***REMOVED***
      method.kind = "get";
    ***REMOVED*** else if (tryContextual("set")) ***REMOVED***
      method.kind = "set";
    ***REMOVED***
  ***REMOVED***
  if (!method.key) ***REMOVED*** this.parsePropertyName(method); ***REMOVED***
  var key = method.key;
  if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" ||
      key.type === "Literal" && key.value === "constructor")) ***REMOVED***
    if (method.kind !== "method") ***REMOVED*** this.raise(key.start, "Constructor can't have get/set modifier"); ***REMOVED***
    if (isGenerator) ***REMOVED*** this.raise(key.start, "Constructor can't be a generator"); ***REMOVED***
    if (isAsync) ***REMOVED*** this.raise(key.start, "Constructor can't be an async method"); ***REMOVED***
    method.kind = "constructor";
  ***REMOVED*** else if (method.static && key.type === "Identifier" && key.name === "prototype") ***REMOVED***
    this.raise(key.start, "Classes may not have a static property named prototype");
  ***REMOVED***
  this.parseClassMethod(classBody, method, isGenerator, isAsync);
  if (method.kind === "get" && method.value.params.length !== 0)
    ***REMOVED*** this.raiseRecoverable(method.value.start, "getter should have no params"); ***REMOVED***
  if (method.kind === "set" && method.value.params.length !== 1)
    ***REMOVED*** this.raiseRecoverable(method.value.start, "setter should have exactly one param"); ***REMOVED***
  if (method.kind === "set" && method.value.params[0].type === "RestElement")
    ***REMOVED*** this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params"); ***REMOVED***
  return method
***REMOVED***;

pp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) ***REMOVED***
  method.value = this.parseMethod(isGenerator, isAsync);
  classBody.body.push(this.finishNode(method, "MethodDefinition"));
***REMOVED***;

pp$1.parseClassId = function(node, isStatement) ***REMOVED***
  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;
***REMOVED***;

pp$1.parseClassSuper = function(node) ***REMOVED***
  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
***REMOVED***;

// Parses module export declaration.

pp$1.parseExport = function(node, exports) ***REMOVED***
  var this$1 = this;

  this.next();
  // export * from '...'
  if (this.eat(types.star)) ***REMOVED***
    this.expectContextual("from");
    if (this.type !== types.string) ***REMOVED*** this.unexpected(); ***REMOVED***
    node.source = this.parseExprAtom();
    this.semicolon();
    return this.finishNode(node, "ExportAllDeclaration")
  ***REMOVED***
  if (this.eat(types._default)) ***REMOVED*** // export default ...
    this.checkExport(exports, "default", this.lastTokStart);
    var isAsync;
    if (this.type === types._function || (isAsync = this.isAsyncFunction())) ***REMOVED***
      var fNode = this.startNode();
      this.next();
      if (isAsync) ***REMOVED*** this.next(); ***REMOVED***
      node.declaration = this.parseFunction(fNode, "nullableID", false, isAsync);
    ***REMOVED*** else if (this.type === types._class) ***REMOVED***
      var cNode = this.startNode();
      node.declaration = this.parseClass(cNode, "nullableID");
    ***REMOVED*** else ***REMOVED***
      node.declaration = this.parseMaybeAssign();
      this.semicolon();
    ***REMOVED***
    return this.finishNode(node, "ExportDefaultDeclaration")
  ***REMOVED***
  // export var|const|let|function|class ...
  if (this.shouldParseExportStatement()) ***REMOVED***
    node.declaration = this.parseStatement(true);
    if (node.declaration.type === "VariableDeclaration")
      ***REMOVED*** this.checkVariableExport(exports, node.declaration.declarations); ***REMOVED***
    else
      ***REMOVED*** this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); ***REMOVED***
    node.specifiers = [];
    node.source = null;
  ***REMOVED*** else ***REMOVED*** // export ***REMOVED*** x, y as z ***REMOVED*** [from '...']
    node.declaration = null;
    node.specifiers = this.parseExportSpecifiers(exports);
    if (this.eatContextual("from")) ***REMOVED***
      if (this.type !== types.string) ***REMOVED*** this.unexpected(); ***REMOVED***
      node.source = this.parseExprAtom();
    ***REMOVED*** else ***REMOVED***
      // check for keywords used as local names
      for (var i = 0, list = node.specifiers; i < list.length; i += 1) ***REMOVED***
        var spec = list[i];

        this$1.checkUnreserved(spec.local);
      ***REMOVED***

      node.source = null;
    ***REMOVED***
    this.semicolon();
  ***REMOVED***
  return this.finishNode(node, "ExportNamedDeclaration")
***REMOVED***;

pp$1.checkExport = function(exports, name, pos) ***REMOVED***
  if (!exports) ***REMOVED*** return ***REMOVED***
  if (has(exports, name))
    ***REMOVED*** this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); ***REMOVED***
  exports[name] = true;
***REMOVED***;

pp$1.checkPatternExport = function(exports, pat) ***REMOVED***
  var this$1 = this;

  var type = pat.type;
  if (type == "Identifier")
    ***REMOVED*** this.checkExport(exports, pat.name, pat.start); ***REMOVED***
  else if (type == "ObjectPattern")
    ***REMOVED*** for (var i = 0, list = pat.properties; i < list.length; i += 1)
      ***REMOVED***
        var prop = list[i];

        this$1.checkPatternExport(exports, prop);
      ***REMOVED*** ***REMOVED***
  else if (type == "ArrayPattern")
    ***REMOVED*** for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) ***REMOVED***
      var elt = list$1[i$1];

        if (elt) ***REMOVED*** this$1.checkPatternExport(exports, elt); ***REMOVED***
    ***REMOVED*** ***REMOVED***
  else if (type == "Property")
    ***REMOVED*** this.checkPatternExport(exports, pat.value); ***REMOVED***
  else if (type == "AssignmentPattern")
    ***REMOVED*** this.checkPatternExport(exports, pat.left); ***REMOVED***
  else if (type == "RestElement")
    ***REMOVED*** this.checkPatternExport(exports, pat.argument); ***REMOVED***
  else if (type == "ParenthesizedExpression")
    ***REMOVED*** this.checkPatternExport(exports, pat.expression); ***REMOVED***
***REMOVED***;

pp$1.checkVariableExport = function(exports, decls) ***REMOVED***
  var this$1 = this;

  if (!exports) ***REMOVED*** return ***REMOVED***
  for (var i = 0, list = decls; i < list.length; i += 1)
    ***REMOVED***
    var decl = list[i];

    this$1.checkPatternExport(exports, decl.id);
  ***REMOVED***
***REMOVED***;

pp$1.shouldParseExportStatement = function() ***REMOVED***
  return this.type.keyword === "var" ||
    this.type.keyword === "const" ||
    this.type.keyword === "class" ||
    this.type.keyword === "function" ||
    this.isLet() ||
    this.isAsyncFunction()
***REMOVED***;

// Parses a comma-separated list of module exports.

pp$1.parseExportSpecifiers = function(exports) ***REMOVED***
  var this$1 = this;

  var nodes = [], first = true;
  // export ***REMOVED*** x, y as z ***REMOVED*** [from '...']
  this.expect(types.braceL);
  while (!this.eat(types.braceR)) ***REMOVED***
    if (!first) ***REMOVED***
      this$1.expect(types.comma);
      if (this$1.afterTrailingComma(types.braceR)) ***REMOVED*** break ***REMOVED***
    ***REMOVED*** else ***REMOVED*** first = false; ***REMOVED***

    var node = this$1.startNode();
    node.local = this$1.parseIdent(true);
    node.exported = this$1.eatContextual("as") ? this$1.parseIdent(true) : node.local;
    this$1.checkExport(exports, node.exported.name, node.exported.start);
    nodes.push(this$1.finishNode(node, "ExportSpecifier"));
  ***REMOVED***
  return nodes
***REMOVED***;

// Parses import declaration.

pp$1.parseImport = function(node) ***REMOVED***
  this.next();
  // import '...'
  if (this.type === types.string) ***REMOVED***
    node.specifiers = empty;
    node.source = this.parseExprAtom();
  ***REMOVED*** else ***REMOVED***
    node.specifiers = this.parseImportSpecifiers();
    this.expectContextual("from");
    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
  ***REMOVED***
  this.semicolon();
  return this.finishNode(node, "ImportDeclaration")
***REMOVED***;

// Parses a comma-separated list of module imports.

pp$1.parseImportSpecifiers = function() ***REMOVED***
  var this$1 = this;

  var nodes = [], first = true;
  if (this.type === types.name) ***REMOVED***
    // import defaultObj, ***REMOVED*** x, y as z ***REMOVED*** from '...'
    var node = this.startNode();
    node.local = this.parseIdent();
    this.checkLVal(node.local, "let");
    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
    if (!this.eat(types.comma)) ***REMOVED*** return nodes ***REMOVED***
  ***REMOVED***
  if (this.type === types.star) ***REMOVED***
    var node$1 = this.startNode();
    this.next();
    this.expectContextual("as");
    node$1.local = this.parseIdent();
    this.checkLVal(node$1.local, "let");
    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
    return nodes
  ***REMOVED***
  this.expect(types.braceL);
  while (!this.eat(types.braceR)) ***REMOVED***
    if (!first) ***REMOVED***
      this$1.expect(types.comma);
      if (this$1.afterTrailingComma(types.braceR)) ***REMOVED*** break ***REMOVED***
    ***REMOVED*** else ***REMOVED*** first = false; ***REMOVED***

    var node$2 = this$1.startNode();
    node$2.imported = this$1.parseIdent(true);
    if (this$1.eatContextual("as")) ***REMOVED***
      node$2.local = this$1.parseIdent();
    ***REMOVED*** else ***REMOVED***
      this$1.checkUnreserved(node$2.imported);
      node$2.local = node$2.imported;
    ***REMOVED***
    this$1.checkLVal(node$2.local, "let");
    nodes.push(this$1.finishNode(node$2, "ImportSpecifier"));
  ***REMOVED***
  return nodes
***REMOVED***;

// Set `ExpressionStatement#directive` property for directive prologues.
pp$1.adaptDirectivePrologue = function(statements) ***REMOVED***
  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) ***REMOVED***
    statements[i].directive = statements[i].expression.raw.slice(1, -1);
  ***REMOVED***
***REMOVED***;
pp$1.isDirectiveCandidate = function(statement) ***REMOVED***
  return (
    statement.type === "ExpressionStatement" &&
    statement.expression.type === "Literal" &&
    typeof statement.expression.value === "string" &&
    // Reject parenthesized strings.
    (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
  )
***REMOVED***;

var pp$2 = Parser.prototype;

// Convert existing expression atom to assignable pattern
// if possible.

pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) ***REMOVED***
  var this$1 = this;

  if (this.options.ecmaVersion >= 6 && node) ***REMOVED***
    switch (node.type) ***REMOVED***
    case "Identifier":
      if (this.inAsync && node.name === "await")
        ***REMOVED*** this.raise(node.start, "Can not use 'await' as identifier inside an async function"); ***REMOVED***
      break

    case "ObjectPattern":
    case "ArrayPattern":
    case "RestElement":
      break

    case "ObjectExpression":
      node.type = "ObjectPattern";
      if (refDestructuringErrors) ***REMOVED*** this.checkPatternErrors(refDestructuringErrors, true); ***REMOVED***
      for (var i = 0, list = node.properties; i < list.length; i += 1) ***REMOVED***
        var prop = list[i];

      this$1.toAssignable(prop, isBinding);
        // Early error:
        //   AssignmentRestProperty[Yield, Await] :
        //     `...` DestructuringAssignmentTarget[Yield, Await]
        //
        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
        if (
          prop.type === "RestElement" &&
          (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
        ) ***REMOVED***
          this$1.raise(prop.argument.start, "Unexpected token");
        ***REMOVED***
      ***REMOVED***
      break

    case "Property":
      // AssignmentProperty has type == "Property"
      if (node.kind !== "init") ***REMOVED*** this.raise(node.key.start, "Object pattern can't contain getter or setter"); ***REMOVED***
      this.toAssignable(node.value, isBinding);
      break

    case "ArrayExpression":
      node.type = "ArrayPattern";
      if (refDestructuringErrors) ***REMOVED*** this.checkPatternErrors(refDestructuringErrors, true); ***REMOVED***
      this.toAssignableList(node.elements, isBinding);
      break

    case "SpreadElement":
      node.type = "RestElement";
      this.toAssignable(node.argument, isBinding);
      if (node.argument.type === "AssignmentPattern")
        ***REMOVED*** this.raise(node.argument.start, "Rest elements cannot have a default value"); ***REMOVED***
      break

    case "AssignmentExpression":
      if (node.operator !== "=") ***REMOVED*** this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); ***REMOVED***
      node.type = "AssignmentPattern";
      delete node.operator;
      this.toAssignable(node.left, isBinding);
      // falls through to AssignmentPattern

    case "AssignmentPattern":
      break

    case "ParenthesizedExpression":
      this.toAssignable(node.expression, isBinding);
      break

    case "MemberExpression":
      if (!isBinding) ***REMOVED*** break ***REMOVED***

    default:
      this.raise(node.start, "Assigning to rvalue");
    ***REMOVED***
  ***REMOVED*** else if (refDestructuringErrors) ***REMOVED*** this.checkPatternErrors(refDestructuringErrors, true); ***REMOVED***
  return node
***REMOVED***;

// Convert list of expression atoms to binding list.

pp$2.toAssignableList = function(exprList, isBinding) ***REMOVED***
  var this$1 = this;

  var end = exprList.length;
  for (var i = 0; i < end; i++) ***REMOVED***
    var elt = exprList[i];
    if (elt) ***REMOVED*** this$1.toAssignable(elt, isBinding); ***REMOVED***
  ***REMOVED***
  if (end) ***REMOVED***
    var last = exprList[end - 1];
    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
      ***REMOVED*** this.unexpected(last.argument.start); ***REMOVED***
  ***REMOVED***
  return exprList
***REMOVED***;

// Parses spread element.

pp$2.parseSpread = function(refDestructuringErrors) ***REMOVED***
  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
  return this.finishNode(node, "SpreadElement")
***REMOVED***;

pp$2.parseRestBinding = function() ***REMOVED***
  var node = this.startNode();
  this.next();

  // RestElement inside of a function parameter must be an identifier
  if (this.options.ecmaVersion === 6 && this.type !== types.name)
    ***REMOVED*** this.unexpected(); ***REMOVED***

  node.argument = this.parseBindingAtom();

  return this.finishNode(node, "RestElement")
***REMOVED***;

// Parses lvalue (assignable) atom.

pp$2.parseBindingAtom = function() ***REMOVED***
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    switch (this.type) ***REMOVED***
    case types.bracketL:
      var node = this.startNode();
      this.next();
      node.elements = this.parseBindingList(types.bracketR, true, true);
      return this.finishNode(node, "ArrayPattern")

    case types.braceL:
      return this.parseObj(true)
    ***REMOVED***
  ***REMOVED***
  return this.parseIdent()
***REMOVED***;

pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) ***REMOVED***
  var this$1 = this;

  var elts = [], first = true;
  while (!this.eat(close)) ***REMOVED***
    if (first) ***REMOVED*** first = false; ***REMOVED***
    else ***REMOVED*** this$1.expect(types.comma); ***REMOVED***
    if (allowEmpty && this$1.type === types.comma) ***REMOVED***
      elts.push(null);
    ***REMOVED*** else if (allowTrailingComma && this$1.afterTrailingComma(close)) ***REMOVED***
      break
    ***REMOVED*** else if (this$1.type === types.ellipsis) ***REMOVED***
      var rest = this$1.parseRestBinding();
      this$1.parseBindingListItem(rest);
      elts.push(rest);
      if (this$1.type === types.comma) ***REMOVED*** this$1.raise(this$1.start, "Comma is not permitted after the rest element"); ***REMOVED***
      this$1.expect(close);
      break
    ***REMOVED*** else ***REMOVED***
      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);
      this$1.parseBindingListItem(elem);
      elts.push(elem);
    ***REMOVED***
  ***REMOVED***
  return elts
***REMOVED***;

pp$2.parseBindingListItem = function(param) ***REMOVED***
  return param
***REMOVED***;

// Parses assignment pattern around given atom if possible.

pp$2.parseMaybeDefault = function(startPos, startLoc, left) ***REMOVED***
  left = left || this.parseBindingAtom();
  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) ***REMOVED*** return left ***REMOVED***
  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.right = this.parseMaybeAssign();
  return this.finishNode(node, "AssignmentPattern")
***REMOVED***;

// Verify that a node is an lval — something that can be assigned
// to.
// bindingType can be either:
// 'var' indicating that the lval creates a 'var' binding
// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references

pp$2.checkLVal = function(expr, bindingType, checkClashes) ***REMOVED***
  var this$1 = this;

  switch (expr.type) ***REMOVED***
  case "Identifier":
    if (this.strict && this.reservedWordsStrictBind.test(expr.name))
      ***REMOVED*** this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); ***REMOVED***
    if (checkClashes) ***REMOVED***
      if (has(checkClashes, expr.name))
        ***REMOVED*** this.raiseRecoverable(expr.start, "Argument name clash"); ***REMOVED***
      checkClashes[expr.name] = true;
    ***REMOVED***
    if (bindingType && bindingType !== "none") ***REMOVED***
      if (
        bindingType === "var" && !this.canDeclareVarName(expr.name) ||
        bindingType !== "var" && !this.canDeclareLexicalName(expr.name)
      ) ***REMOVED***
        this.raiseRecoverable(expr.start, ("Identifier '" + (expr.name) + "' has already been declared"));
      ***REMOVED***
      if (bindingType === "var") ***REMOVED***
        this.declareVarName(expr.name);
      ***REMOVED*** else ***REMOVED***
        this.declareLexicalName(expr.name);
      ***REMOVED***
    ***REMOVED***
    break

  case "MemberExpression":
    if (bindingType) ***REMOVED*** this.raiseRecoverable(expr.start, "Binding member expression"); ***REMOVED***
    break

  case "ObjectPattern":
    for (var i = 0, list = expr.properties; i < list.length; i += 1)
      ***REMOVED***
    var prop = list[i];

    this$1.checkLVal(prop, bindingType, checkClashes);
  ***REMOVED***
    break

  case "Property":
    // AssignmentProperty has type == "Property"
    this.checkLVal(expr.value, bindingType, checkClashes);
    break

  case "ArrayPattern":
    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) ***REMOVED***
      var elem = list$1[i$1];

    if (elem) ***REMOVED*** this$1.checkLVal(elem, bindingType, checkClashes); ***REMOVED***
    ***REMOVED***
    break

  case "AssignmentPattern":
    this.checkLVal(expr.left, bindingType, checkClashes);
    break

  case "RestElement":
    this.checkLVal(expr.argument, bindingType, checkClashes);
    break

  case "ParenthesizedExpression":
    this.checkLVal(expr.expression, bindingType, checkClashes);
    break

  default:
    this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
  ***REMOVED***
***REMOVED***;

// A recursive descent parser operates by defining functions for all
// syntactic elements, and recursively calling those, each function
// advancing the input stream and returning an AST node. Precedence
// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
// instead of `(!x)[1]` is handled by the fact that the parser
// function that parses unary prefix operators is called first, and
// in turn calls the function that parses `[]` subscripts — that
// way, it'll receive the node for `x[1]` already parsed, and wraps
// *that* in the unary operator node.
//
// Acorn uses an [operator precedence parser][opp] to handle binary
// operator precedence, because it is much more compact than using
// the technique outlined above, which uses different, nesting
// functions to specify precedence, for all of the ten binary
// precedence levels that JavaScript defines.
//
// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

var pp$3 = Parser.prototype;

// Check if property name clashes with already added.
// Object/class getters and setters are not allowed to clash —
// either with each other or with an init property — and in
// strict mode, init properties are also not allowed to be repeated.

pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) ***REMOVED***
  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
    ***REMOVED*** return ***REMOVED***
  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
    ***REMOVED*** return ***REMOVED***
  var key = prop.key;
  var name;
  switch (key.type) ***REMOVED***
  case "Identifier": name = key.name; break
  case "Literal": name = String(key.value); break
  default: return
  ***REMOVED***
  var kind = prop.kind;
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    if (name === "__proto__" && kind === "init") ***REMOVED***
      if (propHash.proto) ***REMOVED***
        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) ***REMOVED*** refDestructuringErrors.doubleProto = key.start; ***REMOVED***
        // Backwards-compat kludge. Can be removed in version 6.0
        else ***REMOVED*** this.raiseRecoverable(key.start, "Redefinition of __proto__ property"); ***REMOVED***
      ***REMOVED***
      propHash.proto = true;
    ***REMOVED***
    return
  ***REMOVED***
  name = "$" + name;
  var other = propHash[name];
  if (other) ***REMOVED***
    var redefinition;
    if (kind === "init") ***REMOVED***
      redefinition = this.strict && other.init || other.get || other.set;
    ***REMOVED*** else ***REMOVED***
      redefinition = other.init || other[kind];
    ***REMOVED***
    if (redefinition)
      ***REMOVED*** this.raiseRecoverable(key.start, "Redefinition of property"); ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    other = propHash[name] = ***REMOVED***
      init: false,
      get: false,
      set: false
    ***REMOVED***;
  ***REMOVED***
  other[kind] = true;
***REMOVED***;

// ### Expression parsing

// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function(s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.

// Parse a full expression. The optional arguments are used to
// forbid the `in` operator (in for loops initalization expressions)
// and provide reference for storing '=' operator inside shorthand
// property assignment in contexts where both object expression
// and object pattern might appear (so it's possible to raise
// delayed syntax error at correct position).

pp$3.parseExpression = function(noIn, refDestructuringErrors) ***REMOVED***
  var this$1 = this;

  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
  if (this.type === types.comma) ***REMOVED***
    var node = this.startNodeAt(startPos, startLoc);
    node.expressions = [expr];
    while (this.eat(types.comma)) ***REMOVED*** node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); ***REMOVED***
    return this.finishNode(node, "SequenceExpression")
  ***REMOVED***
  return expr
***REMOVED***;

// Parse an assignment expression. This includes applications of
// operators like `+=`.

pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) ***REMOVED***
  if (this.inGenerator && this.isContextual("yield")) ***REMOVED*** return this.parseYield() ***REMOVED***

  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
  if (refDestructuringErrors) ***REMOVED***
    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
    oldTrailingComma = refDestructuringErrors.trailingComma;
    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
  ***REMOVED*** else ***REMOVED***
    refDestructuringErrors = new DestructuringErrors;
    ownDestructuringErrors = true;
  ***REMOVED***

  var startPos = this.start, startLoc = this.startLoc;
  if (this.type == types.parenL || this.type == types.name)
    ***REMOVED*** this.potentialArrowAt = this.start; ***REMOVED***
  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
  if (afterLeftParse) ***REMOVED*** left = afterLeftParse.call(this, left, startPos, startLoc); ***REMOVED***
  if (this.type.isAssign) ***REMOVED***
    var node = this.startNodeAt(startPos, startLoc);
    node.operator = this.value;
    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
    if (!ownDestructuringErrors) ***REMOVED*** DestructuringErrors.call(refDestructuringErrors); ***REMOVED***
    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly
    this.checkLVal(left);
    this.next();
    node.right = this.parseMaybeAssign(noIn);
    return this.finishNode(node, "AssignmentExpression")
  ***REMOVED*** else ***REMOVED***
    if (ownDestructuringErrors) ***REMOVED*** this.checkExpressionErrors(refDestructuringErrors, true); ***REMOVED***
  ***REMOVED***
  if (oldParenAssign > -1) ***REMOVED*** refDestructuringErrors.parenthesizedAssign = oldParenAssign; ***REMOVED***
  if (oldTrailingComma > -1) ***REMOVED*** refDestructuringErrors.trailingComma = oldTrailingComma; ***REMOVED***
  return left
***REMOVED***;

// Parse a ternary conditional (`?:`) operator.

pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) ***REMOVED***
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprOps(noIn, refDestructuringErrors);
  if (this.checkExpressionErrors(refDestructuringErrors)) ***REMOVED*** return expr ***REMOVED***
  if (this.eat(types.question)) ***REMOVED***
    var node = this.startNodeAt(startPos, startLoc);
    node.test = expr;
    node.consequent = this.parseMaybeAssign();
    this.expect(types.colon);
    node.alternate = this.parseMaybeAssign(noIn);
    return this.finishNode(node, "ConditionalExpression")
  ***REMOVED***
  return expr
***REMOVED***;

// Start the precedence parser.

pp$3.parseExprOps = function(noIn, refDestructuringErrors) ***REMOVED***
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeUnary(refDestructuringErrors, false);
  if (this.checkExpressionErrors(refDestructuringErrors)) ***REMOVED*** return expr ***REMOVED***
  return expr.start == startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)
***REMOVED***;

// Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.

pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) ***REMOVED***
  var prec = this.type.binop;
  if (prec != null && (!noIn || this.type !== types._in)) ***REMOVED***
    if (prec > minPrec) ***REMOVED***
      var logical = this.type === types.logicalOR || this.type === types.logicalAND;
      var op = this.value;
      this.next();
      var startPos = this.start, startLoc = this.startLoc;
      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)
    ***REMOVED***
  ***REMOVED***
  return left
***REMOVED***;

pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) ***REMOVED***
  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.operator = op;
  node.right = right;
  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
***REMOVED***;

// Parse unary operators, both prefix and postfix.

pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) ***REMOVED***
  var this$1 = this;

  var startPos = this.start, startLoc = this.startLoc, expr;
  if (this.inAsync && this.isContextual("await")) ***REMOVED***
    expr = this.parseAwait();
    sawUnary = true;
  ***REMOVED*** else if (this.type.prefix) ***REMOVED***
    var node = this.startNode(), update = this.type === types.incDec;
    node.operator = this.value;
    node.prefix = true;
    this.next();
    node.argument = this.parseMaybeUnary(null, true);
    this.checkExpressionErrors(refDestructuringErrors, true);
    if (update) ***REMOVED*** this.checkLVal(node.argument); ***REMOVED***
    else if (this.strict && node.operator === "delete" &&
             node.argument.type === "Identifier")
      ***REMOVED*** this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); ***REMOVED***
    else ***REMOVED*** sawUnary = true; ***REMOVED***
    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
  ***REMOVED*** else ***REMOVED***
    expr = this.parseExprSubscripts(refDestructuringErrors);
    if (this.checkExpressionErrors(refDestructuringErrors)) ***REMOVED*** return expr ***REMOVED***
    while (this.type.postfix && !this.canInsertSemicolon()) ***REMOVED***
      var node$1 = this$1.startNodeAt(startPos, startLoc);
      node$1.operator = this$1.value;
      node$1.prefix = false;
      node$1.argument = expr;
      this$1.checkLVal(expr);
      this$1.next();
      expr = this$1.finishNode(node$1, "UpdateExpression");
    ***REMOVED***
  ***REMOVED***

  if (!sawUnary && this.eat(types.starstar))
    ***REMOVED*** return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false) ***REMOVED***
  else
    ***REMOVED*** return expr ***REMOVED***
***REMOVED***;

// Parse call, dot, and `[]`-subscript expressions.

pp$3.parseExprSubscripts = function(refDestructuringErrors) ***REMOVED***
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprAtom(refDestructuringErrors);
  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) ***REMOVED*** return expr ***REMOVED***
  var result = this.parseSubscripts(expr, startPos, startLoc);
  if (refDestructuringErrors && result.type === "MemberExpression") ***REMOVED***
    if (refDestructuringErrors.parenthesizedAssign >= result.start) ***REMOVED*** refDestructuringErrors.parenthesizedAssign = -1; ***REMOVED***
    if (refDestructuringErrors.parenthesizedBind >= result.start) ***REMOVED*** refDestructuringErrors.parenthesizedBind = -1; ***REMOVED***
  ***REMOVED***
  return result
***REMOVED***;

pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) ***REMOVED***
  var this$1 = this;

  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
      this.lastTokEnd == base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";
  for (var computed = (void 0);;) ***REMOVED***
    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) ***REMOVED***
      var node = this$1.startNodeAt(startPos, startLoc);
      node.object = base;
      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);
      node.computed = !!computed;
      if (computed) ***REMOVED*** this$1.expect(types.bracketR); ***REMOVED***
      base = this$1.finishNode(node, "MemberExpression");
    ***REMOVED*** else if (!noCalls && this$1.eat(types.parenL)) ***REMOVED***
      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;
      this$1.yieldPos = 0;
      this$1.awaitPos = 0;
      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);
      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) ***REMOVED***
        this$1.checkPatternErrors(refDestructuringErrors, false);
        this$1.checkYieldAwaitInDefaultParams();
        this$1.yieldPos = oldYieldPos;
        this$1.awaitPos = oldAwaitPos;
        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)
      ***REMOVED***
      this$1.checkExpressionErrors(refDestructuringErrors, true);
      this$1.yieldPos = oldYieldPos || this$1.yieldPos;
      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;
      var node$1 = this$1.startNodeAt(startPos, startLoc);
      node$1.callee = base;
      node$1.arguments = exprList;
      base = this$1.finishNode(node$1, "CallExpression");
    ***REMOVED*** else if (this$1.type === types.backQuote) ***REMOVED***
      var node$2 = this$1.startNodeAt(startPos, startLoc);
      node$2.tag = base;
      node$2.quasi = this$1.parseTemplate(***REMOVED***isTagged: true***REMOVED***);
      base = this$1.finishNode(node$2, "TaggedTemplateExpression");
    ***REMOVED*** else ***REMOVED***
      return base
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

// Parse an atomic expression — either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `***REMOVED******REMOVED***`.

pp$3.parseExprAtom = function(refDestructuringErrors) ***REMOVED***
  var node, canBeArrow = this.potentialArrowAt == this.start;
  switch (this.type) ***REMOVED***
  case types._super:
    if (!this.inFunction)
      ***REMOVED*** this.raise(this.start, "'super' outside of function or class"); ***REMOVED***
    node = this.startNode();
    this.next();
    // The `super` keyword can appear at below:
    // SuperProperty:
    //     super [ Expression ]
    //     super . IdentifierName
    // SuperCall:
    //     super Arguments
    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)
      ***REMOVED*** this.unexpected(); ***REMOVED***
    return this.finishNode(node, "Super")

  case types._this:
    node = this.startNode();
    this.next();
    return this.finishNode(node, "ThisExpression")

  case types.name:
    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
    var id = this.parseIdent(this.type !== types.name);
    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function))
      ***REMOVED*** return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true) ***REMOVED***
    if (canBeArrow && !this.canInsertSemicolon()) ***REMOVED***
      if (this.eat(types.arrow))
        ***REMOVED*** return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) ***REMOVED***
      if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) ***REMOVED***
        id = this.parseIdent();
        if (this.canInsertSemicolon() || !this.eat(types.arrow))
          ***REMOVED*** this.unexpected(); ***REMOVED***
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)
      ***REMOVED***
    ***REMOVED***
    return id

  case types.regexp:
    var value = this.value;
    node = this.parseLiteral(value.value);
    node.regex = ***REMOVED***pattern: value.pattern, flags: value.flags***REMOVED***;
    return node

  case types.num: case types.string:
    return this.parseLiteral(this.value)

  case types._null: case types._true: case types._false:
    node = this.startNode();
    node.value = this.type === types._null ? null : this.type === types._true;
    node.raw = this.type.keyword;
    this.next();
    return this.finishNode(node, "Literal")

  case types.parenL:
    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
    if (refDestructuringErrors) ***REMOVED***
      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
        ***REMOVED*** refDestructuringErrors.parenthesizedAssign = start; ***REMOVED***
      if (refDestructuringErrors.parenthesizedBind < 0)
        ***REMOVED*** refDestructuringErrors.parenthesizedBind = start; ***REMOVED***
    ***REMOVED***
    return expr

  case types.bracketL:
    node = this.startNode();
    this.next();
    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
    return this.finishNode(node, "ArrayExpression")

  case types.braceL:
    return this.parseObj(false, refDestructuringErrors)

  case types._function:
    node = this.startNode();
    this.next();
    return this.parseFunction(node, false)

  case types._class:
    return this.parseClass(this.startNode(), false)

  case types._new:
    return this.parseNew()

  case types.backQuote:
    return this.parseTemplate()

  default:
    this.unexpected();
  ***REMOVED***
***REMOVED***;

pp$3.parseLiteral = function(value) ***REMOVED***
  var node = this.startNode();
  node.value = value;
  node.raw = this.input.slice(this.start, this.end);
  this.next();
  return this.finishNode(node, "Literal")
***REMOVED***;

pp$3.parseParenExpression = function() ***REMOVED***
  this.expect(types.parenL);
  var val = this.parseExpression();
  this.expect(types.parenR);
  return val
***REMOVED***;

pp$3.parseParenAndDistinguishExpression = function(canBeArrow) ***REMOVED***
  var this$1 = this;

  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    this.next();

    var innerStartPos = this.start, innerStartLoc = this.startLoc;
    var exprList = [], first = true, lastIsComma = false;
    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
    this.yieldPos = 0;
    this.awaitPos = 0;
    while (this.type !== types.parenR) ***REMOVED***
      first ? first = false : this$1.expect(types.comma);
      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) ***REMOVED***
        lastIsComma = true;
        break
      ***REMOVED*** else if (this$1.type === types.ellipsis) ***REMOVED***
        spreadStart = this$1.start;
        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));
        if (this$1.type === types.comma) ***REMOVED*** this$1.raise(this$1.start, "Comma is not permitted after the rest element"); ***REMOVED***
        break
      ***REMOVED*** else ***REMOVED***
        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));
      ***REMOVED***
    ***REMOVED***
    var innerEndPos = this.start, innerEndLoc = this.startLoc;
    this.expect(types.parenR);

    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) ***REMOVED***
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      return this.parseParenArrowList(startPos, startLoc, exprList)
    ***REMOVED***

    if (!exprList.length || lastIsComma) ***REMOVED*** this.unexpected(this.lastTokStart); ***REMOVED***
    if (spreadStart) ***REMOVED*** this.unexpected(spreadStart); ***REMOVED***
    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;

    if (exprList.length > 1) ***REMOVED***
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
    ***REMOVED*** else ***REMOVED***
      val = exprList[0];
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    val = this.parseParenExpression();
  ***REMOVED***

  if (this.options.preserveParens) ***REMOVED***
    var par = this.startNodeAt(startPos, startLoc);
    par.expression = val;
    return this.finishNode(par, "ParenthesizedExpression")
  ***REMOVED*** else ***REMOVED***
    return val
  ***REMOVED***
***REMOVED***;

pp$3.parseParenItem = function(item) ***REMOVED***
  return item
***REMOVED***;

pp$3.parseParenArrowList = function(startPos, startLoc, exprList) ***REMOVED***
  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)
***REMOVED***;

// New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call — at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.

var empty$1 = [];

pp$3.parseNew = function() ***REMOVED***
  var node = this.startNode();
  var meta = this.parseIdent(true);
  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) ***REMOVED***
    node.meta = meta;
    var containsEsc = this.containsEsc;
    node.property = this.parseIdent(true);
    if (node.property.name !== "target" || containsEsc)
      ***REMOVED*** this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target"); ***REMOVED***
    if (!this.inFunction)
      ***REMOVED*** this.raiseRecoverable(node.start, "new.target can only be used in functions"); ***REMOVED***
    return this.finishNode(node, "MetaProperty")
  ***REMOVED***
  var startPos = this.start, startLoc = this.startLoc;
  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
  if (this.eat(types.parenL)) ***REMOVED*** node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); ***REMOVED***
  else ***REMOVED*** node.arguments = empty$1; ***REMOVED***
  return this.finishNode(node, "NewExpression")
***REMOVED***;

// Parse template expression.

pp$3.parseTemplateElement = function(ref) ***REMOVED***
  var isTagged = ref.isTagged;

  var elem = this.startNode();
  if (this.type === types.invalidTemplate) ***REMOVED***
    if (!isTagged) ***REMOVED***
      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
    ***REMOVED***
    elem.value = ***REMOVED***
      raw: this.value,
      cooked: null
    ***REMOVED***;
  ***REMOVED*** else ***REMOVED***
    elem.value = ***REMOVED***
      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
      cooked: this.value
    ***REMOVED***;
  ***REMOVED***
  this.next();
  elem.tail = this.type === types.backQuote;
  return this.finishNode(elem, "TemplateElement")
***REMOVED***;

pp$3.parseTemplate = function(ref) ***REMOVED***
  var this$1 = this;
  if ( ref === void 0 ) ref = ***REMOVED******REMOVED***;
  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;

  var node = this.startNode();
  this.next();
  node.expressions = [];
  var curElt = this.parseTemplateElement(***REMOVED***isTagged: isTagged***REMOVED***);
  node.quasis = [curElt];
  while (!curElt.tail) ***REMOVED***
    this$1.expect(types.dollarBraceL);
    node.expressions.push(this$1.parseExpression());
    this$1.expect(types.braceR);
    node.quasis.push(curElt = this$1.parseTemplateElement(***REMOVED***isTagged: isTagged***REMOVED***));
  ***REMOVED***
  this.next();
  return this.finishNode(node, "TemplateLiteral")
***REMOVED***;

pp$3.isAsyncProp = function(prop) ***REMOVED***
  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&
    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
***REMOVED***;

// Parse an object literal or binding pattern.

pp$3.parseObj = function(isPattern, refDestructuringErrors) ***REMOVED***
  var this$1 = this;

  var node = this.startNode(), first = true, propHash = ***REMOVED******REMOVED***;
  node.properties = [];
  this.next();
  while (!this.eat(types.braceR)) ***REMOVED***
    if (!first) ***REMOVED***
      this$1.expect(types.comma);
      if (this$1.afterTrailingComma(types.braceR)) ***REMOVED*** break ***REMOVED***
    ***REMOVED*** else ***REMOVED*** first = false; ***REMOVED***

    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);
    if (!isPattern) ***REMOVED*** this$1.checkPropClash(prop, propHash, refDestructuringErrors); ***REMOVED***
    node.properties.push(prop);
  ***REMOVED***
  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
***REMOVED***;

pp$3.parseProperty = function(isPattern, refDestructuringErrors) ***REMOVED***
  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) ***REMOVED***
    if (isPattern) ***REMOVED***
      prop.argument = this.parseIdent(false);
      if (this.type === types.comma) ***REMOVED***
        this.raise(this.start, "Comma is not permitted after the rest element");
      ***REMOVED***
      return this.finishNode(prop, "RestElement")
    ***REMOVED***
    // To disallow parenthesized identifier via `this.toAssignable()`.
    if (this.type === types.parenL && refDestructuringErrors) ***REMOVED***
      if (refDestructuringErrors.parenthesizedAssign < 0) ***REMOVED***
        refDestructuringErrors.parenthesizedAssign = this.start;
      ***REMOVED***
      if (refDestructuringErrors.parenthesizedBind < 0) ***REMOVED***
        refDestructuringErrors.parenthesizedBind = this.start;
      ***REMOVED***
    ***REMOVED***
    // Parse argument.
    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
    // To disallow trailing comma via `this.toAssignable()`.
    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) ***REMOVED***
      refDestructuringErrors.trailingComma = this.start;
    ***REMOVED***
    // Finish
    return this.finishNode(prop, "SpreadElement")
  ***REMOVED***
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    prop.method = false;
    prop.shorthand = false;
    if (isPattern || refDestructuringErrors) ***REMOVED***
      startPos = this.start;
      startLoc = this.startLoc;
    ***REMOVED***
    if (!isPattern)
      ***REMOVED*** isGenerator = this.eat(types.star); ***REMOVED***
  ***REMOVED***
  var containsEsc = this.containsEsc;
  this.parsePropertyName(prop);
  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) ***REMOVED***
    isAsync = true;
    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
    this.parsePropertyName(prop, refDestructuringErrors);
  ***REMOVED*** else ***REMOVED***
    isAsync = false;
  ***REMOVED***
  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
  return this.finishNode(prop, "Property")
***REMOVED***;

pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) ***REMOVED***
  if ((isGenerator || isAsync) && this.type === types.colon)
    ***REMOVED*** this.unexpected(); ***REMOVED***

  if (this.eat(types.colon)) ***REMOVED***
    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
    prop.kind = "init";
  ***REMOVED*** else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) ***REMOVED***
    if (isPattern) ***REMOVED*** this.unexpected(); ***REMOVED***
    prop.kind = "init";
    prop.method = true;
    prop.value = this.parseMethod(isGenerator, isAsync);
  ***REMOVED*** else if (!isPattern && !containsEsc &&
             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
             (prop.key.name === "get" || prop.key.name === "set") &&
             (this.type != types.comma && this.type != types.braceR)) ***REMOVED***
    if (isGenerator || isAsync) ***REMOVED*** this.unexpected(); ***REMOVED***
    prop.kind = prop.key.name;
    this.parsePropertyName(prop);
    prop.value = this.parseMethod(false);
    var paramCount = prop.kind === "get" ? 0 : 1;
    if (prop.value.params.length !== paramCount) ***REMOVED***
      var start = prop.value.start;
      if (prop.kind === "get")
        ***REMOVED*** this.raiseRecoverable(start, "getter should have no params"); ***REMOVED***
      else
        ***REMOVED*** this.raiseRecoverable(start, "setter should have exactly one param"); ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
        ***REMOVED*** this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") ***REMOVED***
    this.checkUnreserved(prop.key);
    prop.kind = "init";
    if (isPattern) ***REMOVED***
      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
    ***REMOVED*** else if (this.type === types.eq && refDestructuringErrors) ***REMOVED***
      if (refDestructuringErrors.shorthandAssign < 0)
        ***REMOVED*** refDestructuringErrors.shorthandAssign = this.start; ***REMOVED***
      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
    ***REMOVED*** else ***REMOVED***
      prop.value = prop.key;
    ***REMOVED***
    prop.shorthand = true;
  ***REMOVED*** else ***REMOVED*** this.unexpected(); ***REMOVED***
***REMOVED***;

pp$3.parsePropertyName = function(prop) ***REMOVED***
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    if (this.eat(types.bracketL)) ***REMOVED***
      prop.computed = true;
      prop.key = this.parseMaybeAssign();
      this.expect(types.bracketR);
      return prop.key
    ***REMOVED*** else ***REMOVED***
      prop.computed = false;
    ***REMOVED***
  ***REMOVED***
  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)
***REMOVED***;

// Initialize empty function node.

pp$3.initFunction = function(node) ***REMOVED***
  node.id = null;
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    node.generator = false;
    node.expression = false;
  ***REMOVED***
  if (this.options.ecmaVersion >= 8)
    ***REMOVED*** node.async = false; ***REMOVED***
***REMOVED***;

// Parse object or class method.

pp$3.parseMethod = function(isGenerator, isAsync) ***REMOVED***
  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,
      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;

  this.initFunction(node);
  if (this.options.ecmaVersion >= 6)
    ***REMOVED*** node.generator = isGenerator; ***REMOVED***
  if (this.options.ecmaVersion >= 8)
    ***REMOVED*** node.async = !!isAsync; ***REMOVED***

  this.inGenerator = node.generator;
  this.inAsync = node.async;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.inFunction = true;
  this.enterFunctionScope();

  this.expect(types.parenL);
  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
  this.parseFunctionBody(node, false);

  this.inGenerator = oldInGen;
  this.inAsync = oldInAsync;
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.inFunction = oldInFunc;
  return this.finishNode(node, "FunctionExpression")
***REMOVED***;

// Parse arrow function expression with given parameters.

pp$3.parseArrowExpression = function(node, params, isAsync) ***REMOVED***
  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,
      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;

  this.enterFunctionScope();
  this.initFunction(node);
  if (this.options.ecmaVersion >= 8)
    ***REMOVED*** node.async = !!isAsync; ***REMOVED***

  this.inGenerator = false;
  this.inAsync = node.async;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.inFunction = true;

  node.params = this.toAssignableList(params, true);
  this.parseFunctionBody(node, true);

  this.inGenerator = oldInGen;
  this.inAsync = oldInAsync;
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.inFunction = oldInFunc;
  return this.finishNode(node, "ArrowFunctionExpression")
***REMOVED***;

// Parse function body and check parameters.

pp$3.parseFunctionBody = function(node, isArrowFunction) ***REMOVED***
  var isExpression = isArrowFunction && this.type !== types.braceL;
  var oldStrict = this.strict, useStrict = false;

  if (isExpression) ***REMOVED***
    node.body = this.parseMaybeAssign();
    node.expression = true;
    this.checkParams(node, false);
  ***REMOVED*** else ***REMOVED***
    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
    if (!oldStrict || nonSimple) ***REMOVED***
      useStrict = this.strictDirective(this.end);
      // If this is a strict mode function, verify that argument names
      // are not repeated, and it does not try to bind the words `eval`
      // or `arguments`.
      if (useStrict && nonSimple)
        ***REMOVED*** this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); ***REMOVED***
    ***REMOVED***
    // Start a new scope with regard to labels and the `inFunction`
    // flag (restore them to their old value afterwards).
    var oldLabels = this.labels;
    this.labels = [];
    if (useStrict) ***REMOVED*** this.strict = true; ***REMOVED***

    // Add the params to varDeclaredNames to ensure that an error is thrown
    // if a let/const declaration in the function clashes with one of the params.
    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));
    node.body = this.parseBlock(false);
    node.expression = false;
    this.adaptDirectivePrologue(node.body.body);
    this.labels = oldLabels;
  ***REMOVED***
  this.exitFunctionScope();

  if (this.strict && node.id) ***REMOVED***
    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
    this.checkLVal(node.id, "none");
  ***REMOVED***
  this.strict = oldStrict;
***REMOVED***;

pp$3.isSimpleParamList = function(params) ***REMOVED***
  for (var i = 0, list = params; i < list.length; i += 1)
    ***REMOVED***
    var param = list[i];

    if (param.type !== "Identifier") ***REMOVED*** return false
  ***REMOVED*** ***REMOVED***
  return true
***REMOVED***;

// Checks function params for various disallowed patterns such as using "eval"
// or "arguments" and duplicate parameters.

pp$3.checkParams = function(node, allowDuplicates) ***REMOVED***
  var this$1 = this;

  var nameHash = ***REMOVED******REMOVED***;
  for (var i = 0, list = node.params; i < list.length; i += 1)
    ***REMOVED***
    var param = list[i];

    this$1.checkLVal(param, "var", allowDuplicates ? null : nameHash);
  ***REMOVED***
***REMOVED***;

// Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).

pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) ***REMOVED***
  var this$1 = this;

  var elts = [], first = true;
  while (!this.eat(close)) ***REMOVED***
    if (!first) ***REMOVED***
      this$1.expect(types.comma);
      if (allowTrailingComma && this$1.afterTrailingComma(close)) ***REMOVED*** break ***REMOVED***
    ***REMOVED*** else ***REMOVED*** first = false; ***REMOVED***

    var elt = (void 0);
    if (allowEmpty && this$1.type === types.comma)
      ***REMOVED*** elt = null; ***REMOVED***
    else if (this$1.type === types.ellipsis) ***REMOVED***
      elt = this$1.parseSpread(refDestructuringErrors);
      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)
        ***REMOVED*** refDestructuringErrors.trailingComma = this$1.start; ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);
    ***REMOVED***
    elts.push(elt);
  ***REMOVED***
  return elts
***REMOVED***;

pp$3.checkUnreserved = function(ref) ***REMOVED***
  var start = ref.start;
  var end = ref.end;
  var name = ref.name;

  if (this.inGenerator && name === "yield")
    ***REMOVED*** this.raiseRecoverable(start, "Can not use 'yield' as identifier inside a generator"); ***REMOVED***
  if (this.inAsync && name === "await")
    ***REMOVED*** this.raiseRecoverable(start, "Can not use 'await' as identifier inside an async function"); ***REMOVED***
  if (this.isKeyword(name))
    ***REMOVED*** this.raise(start, ("Unexpected keyword '" + name + "'")); ***REMOVED***
  if (this.options.ecmaVersion < 6 &&
    this.input.slice(start, end).indexOf("\\") != -1) ***REMOVED*** return ***REMOVED***
  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
  if (re.test(name)) ***REMOVED***
    if (!this.inAsync && name === "await")
      ***REMOVED*** this.raiseRecoverable(start, "Can not use keyword 'await' outside an async function"); ***REMOVED***
    this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
  ***REMOVED***
***REMOVED***;

// Parse the next token as an identifier. If `liberal` is true (used
// when parsing properties), it will also convert keywords into
// identifiers.

pp$3.parseIdent = function(liberal, isBinding) ***REMOVED***
  var node = this.startNode();
  if (liberal && this.options.allowReserved == "never") ***REMOVED*** liberal = false; ***REMOVED***
  if (this.type === types.name) ***REMOVED***
    node.name = this.value;
  ***REMOVED*** else if (this.type.keyword) ***REMOVED***
    node.name = this.type.keyword;

    // To fix https://github.com/acornjs/acorn/issues/575
    // `class` and `function` keywords push new context into this.context.
    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
    if ((node.name === "class" || node.name === "function") &&
        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) ***REMOVED***
      this.context.pop();
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    this.unexpected();
  ***REMOVED***
  this.next();
  this.finishNode(node, "Identifier");
  if (!liberal) ***REMOVED*** this.checkUnreserved(node); ***REMOVED***
  return node
***REMOVED***;

// Parses yield expression inside generator.

pp$3.parseYield = function() ***REMOVED***
  if (!this.yieldPos) ***REMOVED*** this.yieldPos = this.start; ***REMOVED***

  var node = this.startNode();
  this.next();
  if (this.type == types.semi || this.canInsertSemicolon() || (this.type != types.star && !this.type.startsExpr)) ***REMOVED***
    node.delegate = false;
    node.argument = null;
  ***REMOVED*** else ***REMOVED***
    node.delegate = this.eat(types.star);
    node.argument = this.parseMaybeAssign();
  ***REMOVED***
  return this.finishNode(node, "YieldExpression")
***REMOVED***;

pp$3.parseAwait = function() ***REMOVED***
  if (!this.awaitPos) ***REMOVED*** this.awaitPos = this.start; ***REMOVED***

  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeUnary(null, true);
  return this.finishNode(node, "AwaitExpression")
***REMOVED***;

var pp$4 = Parser.prototype;

// This function is used to raise exceptions on parse errors. It
// takes an offset integer (into the current `input`) to indicate
// the location of the error, attaches the position to the end
// of the error message, and then raises a `SyntaxError` with that
// message.

pp$4.raise = function(pos, message) ***REMOVED***
  var loc = getLineInfo(this.input, pos);
  message += " (" + loc.line + ":" + loc.column + ")";
  var err = new SyntaxError(message);
  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
  throw err
***REMOVED***;

pp$4.raiseRecoverable = pp$4.raise;

pp$4.curPosition = function() ***REMOVED***
  if (this.options.locations) ***REMOVED***
    return new Position(this.curLine, this.pos - this.lineStart)
  ***REMOVED***
***REMOVED***;

var pp$5 = Parser.prototype;

// Object.assign polyfill
var assign = Object.assign || function(target) ***REMOVED***
  var sources = [], len = arguments.length - 1;
  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];

  for (var i = 0, list = sources; i < list.length; i += 1) ***REMOVED***
    var source = list[i];

    for (var key in source) ***REMOVED***
      if (has(source, key)) ***REMOVED***
        target[key] = source[key];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  return target
***REMOVED***;

// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

pp$5.enterFunctionScope = function() ***REMOVED***
  // var: a hash of var-declared names in the current lexical scope
  // lexical: a hash of lexically-declared names in the current lexical scope
  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)
  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)
  this.scopeStack.push(***REMOVED***var: ***REMOVED******REMOVED***, lexical: ***REMOVED******REMOVED***, childVar: ***REMOVED******REMOVED***, parentLexical: ***REMOVED******REMOVED******REMOVED***);
***REMOVED***;

pp$5.exitFunctionScope = function() ***REMOVED***
  this.scopeStack.pop();
***REMOVED***;

pp$5.enterLexicalScope = function() ***REMOVED***
  var parentScope = this.scopeStack[this.scopeStack.length - 1];
  var childScope = ***REMOVED***var: ***REMOVED******REMOVED***, lexical: ***REMOVED******REMOVED***, childVar: ***REMOVED******REMOVED***, parentLexical: ***REMOVED******REMOVED******REMOVED***;

  this.scopeStack.push(childScope);
  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);
***REMOVED***;

pp$5.exitLexicalScope = function() ***REMOVED***
  var childScope = this.scopeStack.pop();
  var parentScope = this.scopeStack[this.scopeStack.length - 1];

  assign(parentScope.childVar, childScope.var, childScope.childVar);
***REMOVED***;

/**
 * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`
 * in the current lexical scope or any of the parent lexical scopes in this function.
 */
pp$5.canDeclareVarName = function(name) ***REMOVED***
  var currentScope = this.scopeStack[this.scopeStack.length - 1];

  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name)
***REMOVED***;

/**
 * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`
 * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in
 * any child lexical scopes in this function.
 */
pp$5.canDeclareLexicalName = function(name) ***REMOVED***
  var currentScope = this.scopeStack[this.scopeStack.length - 1];

  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name)
***REMOVED***;

pp$5.declareVarName = function(name) ***REMOVED***
  this.scopeStack[this.scopeStack.length - 1].var[name] = true;
***REMOVED***;

pp$5.declareLexicalName = function(name) ***REMOVED***
  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;
***REMOVED***;

var Node = function Node(parser, pos, loc) ***REMOVED***
  this.type = "";
  this.start = pos;
  this.end = 0;
  if (parser.options.locations)
    ***REMOVED*** this.loc = new SourceLocation(parser, loc); ***REMOVED***
  if (parser.options.directSourceFile)
    ***REMOVED*** this.sourceFile = parser.options.directSourceFile; ***REMOVED***
  if (parser.options.ranges)
    ***REMOVED*** this.range = [pos, 0]; ***REMOVED***
***REMOVED***;

// Start an AST node, attaching a start offset.

var pp$6 = Parser.prototype;

pp$6.startNode = function() ***REMOVED***
  return new Node(this, this.start, this.startLoc)
***REMOVED***;

pp$6.startNodeAt = function(pos, loc) ***REMOVED***
  return new Node(this, pos, loc)
***REMOVED***;

// Finish an AST node, adding `type` and `end` properties.

function finishNodeAt(node, type, pos, loc) ***REMOVED***
  node.type = type;
  node.end = pos;
  if (this.options.locations)
    ***REMOVED*** node.loc.end = loc; ***REMOVED***
  if (this.options.ranges)
    ***REMOVED*** node.range[1] = pos; ***REMOVED***
  return node
***REMOVED***

pp$6.finishNode = function(node, type) ***REMOVED***
  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
***REMOVED***;

// Finish node at given position

pp$6.finishNodeAt = function(node, type, pos, loc) ***REMOVED***
  return finishNodeAt.call(this, node, type, pos, loc)
***REMOVED***;

// The algorithm used to determine whether a regexp can appear at a
// given point in the program is loosely based on sweet.js' approach.
// See https://github.com/mozilla/sweet.js/wiki/design

var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) ***REMOVED***
  this.token = token;
  this.isExpr = !!isExpr;
  this.preserveSpace = !!preserveSpace;
  this.override = override;
  this.generator = !!generator;
***REMOVED***;

var types$1 = ***REMOVED***
  b_stat: new TokContext("***REMOVED***", false),
  b_expr: new TokContext("***REMOVED***", true),
  b_tmpl: new TokContext("$***REMOVED***", false),
  p_stat: new TokContext("(", false),
  p_expr: new TokContext("(", true),
  q_tmpl: new TokContext("`", true, true, function (p) ***REMOVED*** return p.tryReadTemplateToken(); ***REMOVED***),
  f_stat: new TokContext("function", false),
  f_expr: new TokContext("function", true),
  f_expr_gen: new TokContext("function", true, false, null, true),
  f_gen: new TokContext("function", false, false, null, true)
***REMOVED***;

var pp$7 = Parser.prototype;

pp$7.initialContext = function() ***REMOVED***
  return [types$1.b_stat]
***REMOVED***;

pp$7.braceIsBlock = function(prevType) ***REMOVED***
  var parent = this.curContext();
  if (parent === types$1.f_expr || parent === types$1.f_stat)
    ***REMOVED*** return true ***REMOVED***
  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))
    ***REMOVED*** return !parent.isExpr ***REMOVED***

  // The check for `tt.name && exprAllowed` detects whether we are
  // after a `yield` or `of` construct. See the `updateContext` for
  // `tt.name`.
  if (prevType === types._return || prevType == types.name && this.exprAllowed)
    ***REMOVED*** return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) ***REMOVED***
  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType == types.arrow)
    ***REMOVED*** return true ***REMOVED***
  if (prevType == types.braceL)
    ***REMOVED*** return parent === types$1.b_stat ***REMOVED***
  if (prevType == types._var || prevType == types.name)
    ***REMOVED*** return false ***REMOVED***
  return !this.exprAllowed
***REMOVED***;

pp$7.inGeneratorContext = function() ***REMOVED***
  var this$1 = this;

  for (var i = this.context.length - 1; i >= 1; i--) ***REMOVED***
    var context = this$1.context[i];
    if (context.token === "function")
      ***REMOVED*** return context.generator ***REMOVED***
  ***REMOVED***
  return false
***REMOVED***;

pp$7.updateContext = function(prevType) ***REMOVED***
  var update, type = this.type;
  if (type.keyword && prevType == types.dot)
    ***REMOVED*** this.exprAllowed = false; ***REMOVED***
  else if (update = type.updateContext)
    ***REMOVED*** update.call(this, prevType); ***REMOVED***
  else
    ***REMOVED*** this.exprAllowed = type.beforeExpr; ***REMOVED***
***REMOVED***;

// Token-specific context update code

types.parenR.updateContext = types.braceR.updateContext = function() ***REMOVED***
  if (this.context.length == 1) ***REMOVED***
    this.exprAllowed = true;
    return
  ***REMOVED***
  var out = this.context.pop();
  if (out === types$1.b_stat && this.curContext().token === "function") ***REMOVED***
    out = this.context.pop();
  ***REMOVED***
  this.exprAllowed = !out.isExpr;
***REMOVED***;

types.braceL.updateContext = function(prevType) ***REMOVED***
  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
  this.exprAllowed = true;
***REMOVED***;

types.dollarBraceL.updateContext = function() ***REMOVED***
  this.context.push(types$1.b_tmpl);
  this.exprAllowed = true;
***REMOVED***;

types.parenL.updateContext = function(prevType) ***REMOVED***
  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
  this.exprAllowed = true;
***REMOVED***;

types.incDec.updateContext = function() ***REMOVED***
  // tokExprAllowed stays unchanged
***REMOVED***;

types._function.updateContext = types._class.updateContext = function(prevType) ***REMOVED***
  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&
      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))
    ***REMOVED*** this.context.push(types$1.f_expr); ***REMOVED***
  else
    ***REMOVED*** this.context.push(types$1.f_stat); ***REMOVED***
  this.exprAllowed = false;
***REMOVED***;

types.backQuote.updateContext = function() ***REMOVED***
  if (this.curContext() === types$1.q_tmpl)
    ***REMOVED*** this.context.pop(); ***REMOVED***
  else
    ***REMOVED*** this.context.push(types$1.q_tmpl); ***REMOVED***
  this.exprAllowed = false;
***REMOVED***;

types.star.updateContext = function(prevType) ***REMOVED***
  if (prevType == types._function) ***REMOVED***
    var index = this.context.length - 1;
    if (this.context[index] === types$1.f_expr)
      ***REMOVED*** this.context[index] = types$1.f_expr_gen; ***REMOVED***
    else
      ***REMOVED*** this.context[index] = types$1.f_gen; ***REMOVED***
  ***REMOVED***
  this.exprAllowed = true;
***REMOVED***;

types.name.updateContext = function(prevType) ***REMOVED***
  var allowed = false;
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    if (this.value == "of" && !this.exprAllowed ||
        this.value == "yield" && this.inGeneratorContext())
      ***REMOVED*** allowed = true; ***REMOVED***
  ***REMOVED***
  this.exprAllowed = allowed;
***REMOVED***;

// Object type used to represent tokens. Note that normally, tokens
// simply exist as properties on the parser object. This is only
// used for the onToken callback and the external tokenizer.

var Token = function Token(p) ***REMOVED***
  this.type = p.type;
  this.value = p.value;
  this.start = p.start;
  this.end = p.end;
  if (p.options.locations)
    ***REMOVED*** this.loc = new SourceLocation(p, p.startLoc, p.endLoc); ***REMOVED***
  if (p.options.ranges)
    ***REMOVED*** this.range = [p.start, p.end]; ***REMOVED***
***REMOVED***;

// ## Tokenizer

var pp$8 = Parser.prototype;

// Are we running under Rhino?
var isRhino = typeof Packages == "object" && Object.prototype.toString.call(Packages) == "[object JavaPackage]";

// Move to the next token

pp$8.next = function() ***REMOVED***
  if (this.options.onToken)
    ***REMOVED*** this.options.onToken(new Token(this)); ***REMOVED***

  this.lastTokEnd = this.end;
  this.lastTokStart = this.start;
  this.lastTokEndLoc = this.endLoc;
  this.lastTokStartLoc = this.startLoc;
  this.nextToken();
***REMOVED***;

pp$8.getToken = function() ***REMOVED***
  this.next();
  return new Token(this)
***REMOVED***;

// If we're in an ES6 environment, make parsers iterable
if (typeof Symbol !== "undefined")
  ***REMOVED*** pp$8[Symbol.iterator] = function() ***REMOVED***
    var this$1 = this;

    return ***REMOVED***
      next: function () ***REMOVED***
        var token = this$1.getToken();
        return ***REMOVED***
          done: token.type === types.eof,
          value: token
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***; ***REMOVED***

// Toggle strict mode. Re-reads the next number or string to please
// pedantic tests (`"use strict"; 010;` should fail).

pp$8.curContext = function() ***REMOVED***
  return this.context[this.context.length - 1]
***REMOVED***;

// Read a single token, updating the parser object's token-related
// properties.

pp$8.nextToken = function() ***REMOVED***
  var curContext = this.curContext();
  if (!curContext || !curContext.preserveSpace) ***REMOVED*** this.skipSpace(); ***REMOVED***

  this.start = this.pos;
  if (this.options.locations) ***REMOVED*** this.startLoc = this.curPosition(); ***REMOVED***
  if (this.pos >= this.input.length) ***REMOVED*** return this.finishToken(types.eof) ***REMOVED***

  if (curContext.override) ***REMOVED*** return curContext.override(this) ***REMOVED***
  else ***REMOVED*** this.readToken(this.fullCharCodeAtPos()); ***REMOVED***
***REMOVED***;

pp$8.readToken = function(code) ***REMOVED***
  // Identifier or keyword. '\uXXXX' sequences are allowed in
  // identifiers, so '\' also dispatches to that.
  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
    ***REMOVED*** return this.readWord() ***REMOVED***

  return this.getTokenFromCode(code)
***REMOVED***;

pp$8.fullCharCodeAtPos = function() ***REMOVED***
  var code = this.input.charCodeAt(this.pos);
  if (code <= 0xd7ff || code >= 0xe000) ***REMOVED*** return code ***REMOVED***
  var next = this.input.charCodeAt(this.pos + 1);
  return (code << 10) + next - 0x35fdc00
***REMOVED***;

pp$8.skipBlockComment = function() ***REMOVED***
  var this$1 = this;

  var startLoc = this.options.onComment && this.curPosition();
  var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
  if (end === -1) ***REMOVED*** this.raise(this.pos - 2, "Unterminated comment"); ***REMOVED***
  this.pos = end + 2;
  if (this.options.locations) ***REMOVED***
    lineBreakG.lastIndex = start;
    var match;
    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) ***REMOVED***
      ++this$1.curLine;
      this$1.lineStart = match.index + match[0].length;
    ***REMOVED***
  ***REMOVED***
  if (this.options.onComment)
    ***REMOVED*** this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
                           startLoc, this.curPosition()); ***REMOVED***
***REMOVED***;

pp$8.skipLineComment = function(startSkip) ***REMOVED***
  var this$1 = this;

  var start = this.pos;
  var startLoc = this.options.onComment && this.curPosition();
  var ch = this.input.charCodeAt(this.pos += startSkip);
  while (this.pos < this.input.length && !isNewLine(ch)) ***REMOVED***
    ch = this$1.input.charCodeAt(++this$1.pos);
  ***REMOVED***
  if (this.options.onComment)
    ***REMOVED*** this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
                           startLoc, this.curPosition()); ***REMOVED***
***REMOVED***;

// Called at the start of the parse and after every token. Skips
// whitespace and comments, and.

pp$8.skipSpace = function() ***REMOVED***
  var this$1 = this;

  loop: while (this.pos < this.input.length) ***REMOVED***
    var ch = this$1.input.charCodeAt(this$1.pos);
    switch (ch) ***REMOVED***
    case 32: case 160: // ' '
      ++this$1.pos;
      break
    case 13:
      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) ***REMOVED***
        ++this$1.pos;
      ***REMOVED***
    case 10: case 8232: case 8233:
      ++this$1.pos;
      if (this$1.options.locations) ***REMOVED***
        ++this$1.curLine;
        this$1.lineStart = this$1.pos;
      ***REMOVED***
      break
    case 47: // '/'
      switch (this$1.input.charCodeAt(this$1.pos + 1)) ***REMOVED***
      case 42: // '*'
        this$1.skipBlockComment();
        break
      case 47:
        this$1.skipLineComment(2);
        break
      default:
        break loop
      ***REMOVED***
      break
    default:
      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) ***REMOVED***
        ++this$1.pos;
      ***REMOVED*** else ***REMOVED***
        break loop
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

// Called at the end of every token. Sets `end`, `val`, and
// maintains `context` and `exprAllowed`, and skips the space after
// the token, so that the next one's `start` will point at the
// right position.

pp$8.finishToken = function(type, val) ***REMOVED***
  this.end = this.pos;
  if (this.options.locations) ***REMOVED*** this.endLoc = this.curPosition(); ***REMOVED***
  var prevType = this.type;
  this.type = type;
  this.value = val;

  this.updateContext(prevType);
***REMOVED***;

// ### Token reading

// This is the function that is called to fetch the next token. It
// is somewhat obscure, because it works in character codes rather
// than characters, and because operator parsing has been inlined
// into it.
//
// All in the name of speed.
//
pp$8.readToken_dot = function() ***REMOVED***
  var next = this.input.charCodeAt(this.pos + 1);
  if (next >= 48 && next <= 57) ***REMOVED*** return this.readNumber(true) ***REMOVED***
  var next2 = this.input.charCodeAt(this.pos + 2);
  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) ***REMOVED*** // 46 = dot '.'
    this.pos += 3;
    return this.finishToken(types.ellipsis)
  ***REMOVED*** else ***REMOVED***
    ++this.pos;
    return this.finishToken(types.dot)
  ***REMOVED***
***REMOVED***;

pp$8.readToken_slash = function() ***REMOVED*** // '/'
  var next = this.input.charCodeAt(this.pos + 1);
  if (this.exprAllowed) ***REMOVED*** ++this.pos; return this.readRegexp() ***REMOVED***
  if (next === 61) ***REMOVED*** return this.finishOp(types.assign, 2) ***REMOVED***
  return this.finishOp(types.slash, 1)
***REMOVED***;

pp$8.readToken_mult_modulo_exp = function(code) ***REMOVED*** // '%*'
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  var tokentype = code === 42 ? types.star : types.modulo;

  // exponentiation operator ** and **=
  if (this.options.ecmaVersion >= 7 && code == 42 && next === 42) ***REMOVED***
    ++size;
    tokentype = types.starstar;
    next = this.input.charCodeAt(this.pos + 2);
  ***REMOVED***

  if (next === 61) ***REMOVED*** return this.finishOp(types.assign, size + 1) ***REMOVED***
  return this.finishOp(tokentype, size)
***REMOVED***;

pp$8.readToken_pipe_amp = function(code) ***REMOVED*** // '|&'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code) ***REMOVED*** return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) ***REMOVED***
  if (next === 61) ***REMOVED*** return this.finishOp(types.assign, 2) ***REMOVED***
  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)
***REMOVED***;

pp$8.readToken_caret = function() ***REMOVED*** // '^'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) ***REMOVED*** return this.finishOp(types.assign, 2) ***REMOVED***
  return this.finishOp(types.bitwiseXOR, 1)
***REMOVED***;

pp$8.readToken_plus_min = function(code) ***REMOVED*** // '+-'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code) ***REMOVED***
    if (next == 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 62 &&
        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) ***REMOVED***
      // A `-->` line comment
      this.skipLineComment(3);
      this.skipSpace();
      return this.nextToken()
    ***REMOVED***
    return this.finishOp(types.incDec, 2)
  ***REMOVED***
  if (next === 61) ***REMOVED*** return this.finishOp(types.assign, 2) ***REMOVED***
  return this.finishOp(types.plusMin, 1)
***REMOVED***;

pp$8.readToken_lt_gt = function(code) ***REMOVED*** // '<>'
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  if (next === code) ***REMOVED***
    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
    if (this.input.charCodeAt(this.pos + size) === 61) ***REMOVED*** return this.finishOp(types.assign, size + 1) ***REMOVED***
    return this.finishOp(types.bitShift, size)
  ***REMOVED***
  if (next == 33 && code == 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 45 &&
      this.input.charCodeAt(this.pos + 3) == 45) ***REMOVED***
    // `<!--`, an XML-style comment that should be interpreted as a line comment
    this.skipLineComment(4);
    this.skipSpace();
    return this.nextToken()
  ***REMOVED***
  if (next === 61) ***REMOVED*** size = 2; ***REMOVED***
  return this.finishOp(types.relational, size)
***REMOVED***;

pp$8.readToken_eq_excl = function(code) ***REMOVED*** // '=!'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) ***REMOVED*** return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) ***REMOVED***
  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) ***REMOVED*** // '=>'
    this.pos += 2;
    return this.finishToken(types.arrow)
  ***REMOVED***
  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)
***REMOVED***;

pp$8.getTokenFromCode = function(code) ***REMOVED***
  switch (code) ***REMOVED***
  // The interpretation of a dot depends on whether it is followed
  // by a digit or another two dots.
  case 46: // '.'
    return this.readToken_dot()

  // Punctuation tokens.
  case 40: ++this.pos; return this.finishToken(types.parenL)
  case 41: ++this.pos; return this.finishToken(types.parenR)
  case 59: ++this.pos; return this.finishToken(types.semi)
  case 44: ++this.pos; return this.finishToken(types.comma)
  case 91: ++this.pos; return this.finishToken(types.bracketL)
  case 93: ++this.pos; return this.finishToken(types.bracketR)
  case 123: ++this.pos; return this.finishToken(types.braceL)
  case 125: ++this.pos; return this.finishToken(types.braceR)
  case 58: ++this.pos; return this.finishToken(types.colon)
  case 63: ++this.pos; return this.finishToken(types.question)

  case 96: // '`'
    if (this.options.ecmaVersion < 6) ***REMOVED*** break ***REMOVED***
    ++this.pos;
    return this.finishToken(types.backQuote)

  case 48: // '0'
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 120 || next === 88) ***REMOVED*** return this.readRadixNumber(16) ***REMOVED*** // '0x', '0X' - hex number
    if (this.options.ecmaVersion >= 6) ***REMOVED***
      if (next === 111 || next === 79) ***REMOVED*** return this.readRadixNumber(8) ***REMOVED*** // '0o', '0O' - octal number
      if (next === 98 || next === 66) ***REMOVED*** return this.readRadixNumber(2) ***REMOVED*** // '0b', '0B' - binary number
    ***REMOVED***

  // Anything else beginning with a digit is an integer, octal
  // number, or float.
  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
    return this.readNumber(false)

  // Quotes produce strings.
  case 34: case 39: // '"', "'"
    return this.readString(code)

  // Operators are parsed inline in tiny state machines. '=' (61) is
  // often referred to. `finishOp` simply skips the amount of
  // characters it is given as second argument, and returns a token
  // of the type given by its first argument.

  case 47: // '/'
    return this.readToken_slash()

  case 37: case 42: // '%*'
    return this.readToken_mult_modulo_exp(code)

  case 124: case 38: // '|&'
    return this.readToken_pipe_amp(code)

  case 94: // '^'
    return this.readToken_caret()

  case 43: case 45: // '+-'
    return this.readToken_plus_min(code)

  case 60: case 62: // '<>'
    return this.readToken_lt_gt(code)

  case 61: case 33: // '=!'
    return this.readToken_eq_excl(code)

  case 126: // '~'
    return this.finishOp(types.prefix, 1)
  ***REMOVED***

  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
***REMOVED***;

pp$8.finishOp = function(type, size) ***REMOVED***
  var str = this.input.slice(this.pos, this.pos + size);
  this.pos += size;
  return this.finishToken(type, str)
***REMOVED***;

// Parse a regular expression. Some context-awareness is necessary,
// since a '/' inside a '[]' set does not end the expression.

function tryCreateRegexp(src, flags, throwErrorAt, parser) ***REMOVED***
  try ***REMOVED***
    return new RegExp(src, flags)
  ***REMOVED*** catch (e) ***REMOVED***
    if (throwErrorAt !== undefined) ***REMOVED***
      if (e instanceof SyntaxError) ***REMOVED*** parser.raise(throwErrorAt, "Error parsing regular expression: " + e.message); ***REMOVED***
      throw e
    ***REMOVED***
  ***REMOVED***
***REMOVED***

var regexpUnicodeSupport = !!tryCreateRegexp("\uffff", "u");

pp$8.readRegexp = function() ***REMOVED***
  var this$1 = this;

  var escaped, inClass, start = this.pos;
  for (;;) ***REMOVED***
    if (this$1.pos >= this$1.input.length) ***REMOVED*** this$1.raise(start, "Unterminated regular expression"); ***REMOVED***
    var ch = this$1.input.charAt(this$1.pos);
    if (lineBreak.test(ch)) ***REMOVED*** this$1.raise(start, "Unterminated regular expression"); ***REMOVED***
    if (!escaped) ***REMOVED***
      if (ch === "[") ***REMOVED*** inClass = true; ***REMOVED***
      else if (ch === "]" && inClass) ***REMOVED*** inClass = false; ***REMOVED***
      else if (ch === "/" && !inClass) ***REMOVED*** break ***REMOVED***
      escaped = ch === "\\";
    ***REMOVED*** else ***REMOVED*** escaped = false; ***REMOVED***
    ++this$1.pos;
  ***REMOVED***
  var content = this.input.slice(start, this.pos);
  ++this.pos;
  var flagsStart = this.pos;
  var mods = this.readWord1();
  if (this.containsEsc) ***REMOVED*** this.unexpected(flagsStart); ***REMOVED***

  var tmp = content, tmpFlags = "";
  if (mods) ***REMOVED***
    var validFlags = "gim";
    if (this.options.ecmaVersion >= 6) ***REMOVED*** validFlags += "uy"; ***REMOVED***
    if (this.options.ecmaVersion >= 9) ***REMOVED*** validFlags += "s"; ***REMOVED***
    for (var i = 0; i < mods.length; i++) ***REMOVED***
      var mod = mods.charAt(i);
      if (validFlags.indexOf(mod) == -1) ***REMOVED*** this$1.raise(start, "Invalid regular expression flag"); ***REMOVED***
      if (mods.indexOf(mod, i + 1) > -1) ***REMOVED*** this$1.raise(start, "Duplicate regular expression flag"); ***REMOVED***
    ***REMOVED***
    if (mods.indexOf("u") >= 0) ***REMOVED***
      if (regexpUnicodeSupport) ***REMOVED***
        tmpFlags = "u";
      ***REMOVED*** else ***REMOVED***
        // Replace each astral symbol and every Unicode escape sequence that
        // possibly represents an astral symbol or a paired surrogate with a
        // single ASCII symbol to avoid throwing on regular expressions that
        // are only valid in combination with the `/u` flag.
        // Note: replacing with the ASCII symbol `x` might cause false
        // negatives in unlikely scenarios. For example, `[\u***REMOVED***61***REMOVED***-b]` is a
        // perfectly valid pattern that is equivalent to `[a-b]`, but it would
        // be replaced by `[x-b]` which throws an error.
        tmp = tmp.replace(/\\u\***REMOVED***([0-9a-fA-F]+)\***REMOVED***/g, function (_match, code, offset) ***REMOVED***
          code = Number("0x" + code);
          if (code > 0x10FFFF) ***REMOVED*** this$1.raise(start + offset + 3, "Code point out of bounds"); ***REMOVED***
          return "x"
        ***REMOVED***);
        tmp = tmp.replace(/\\u([a-fA-F0-9]***REMOVED***4***REMOVED***)|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
        tmpFlags = tmpFlags.replace("u", "");
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  // Detect invalid regular expressions.
  var value = null;
  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,
  // so don't do detection if we are running under Rhino
  if (!isRhino) ***REMOVED***
    tryCreateRegexp(tmp, tmpFlags, start, this);
    // Get a regular expression object for this pattern-flag pair, or `null` in
    // case the current environment doesn't support the flags it uses.
    value = tryCreateRegexp(content, mods);
  ***REMOVED***
  return this.finishToken(types.regexp, ***REMOVED***pattern: content, flags: mods, value: value***REMOVED***)
***REMOVED***;

// Read an integer in the given radix. Return null if zero digits
// were read, the integer value otherwise. When `len` is given, this
// will return `null` unless the integer has exactly `len` digits.

pp$8.readInt = function(radix, len) ***REMOVED***
  var this$1 = this;

  var start = this.pos, total = 0;
  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) ***REMOVED***
    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);
    if (code >= 97) ***REMOVED*** val = code - 97 + 10; ***REMOVED*** // a
    else if (code >= 65) ***REMOVED*** val = code - 65 + 10; ***REMOVED*** // A
    else if (code >= 48 && code <= 57) ***REMOVED*** val = code - 48; ***REMOVED*** // 0-9
    else ***REMOVED*** val = Infinity; ***REMOVED***
    if (val >= radix) ***REMOVED*** break ***REMOVED***
    ++this$1.pos;
    total = total * radix + val;
  ***REMOVED***
  if (this.pos === start || len != null && this.pos - start !== len) ***REMOVED*** return null ***REMOVED***

  return total
***REMOVED***;

pp$8.readRadixNumber = function(radix) ***REMOVED***
  this.pos += 2; // 0x
  var val = this.readInt(radix);
  if (val == null) ***REMOVED*** this.raise(this.start + 2, "Expected number in radix " + radix); ***REMOVED***
  if (isIdentifierStart(this.fullCharCodeAtPos())) ***REMOVED*** this.raise(this.pos, "Identifier directly after number"); ***REMOVED***
  return this.finishToken(types.num, val)
***REMOVED***;

// Read an integer, octal integer, or floating-point number.

pp$8.readNumber = function(startsWithDot) ***REMOVED***
  var start = this.pos;
  if (!startsWithDot && this.readInt(10) === null) ***REMOVED*** this.raise(start, "Invalid number"); ***REMOVED***
  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
  if (octal && this.strict) ***REMOVED*** this.raise(start, "Invalid number"); ***REMOVED***
  if (octal && /[89]/.test(this.input.slice(start, this.pos))) ***REMOVED*** octal = false; ***REMOVED***
  var next = this.input.charCodeAt(this.pos);
  if (next === 46 && !octal) ***REMOVED*** // '.'
    ++this.pos;
    this.readInt(10);
    next = this.input.charCodeAt(this.pos);
  ***REMOVED***
  if ((next === 69 || next === 101) && !octal) ***REMOVED*** // 'eE'
    next = this.input.charCodeAt(++this.pos);
    if (next === 43 || next === 45) ***REMOVED*** ++this.pos; ***REMOVED*** // '+-'
    if (this.readInt(10) === null) ***REMOVED*** this.raise(start, "Invalid number"); ***REMOVED***
  ***REMOVED***
  if (isIdentifierStart(this.fullCharCodeAtPos())) ***REMOVED*** this.raise(this.pos, "Identifier directly after number"); ***REMOVED***

  var str = this.input.slice(start, this.pos);
  var val = octal ? parseInt(str, 8) : parseFloat(str);
  return this.finishToken(types.num, val)
***REMOVED***;

// Read a string value, interpreting backslash-escapes.

pp$8.readCodePoint = function() ***REMOVED***
  var ch = this.input.charCodeAt(this.pos), code;

  if (ch === 123) ***REMOVED*** // '***REMOVED***'
    if (this.options.ecmaVersion < 6) ***REMOVED*** this.unexpected(); ***REMOVED***
    var codePos = ++this.pos;
    code = this.readHexChar(this.input.indexOf("***REMOVED***", this.pos) - this.pos);
    ++this.pos;
    if (code > 0x10FFFF) ***REMOVED*** this.invalidStringToken(codePos, "Code point out of bounds"); ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    code = this.readHexChar(4);
  ***REMOVED***
  return code
***REMOVED***;

function codePointToString(code) ***REMOVED***
  // UTF-16 Decoding
  if (code <= 0xFFFF) ***REMOVED*** return String.fromCharCode(code) ***REMOVED***
  code -= 0x10000;
  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
***REMOVED***

pp$8.readString = function(quote) ***REMOVED***
  var this$1 = this;

  var out = "", chunkStart = ++this.pos;
  for (;;) ***REMOVED***
    if (this$1.pos >= this$1.input.length) ***REMOVED*** this$1.raise(this$1.start, "Unterminated string constant"); ***REMOVED***
    var ch = this$1.input.charCodeAt(this$1.pos);
    if (ch === quote) ***REMOVED*** break ***REMOVED***
    if (ch === 92) ***REMOVED*** // '\'
      out += this$1.input.slice(chunkStart, this$1.pos);
      out += this$1.readEscapedChar(false);
      chunkStart = this$1.pos;
    ***REMOVED*** else ***REMOVED***
      if (isNewLine(ch)) ***REMOVED*** this$1.raise(this$1.start, "Unterminated string constant"); ***REMOVED***
      ++this$1.pos;
    ***REMOVED***
  ***REMOVED***
  out += this.input.slice(chunkStart, this.pos++);
  return this.finishToken(types.string, out)
***REMOVED***;

// Reads template string tokens.

var INVALID_TEMPLATE_ESCAPE_ERROR = ***REMOVED******REMOVED***;

pp$8.tryReadTemplateToken = function() ***REMOVED***
  this.inTemplateElement = true;
  try ***REMOVED***
    this.readTmplToken();
  ***REMOVED*** catch (err) ***REMOVED***
    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) ***REMOVED***
      this.readInvalidTemplateToken();
    ***REMOVED*** else ***REMOVED***
      throw err
    ***REMOVED***
  ***REMOVED***

  this.inTemplateElement = false;
***REMOVED***;

pp$8.invalidStringToken = function(position, message) ***REMOVED***
  if (this.inTemplateElement && this.options.ecmaVersion >= 9) ***REMOVED***
    throw INVALID_TEMPLATE_ESCAPE_ERROR
  ***REMOVED*** else ***REMOVED***
    this.raise(position, message);
  ***REMOVED***
***REMOVED***;

pp$8.readTmplToken = function() ***REMOVED***
  var this$1 = this;

  var out = "", chunkStart = this.pos;
  for (;;) ***REMOVED***
    if (this$1.pos >= this$1.input.length) ***REMOVED*** this$1.raise(this$1.start, "Unterminated template"); ***REMOVED***
    var ch = this$1.input.charCodeAt(this$1.pos);
    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) ***REMOVED*** // '`', '$***REMOVED***'
      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) ***REMOVED***
        if (ch === 36) ***REMOVED***
          this$1.pos += 2;
          return this$1.finishToken(types.dollarBraceL)
        ***REMOVED*** else ***REMOVED***
          ++this$1.pos;
          return this$1.finishToken(types.backQuote)
        ***REMOVED***
      ***REMOVED***
      out += this$1.input.slice(chunkStart, this$1.pos);
      return this$1.finishToken(types.template, out)
    ***REMOVED***
    if (ch === 92) ***REMOVED*** // '\'
      out += this$1.input.slice(chunkStart, this$1.pos);
      out += this$1.readEscapedChar(true);
      chunkStart = this$1.pos;
    ***REMOVED*** else if (isNewLine(ch)) ***REMOVED***
      out += this$1.input.slice(chunkStart, this$1.pos);
      ++this$1.pos;
      switch (ch) ***REMOVED***
      case 13:
        if (this$1.input.charCodeAt(this$1.pos) === 10) ***REMOVED*** ++this$1.pos; ***REMOVED***
      case 10:
        out += "\n";
        break
      default:
        out += String.fromCharCode(ch);
        break
      ***REMOVED***
      if (this$1.options.locations) ***REMOVED***
        ++this$1.curLine;
        this$1.lineStart = this$1.pos;
      ***REMOVED***
      chunkStart = this$1.pos;
    ***REMOVED*** else ***REMOVED***
      ++this$1.pos;
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

// Reads a template token to search for the end, without validating any escape sequences
pp$8.readInvalidTemplateToken = function() ***REMOVED***
  var this$1 = this;

  for (; this.pos < this.input.length; this.pos++) ***REMOVED***
    switch (this$1.input[this$1.pos]) ***REMOVED***
    case "\\":
      ++this$1.pos;
      break

    case "$":
      if (this$1.input[this$1.pos + 1] !== "***REMOVED***") ***REMOVED***
        break
      ***REMOVED***
    // falls through

    case "`":
      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))

    // no default
    ***REMOVED***
  ***REMOVED***
  this.raise(this.start, "Unterminated template");
***REMOVED***;

// Used to read escaped characters

pp$8.readEscapedChar = function(inTemplate) ***REMOVED***
  var ch = this.input.charCodeAt(++this.pos);
  ++this.pos;
  switch (ch) ***REMOVED***
  case 110: return "\n" // 'n' -> '\n'
  case 114: return "\r" // 'r' -> '\r'
  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
  case 117: return codePointToString(this.readCodePoint()) // 'u'
  case 116: return "\t" // 't' -> '\t'
  case 98: return "\b" // 'b' -> '\b'
  case 118: return "\u000b" // 'v' -> '\u000b'
  case 102: return "\f" // 'f' -> '\f'
  case 13: if (this.input.charCodeAt(this.pos) === 10) ***REMOVED*** ++this.pos; ***REMOVED*** // '\r\n'
  case 10: // ' \n'
    if (this.options.locations) ***REMOVED*** this.lineStart = this.pos; ++this.curLine; ***REMOVED***
    return ""
  default:
    if (ch >= 48 && ch <= 55) ***REMOVED***
      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
      var octal = parseInt(octalStr, 8);
      if (octal > 255) ***REMOVED***
        octalStr = octalStr.slice(0, -1);
        octal = parseInt(octalStr, 8);
      ***REMOVED***
      this.pos += octalStr.length - 1;
      ch = this.input.charCodeAt(this.pos);
      if ((octalStr !== "0" || ch == 56 || ch == 57) && (this.strict || inTemplate)) ***REMOVED***
        this.invalidStringToken(this.pos - 1 - octalStr.length, "Octal literal in strict mode");
      ***REMOVED***
      return String.fromCharCode(octal)
    ***REMOVED***
    return String.fromCharCode(ch)
  ***REMOVED***
***REMOVED***;

// Used to read character escape sequences ('\x', '\u', '\U').

pp$8.readHexChar = function(len) ***REMOVED***
  var codePos = this.pos;
  var n = this.readInt(16, len);
  if (n === null) ***REMOVED*** this.invalidStringToken(codePos, "Bad character escape sequence"); ***REMOVED***
  return n
***REMOVED***;

// Read an identifier, and return it as a string. Sets `this.containsEsc`
// to whether the word contained a '\u' escape.
//
// Incrementally adds only escaped chars, adding other chunks as-is
// as a micro-optimization.

pp$8.readWord1 = function() ***REMOVED***
  var this$1 = this;

  this.containsEsc = false;
  var word = "", first = true, chunkStart = this.pos;
  var astral = this.options.ecmaVersion >= 6;
  while (this.pos < this.input.length) ***REMOVED***
    var ch = this$1.fullCharCodeAtPos();
    if (isIdentifierChar(ch, astral)) ***REMOVED***
      this$1.pos += ch <= 0xffff ? 1 : 2;
    ***REMOVED*** else if (ch === 92) ***REMOVED*** // "\"
      this$1.containsEsc = true;
      word += this$1.input.slice(chunkStart, this$1.pos);
      var escStart = this$1.pos;
      if (this$1.input.charCodeAt(++this$1.pos) != 117) // "u"
        ***REMOVED*** this$1.invalidStringToken(this$1.pos, "Expecting Unicode escape sequence \\uXXXX"); ***REMOVED***
      ++this$1.pos;
      var esc = this$1.readCodePoint();
      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
        ***REMOVED*** this$1.invalidStringToken(escStart, "Invalid Unicode escape"); ***REMOVED***
      word += codePointToString(esc);
      chunkStart = this$1.pos;
    ***REMOVED*** else ***REMOVED***
      break
    ***REMOVED***
    first = false;
  ***REMOVED***
  return word + this.input.slice(chunkStart, this.pos)
***REMOVED***;

// Read an identifier or keyword token. Will check for reserved
// words when necessary.

pp$8.readWord = function() ***REMOVED***
  var word = this.readWord1();
  var type = types.name;
  if (this.keywords.test(word)) ***REMOVED***
    if (this.containsEsc) ***REMOVED*** this.raiseRecoverable(this.start, "Escape sequence in keyword " + word); ***REMOVED***
    type = keywords$1[word];
  ***REMOVED***
  return this.finishToken(type, word)
***REMOVED***;

// Acorn is a tiny, fast JavaScript parser written in JavaScript.
//
// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
// various contributors and released under an MIT license.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/acornjs/acorn.git
//
// Please use the [github bug tracker][ghbt] to report issues.
//
// [ghbt]: https://github.com/acornjs/acorn/issues
//
// This file defines the main parser interface. The library also comes
// with a [error-tolerant parser][dammit] and an
// [abstract syntax tree walker][walk], defined in other files.
//
// [dammit]: acorn_loose.js
// [walk]: util/walk.js

var version = "5.4.1";

// The main exported interface (under `self.acorn` when in the
// browser) is a `parse` function that takes a code string and
// returns an abstract syntax tree as specified by [Mozilla parser
// API][api].
//
// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

function parse(input, options) ***REMOVED***
  return new Parser(options, input).parse()
***REMOVED***

// This function tries to parse a single expression at a given
// offset in a string. Useful for parsing mixed-language formats
// that embed JavaScript expressions.

function parseExpressionAt(input, pos, options) ***REMOVED***
  var p = new Parser(options, input, pos);
  p.nextToken();
  return p.parseExpression()
***REMOVED***

// Acorn is organized as a tokenizer and a recursive-descent parser.
// The `tokenizer` export provides an interface to the tokenizer.

function tokenizer(input, options) ***REMOVED***
  return new Parser(options, input)
***REMOVED***

// This is a terrible kludge to support the existing, pre-ES6
// interface where the loose parser module retroactively adds exports
// to this module.
var parse_dammit;
var LooseParser;
var pluginsLoose; // eslint-disable-line camelcase
function addLooseExports(parse, Parser$$1, plugins$$1) ***REMOVED***
  parse_dammit = parse; // eslint-disable-line camelcase
  LooseParser = Parser$$1;
  pluginsLoose = plugins$$1;
***REMOVED***

export ***REMOVED*** version, parse, parseExpressionAt, tokenizer, parse_dammit, LooseParser, pluginsLoose, addLooseExports, Parser, plugins, defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, types as tokTypes, keywords$1 as keywordTypes, TokContext, types$1 as tokContexts, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace ***REMOVED***;
