/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/*globals __webpack_hash__ */
if(module.hot) ***REMOVED***
	var lastHash;
	var upToDate = function upToDate() ***REMOVED***
		return lastHash.indexOf(__webpack_hash__) >= 0;
	***REMOVED***;
	var log = require("./log");
	var check = function check() ***REMOVED***
		module.hot.check().then(function(updatedModules) ***REMOVED***
			if(!updatedModules) ***REMOVED***
				log("warning", "[HMR] Cannot find update. Need to do a full reload!");
				log("warning", "[HMR] (Probably because of restarting the webpack-dev-server)");
				return;
			***REMOVED***

			return module.hot.apply(***REMOVED***
				ignoreUnaccepted: true,
				ignoreDeclined: true,
				ignoreErrored: true,
				onUnaccepted: function(data) ***REMOVED***
					log("warning", "Ignored an update to unaccepted module " + data.chain.join(" -> "));
				***REMOVED***,
				onDeclined: function(data) ***REMOVED***
					log("warning", "Ignored an update to declined module " + data.chain.join(" -> "));
				***REMOVED***,
				onErrored: function(data) ***REMOVED***
					log("error", data.error);
					log("warning", "Ignored an error while updating module " + data.moduleId + " (" + data.type + ")");
				***REMOVED***
			***REMOVED***).then(function(renewedModules) ***REMOVED***
				if(!upToDate()) ***REMOVED***
					check();
				***REMOVED***

				require("./log-apply-result")(updatedModules, renewedModules);

				if(upToDate()) ***REMOVED***
					log("info", "[HMR] App is up to date.");
				***REMOVED***
			***REMOVED***);
		***REMOVED***).catch(function(err) ***REMOVED***
			var status = module.hot.status();
			if(["abort", "fail"].indexOf(status) >= 0) ***REMOVED***
				log("warning", "[HMR] Cannot check for update. Need to do a full reload!");
				log("warning", "[HMR] " + err.stack || err.message);
			***REMOVED*** else ***REMOVED***
				log("warning", "[HMR] Update check failed: " + err.stack || err.message);
			***REMOVED***
		***REMOVED***);
	***REMOVED***;
	var hotEmitter = require("./emitter");
	hotEmitter.on("webpackHotUpdate", function(currentHash) ***REMOVED***
		lastHash = currentHash;
		if(!upToDate()) ***REMOVED***
			var status = module.hot.status();
			if(status === "idle") ***REMOVED***
				log("info", "[HMR] Checking for updates on the server...");
				check();
			***REMOVED*** else if(["abort", "fail"].indexOf(status) >= 0) ***REMOVED***
				log("warning", "[HMR] Cannot apply update as a previous update " + status + "ed. Need to do a full reload!");
			***REMOVED***
		***REMOVED***
	***REMOVED***);
	log("info", "[HMR] Waiting for update signal from WDS...");
***REMOVED*** else ***REMOVED***
	throw new Error("[HMR] Hot Module Replacement is disabled.");
***REMOVED***
