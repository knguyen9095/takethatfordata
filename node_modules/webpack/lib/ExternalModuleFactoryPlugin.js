/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const ExternalModule = require("./ExternalModule");

class ExternalModuleFactoryPlugin ***REMOVED***
	constructor(type, externals) ***REMOVED***
		this.type = type;
		this.externals = externals;
	***REMOVED***

	apply(normalModuleFactory) ***REMOVED***
		const globalType = this.type;
		normalModuleFactory.plugin("factory", factory => (data, callback) => ***REMOVED***
			const context = data.context;
			const dependency = data.dependencies[0];

			function handleExternal(value, type, callback) ***REMOVED***
				if(typeof type === "function") ***REMOVED***
					callback = type;
					type = undefined;
				***REMOVED***
				if(value === false) return factory(data, callback);
				if(value === true) value = dependency.request;
				if(typeof type === "undefined" && /^[a-z0-9]+ /.test(value)) ***REMOVED***
					const idx = value.indexOf(" ");
					type = value.substr(0, idx);
					value = value.substr(idx + 1);
				***REMOVED***
				callback(null, new ExternalModule(value, type || globalType, dependency.request));
				return true;
			***REMOVED***
			(function handleExternals(externals, callback) ***REMOVED***
				if(typeof externals === "string") ***REMOVED***
					if(externals === dependency.request) ***REMOVED***
						return handleExternal(dependency.request, callback);
					***REMOVED***
				***REMOVED*** else if(Array.isArray(externals)) ***REMOVED***
					let i = 0;
					(function next() ***REMOVED***
						let asyncFlag;
						const handleExternalsAndCallback = function handleExternalsAndCallback(err, module) ***REMOVED***
							if(err) return callback(err);
							if(!module) ***REMOVED***
								if(asyncFlag) ***REMOVED***
									asyncFlag = false;
									return;
								***REMOVED***
								return next();
							***REMOVED***
							callback(null, module);
						***REMOVED***;

						do ***REMOVED***
							asyncFlag = true;
							if(i >= externals.length) return callback();
							handleExternals(externals[i++], handleExternalsAndCallback);
						***REMOVED*** while (!asyncFlag); // eslint-disable-line keyword-spacing
						asyncFlag = false;
					***REMOVED***());
					return;
				***REMOVED*** else if(externals instanceof RegExp) ***REMOVED***
					if(externals.test(dependency.request)) ***REMOVED***
						return handleExternal(dependency.request, callback);
					***REMOVED***
				***REMOVED*** else if(typeof externals === "function") ***REMOVED***
					externals.call(null, context, dependency.request, function(err, value, type) ***REMOVED***
						if(err) return callback(err);
						if(typeof value !== "undefined") ***REMOVED***
							handleExternal(value, type, callback);
						***REMOVED*** else ***REMOVED***
							callback();
						***REMOVED***
					***REMOVED***);
					return;
				***REMOVED*** else if(typeof externals === "object" && Object.prototype.hasOwnProperty.call(externals, dependency.request)) ***REMOVED***
					return handleExternal(externals[dependency.request], callback);
				***REMOVED***
				callback();
			***REMOVED***(this.externals, function(err, module) ***REMOVED***
				if(err) return callback(err);
				if(!module) return handleExternal(false, callback);
				return callback(null, module);
			***REMOVED***));
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = ExternalModuleFactoryPlugin;
