/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const Module = require("./Module");
const RawSource = require("webpack-sources").RawSource;

class MultiModule extends Module ***REMOVED***

	constructor(context, dependencies, name) ***REMOVED***
		super();
		this.context = context;
		this.dependencies = dependencies;
		this.name = name;
		this.built = false;
		this.cacheable = true;
	***REMOVED***

	identifier() ***REMOVED***
		return `multi $***REMOVED***this.dependencies.map((d) => d.request).join(" ")***REMOVED***`;
	***REMOVED***

	readableIdentifier(requestShortener) ***REMOVED***
		return `multi $***REMOVED***this.dependencies.map((d) => requestShortener.shorten(d.request)).join(" ")***REMOVED***`;
	***REMOVED***

	disconnect() ***REMOVED***
		this.built = false;
		super.disconnect();
	***REMOVED***

	build(options, compilation, resolver, fs, callback) ***REMOVED***
		this.built = true;
		return callback();
	***REMOVED***

	needRebuild() ***REMOVED***
		return false;
	***REMOVED***

	size() ***REMOVED***
		return 16 + this.dependencies.length * 12;
	***REMOVED***

	updateHash(hash) ***REMOVED***
		hash.update("multi module");
		hash.update(this.name || "");
		super.updateHash(hash);
	***REMOVED***

	source(dependencyTemplates, outputOptions) ***REMOVED***
		const str = [];
		this.dependencies.forEach(function(dep, idx) ***REMOVED***
			if(dep.module) ***REMOVED***
				if(idx === this.dependencies.length - 1)
					str.push("module.exports = ");
				str.push("__webpack_require__(");
				if(outputOptions.pathinfo)
					str.push(`/*! $***REMOVED***dep.request***REMOVED*** */`);
				str.push(`$***REMOVED***JSON.stringify(dep.module.id)***REMOVED***`);
				str.push(")");
			***REMOVED*** else ***REMOVED***
				str.push("(function webpackMissingModule() ***REMOVED*** throw new Error(");
				str.push(JSON.stringify(`Cannot find module "$***REMOVED***dep.request***REMOVED***"`));
				str.push("); ***REMOVED***())");
			***REMOVED***
			str.push(";\n");
		***REMOVED***, this);
		return new RawSource(str.join(""));
	***REMOVED***
***REMOVED***

module.exports = MultiModule;
