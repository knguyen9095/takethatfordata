/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Naoyuki Kanezawa @nkzawa
*/
"use strict";

const MultiEntryDependency = require("./dependencies/MultiEntryDependency");
const SingleEntryDependency = require("./dependencies/SingleEntryDependency");
const MultiModuleFactory = require("./MultiModuleFactory");
const MultiEntryPlugin = require("./MultiEntryPlugin");
const SingleEntryPlugin = require("./SingleEntryPlugin");

class DynamicEntryPlugin ***REMOVED***
	constructor(context, entry) ***REMOVED***
		this.context = context;
		this.entry = entry;
	***REMOVED***

	apply(compiler) ***REMOVED***
		compiler.plugin("compilation", (compilation, params) => ***REMOVED***
			const multiModuleFactory = new MultiModuleFactory();
			const normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);
			compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
		***REMOVED***);

		compiler.plugin("make", (compilation, callback) => ***REMOVED***
			const addEntry = (entry, name) => ***REMOVED***
				const dep = DynamicEntryPlugin.createDependency(entry, name);
				return new Promise((resolve, reject) => ***REMOVED***
					compilation.addEntry(this.context, dep, name, (err) => ***REMOVED***
						if(err) return reject(err);
						resolve();
					***REMOVED***);
				***REMOVED***);
			***REMOVED***;

			Promise.resolve(this.entry()).then((entry) => ***REMOVED***
				if(typeof entry === "string" || Array.isArray(entry)) ***REMOVED***
					addEntry(entry, "main").then(() => callback(), callback);
				***REMOVED*** else if(typeof entry === "object") ***REMOVED***
					Promise.all(Object.keys(entry).map((name) => ***REMOVED***
						return addEntry(entry[name], name);
					***REMOVED***)).then(() => callback(), callback);
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = DynamicEntryPlugin;

DynamicEntryPlugin.createDependency = function(entry, name) ***REMOVED***
	if(Array.isArray(entry))
		return MultiEntryPlugin.createDependency(entry, name);
	else
		return SingleEntryPlugin.createDependency(entry, name);
***REMOVED***;
