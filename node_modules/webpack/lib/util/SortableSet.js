"use strict";

module.exports = class SortableSet extends Set ***REMOVED***

	constructor(initialIterable, defaultSort) ***REMOVED***
		super(initialIterable);
		this._sortFn = defaultSort;
		this._lastActiveSortFn = null;
	***REMOVED***

	/**
	 * @param ***REMOVED***any***REMOVED*** value - value to add to set
	 * @returns ***REMOVED***SortableSet***REMOVED*** - returns itself
	 */
	add(value) ***REMOVED***
		this._lastActiveSortFn = null;
		super.add(value);
		return this;
	***REMOVED***

	/**
	 * @param ***REMOVED***Function***REMOVED*** sortFn - function to sort the set
	 * @returns ***REMOVED***void***REMOVED***
	 */
	sortWith(sortFn) ***REMOVED***
		if(this.size === 0 || sortFn === this._lastActiveSortFn) ***REMOVED***
			// already sorted - nothing to do
			return;
		***REMOVED***

		const sortedArray = Array.from(this).sort(sortFn);
		super.clear();
		for(let i = 0; i < sortedArray.length; i += 1) ***REMOVED***
			this.add(sortedArray[i]);
		***REMOVED***
		this._lastActiveSortFn = sortFn;
	***REMOVED***

	/**
	 * @returns ***REMOVED***void***REMOVED***
	 */
	sort() ***REMOVED***
		this.sortWith(this._sortFn);
	***REMOVED***
***REMOVED***;
