/*
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Tobias Koppers @sokra
 */

"use strict";

const ConcatSource = require("webpack-sources").ConcatSource;
const ModuleFilenameHelpers = require("./ModuleFilenameHelpers");

const wrapComment = (str) => ***REMOVED***
	if(!str.includes("\n")) return `/*! $***REMOVED***str***REMOVED*** */`;
	return `/*!\n * $***REMOVED***str.split("\n").join("\n * ")***REMOVED***\n */`;
***REMOVED***;

class BannerPlugin ***REMOVED***
	constructor(options) ***REMOVED***
		if(arguments.length > 1)
			throw new Error("BannerPlugin only takes one argument (pass an options object)");
		if(typeof options === "string")
			options = ***REMOVED***
				banner: options
			***REMOVED***;
		this.options = options || ***REMOVED******REMOVED***;
		this.banner = this.options.raw ? options.banner : wrapComment(options.banner);
	***REMOVED***

	apply(compiler) ***REMOVED***
		const options = this.options;
		const banner = this.banner;

		compiler.plugin("compilation", (compilation) => ***REMOVED***
			compilation.plugin("optimize-chunk-assets", (chunks, callback) => ***REMOVED***
				chunks.forEach((chunk) => ***REMOVED***
					if(options.entryOnly && !chunk.isInitial()) return;
					chunk.files
						.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options))
						.forEach((file) => ***REMOVED***
							let basename;
							let query = "";
							let filename = file;
							const hash = compilation.hash;
							const querySplit = filename.indexOf("?");

							if(querySplit >= 0) ***REMOVED***
								query = filename.substr(querySplit);
								filename = filename.substr(0, querySplit);
							***REMOVED***

							if(filename.indexOf("/") < 0) ***REMOVED***
								basename = filename;
							***REMOVED*** else ***REMOVED***
								basename = filename.substr(filename.lastIndexOf("/") + 1);
							***REMOVED***

							const comment = compilation.getPath(banner, ***REMOVED***
								hash,
								chunk,
								filename,
								basename,
								query,
							***REMOVED***);

							return compilation.assets[file] = new ConcatSource(comment, "\n", compilation.assets[file]);
						***REMOVED***);
				***REMOVED***);
				callback();
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = BannerPlugin;
