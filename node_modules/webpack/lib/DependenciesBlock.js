/*
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Tobias Koppers @sokra
 */
"use strict";

const DependenciesBlockVariable = require("./DependenciesBlockVariable");

function disconnect(i) ***REMOVED***
	i.disconnect();
***REMOVED***

function unseal(i) ***REMOVED***
	i.unseal();
***REMOVED***

class DependenciesBlock ***REMOVED***
	constructor() ***REMOVED***
		this.dependencies = [];
		this.blocks = [];
		this.variables = [];
	***REMOVED***

	addBlock(block) ***REMOVED***
		this.blocks.push(block);
		block.parent = this;
	***REMOVED***

	addVariable(name, expression, dependencies) ***REMOVED***
		for(let v of this.variables) ***REMOVED***
			if(v.name === name && v.expression === expression) ***REMOVED***
				return;
			***REMOVED***
		***REMOVED***
		this.variables.push(new DependenciesBlockVariable(name, expression, dependencies));
	***REMOVED***

	addDependency(dependency) ***REMOVED***
		this.dependencies.push(dependency);
	***REMOVED***

	updateHash(hash) ***REMOVED***
		function updateHash(i) ***REMOVED***
			i.updateHash(hash);
		***REMOVED***

		this.dependencies.forEach(updateHash);
		this.blocks.forEach(updateHash);
		this.variables.forEach(updateHash);
	***REMOVED***

	disconnect() ***REMOVED***
		this.dependencies.forEach(disconnect);
		this.blocks.forEach(disconnect);
		this.variables.forEach(disconnect);
	***REMOVED***

	unseal() ***REMOVED***
		this.blocks.forEach(unseal);
	***REMOVED***

	hasDependencies(filter) ***REMOVED***
		if(filter) ***REMOVED***
			if(this.dependencies.some(filter)) ***REMOVED***
				return true;
			***REMOVED***
		***REMOVED*** else ***REMOVED***
			if(this.dependencies.length > 0) ***REMOVED***
				return true;
			***REMOVED***
		***REMOVED***

		return this.blocks.concat(this.variables).some(item => item.hasDependencies(filter));
	***REMOVED***

	sortItems() ***REMOVED***
		this.blocks.forEach(block => block.sortItems());
	***REMOVED***
***REMOVED***

module.exports = DependenciesBlock;
