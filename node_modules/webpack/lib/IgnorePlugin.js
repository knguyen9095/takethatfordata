/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

class IgnorePlugin ***REMOVED***
	constructor(resourceRegExp, contextRegExp) ***REMOVED***
		this.resourceRegExp = resourceRegExp;
		this.contextRegExp = contextRegExp;

		this.checkIgnore = this.checkIgnore.bind(this);
	***REMOVED***

	/*
	 * Only returns true if a "resourceRegExp" exists
	 * and the resource given matches the regexp.
	 */
	checkResource(resource) ***REMOVED***
		if(!this.resourceRegExp) ***REMOVED***
			return false;
		***REMOVED***
		return this.resourceRegExp.test(resource);
	***REMOVED***

	/*
	 * Returns true if contextRegExp does not exist
	 * or if context matches the given regexp.
	 */
	checkContext(context) ***REMOVED***
		if(!this.contextRegExp) ***REMOVED***
			return true;
		***REMOVED***
		return this.contextRegExp.test(context);
	***REMOVED***

	/*
	 * Returns true if result should be ignored.
	 * false if it shouldn't.
	 *
	 * Not that if "contextRegExp" is given, both the "resourceRegExp"
	 * and "contextRegExp" have to match.
	 */
	checkResult(result) ***REMOVED***
		if(!result) ***REMOVED***
			return true;
		***REMOVED***
		return this.checkResource(result.request) && this.checkContext(result.context);
	***REMOVED***

	checkIgnore(result, callback) ***REMOVED***
		// check if result is ignored
		if(this.checkResult(result)) ***REMOVED***
			return callback();
		***REMOVED***
		return callback(null, result);
	***REMOVED***

	apply(compiler) ***REMOVED***
		compiler.plugin("normal-module-factory", (nmf) => ***REMOVED***
			nmf.plugin("before-resolve", this.checkIgnore);
		***REMOVED***);
		compiler.plugin("context-module-factory", (cmf) => ***REMOVED***
			cmf.plugin("before-resolve", this.checkIgnore);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = IgnorePlugin;
