/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
const ConstDependency = require("./dependencies/ConstDependency");
const NullFactory = require("./NullFactory");
const ParserHelpers = require("./ParserHelpers");

const getQuery = (request) => ***REMOVED***
	const i = request.indexOf("?");
	return request.indexOf("?") < 0 ? "" : request.substr(i);
***REMOVED***;

class ConstPlugin ***REMOVED***
	apply(compiler) ***REMOVED***
		compiler.plugin("compilation", (compilation, params) => ***REMOVED***
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());

			params.normalModuleFactory.plugin("parser", parser => ***REMOVED***
				parser.plugin("statement if", function(statement) ***REMOVED***
					const param = this.evaluateExpression(statement.test);
					const bool = param.asBool();
					if(typeof bool === "boolean") ***REMOVED***
						if(statement.test.type !== "Literal") ***REMOVED***
							const dep = new ConstDependency(`$***REMOVED***bool***REMOVED***`, param.range);
							dep.loc = statement.loc;
							this.state.current.addDependency(dep);
						***REMOVED***
						return bool;
					***REMOVED***
				***REMOVED***);
				parser.plugin("expression ?:", function(expression) ***REMOVED***
					const param = this.evaluateExpression(expression.test);
					const bool = param.asBool();
					if(typeof bool === "boolean") ***REMOVED***
						if(expression.test.type !== "Literal") ***REMOVED***
							const dep = new ConstDependency(` $***REMOVED***bool***REMOVED***`, param.range);
							dep.loc = expression.loc;
							this.state.current.addDependency(dep);
						***REMOVED***
						return bool;
					***REMOVED***
				***REMOVED***);
				parser.plugin("evaluate Identifier __resourceQuery", function(expr) ***REMOVED***
					if(!this.state.module) return;
					return ParserHelpers.evaluateToString(getQuery(this.state.module.resource))(expr);
				***REMOVED***);
				parser.plugin("expression __resourceQuery", function() ***REMOVED***
					if(!this.state.module) return;
					this.state.current.addVariable("__resourceQuery", JSON.stringify(getQuery(this.state.module.resource)));
					return true;
				***REMOVED***);
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = ConstPlugin;
