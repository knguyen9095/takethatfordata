/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const ParserHelpers = require("./ParserHelpers");
const ConstDependency = require("./dependencies/ConstDependency");

const NullFactory = require("./NullFactory");

class ProvidePlugin ***REMOVED***
	constructor(definitions) ***REMOVED***
		this.definitions = definitions;
	***REMOVED***

	apply(compiler) ***REMOVED***
		const definitions = this.definitions;
		compiler.plugin("compilation", (compilation, params) => ***REMOVED***
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
			params.normalModuleFactory.plugin("parser", (parser, parserOptions) => ***REMOVED***
				Object.keys(definitions).forEach(name => ***REMOVED***
					var request = [].concat(definitions[name]);
					var splittedName = name.split(".");
					if(splittedName.length > 0) ***REMOVED***
						splittedName.slice(1).forEach((_, i) => ***REMOVED***
							const name = splittedName.slice(0, i + 1).join(".");
							parser.plugin(`can-rename $***REMOVED***name***REMOVED***`, ParserHelpers.approve);
						***REMOVED***);
					***REMOVED***
					parser.plugin(`expression $***REMOVED***name***REMOVED***`, function(expr) ***REMOVED***
						let nameIdentifier = name;
						const scopedName = name.indexOf(".") >= 0;
						let expression = `require($***REMOVED***JSON.stringify(request[0])***REMOVED***)`;
						if(scopedName) ***REMOVED***
							nameIdentifier = `__webpack_provided_$***REMOVED***name.replace(/\./g, "_dot_")***REMOVED***`;
						***REMOVED***
						if(request.length > 1) ***REMOVED***
							expression += request.slice(1).map(r => `[$***REMOVED***JSON.stringify(r)***REMOVED***]`).join("");
						***REMOVED***
						if(!ParserHelpers.addParsedVariableToModule(this, nameIdentifier, expression)) ***REMOVED***
							return false;
						***REMOVED***
						if(scopedName) ***REMOVED***
							ParserHelpers.toConstantDependency(nameIdentifier).bind(this)(expr);
						***REMOVED***
						return true;
					***REMOVED***);
				***REMOVED***);
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = ProvidePlugin;
