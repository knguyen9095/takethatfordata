/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const ConcatSource = require("webpack-sources").ConcatSource;
const OriginalSource = require("webpack-sources").OriginalSource;
const Template = require("./Template");

function accessorToObjectAccess(accessor) ***REMOVED***
	return accessor.map(a => `[$***REMOVED***JSON.stringify(a)***REMOVED***]`).join("");
***REMOVED***

function accessorAccess(base, accessor) ***REMOVED***
	accessor = [].concat(accessor);
	return accessor.map((a, idx) => ***REMOVED***
		a = base + accessorToObjectAccess(accessor.slice(0, idx + 1));
		if(idx === accessor.length - 1) return a;
		return `$***REMOVED***a***REMOVED*** = $***REMOVED***a***REMOVED*** || ***REMOVED******REMOVED***`;
	***REMOVED***).join(", ");
***REMOVED***

class UmdMainTemplatePlugin ***REMOVED***
	constructor(name, options) ***REMOVED***
		if(typeof name === "object" && !Array.isArray(name)) ***REMOVED***
			this.name = name.root || name.amd || name.commonjs;
			this.names = name;
		***REMOVED*** else ***REMOVED***
			this.name = name;
			this.names = ***REMOVED***
				commonjs: name,
				root: name,
				amd: name
			***REMOVED***;
		***REMOVED***
		this.optionalAmdExternalAsGlobal = options.optionalAmdExternalAsGlobal;
		this.namedDefine = options.namedDefine;
		this.auxiliaryComment = options.auxiliaryComment;
	***REMOVED***

	apply(compilation) ***REMOVED***
		const mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", (source, chunk, hash) => ***REMOVED***
			let externals = chunk.getModules().filter(m => m.external && (m.type === "umd" || m.type === "umd2"));
			const optionalExternals = [];
			let requiredExternals = [];
			if(this.optionalAmdExternalAsGlobal) ***REMOVED***
				externals.forEach(m => ***REMOVED***
					if(m.optional) ***REMOVED***
						optionalExternals.push(m);
					***REMOVED*** else ***REMOVED***
						requiredExternals.push(m);
					***REMOVED***
				***REMOVED***);
				externals = requiredExternals.concat(optionalExternals);
			***REMOVED*** else ***REMOVED***
				requiredExternals = externals;
			***REMOVED***

			function replaceKeys(str) ***REMOVED***
				return mainTemplate.applyPluginsWaterfall("asset-path", str, ***REMOVED***
					hash,
					chunk
				***REMOVED***);
			***REMOVED***

			function externalsDepsArray(modules) ***REMOVED***
				return `[$***REMOVED***replaceKeys(modules.map(m => JSON.stringify(typeof m.request === "object" ? m.request.amd : m.request)).join(", "))***REMOVED***]`;
			***REMOVED***

			function externalsRootArray(modules) ***REMOVED***
				return replaceKeys(modules.map(m => ***REMOVED***
					let request = m.request;
					if(typeof request === "object") request = request.root;
					return `root$***REMOVED***accessorToObjectAccess([].concat(request))***REMOVED***`;
				***REMOVED***).join(", "));
			***REMOVED***

			function externalsRequireArray(type) ***REMOVED***
				return replaceKeys(externals.map(m => ***REMOVED***
					let expr;
					let request = m.request;
					if(typeof request === "object") request = request[type];
					if(typeof request === "undefined") throw new Error("Missing external configuration for type:" + type);
					if(Array.isArray(request)) ***REMOVED***
						expr = `require($***REMOVED***JSON.stringify(request[0])***REMOVED***)$***REMOVED***accessorToObjectAccess(request.slice(1))***REMOVED***`;
					***REMOVED*** else
						expr = `require($***REMOVED***JSON.stringify(request)***REMOVED***)`;
					if(m.optional) ***REMOVED***
						expr = `(function webpackLoadOptionalExternalModule() ***REMOVED*** try ***REMOVED*** return $***REMOVED***expr***REMOVED***; ***REMOVED*** catch(e) ***REMOVED******REMOVED*** ***REMOVED***())`;
					***REMOVED***
					return expr;
				***REMOVED***).join(", "));
			***REMOVED***

			function externalsArguments(modules) ***REMOVED***
				return modules.map(m => Template.toIdentifier(`__WEBPACK_EXTERNAL_MODULE_$***REMOVED***m.id***REMOVED***__`)).join(", ");
			***REMOVED***

			function libraryName(library) ***REMOVED***
				return JSON.stringify(replaceKeys([].concat(library).pop()));
			***REMOVED***

			let amdFactory;
			if(optionalExternals.length > 0) ***REMOVED***
				const wrapperArguments = externalsArguments(requiredExternals);
				const factoryArguments = requiredExternals.length > 0 ?
					externalsArguments(requiredExternals) + ", " + externalsRootArray(optionalExternals) :
					externalsRootArray(optionalExternals);
				amdFactory = `function webpackLoadOptionalExternalModuleAmd($***REMOVED***wrapperArguments***REMOVED***) ***REMOVED***\n` +
					`			return factory($***REMOVED***factoryArguments***REMOVED***);\n` +
					"		***REMOVED***";
			***REMOVED*** else ***REMOVED***
				amdFactory = "factory";
			***REMOVED***

			return new ConcatSource(new OriginalSource(
				"(function webpackUniversalModuleDefinition(root, factory) ***REMOVED***\n" +
				(this.auxiliaryComment &&
					typeof this.auxiliaryComment === "string" ?
					"   //" + this.auxiliaryComment + "\n" :
					this.auxiliaryComment.commonjs2 ?
					"   //" + this.auxiliaryComment.commonjs2 + "\n" :
					""
				) +
				"	if(typeof exports === 'object' && typeof module === 'object')\n" +
				"		module.exports = factory(" + externalsRequireArray("commonjs2") + ");\n" +
				(this.auxiliaryComment &&
					typeof this.auxiliaryComment === "string" ?
					"   //" + this.auxiliaryComment + "\n" :
					this.auxiliaryComment.amd ?
					"   //" + this.auxiliaryComment.amd + "\n" :
					""
				) +
				"	else if(typeof define === 'function' && define.amd)\n" +
				(requiredExternals.length > 0 ?
					(this.names.amd && this.namedDefine === true ?
						"		define(" + libraryName(this.names.amd) + ", " + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n" :
						"		define(" + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n"
					) :
					(this.names.amd && this.namedDefine === true ?
						"		define(" + libraryName(this.names.amd) + ", [], " + amdFactory + ");\n" :
						"		define([], " + amdFactory + ");\n"
					)
				) +
				(this.names.root || this.names.commonjs ?
					(this.auxiliaryComment &&
						typeof this.auxiliaryComment === "string" ?
						"   //" + this.auxiliaryComment + "\n" :
						this.auxiliaryComment.commonjs ?
						"   //" + this.auxiliaryComment.commonjs + "\n" :
						""
					) +
					"	else if(typeof exports === 'object')\n" +
					"		exports[" + libraryName(this.names.commonjs || this.names.root) + "] = factory(" + externalsRequireArray("commonjs") + ");\n" +
					(this.auxiliaryComment &&
						typeof this.auxiliaryComment === "string" ?
						"   //" + this.auxiliaryComment + "\n" :
						this.auxiliaryComment.root ?
						"   //" + this.auxiliaryComment.root + "\n" :
						""
					) +
					"	else\n" +
					"		" + replaceKeys(accessorAccess("root", this.names.root || this.names.commonjs)) + " = factory(" + externalsRootArray(externals) + ");\n" :
					"	else ***REMOVED***\n" +
					(externals.length > 0 ?
						"		var a = typeof exports === 'object' ? factory(" + externalsRequireArray("commonjs") + ") : factory(" + externalsRootArray(externals) + ");\n" :
						"		var a = factory();\n"
					) +
					"		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n" +
					"	***REMOVED***\n"
				) +
				"***REMOVED***)(typeof self !== 'undefined' ? self : this, function(" + externalsArguments(externals) + ") ***REMOVED***\nreturn ", "webpack/universalModuleDefinition"), source, ";\n***REMOVED***)");
		***REMOVED***);
		mainTemplate.plugin("global-hash-paths", (paths) => ***REMOVED***
			if(this.names.root) paths = paths.concat(this.names.root);
			if(this.names.amd) paths = paths.concat(this.names.amd);
			if(this.names.commonjs) paths = paths.concat(this.names.commonjs);
			return paths;
		***REMOVED***);
		mainTemplate.plugin("hash", (hash) => ***REMOVED***
			hash.update("umd");
			hash.update(`$***REMOVED***this.names.root***REMOVED***`);
			hash.update(`$***REMOVED***this.names.amd***REMOVED***`);
			hash.update(`$***REMOVED***this.names.commonjs***REMOVED***`);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = UmdMainTemplatePlugin;
