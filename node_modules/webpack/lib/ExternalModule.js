/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
const Module = require("./Module");
const OriginalSource = require("webpack-sources").OriginalSource;
const RawSource = require("webpack-sources").RawSource;
const WebpackMissingModule = require("./dependencies/WebpackMissingModule");
const Template = require("./Template");

class ExternalModule extends Module ***REMOVED***
	constructor(request, type, userRequest) ***REMOVED***
		super();
		this.request = request;
		this.userRequest = userRequest;
		this.type = type;
		this.built = false;
		this.external = true;
	***REMOVED***

	libIdent() ***REMOVED***
		return this.userRequest;
	***REMOVED***

	chunkCondition(chunk) ***REMOVED***
		return chunk.hasEntryModule();
	***REMOVED***

	identifier() ***REMOVED***
		return "external " + JSON.stringify(this.request);
	***REMOVED***

	readableIdentifier() ***REMOVED***
		return "external " + JSON.stringify(this.request);
	***REMOVED***

	needRebuild() ***REMOVED***
		return false;
	***REMOVED***

	build(options, compilation, resolver, fs, callback) ***REMOVED***
		this.builtTime = Date.now();
		callback();
	***REMOVED***

	getSourceForGlobalVariableExternal(variableName, type) ***REMOVED***
		if(!Array.isArray(variableName)) ***REMOVED***
			// make it an array as the look up works the same basically
			variableName = [variableName];
		***REMOVED***

		// needed for e.g. window["some"]["thing"]
		const objectLookup = variableName.map(r => `[$***REMOVED***JSON.stringify(r)***REMOVED***]`).join("");
		return `(function() ***REMOVED*** module.exports = $***REMOVED***type***REMOVED***$***REMOVED***objectLookup***REMOVED***; ***REMOVED***());`;
	***REMOVED***

	getSourceForCommonJsExternal(moduleAndSpecifiers) ***REMOVED***
		if(!Array.isArray(moduleAndSpecifiers)) ***REMOVED***
			return `module.exports = require($***REMOVED***JSON.stringify(moduleAndSpecifiers)***REMOVED***);`;
		***REMOVED***

		const moduleName = moduleAndSpecifiers[0];
		const objectLookup = moduleAndSpecifiers.slice(1).map(r => `[$***REMOVED***JSON.stringify(r)***REMOVED***]`).join("");
		return `module.exports = require($***REMOVED***moduleName***REMOVED***)$***REMOVED***objectLookup***REMOVED***;`;
	***REMOVED***

	checkExternalVariable(variableToCheck, request) ***REMOVED***
		return `if(typeof $***REMOVED***variableToCheck***REMOVED*** === 'undefined') ***REMOVED***$***REMOVED***WebpackMissingModule.moduleCode(request)***REMOVED******REMOVED***\n`;
	***REMOVED***

	getSourceForAmdOrUmdExternal(id, optional, request) ***REMOVED***
		const externalVariable = Template.toIdentifier(`__WEBPACK_EXTERNAL_MODULE_$***REMOVED***id***REMOVED***__`);
		const missingModuleError = optional ? this.checkExternalVariable(externalVariable, request) : "";
		return `$***REMOVED***missingModuleError***REMOVED***module.exports = $***REMOVED***externalVariable***REMOVED***;`;
	***REMOVED***

	getSourceForDefaultCase(optional, request) ***REMOVED***
		const missingModuleError = optional ? this.checkExternalVariable(request, request) : "";
		return `$***REMOVED***missingModuleError***REMOVED***module.exports = $***REMOVED***request***REMOVED***;`;
	***REMOVED***

	getSourceString() ***REMOVED***
		const request = typeof this.request === "object" ? this.request[this.type] : this.request;
		switch(this.type) ***REMOVED***
			case "this":
			case "window":
			case "global":
				return this.getSourceForGlobalVariableExternal(request, this.type);
			case "commonjs":
			case "commonjs2":
				return this.getSourceForCommonJsExternal(request);
			case "amd":
			case "umd":
			case "umd2":
				return this.getSourceForAmdOrUmdExternal(this.id, this.optional, request);
			default:
				return this.getSourceForDefaultCase(this.optional, request);
		***REMOVED***
	***REMOVED***

	getSource(sourceString) ***REMOVED***
		if(this.useSourceMap) ***REMOVED***
			return new OriginalSource(sourceString, this.identifier());
		***REMOVED***

		return new RawSource(sourceString);
	***REMOVED***

	source() ***REMOVED***
		return this.getSource(
			this.getSourceString()
		);
	***REMOVED***

	size() ***REMOVED***
		return 42;
	***REMOVED***

	updateHash(hash) ***REMOVED***
		hash.update(this.type);
		hash.update(JSON.stringify(this.request));
		hash.update(JSON.stringify(Boolean(this.optional)));
		super.updateHash(hash);
	***REMOVED***
***REMOVED***

module.exports = ExternalModule;
