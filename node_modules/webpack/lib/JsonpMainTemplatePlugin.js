/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const Template = require("./Template");

class JsonpMainTemplatePlugin ***REMOVED***

	apply(mainTemplate) ***REMOVED***
		mainTemplate.plugin("local-vars", function(source, chunk) ***REMOVED***
			if(chunk.chunks.length > 0) ***REMOVED***
				return this.asString([
					source,
					"",
					"// objects to store loaded and loading chunks",
					"var installedChunks = ***REMOVED***",
					this.indent(
						chunk.ids.map(id => `$***REMOVED***JSON.stringify(id)***REMOVED***: 0`).join(",\n")
					),
					"***REMOVED***;"
				]);
			***REMOVED***
			return source;
		***REMOVED***);
		mainTemplate.plugin("jsonp-script", function(_, chunk, hash) ***REMOVED***
			const chunkFilename = this.outputOptions.chunkFilename;
			const chunkMaps = chunk.getChunkMaps();
			const crossOriginLoading = this.outputOptions.crossOriginLoading;
			const chunkLoadTimeout = this.outputOptions.chunkLoadTimeout;
			const scriptSrcPath = this.applyPluginsWaterfall("asset-path", JSON.stringify(chunkFilename), ***REMOVED***
				hash: `" + $***REMOVED***this.renderCurrentHashCode(hash)***REMOVED*** + "`,
				hashWithLength: length => `" + $***REMOVED***this.renderCurrentHashCode(hash, length)***REMOVED*** + "`,
				chunk: ***REMOVED***
					id: "\" + chunkId + \"",
					hash: `" + $***REMOVED***JSON.stringify(chunkMaps.hash)***REMOVED***[chunkId] + "`,
					hashWithLength(length) ***REMOVED***
						const shortChunkHashMap = Object.create(null);
						Object.keys(chunkMaps.hash).forEach(chunkId => ***REMOVED***
							if(typeof chunkMaps.hash[chunkId] === "string")
								shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
						***REMOVED***);
						return `" + $***REMOVED***JSON.stringify(shortChunkHashMap)***REMOVED***[chunkId] + "`;
					***REMOVED***,
					name: `" + ($***REMOVED***JSON.stringify(chunkMaps.name)***REMOVED***[chunkId]||chunkId) + "`
				***REMOVED***
			***REMOVED***);
			return this.asString([
				"var script = document.createElement('script');",
				"script.type = 'text/javascript';",
				"script.charset = 'utf-8';",
				"script.async = true;",
				`script.timeout = $***REMOVED***chunkLoadTimeout***REMOVED***;`,
				crossOriginLoading ? `script.crossOrigin = $***REMOVED***JSON.stringify(crossOriginLoading)***REMOVED***;` : "",
				`if ($***REMOVED***this.requireFn***REMOVED***.nc) ***REMOVED***`,
				this.indent(`script.setAttribute("nonce", $***REMOVED***this.requireFn***REMOVED***.nc);`),
				"***REMOVED***",
				`script.src = $***REMOVED***this.requireFn***REMOVED***.p + $***REMOVED***scriptSrcPath***REMOVED***;`,
				`var timeout = setTimeout(onScriptComplete, $***REMOVED***chunkLoadTimeout***REMOVED***);`,
				"script.onerror = script.onload = onScriptComplete;",
				"function onScriptComplete() ***REMOVED***",
				this.indent([
					"// avoid mem leaks in IE.",
					"script.onerror = script.onload = null;",
					"clearTimeout(timeout);",
					"var chunk = installedChunks[chunkId];",
					"if(chunk !== 0) ***REMOVED***",
					this.indent([
						"if(chunk) ***REMOVED***",
						this.indent("chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));"),
						"***REMOVED***",
						"installedChunks[chunkId] = undefined;"
					]),
					"***REMOVED***"
				]),
				"***REMOVED***;",
			]);
		***REMOVED***);
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) ***REMOVED***
			return this.asString([
				"var installedChunkData = installedChunks[chunkId];",
				"if(installedChunkData === 0) ***REMOVED***",
				this.indent([
					"return new Promise(function(resolve) ***REMOVED*** resolve(); ***REMOVED***);"
				]),
				"***REMOVED***",
				"",
				"// a Promise means \"currently loading\".",
				"if(installedChunkData) ***REMOVED***",
				this.indent([
					"return installedChunkData[2];"
				]),
				"***REMOVED***",
				"",
				"// setup Promise in chunk cache",
				"var promise = new Promise(function(resolve, reject) ***REMOVED***",
				this.indent([
					"installedChunkData = installedChunks[chunkId] = [resolve, reject];"
				]),
				"***REMOVED***);",
				"installedChunkData[2] = promise;",
				"",
				"// start chunk loading",
				"var head = document.getElementsByTagName('head')[0];",
				this.applyPluginsWaterfall("jsonp-script", "", chunk, hash),
				"head.appendChild(script);",
				"",
				"return promise;"
			]);
		***REMOVED***);
		mainTemplate.plugin("require-extensions", function(source, chunk) ***REMOVED***
			if(chunk.chunks.length === 0) return source;

			return this.asString([
				source,
				"",
				"// on error function for async loading",
				`$***REMOVED***this.requireFn***REMOVED***.oe = function(err) ***REMOVED*** console.error(err); throw err; ***REMOVED***;`
			]);
		***REMOVED***);
		mainTemplate.plugin("bootstrap", function(source, chunk, hash) ***REMOVED***
			if(chunk.chunks.length > 0) ***REMOVED***
				var jsonpFunction = this.outputOptions.jsonpFunction;
				return this.asString([
					source,
					"",
					"// install a JSONP callback for chunk loading",
					`var parentJsonpFunction = window[$***REMOVED***JSON.stringify(jsonpFunction)***REMOVED***];`,
					`window[$***REMOVED***JSON.stringify(jsonpFunction)***REMOVED***] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) ***REMOVED***`,
					this.indent([
						"// add \"moreModules\" to the modules object,",
						"// then flag all \"chunkIds\" as loaded and fire callback",
						"var moduleId, chunkId, i = 0, resolves = [], result;",
						"for(;i < chunkIds.length; i++) ***REMOVED***",
						this.indent([
							"chunkId = chunkIds[i];",
							"if(installedChunks[chunkId]) ***REMOVED***",
							this.indent("resolves.push(installedChunks[chunkId][0]);"),
							"***REMOVED***",
							"installedChunks[chunkId] = 0;"
						]),
						"***REMOVED***",
						"for(moduleId in moreModules) ***REMOVED***",
						this.indent([
							"if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) ***REMOVED***",
							this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
							"***REMOVED***"
						]),
						"***REMOVED***",
						"if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);",
						"while(resolves.length) ***REMOVED***",
						this.indent("resolves.shift()();"),
						"***REMOVED***",
						this.entryPointInChildren(chunk) ? [
							"if(executeModules) ***REMOVED***",
							this.indent([
								"for(i=0; i < executeModules.length; i++) ***REMOVED***",
								this.indent(`result = $***REMOVED***this.requireFn***REMOVED***($***REMOVED***this.requireFn***REMOVED***.s = executeModules[i]);`),
								"***REMOVED***"
							]),
							"***REMOVED***",
							"return result;",
						] : ""
					]),
					"***REMOVED***;"
				]);
			***REMOVED***
			return source;
		***REMOVED***);
		mainTemplate.plugin("hot-bootstrap", function(source, chunk, hash) ***REMOVED***
			const hotUpdateChunkFilename = this.outputOptions.hotUpdateChunkFilename;
			const hotUpdateMainFilename = this.outputOptions.hotUpdateMainFilename;
			const crossOriginLoading = this.outputOptions.crossOriginLoading;
			const hotUpdateFunction = this.outputOptions.hotUpdateFunction;
			const currentHotUpdateChunkFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateChunkFilename), ***REMOVED***
				hash: `" + $***REMOVED***this.renderCurrentHashCode(hash)***REMOVED*** + "`,
				hashWithLength: length => `" + $***REMOVED***this.renderCurrentHashCode(hash, length)***REMOVED*** + "`,
				chunk: ***REMOVED***
					id: "\" + chunkId + \""
				***REMOVED***
			***REMOVED***);
			const currentHotUpdateMainFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateMainFilename), ***REMOVED***
				hash: `" + $***REMOVED***this.renderCurrentHashCode(hash)***REMOVED*** + "`,
				hashWithLength: length => `" + $***REMOVED***this.renderCurrentHashCode(hash, length)***REMOVED*** + "`
			***REMOVED***);
			const runtimeSource = Template.getFunctionContent(require("./JsonpMainTemplate.runtime.js"))
				.replace(/\/\/\$semicolon/g, ";")
				.replace(/\$require\$/g, this.requireFn)
				.replace(/\$crossOriginLoading\$/g, crossOriginLoading ? `script.crossOrigin = $***REMOVED***JSON.stringify(crossOriginLoading)***REMOVED***` : "")
				.replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename)
				.replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename)
				.replace(/\$hash\$/g, JSON.stringify(hash));
			return `$***REMOVED***source***REMOVED***
function hotDisposeChunk(chunkId) ***REMOVED***
	delete installedChunks[chunkId];
***REMOVED***
var parentHotUpdateCallback = window[$***REMOVED***JSON.stringify(hotUpdateFunction)***REMOVED***];
window[$***REMOVED***JSON.stringify(hotUpdateFunction)***REMOVED***] = $***REMOVED***runtimeSource***REMOVED***`;
		***REMOVED***);
		mainTemplate.plugin("hash", function(hash) ***REMOVED***
			hash.update("jsonp");
			hash.update("4");
			hash.update(`$***REMOVED***this.outputOptions.filename***REMOVED***`);
			hash.update(`$***REMOVED***this.outputOptions.chunkFilename***REMOVED***`);
			hash.update(`$***REMOVED***this.outputOptions.jsonpFunction***REMOVED***`);
			hash.update(`$***REMOVED***this.outputOptions.hotUpdateFunction***REMOVED***`);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = JsonpMainTemplatePlugin;
