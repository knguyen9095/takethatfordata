/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const Module = require("./Module");
const OriginalSource = require("webpack-sources").OriginalSource;
const RawSource = require("webpack-sources").RawSource;
const WebpackMissingModule = require("./dependencies/WebpackMissingModule");
const DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");
const DelegatedExportsDependency = require("./dependencies/DelegatedExportsDependency");

class DelegatedModule extends Module ***REMOVED***
	constructor(sourceRequest, data, type, userRequest, originalRequest) ***REMOVED***
		super();
		this.sourceRequest = sourceRequest;
		this.request = data.id;
		this.meta = data.meta;
		this.type = type;
		this.originalRequest = originalRequest;
		this.userRequest = userRequest;
		this.built = false;
		this.delegated = true;
		this.delegateData = data;
	***REMOVED***

	libIdent(options) ***REMOVED***
		return typeof this.originalRequest === "string" ? this.originalRequest : this.originalRequest.libIdent(options);
	***REMOVED***

	identifier() ***REMOVED***
		return `delegated $***REMOVED***JSON.stringify(this.request)***REMOVED*** from $***REMOVED***this.sourceRequest***REMOVED***`;
	***REMOVED***

	readableIdentifier() ***REMOVED***
		return `delegated $***REMOVED***this.userRequest***REMOVED*** from $***REMOVED***this.sourceRequest***REMOVED***`;
	***REMOVED***

	needRebuild() ***REMOVED***
		return false;
	***REMOVED***

	build(options, compilation, resolver, fs, callback) ***REMOVED***
		this.built = true;
		this.builtTime = Date.now();
		this.cacheable = true;
		this.dependencies.length = 0;
		this.addDependency(new DelegatedSourceDependency(this.sourceRequest));
		this.addDependency(new DelegatedExportsDependency(this, this.delegateData.exports || true));
		callback();
	***REMOVED***

	unbuild() ***REMOVED***
		this.built = false;
		super.unbuild();
	***REMOVED***

	source() ***REMOVED***
		const sourceModule = this.dependencies[0].module;
		let str;

		if(!sourceModule) ***REMOVED***
			str = WebpackMissingModule.moduleCode(this.sourceRequest);
		***REMOVED*** else ***REMOVED***
			str = `module.exports = (__webpack_require__($***REMOVED***JSON.stringify(sourceModule.id)***REMOVED***))`;

			switch(this.type) ***REMOVED***
				case "require":
					str += `($***REMOVED***JSON.stringify(this.request)***REMOVED***)`;
					break;
				case "object":
					str += `[$***REMOVED***JSON.stringify(this.request)***REMOVED***]`;
					break;
			***REMOVED***

			str += ";";
		***REMOVED***

		if(this.useSourceMap) ***REMOVED***
			return new OriginalSource(str, this.identifier());
		***REMOVED*** else ***REMOVED***
			return new RawSource(str);
		***REMOVED***
	***REMOVED***

	size() ***REMOVED***
		return 42;
	***REMOVED***

	updateHash(hash) ***REMOVED***
		hash.update(this.type);
		hash.update(JSON.stringify(this.request));
		super.updateHash(hash);
	***REMOVED***
***REMOVED***

module.exports = DelegatedModule;
