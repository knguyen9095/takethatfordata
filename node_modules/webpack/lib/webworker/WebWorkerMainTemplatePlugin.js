/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const Template = require("../Template");

class WebWorkerMainTemplatePlugin ***REMOVED***
	apply(mainTemplate) ***REMOVED***
		mainTemplate.plugin("local-vars", function(source, chunk) ***REMOVED***
			if(chunk.chunks.length > 0) ***REMOVED***
				return this.asString([
					source,
					"",
					"// object to store loaded chunks",
					"// \"1\" means \"already loaded\"",
					"var installedChunks = ***REMOVED***",
					this.indent(
						chunk.ids.map((id) => `$***REMOVED***id***REMOVED***: 1`).join(",\n")
					),
					"***REMOVED***;"
				]);
			***REMOVED***
			return source;
		***REMOVED***);
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) ***REMOVED***
			const chunkFilename = this.outputOptions.chunkFilename;
			return this.asString([
				"return new Promise(function(resolve) ***REMOVED***",
				this.indent([
					"// \"1\" is the signal for \"already loaded\"",
					"if(!installedChunks[chunkId]) ***REMOVED***",
					this.indent([
						"importScripts(" +
						this.applyPluginsWaterfall("asset-path", JSON.stringify(chunkFilename), ***REMOVED***
							hash: `" + $***REMOVED***this.renderCurrentHashCode(hash)***REMOVED*** + "`,
							hashWithLength: (length) => `" + $***REMOVED***this.renderCurrentHashCode(hash, length)***REMOVED*** + "`,
							chunk: ***REMOVED***
								id: "\" + chunkId + \""
							***REMOVED***
						***REMOVED***) + ");"
					]),
					"***REMOVED***",
					"resolve();"
				]),
				"***REMOVED***);"
			]);
		***REMOVED***);
		mainTemplate.plugin("bootstrap", function(source, chunk, hash) ***REMOVED***
			if(chunk.chunks.length > 0) ***REMOVED***
				const chunkCallbackName = this.outputOptions.chunkCallbackName || Template.toIdentifier("webpackChunk" + (this.outputOptions.library || ""));
				return this.asString([
					source,
					`this[$***REMOVED***JSON.stringify(chunkCallbackName)***REMOVED***] = function webpackChunkCallback(chunkIds, moreModules) ***REMOVED***`,
					this.indent([
						"for(var moduleId in moreModules) ***REMOVED***",
						this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
						"***REMOVED***",
						"while(chunkIds.length)",
						this.indent("installedChunks[chunkIds.pop()] = 1;")
					]),
					"***REMOVED***;"
				]);
			***REMOVED***
			return source;
		***REMOVED***);
		mainTemplate.plugin("hot-bootstrap", function(source, chunk, hash) ***REMOVED***
			const hotUpdateChunkFilename = this.outputOptions.hotUpdateChunkFilename;
			const hotUpdateMainFilename = this.outputOptions.hotUpdateMainFilename;
			const hotUpdateFunction = this.outputOptions.hotUpdateFunction || Template.toIdentifier("webpackHotUpdate" + (this.outputOptions.library || ""));
			const currentHotUpdateChunkFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateChunkFilename), ***REMOVED***
				hash: `" + $***REMOVED***this.renderCurrentHashCode(hash)***REMOVED*** + "`,
				hashWithLength: (length) => `" + $***REMOVED***this.renderCurrentHashCode(hash, length)***REMOVED*** + "`,
				chunk: ***REMOVED***
					id: "\" + chunkId + \""
				***REMOVED***
			***REMOVED***);
			const currentHotUpdateMainFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateMainFilename), ***REMOVED***
				hash: `" + $***REMOVED***this.renderCurrentHashCode(hash)***REMOVED*** + "`,
				hashWithLength: (length) => `" + $***REMOVED***this.renderCurrentHashCode(hash, length)***REMOVED*** + "`,
			***REMOVED***);

			return source + "\n" +
				`var parentHotUpdateCallback = self[$***REMOVED***JSON.stringify(hotUpdateFunction)***REMOVED***];\n` +
				`self[$***REMOVED***JSON.stringify(hotUpdateFunction)***REMOVED***] = ` +
				Template.getFunctionContent(require("./WebWorkerMainTemplate.runtime.js"))
				.replace(/\/\/\$semicolon/g, ";")
				.replace(/\$require\$/g, this.requireFn)
				.replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename)
				.replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename)
				.replace(/\$hash\$/g, JSON.stringify(hash));
		***REMOVED***);
		mainTemplate.plugin("hash", function(hash) ***REMOVED***
			hash.update("webworker");
			hash.update("3");
			hash.update(`$***REMOVED***this.outputOptions.publicPath***REMOVED***`);
			hash.update(`$***REMOVED***this.outputOptions.filename***REMOVED***`);
			hash.update(`$***REMOVED***this.outputOptions.chunkFilename***REMOVED***`);
			hash.update(`$***REMOVED***this.outputOptions.chunkCallbackName***REMOVED***`);
			hash.update(`$***REMOVED***this.outputOptions.library***REMOVED***`);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = WebWorkerMainTemplatePlugin;
