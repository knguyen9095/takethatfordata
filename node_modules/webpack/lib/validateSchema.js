/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Gajus Kuizinas @gajus
*/
"use strict";

const Ajv = require("ajv");
const ajv = new Ajv(***REMOVED***
	errorDataPath: "configuration",
	allErrors: true,
	verbose: true
***REMOVED***);
require("ajv-keywords")(ajv, ["instanceof"]);
require("../schemas/ajv.absolutePath")(ajv);

function validateSchema(schema, options) ***REMOVED***
	if(Array.isArray(options)) ***REMOVED***
		const errors = options.map((options) => validateObject(schema, options));
		errors.forEach((list, idx) => ***REMOVED***
			list.forEach(function applyPrefix(err) ***REMOVED***
				err.dataPath = `[$***REMOVED***idx***REMOVED***]$***REMOVED***err.dataPath***REMOVED***`;
				if(err.children) ***REMOVED***
					err.children.forEach(applyPrefix);
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
		return errors.reduce((arr, items) => ***REMOVED***
			return arr.concat(items);
		***REMOVED***, []);
	***REMOVED*** else ***REMOVED***
		return validateObject(schema, options);
	***REMOVED***
***REMOVED***

function validateObject(schema, options) ***REMOVED***
	const validate = ajv.compile(schema);
	const valid = validate(options);
	return valid ? [] : filterErrors(validate.errors);
***REMOVED***

function filterErrors(errors) ***REMOVED***
	let newErrors = [];
	errors.forEach((err) => ***REMOVED***
		const dataPath = err.dataPath;
		let children = [];
		newErrors = newErrors.filter((oldError) => ***REMOVED***
			if(oldError.dataPath.includes(dataPath)) ***REMOVED***
				if(oldError.children) ***REMOVED***
					children = children.concat(oldError.children.slice(0));
				***REMOVED***
				oldError.children = undefined;
				children.push(oldError);
				return false;
			***REMOVED***
			return true;
		***REMOVED***);
		if(children.length) ***REMOVED***
			err.children = children;
		***REMOVED***
		newErrors.push(err);
	***REMOVED***);

	return newErrors;
***REMOVED***

module.exports = validateSchema;
