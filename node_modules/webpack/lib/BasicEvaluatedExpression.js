/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

class BasicEvaluatedExpression ***REMOVED***

	constructor() ***REMOVED***
		this.range = null;
	***REMOVED***

	isNull() ***REMOVED***
		return !!this.null;
	***REMOVED***

	isString() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "string");
	***REMOVED***

	isNumber() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "number");
	***REMOVED***

	isBoolean() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "bool");
	***REMOVED***

	isRegExp() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "regExp");
	***REMOVED***

	isConditional() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "options");
	***REMOVED***

	isArray() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "items");
	***REMOVED***

	isConstArray() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "array");
	***REMOVED***

	isIdentifier() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "identifier");
	***REMOVED***

	isWrapped() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "prefix") || Object.prototype.hasOwnProperty.call(this, "postfix");
	***REMOVED***

	isTemplateString() ***REMOVED***
		return Object.prototype.hasOwnProperty.call(this, "quasis");
	***REMOVED***

	isTruthy() ***REMOVED***
		return this.truthy;
	***REMOVED***

	isFalsy() ***REMOVED***
		return this.falsy;
	***REMOVED***

	asBool() ***REMOVED***
		if(this.truthy) return true;
		else if(this.falsy) return false;
		else if(this.isBoolean()) return this.bool;
		else if(this.isNull()) return false;
		else if(this.isString()) return !!this.string;
		else if(this.isNumber()) return !!this.number;
		else if(this.isRegExp()) return true;
		else if(this.isArray()) return true;
		else if(this.isConstArray()) return true;
		else if(this.isWrapped()) return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;
		else if(this.isTemplateString()) ***REMOVED***
			if(this.quasis.length === 1) return this.quasis[0].asBool();
			for(let i = 0; i < this.quasis.length; i++) ***REMOVED***
				if(this.quasis[i].asBool()) return true;
			***REMOVED***
			// can't tell if string will be empty without executing
		***REMOVED***
		return undefined;
	***REMOVED***

	setString(str) ***REMOVED***
		if(str === null)
			delete this.string;
		else
			this.string = str;
		return this;
	***REMOVED***

	setNull() ***REMOVED***
		this.null = true;
		return this;
	***REMOVED***

	setNumber(num) ***REMOVED***
		if(num === null)
			delete this.number;
		else
			this.number = num;
		return this;
	***REMOVED***

	setBoolean(bool) ***REMOVED***
		if(bool === null)
			delete this.bool;
		else
			this.bool = bool;
		return this;
	***REMOVED***

	setRegExp(regExp) ***REMOVED***
		if(regExp === null)
			delete this.regExp;
		else
			this.regExp = regExp;
		return this;
	***REMOVED***

	setIdentifier(identifier) ***REMOVED***
		if(identifier === null)
			delete this.identifier;
		else
			this.identifier = identifier;
		return this;
	***REMOVED***

	setWrapped(prefix, postfix) ***REMOVED***
		this.prefix = prefix;
		this.postfix = postfix;
		return this;
	***REMOVED***

	unsetWrapped() ***REMOVED***
		delete this.prefix;
		delete this.postfix;
		return this;
	***REMOVED***

	setOptions(options) ***REMOVED***
		if(options === null)
			delete this.options;
		else
			this.options = options;
		return this;
	***REMOVED***

	setItems(items) ***REMOVED***
		if(items === null)
			delete this.items;
		else
			this.items = items;
		return this;
	***REMOVED***

	setArray(array) ***REMOVED***
		if(array === null)
			delete this.array;
		else
			this.array = array;
		return this;
	***REMOVED***

	setTemplateString(quasis) ***REMOVED***
		if(quasis === null)
			delete this.quasis;
		else
			this.quasis = quasis;
		return this;
	***REMOVED***

	setTruthy() ***REMOVED***
		this.falsy = false;
		this.truthy = true;
		return this;
	***REMOVED***

	setFalsy() ***REMOVED***
		this.falsy = true;
		this.truthy = false;
		return this;
	***REMOVED***

	addOptions(options) ***REMOVED***
		if(!this.options) this.options = [];
		options.forEach(item => ***REMOVED***
			this.options.push(item);
		***REMOVED***, this);
		return this;
	***REMOVED***

	setRange(range) ***REMOVED***
		this.range = range;
		return this;
	***REMOVED***

***REMOVED***

module.exports = BasicEvaluatedExpression;
