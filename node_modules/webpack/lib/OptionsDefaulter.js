/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function getProperty(obj, name) ***REMOVED***
	name = name.split(".");
	for(let i = 0; i < name.length - 1; i++) ***REMOVED***
		obj = obj[name[i]];
		if(typeof obj !== "object" || !obj) return;
	***REMOVED***
	return obj[name.pop()];
***REMOVED***

function setProperty(obj, name, value) ***REMOVED***
	name = name.split(".");
	for(let i = 0; i < name.length - 1; i++) ***REMOVED***
		if(typeof obj[name[i]] !== "object" && typeof obj[name[i]] !== "undefined") return;
		if(!obj[name[i]]) obj[name[i]] = ***REMOVED******REMOVED***;
		obj = obj[name[i]];
	***REMOVED***
	obj[name.pop()] = value;
***REMOVED***

class OptionsDefaulter ***REMOVED***
	constructor() ***REMOVED***
		this.defaults = ***REMOVED******REMOVED***;
		this.config = ***REMOVED******REMOVED***;
	***REMOVED***

	process(options) ***REMOVED***
		// TODO: change this for webpack 4: options = Object.assign(***REMOVED******REMOVED***, options);
		for(let name in this.defaults) ***REMOVED***
			switch(this.config[name]) ***REMOVED***
				case undefined:
					if(getProperty(options, name) === undefined)
						setProperty(options, name, this.defaults[name]);
					break;
				case "call":
					setProperty(options, name, this.defaults[name].call(this, getProperty(options, name), options), options);
					break;
				case "make":
					if(getProperty(options, name) === undefined)
						setProperty(options, name, this.defaults[name].call(this, options), options);
					break;
				case "append":
					***REMOVED***
						let oldValue = getProperty(options, name);
						if(!Array.isArray(oldValue)) oldValue = [];
						oldValue.push.apply(oldValue, this.defaults[name]);
						setProperty(options, name, oldValue);
						break;
					***REMOVED***
				default:
					throw new Error("OptionsDefaulter cannot process " + this.config[name]);
			***REMOVED***
		***REMOVED***
		// TODO: change this for webpack 4: return options;
	***REMOVED***

	set(name, config, def) ***REMOVED***
		if(arguments.length === 3) ***REMOVED***
			this.defaults[name] = def;
			this.config[name] = config;
		***REMOVED*** else ***REMOVED***
			this.defaults[name] = config;
			delete this.config[name];
		***REMOVED***
	***REMOVED***
***REMOVED***

module.exports = OptionsDefaulter;
