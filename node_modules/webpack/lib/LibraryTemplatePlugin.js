/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const SetVarMainTemplatePlugin = require("./SetVarMainTemplatePlugin");

function accessorToObjectAccess(accessor) ***REMOVED***
	return accessor.map((a) => ***REMOVED***
		return `[$***REMOVED***JSON.stringify(a)***REMOVED***]`;
	***REMOVED***).join("");
***REMOVED***

function accessorAccess(base, accessor, joinWith) ***REMOVED***
	accessor = [].concat(accessor);
	return accessor.map((a, idx) => ***REMOVED***
		a = base ?
			base + accessorToObjectAccess(accessor.slice(0, idx + 1)) :
			accessor[0] + accessorToObjectAccess(accessor.slice(1, idx + 1));
		if(idx === accessor.length - 1) return a;
		if(idx === 0 && typeof base === "undefined") return `$***REMOVED***a***REMOVED*** = typeof $***REMOVED***a***REMOVED*** === "object" ? $***REMOVED***a***REMOVED*** : ***REMOVED******REMOVED***`;
		return `$***REMOVED***a***REMOVED*** = $***REMOVED***a***REMOVED*** || ***REMOVED******REMOVED***`;
	***REMOVED***).join(joinWith || "; ");
***REMOVED***

class LibraryTemplatePlugin ***REMOVED***

	constructor(name, target, umdNamedDefine, auxiliaryComment, exportProperty) ***REMOVED***
		this.name = name;
		this.target = target;
		this.umdNamedDefine = umdNamedDefine;
		this.auxiliaryComment = auxiliaryComment;
		this.exportProperty = exportProperty;
	***REMOVED***

	apply(compiler) ***REMOVED***
		compiler.plugin("this-compilation", (compilation) => ***REMOVED***
			if(this.exportProperty) ***REMOVED***
				var ExportPropertyMainTemplatePlugin = require("./ExportPropertyMainTemplatePlugin");
				compilation.apply(new ExportPropertyMainTemplatePlugin(this.exportProperty));
			***REMOVED***
			switch(this.target) ***REMOVED***
				case "var":
					compilation.apply(new SetVarMainTemplatePlugin(`var $***REMOVED***accessorAccess(false, this.name)***REMOVED***`));
					break;
				case "assign":
					compilation.apply(new SetVarMainTemplatePlugin(accessorAccess(undefined, this.name)));
					break;
				case "this":
				case "window":
				case "global":
					if(this.name)
						compilation.apply(new SetVarMainTemplatePlugin(accessorAccess(this.target, this.name)));
					else
						compilation.apply(new SetVarMainTemplatePlugin(this.target, true));
					break;
				case "commonjs":
					if(this.name)
						compilation.apply(new SetVarMainTemplatePlugin(accessorAccess("exports", this.name)));
					else
						compilation.apply(new SetVarMainTemplatePlugin("exports", true));
					break;
				case "commonjs2":
				case "commonjs-module":
					compilation.apply(new SetVarMainTemplatePlugin("module.exports"));
					break;
				case "amd":
					var AmdMainTemplatePlugin = require("./AmdMainTemplatePlugin");
					compilation.apply(new AmdMainTemplatePlugin(this.name));
					break;
				case "umd":
				case "umd2":
					var UmdMainTemplatePlugin = require("./UmdMainTemplatePlugin");
					compilation.apply(new UmdMainTemplatePlugin(this.name, ***REMOVED***
						optionalAmdExternalAsGlobal: this.target === "umd2",
						namedDefine: this.umdNamedDefine,
						auxiliaryComment: this.auxiliaryComment
					***REMOVED***));
					break;
				case "jsonp":
					var JsonpExportMainTemplatePlugin = require("./JsonpExportMainTemplatePlugin");
					compilation.apply(new JsonpExportMainTemplatePlugin(this.name));
					break;
				default:
					throw new Error(`$***REMOVED***this.target***REMOVED*** is not a valid Library target`);
			***REMOVED***
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = LibraryTemplatePlugin;
