/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const util = require("util");

const DependenciesBlock = require("./DependenciesBlock");
const ModuleReason = require("./ModuleReason");
const SortableSet = require("./util/SortableSet");
const Template = require("./Template");

let debugId = 1000;

const sortById = (a, b) => ***REMOVED***
	return a.id - b.id;
***REMOVED***;

const sortByDebugId = (a, b) => ***REMOVED***
	return a.debugId - b.debugId;
***REMOVED***;

class Module extends DependenciesBlock ***REMOVED***

	constructor() ***REMOVED***
		super();
		this.context = null;
		this.reasons = [];
		this.debugId = debugId++;
		this.id = null;
		this.portableId = null;
		this.index = null;
		this.index2 = null;
		this.depth = null;
		this.used = null;
		this.usedExports = null;
		this.providedExports = null;
		this._chunks = new SortableSet(undefined, sortById);
		this._chunksDebugIdent = undefined;
		this.warnings = [];
		this.dependenciesWarnings = [];
		this.errors = [];
		this.dependenciesErrors = [];
		this.strict = false;
		this.meta = ***REMOVED******REMOVED***;
		this.optimizationBailout = [];
	***REMOVED***

	disconnect() ***REMOVED***
		this.reasons.length = 0;
		this.id = null;
		this.index = null;
		this.index2 = null;
		this.depth = null;
		this.used = null;
		this.usedExports = null;
		this.providedExports = null;
		this._chunks.clear();
		this._chunksDebugIdent = undefined;
		this.optimizationBailout.length = 0;
		super.disconnect();
	***REMOVED***

	unseal() ***REMOVED***
		this.id = null;
		this.index = null;
		this.index2 = null;
		this.depth = null;
		this._chunks.clear();
		this._chunksDebugIdent = undefined;
		super.unseal();
	***REMOVED***

	setChunks(chunks) ***REMOVED***
		this._chunks = new SortableSet(chunks, sortById);
		this._chunksDebugIdent = undefined;
	***REMOVED***

	addChunk(chunk) ***REMOVED***
		this._chunks.add(chunk);
		this._chunksDebugIdent = undefined;
	***REMOVED***

	removeChunk(chunk) ***REMOVED***
		if(this._chunks.delete(chunk)) ***REMOVED***
			this._chunksDebugIdent = undefined;
			chunk.removeModule(this);
			return true;
		***REMOVED***
		return false;
	***REMOVED***

	isInChunk(chunk) ***REMOVED***
		return this._chunks.has(chunk);
	***REMOVED***

	getChunkIdsIdent() ***REMOVED***
		if(this._chunksDebugIdent !== undefined) return this._chunksDebugIdent;
		this._chunks.sortWith(sortByDebugId);
		const chunks = this._chunks;
		const list = [];
		for(const chunk of chunks) ***REMOVED***
			const debugId = chunk.debugId;

			if(typeof debugId !== "number") ***REMOVED***
				return this._chunksDebugIdent = null;
			***REMOVED***

			list.push(debugId);
		***REMOVED***

		return this._chunksDebugIdent = list.join(",");
	***REMOVED***

	forEachChunk(fn) ***REMOVED***
		this._chunks.forEach(fn);
	***REMOVED***

	mapChunks(fn) ***REMOVED***
		return Array.from(this._chunks, fn);
	***REMOVED***

	getChunks() ***REMOVED***
		return Array.from(this._chunks);
	***REMOVED***

	getNumberOfChunks() ***REMOVED***
		return this._chunks.size;
	***REMOVED***

	hasEqualsChunks(otherModule) ***REMOVED***
		if(this._chunks.size !== otherModule._chunks.size) return false;
		this._chunks.sortWith(sortByDebugId);
		otherModule._chunks.sortWith(sortByDebugId);
		const a = this._chunks[Symbol.iterator]();
		const b = otherModule._chunks[Symbol.iterator]();
		while(true) ***REMOVED*** // eslint-disable-line
			const aItem = a.next();
			const bItem = b.next();
			if(aItem.done) return true;
			if(aItem.value !== bItem.value) return false;
		***REMOVED***
	***REMOVED***

	addReason(module, dependency) ***REMOVED***
		this.reasons.push(new ModuleReason(module, dependency));
	***REMOVED***

	removeReason(module, dependency) ***REMOVED***
		for(let i = 0; i < this.reasons.length; i++) ***REMOVED***
			let r = this.reasons[i];
			if(r.module === module && r.dependency === dependency) ***REMOVED***
				this.reasons.splice(i, 1);
				return true;
			***REMOVED***
		***REMOVED***
		return false;
	***REMOVED***

	hasReasonForChunk(chunk) ***REMOVED***
		for(let i = 0; i < this.reasons.length; i++) ***REMOVED***
			if(this.reasons[i].hasChunk(chunk))
				return true;
		***REMOVED***
		return false;
	***REMOVED***

	rewriteChunkInReasons(oldChunk, newChunks) ***REMOVED***
		for(let i = 0; i < this.reasons.length; i++) ***REMOVED***
			this.reasons[i].rewriteChunks(oldChunk, newChunks);
		***REMOVED***
	***REMOVED***

	isUsed(exportName) ***REMOVED***
		if(this.used === null) return exportName;
		if(!exportName) return !!this.used;
		if(!this.used) return false;
		if(!this.usedExports) return false;
		if(this.usedExports === true) return exportName;
		let idx = this.usedExports.indexOf(exportName);
		if(idx < 0) return false;
		if(this.isProvided(exportName))
			return Template.numberToIdentifer(idx);
		return exportName;
	***REMOVED***

	isProvided(exportName) ***REMOVED***
		if(!Array.isArray(this.providedExports))
			return null;
		return this.providedExports.indexOf(exportName) >= 0;
	***REMOVED***

	toString() ***REMOVED***
		return `Module[$***REMOVED***this.id || this.debugId***REMOVED***]`;
	***REMOVED***

	needRebuild(fileTimestamps, contextTimestamps) ***REMOVED***
		return true;
	***REMOVED***

	updateHash(hash) ***REMOVED***
		hash.update(this.id + "" + this.used);
		hash.update(JSON.stringify(this.usedExports));
		super.updateHash(hash);
	***REMOVED***

	sortItems(sortChunks) ***REMOVED***
		super.sortItems();
		if(sortChunks)
			this._chunks.sort();
		this.reasons.sort((a, b) => sortById(a.module, b.module));
		if(Array.isArray(this.usedExports)) ***REMOVED***
			this.usedExports.sort();
		***REMOVED***
	***REMOVED***

	unbuild() ***REMOVED***
		this.disconnect();
	***REMOVED***
***REMOVED***

Object.defineProperty(Module.prototype, "entry", ***REMOVED***
	configurable: false,
	get() ***REMOVED***
		throw new Error("Module.entry was removed. Use Chunk.entryModule");
	***REMOVED***,
	set() ***REMOVED***
		throw new Error("Module.entry was removed. Use Chunk.entryModule");
	***REMOVED***
***REMOVED***);

Object.defineProperty(Module.prototype, "chunks", ***REMOVED***
	configurable: false,
	get: util.deprecate(function() ***REMOVED***
		return Array.from(this._chunks);
	***REMOVED***, "Module.chunks: Use Module.forEachChunk/mapChunks/getNumberOfChunks/isInChunk/addChunk/removeChunk instead"),
	set() ***REMOVED***
		throw new Error("Readonly. Use Module.addChunk/removeChunk to modify chunks.");
	***REMOVED***
***REMOVED***);

Module.prototype.identifier = null;
Module.prototype.readableIdentifier = null;
Module.prototype.build = null;
Module.prototype.source = null;
Module.prototype.size = null;
Module.prototype.nameForCondition = null;

module.exports = Module;
