/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");
const DelegatedModuleFactoryPlugin = require("./DelegatedModuleFactoryPlugin");
const ExternalModuleFactoryPlugin = require("./ExternalModuleFactoryPlugin");
const DelegatedExportsDependency = require("./dependencies/DelegatedExportsDependency");
const NullFactory = require("./NullFactory");

class DllReferencePlugin ***REMOVED***
	constructor(options) ***REMOVED***
		this.options = options;
	***REMOVED***

	apply(compiler) ***REMOVED***
		compiler.plugin("compilation", (compilation, params) => ***REMOVED***
			const normalModuleFactory = params.normalModuleFactory;
			compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);
			compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());
		***REMOVED***);

		compiler.plugin("before-compile", (params, callback) => ***REMOVED***
			const manifest = this.options.manifest;
			if(typeof manifest === "string") ***REMOVED***
				params.compilationDependencies.push(manifest);
				compiler.inputFileSystem.readFile(manifest, function(err, result) ***REMOVED***
					if(err) return callback(err);
					params["dll reference " + manifest] = JSON.parse(result.toString("utf-8"));
					return callback();
				***REMOVED***);
			***REMOVED*** else ***REMOVED***
				return callback();
			***REMOVED***
		***REMOVED***);

		compiler.plugin("compile", (params) => ***REMOVED***
			let manifest = this.options.manifest;
			if(typeof manifest === "string") ***REMOVED***
				manifest = params["dll reference " + manifest];
			***REMOVED***
			const name = this.options.name || manifest.name;
			const sourceType = this.options.sourceType || (manifest && manifest.type) || "var";
			const externals = ***REMOVED******REMOVED***;
			const source = "dll-reference " + name;
			externals[source] = name;
			params.normalModuleFactory.apply(new ExternalModuleFactoryPlugin(sourceType, externals));
			params.normalModuleFactory.apply(new DelegatedModuleFactoryPlugin(***REMOVED***
				source: source,
				type: this.options.type,
				scope: this.options.scope,
				context: this.options.context || compiler.options.context,
				content: this.options.content || manifest.content,
				extensions: this.options.extensions
			***REMOVED***));
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = DllReferencePlugin;
