/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
const NullDependency = require("./NullDependency");
const DepBlockHelpers = require("./DepBlockHelpers");

class AMDRequireDependency extends NullDependency ***REMOVED***
	constructor(block) ***REMOVED***
		super();
		this.block = block;
	***REMOVED***
***REMOVED***

AMDRequireDependency.Template = class AMDRequireDependencyTemplate ***REMOVED***
	apply(dep, source, outputOptions, requestShortener) ***REMOVED***
		const depBlock = dep.block;
		const wrapper = DepBlockHelpers.getLoadDepBlockWrapper(depBlock, outputOptions, requestShortener, "require");

		// has array range but no function range
		if(depBlock.arrayRange && !depBlock.functionRange) ***REMOVED***
			const startBlock = wrapper[0] + "function() ***REMOVED***";
			const endBlock = `;***REMOVED***$***REMOVED***wrapper[1]***REMOVED***__webpack_require__.oe$***REMOVED***wrapper[2]***REMOVED***`;
			source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, startBlock);
			source.replace(depBlock.arrayRange[1], depBlock.outerRange[1] - 1, endBlock);
			return;
		***REMOVED***

		// has function range but no array range
		if(depBlock.functionRange && !depBlock.arrayRange) ***REMOVED***
			const startBlock = wrapper[0] + "function() ***REMOVED***(";
			const endBlock = `.call(exports, __webpack_require__, exports, module));***REMOVED***$***REMOVED***wrapper[1]***REMOVED***__webpack_require__.oe$***REMOVED***wrapper[2]***REMOVED***`;
			source.replace(depBlock.outerRange[0], depBlock.functionRange[0] - 1, startBlock);
			source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, endBlock);
			return;
		***REMOVED***

		// has array range, function range, and errorCallbackRange
		if(depBlock.arrayRange && depBlock.functionRange && depBlock.errorCallbackRange) ***REMOVED***
			const startBlock = wrapper[0] + "function() ***REMOVED*** ";
			const errorRangeBlock = `***REMOVED***$***REMOVED***depBlock.functionBindThis ? ".bind(this)" : ""***REMOVED***$***REMOVED***wrapper[1]***REMOVED***`;
			const endBlock = `$***REMOVED***depBlock.errorCallbackBindThis ? ".bind(this)" : ""***REMOVED***$***REMOVED***wrapper[2]***REMOVED***`;

			source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, startBlock);
			source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
			source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; ((");
			source.insert(depBlock.functionRange[1], ").apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));");
			source.replace(depBlock.functionRange[1], depBlock.errorCallbackRange[0] - 1, errorRangeBlock);
			source.replace(depBlock.errorCallbackRange[1], depBlock.outerRange[1] - 1, endBlock);
			return;
		***REMOVED***

		// has array range, function range, but no errorCallbackRange
		if(depBlock.arrayRange && depBlock.functionRange) ***REMOVED***
			const startBlock = wrapper[0] + "function() ***REMOVED*** ";
			const endBlock = `***REMOVED***$***REMOVED***depBlock.functionBindThis ? ".bind(this)" : ""***REMOVED***$***REMOVED***wrapper[1]***REMOVED***__webpack_require__.oe$***REMOVED***wrapper[2]***REMOVED***`;
			source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, startBlock);
			source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
			source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; ((");
			source.insert(depBlock.functionRange[1], ").apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));");
			source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, endBlock);
		***REMOVED***
	***REMOVED***
***REMOVED***;

module.exports = AMDRequireDependency;
