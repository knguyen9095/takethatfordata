/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
const Dependency = require("../Dependency");
const webpackMissingModuleModule = require("./WebpackMissingModule").module;

class AMDRequireArrayDependency extends Dependency ***REMOVED***
	constructor(depsArray, range) ***REMOVED***
		super();
		this.depsArray = depsArray;
		this.range = range;
	***REMOVED***

	get type() ***REMOVED***
		return "amd require array";
	***REMOVED***
***REMOVED***

AMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate ***REMOVED***
	apply(dep, source, outputOptions, requestShortener) ***REMOVED***
		const content = this.getContent(dep, outputOptions, requestShortener);
		source.replace(dep.range[0], dep.range[1] - 1, content);
	***REMOVED***

	getContent(dep, outputOptions, requestShortener) ***REMOVED***
		const requires = dep.depsArray.map((dependency) => ***REMOVED***
			const optionalComment = this.optionalComment(outputOptions.pathinfo, requestShortener.shorten(dependency.request));
			return this.contentForDependency(dependency, optionalComment);
		***REMOVED***);
		return `[$***REMOVED***requires.join(", ")***REMOVED***]`;
	***REMOVED***

	optionalComment(pathInfo, shortenedRequest) ***REMOVED***
		if(!pathInfo) ***REMOVED***
			return "";
		***REMOVED***
		return `/*! $***REMOVED***shortenedRequest***REMOVED*** */ `;
	***REMOVED***

	contentForDependency(dep, comment) ***REMOVED***
		if(typeof dep === "string") ***REMOVED***
			return dep;
		***REMOVED***

		if(dep.module) ***REMOVED***
			const stringifiedId = JSON.stringify(dep.module.id);
			return `__webpack_require__($***REMOVED***comment***REMOVED***$***REMOVED***stringifiedId***REMOVED***)`;
		***REMOVED*** else if(dep.localModule) ***REMOVED***
			return dep.localModule.variableName();
		***REMOVED***

		return webpackMissingModuleModule(dep.request);
	***REMOVED***
***REMOVED***;

module.exports = AMDRequireArrayDependency;
