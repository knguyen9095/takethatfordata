'use strict';
const mimicFn = require('mimic-fn');

const cacheStore = new WeakMap();

const defaultCacheKey = function (x) ***REMOVED***
	if (arguments.length === 1 && (x === null || x === undefined || (typeof x !== 'function' && typeof x !== 'object'))) ***REMOVED***
		return x;
	***REMOVED***

	return JSON.stringify(arguments);
***REMOVED***;

module.exports = (fn, opts) => ***REMOVED***
	opts = Object.assign(***REMOVED***
		cacheKey: defaultCacheKey,
		cache: new Map()
	***REMOVED***, opts);

	const memoized = function () ***REMOVED***
		const cache = cacheStore.get(memoized);
		const key = opts.cacheKey.apply(null, arguments);

		if (cache.has(key)) ***REMOVED***
			const c = cache.get(key);

			if (typeof opts.maxAge !== 'number' || Date.now() < c.maxAge) ***REMOVED***
				return c.data;
			***REMOVED***
		***REMOVED***

		const ret = fn.apply(null, arguments);

		cache.set(key, ***REMOVED***
			data: ret,
			maxAge: Date.now() + (opts.maxAge || 0)
		***REMOVED***);

		return ret;
	***REMOVED***;

	mimicFn(memoized, fn);

	cacheStore.set(memoized, opts.cache);

	return memoized;
***REMOVED***;

module.exports.clear = fn => ***REMOVED***
	const cache = cacheStore.get(fn);

	if (cache && typeof cache.clear === 'function') ***REMOVED***
		cache.clear();
	***REMOVED***
***REMOVED***;
