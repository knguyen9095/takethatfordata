var assert = require('assert');
var fs = require('fs');
var GoogleToken = require('../lib/index.js');
var EMAIL = 'example@developer.gserviceaccount.com';
var KEYFILE = './test/assets/key.pem';
var P12FILE = './test/assets/key.p12';
var KEYFILEJSON = './test/assets/key.json';
var KEYFILENOEMAILJSON = './test/assets/key-no-email.json';
var KEYCONTENTS = fs.readFileSync(KEYFILE);
var KEYJSONCONTENTS = fs.readFileSync(KEYFILEJSON);
var SCOPE1 = 'https://www.googleapis.com/auth/urlshortener';
var SCOPE2 = 'https://www.googleapis.com/auth/drive';
var SCOPES = [SCOPE1, SCOPE2];

var GOOGLE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token';
var GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';

var TESTDATA = ***REMOVED***
  email: 'email@developer.gserviceaccount.com',
  scope: 'scope123', // or space-delimited string of scopes
  key: 'abc123key'
***REMOVED***;

var TESTDATA_KEYFILE = ***REMOVED***
  email: 'email@developer.gserviceaccount.com',
  scope: 'scope123', // or space-delimited string of scopes
  keyFile: KEYFILE
***REMOVED***;

var TESTDATA_KEYFILENOEMAIL = ***REMOVED***
  scope: 'scope123', // or space-delimited string of scopes
  keyFile: KEYFILE
***REMOVED***;

var TESTDATA_KEYFILEJSON = ***REMOVED***
  scope: 'scope123', // or space-delimited string of scopes
  keyFile: KEYFILEJSON
***REMOVED***;

var TESTDATA_KEYFILENOEMAILJSON = ***REMOVED***
  scope: 'scope123', // or space-delimited string of scopes
  keyFile: KEYFILENOEMAILJSON
***REMOVED***;

var TESTDATA_P12 = ***REMOVED***
  email: 'email@developer.gserviceaccount.com',
  scope: 'scope123', // or space-delimited string of scopes
  keyFile: P12FILE
***REMOVED***;

var TESTDATA_P12_NO_EMAIL = ***REMOVED***
  scope: 'scope123', // or space-delimited string of scopes
  keyFile: P12FILE
***REMOVED***;

var MIME = ***REMOVED***
  lookup: function(filename) ***REMOVED***
    if (filename === P12FILE) ***REMOVED***
      return 'application/x-pkcs12';
    ***REMOVED*** else if (filename === KEYFILEJSON) ***REMOVED***
      return 'application/json';
    ***REMOVED*** else ***REMOVED***
      return '';
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

var noop = function() ***REMOVED******REMOVED***;

describe('gtoken', function() ***REMOVED***
  it('should exist', function() ***REMOVED***
    assert.equal(typeof GoogleToken, 'function');
  ***REMOVED***);

  it('should work without new or options', function() ***REMOVED***
    var gtoken = GoogleToken();
    assert(gtoken);
  ***REMOVED***);

  describe('.iss', function() ***REMOVED***
    it('should be set from email option', function() ***REMOVED***
      var gtoken = GoogleToken(***REMOVED***
        email: EMAIL
      ***REMOVED***);
      assert.equal(gtoken.iss, EMAIL);
      assert.equal(gtoken.email, undefined);
    ***REMOVED***);

    it('should be set from iss option', function() ***REMOVED***
      var gtoken = GoogleToken(***REMOVED***
        iss: EMAIL
      ***REMOVED***);
      assert.equal(gtoken.iss, EMAIL);
    ***REMOVED***);

    it('should be set from email option over iss option', function() ***REMOVED***
      var gtoken = GoogleToken(***REMOVED***
        iss: EMAIL,
        email: 'another' + EMAIL
      ***REMOVED***);
      assert.equal(gtoken.iss, 'another' + EMAIL);
    ***REMOVED***);
  ***REMOVED***);

  describe('.scope', function() ***REMOVED***
    it('should accept strings', function() ***REMOVED***
      var gtoken = GoogleToken(***REMOVED***
        scope: 'hello world'
      ***REMOVED***);
      assert.equal(gtoken.scope, 'hello world');
    ***REMOVED***);

    it('should accept array of strings', function() ***REMOVED***
      var gtoken = GoogleToken(***REMOVED***
        scope: ['hello', 'world']
      ***REMOVED***);
      assert.equal(gtoken.scope, 'hello world');
    ***REMOVED***);
  ***REMOVED***);

  describe('.hasExpired()', function() ***REMOVED***
    it('should exist', function() ***REMOVED***
      var gtoken = GoogleToken();
      assert.equal(typeof gtoken.hasExpired, 'function');
    ***REMOVED***);

    it('should detect expired tokens', function() ***REMOVED***
      var gtoken = GoogleToken();
      assert(gtoken.hasExpired(), 'should be expired without token');
      gtoken.token = 'hello';
      assert(gtoken.hasExpired(), 'should be expired without expires_at');
      gtoken.expires_at = (new Date().getTime()) + 10000;
      assert(!gtoken.hasExpired(), 'shouldnt be expired with future date');
      gtoken.expires_at = (new Date().getTime()) - 10000;
      assert(gtoken.hasExpired(), 'should be expired with past date');
      gtoken.expires_at = (new Date().getTime()) + 10000;
      gtoken.token = null;
      assert(gtoken.hasExpired(), 'should be expired with no token');
    ***REMOVED***);
  ***REMOVED***);

  describe('.revokeToken()', function() ***REMOVED***
    it('should exist', function() ***REMOVED***
      var gtoken = GoogleToken();
      assert.equal(typeof gtoken.revokeToken, 'function');
    ***REMOVED***);


    it('should run ._configure()', function(done) ***REMOVED***
      var gtoken = GoogleToken();
      gtoken.token = 'woot';
      gtoken._request = function(opts, cb) ***REMOVED***
        assert.equal(opts, GOOGLE_REVOKE_TOKEN_URL + 'woot');
        cb();
      ***REMOVED***;
      gtoken._configure = function(options) ***REMOVED***
        assert(options);
      ***REMOVED***;
      gtoken.revokeToken(done);
    ***REMOVED***);

    it('should return error when no token set', function(done) ***REMOVED***
      var gtoken = GoogleToken();
      gtoken.token = null;
      gtoken.revokeToken(function(err) ***REMOVED***
        assert(err && err.message);
        done();
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);

  describe('.getToken()', function() ***REMOVED***
    it('should exist', function() ***REMOVED***
      var gtoken = GoogleToken();
      assert.equal(typeof gtoken.getToken, 'function');
    ***REMOVED***);

    it('should run jws.sign() with correct object', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA);
      gtoken._signJWT = function(data) ***REMOVED***
        assert.deepEqual(data.header, ***REMOVED***
          alg: 'RS256',
          typ: 'JWT'
        ***REMOVED***);
        assert(data.payload);
        assert.equal(data.payload.iss, 'email@developer.gserviceaccount.com');
        assert.equal(data.payload.scope, 'scope123');
        assert.equal(data.payload.aud, GOOGLE_TOKEN_URL);
        assert.equal(data.secret, 'abc123key');
        done();
      ***REMOVED***;

      gtoken.getToken(noop);
    ***REMOVED***);

    it('should read .pem keyFile from file', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA_KEYFILE);
      gtoken._mime = MIME;

      gtoken._signJWT = function(opts, cb) ***REMOVED***
        cb();
      ***REMOVED***;

      gtoken._request = function(opts, cb) ***REMOVED***
        cb();
      ***REMOVED***;

      gtoken.getToken(function(err, token) ***REMOVED***
        assert.deepEqual(gtoken.key, KEYCONTENTS);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should return error if iss is not set with .pem', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA_KEYFILENOEMAIL);
      gtoken.getToken(function(err) ***REMOVED***
        assert.strictEqual(err.code, 'MISSING_CREDENTIALS');
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should read .json key from file', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA_KEYFILEJSON);
      gtoken._mime = MIME;

      gtoken._signJWT = function(opts, cb) ***REMOVED***
        cb();
      ***REMOVED***;

      gtoken._request = function(opts, cb) ***REMOVED***
        cb();
      ***REMOVED***;

      gtoken.getToken(function(err, token) ***REMOVED***
        var parsed = JSON.parse(KEYJSONCONTENTS);
        assert.deepEqual(gtoken.key, parsed.private_key);
        assert.deepEqual(gtoken.iss, parsed.client_email);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should return error if iss is not set with .json', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA_KEYFILENOEMAILJSON);
      gtoken.getToken(function(err) ***REMOVED***
        assert.strictEqual(err.code, 'MISSING_CREDENTIALS');
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should return cached token if not expired', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA);
      gtoken.token = 'mytoken';
      gtoken.expires_at = new Date().getTime() + 10000;
      gtoken.getToken(function(err, token) ***REMOVED***
        assert.equal(token, 'mytoken');
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should run mime.lookup if keyFile given', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA_KEYFILE);

      gtoken._mime = ***REMOVED***
        lookup: function(filename) ***REMOVED***
          assert.equal(filename, KEYFILE);
          done();
        ***REMOVED***
      ***REMOVED***;

      gtoken._request = function(opts, callback) ***REMOVED***
        callback();
      ***REMOVED***;

      gtoken.getToken(noop);
    ***REMOVED***);

    it('should run gp12pem if .p12 file is given', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA_P12);

      gtoken._gp12pem = function(filename, callback) ***REMOVED***
        assert.equal(filename, P12FILE);
        done();
      ***REMOVED***;

      gtoken._mime = MIME;
      gtoken.getToken(noop);
    ***REMOVED***);

    it('should return error if iss is not set with .p12', function(done) ***REMOVED***
      var gtoken = GoogleToken(TESTDATA_P12_NO_EMAIL);
      gtoken.getToken(function(err) ***REMOVED***
        assert.strictEqual(err.code, 'MISSING_CREDENTIALS');
        done();
      ***REMOVED***);
    ***REMOVED***);

    describe('request', function() ***REMOVED***
      it('should be run with correct options', function(done) ***REMOVED***
        var gtoken = GoogleToken(TESTDATA);
        gtoken._signJWT = function sign(opts, callback) ***REMOVED***
          callback(null, 'signedJWT123');
        ***REMOVED***;

        gtoken._request = function(options, callback) ***REMOVED***
          assert.deepEqual(options, ***REMOVED***
            method: 'post',
            url: GOOGLE_TOKEN_URL,
            form: ***REMOVED***
              grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
              assertion: 'signedJWT123'
            ***REMOVED***
          ***REMOVED***);
          callback();
        ***REMOVED***;

        gtoken.getToken(done);
      ***REMOVED***);

      it('should set and return correct properties on success', function(done) ***REMOVED***
        var gtoken = GoogleToken(TESTDATA);

        var RESPBODY = JSON.stringify(***REMOVED***
          access_token: 'accesstoken123',
          expires_in: 3600,
          token_type: 'Bearer'
        ***REMOVED***);

        gtoken._request = function(options, callback) ***REMOVED***
          callback(null, 'res', RESPBODY);
        ***REMOVED***;

        gtoken._signJWT = function(opts, callback) ***REMOVED***
          callback(null, 'signedJWT123');
        ***REMOVED***;

        gtoken.getToken(function(err, token) ***REMOVED***
          assert.deepEqual(gtoken.raw_token, JSON.parse(RESPBODY));
          assert.equal(gtoken.token, 'accesstoken123');
          assert.equal(gtoken.token, token);
          assert.equal(err, null);
          assert(gtoken.expires_at >= (new Date()).getTime());
          assert(gtoken.expires_at <= (new Date()).getTime() + (3600 * 1000));
          done();
        ***REMOVED***);
      ***REMOVED***);

      it('should set and return correct properties on error', function(done) ***REMOVED***
        var ERROR = new Error('An error occurred.');
        var gtoken = GoogleToken(TESTDATA);

        var RESPBODY = JSON.stringify(***REMOVED***
          access_token: 'accesstoken123',
          expires_in: 3600,
          token_type: 'Bearer'
        ***REMOVED***);

        gtoken._request = function(options, callback) ***REMOVED***
          callback(ERROR);
        ***REMOVED***;

        gtoken._signJWT = function sign(opts, callback) ***REMOVED***
          callback(null, 'signedJWT123');
        ***REMOVED***;

        gtoken.getToken(function(err, token) ***REMOVED***
          assert.equal(gtoken.raw_token, null);
          assert.equal(gtoken.token, null);
          assert.equal(gtoken.token, token);
          assert.equal(err, ERROR);
          assert.equal(gtoken.expires_at, null);
          done();
        ***REMOVED***);
      ***REMOVED***);

      it('should include error_description from remote error', function(done) ***REMOVED***
        var gtoken = GoogleToken(TESTDATA);
        var ERROR = 'error_name';
        var DESCRIPTION = 'more detailed message';
        var RESPBODY = JSON.stringify(***REMOVED***
          error: ERROR,
          error_description: DESCRIPTION
        ***REMOVED***);

        gtoken._request = function(options, callback) ***REMOVED***
          callback(null, ***REMOVED******REMOVED***, RESPBODY);
        ***REMOVED***;

        gtoken._signJWT = function(opts, callback) ***REMOVED***
          callback(null, 'signedJWT123');
        ***REMOVED***;

        gtoken.getToken(function(err, token) ***REMOVED***
          assert(err instanceof Error);
          assert.equal(err.message, ERROR + ': ' + DESCRIPTION);
          done();
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);


