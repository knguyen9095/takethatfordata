var stream = require("readable-stream");

var bun = require("..");

var assert = require("assert");

describe("bun", function() ***REMOVED***
  it("should be the best", function() ***REMOVED***
    var bun = "is the best";

    assert.strictEqual(bun, "is the best");
  ***REMOVED***);

  it("should pass data through one stream", function(done) ***REMOVED***
    var uppercaser = new stream.Transform(***REMOVED***objectMode: true***REMOVED***);

    uppercaser._transform = function _transform(input, encoding, done) ***REMOVED***
      this.push(input.toString().toUpperCase());
      return done();
    ***REMOVED***;

    var stack = bun([uppercaser]);

    stack.on("readable", function() ***REMOVED***
      var data = stack.read();

      assert(typeof data === "string", "data should be a string");
      assert(data === "HELLO", "data should be transformed correctly");

      done();
    ***REMOVED***);

    stack.write("hello");
  ***REMOVED***);

  it("should pass data through two streams", function(done) ***REMOVED***
    var uppercaser  = new stream.Transform(***REMOVED***objectMode: true***REMOVED***),
        underscorer = new stream.Transform(***REMOVED***objectMode: true***REMOVED***);

    uppercaser._transform = function _transform(input, encoding, done) ***REMOVED***
      this.push(input.toString().toUpperCase());
      return done();
    ***REMOVED***;

    underscorer._transform = function _transform(input, encoding, done) ***REMOVED***
      this.push(input.toString().split("").join("_"));
      return done();
    ***REMOVED***;

    var stack = bun([uppercaser, underscorer]);

    stack.on("readable", function() ***REMOVED***
      var data = stack.read();

      assert(typeof data === "string", "data should be a string");
      assert(data === "H_E_L_L_O", "data should be transformed correctly");

      done();
    ***REMOVED***);

    stack.write("hello");
  ***REMOVED***);

  it("should finish correctly with no streams and no data written", function(done) ***REMOVED***
    var stack = bun([]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    stack.end();
  ***REMOVED***);

  it("should finish correctly with one stream and no data written", function(done) ***REMOVED***
    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    stack.end();
  ***REMOVED***);

  it("should finish correctly with two streams and no data written", function(done) ***REMOVED***
    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***),
        bob   = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice, bob]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    stack.end();
  ***REMOVED***);

  it("should finish correctly with no streams and some data written", function(done) ***REMOVED***
    var stack = bun([]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    stack.on("readable", function() ***REMOVED***
      var e;
      while (e = stack.read()) ***REMOVED***
      ***REMOVED***
    ***REMOVED***);

    stack.write("some data");
    stack.end();
  ***REMOVED***);

  it("should finish correctly with one stream and some data written", function(done) ***REMOVED***
    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    stack.on("readable", function() ***REMOVED***
      var e;
      while (e = stack.read()) ***REMOVED***
      ***REMOVED***
    ***REMOVED***);

    stack.write("some data");
    stack.end();
  ***REMOVED***);

  it("should finish correctly with two streams and some data written", function(done) ***REMOVED***
    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***),
        bob   = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice, bob]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    stack.on("readable", function() ***REMOVED***
      var e;
      while (e = stack.read()) ***REMOVED***
      ***REMOVED***
    ***REMOVED***);

    stack.write("some data");
    stack.end();
  ***REMOVED***);

  it("should finish correctly when piped through with no streams and no data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var stack = bun([]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.end();
  ***REMOVED***);

  it("should finish correctly when piped through with one stream and no data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.end();
  ***REMOVED***);

  it("should finish correctly when piped through with two streams and no data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***),
        bob   = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice, bob]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.end();
  ***REMOVED***);

  it("should finish correctly when piped through with no streams and some data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var stack = bun([]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.write("hello");
    input.end();
  ***REMOVED***);

  it("should finish correctly when piped through with one stream and some data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.write("hello");
    input.end();
  ***REMOVED***);

  it("should finish correctly when piped through with two streams and some data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***),
        bob   = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice, bob]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.write("hello");
    input.end();
  ***REMOVED***);

  it("should end correctly when piped through with no streams and no data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var stack = bun([]);

    stack.on("end", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.push(null);
  ***REMOVED***);

  it("should end correctly when piped through with one stream and no data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice]);

    stack.on("end", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.end();
  ***REMOVED***);

  it("should end correctly when piped through with two streams and no data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***),
        bob   = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice, bob]);

    stack.on("end", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.end();
  ***REMOVED***);

  it("should end correctly when piped through with no streams and some data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var stack = bun([]);

    stack.on("end", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.write("hello");
    input.end();
  ***REMOVED***);

  it("should end correctly when piped through with one stream and some data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice]);

    stack.on("end", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.write("hello");
    input.end();
  ***REMOVED***);

  it("should end correctly when piped through with two streams and some data written", function(done) ***REMOVED***
    var input = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***),
        bob   = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice, bob]);

    stack.on("end", function() ***REMOVED***
      done();
    ***REMOVED***);

    input.pipe(stack).pipe(nowhere);
    input.write("hello");
    input.end();
  ***REMOVED***);

  it("should end wrapped streams correctly when ended", function(done) ***REMOVED***
    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    alice.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    var stack = bun([alice]);

    stack.end();
  ***REMOVED***);

  it("should finish when wrapped streams finish", function(done) ***REMOVED***
    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***),
        outside = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);

    var stack = bun([alice]);

    stack.on("finish", function() ***REMOVED***
      done();
    ***REMOVED***);

    outside.pipe(stack).pipe(outside);

    alice.end();
  ***REMOVED***);

  it("should end when wrapped streams end", function(done) ***REMOVED***
    var alice = new stream.PassThrough(***REMOVED***objectMode: true***REMOVED***);
    var nowhere = new stream.Writable(***REMOVED***objectMode: true***REMOVED***);
    nowhere._write = function _write(input, encoding, done) ***REMOVED*** return done(); ***REMOVED***;

    var stack = bun([alice]);

    stack.on("end", function() ***REMOVED***
      done();
    ***REMOVED***);

    stack.pipe(nowhere);

    alice.push(null);
  ***REMOVED***);

  it("should forward errors if bubbleErrors is not specified", function(done) ***REMOVED***
    var alice = new stream.PassThrough();

    var stack = bun([alice]);

    stack.on("error", function(err) ***REMOVED***
      return done();
    ***REMOVED***);

    alice.emit("error", Error("test error"));
  ***REMOVED***);

  it("should forward errors if bubbleErrors is true", function(done) ***REMOVED***
    var alice = new stream.PassThrough();

    var stack = bun([alice], ***REMOVED***bubbleErrors: true***REMOVED***);

    stack.on("error", function(err) ***REMOVED***
      return done();
    ***REMOVED***);

    alice.emit("error", Error("test error"));
  ***REMOVED***);

  it("should not forward errors if bubbleErrors is false", function(done) ***REMOVED***
    var alice = new stream.PassThrough();

    var stack = bun([alice], ***REMOVED***bubbleErrors: false***REMOVED***);

    var timeout = setTimeout(done, 10);

    stack.on("error", function(err) ***REMOVED***
      clearTimeout(timeout);

      return done(Error("shouldn't have bubbled the error"));
    ***REMOVED***);

    alice.on("error", function(err) ***REMOVED***
      // prevent uncaught error crash
    ***REMOVED***);

    alice.emit("error", Error("test error"));
  ***REMOVED***);
***REMOVED***);
