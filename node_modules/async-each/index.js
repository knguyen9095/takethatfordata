// async-each MIT license (by Paul Miller from http://paulmillr.com).
(function(globals) ***REMOVED***
  'use strict';
  var each = function(items, next, callback) ***REMOVED***
    if (!Array.isArray(items)) throw new TypeError('each() expects array as first argument');
    if (typeof next !== 'function') throw new TypeError('each() expects function as second argument');
    if (typeof callback !== 'function') callback = Function.prototype; // no-op

    if (items.length === 0) return callback(undefined, items);

    var transformed = new Array(items.length);
    var count = 0;
    var returned = false;

    items.forEach(function(item, index) ***REMOVED***
      next(item, function(error, transformedItem) ***REMOVED***
        if (returned) return;
        if (error) ***REMOVED***
          returned = true;
          return callback(error);
        ***REMOVED***
        transformed[index] = transformedItem;
        count += 1;
        if (count === items.length) return callback(undefined, transformed);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***;

  if (typeof define !== 'undefined' && define.amd) ***REMOVED***
    define([], function() ***REMOVED***
      return each;
    ***REMOVED***); // RequireJS
  ***REMOVED*** else if (typeof module !== 'undefined' && module.exports) ***REMOVED***
    module.exports = each; // CommonJS
  ***REMOVED*** else ***REMOVED***
    globals.asyncEach = each; // <script>
  ***REMOVED***
***REMOVED***)(this);
