"use strict";
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
const createInnerCallback = require("./createInnerCallback");
const DescriptionFileUtils = require("./DescriptionFileUtils");

class DescriptionFilePlugin ***REMOVED***
	constructor(source, filenames, target) ***REMOVED***
		this.source = source;
		this.filenames = [].concat(filenames);
		this.target = target;
	***REMOVED***

	apply(resolver) ***REMOVED***
		const filenames = this.filenames;
		const target = this.target;
		resolver.plugin(this.source, (request, callback) => ***REMOVED***
			const directory = request.path;
			DescriptionFileUtils.loadDescriptionFile(resolver, directory, filenames, ((err, result) => ***REMOVED***
				if(err) return callback(err);
				if(!result) ***REMOVED***
					if(callback.missing) ***REMOVED***
						filenames.forEach((filename) => ***REMOVED***
							callback.missing.push(resolver.join(directory, filename));
						***REMOVED***);
					***REMOVED***
					if(callback.log) callback.log("No description file found");
					return callback();
				***REMOVED***
				const relativePath = "." + request.path.substr(result.directory.length).replace(/\\/g, "/");
				const obj = Object.assign(***REMOVED******REMOVED***, request, ***REMOVED***
					descriptionFilePath: result.path,
					descriptionFileData: result.content,
					descriptionFileRoot: result.directory,
					relativePath: relativePath
				***REMOVED***);
				resolver.doResolve(target, obj, "using description file: " + result.path + " (relative path: " + relativePath + ")", createInnerCallback((err, result) => ***REMOVED***
					if(err) return callback(err);
					if(result) return callback(null, result);

					// Don't allow other description files or none at all
					callback(null, null);
				***REMOVED***, callback));
			***REMOVED***));
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = DescriptionFilePlugin;
