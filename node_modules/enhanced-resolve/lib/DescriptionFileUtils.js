/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var forEachBail = require("./forEachBail");

function loadDescriptionFile(resolver, directory, filenames, callback) ***REMOVED***
	(function findDescriptionFile() ***REMOVED***
		forEachBail(filenames, function(filename, callback) ***REMOVED***
			var descriptionFilePath = resolver.join(directory, filename);
			if(resolver.fileSystem.readJson) ***REMOVED***
				resolver.fileSystem.readJson(descriptionFilePath, function(err, content) ***REMOVED***
					if(err) ***REMOVED***
						if(typeof err.code !== "undefined") return callback();
						return onJson(err);
					***REMOVED***
					onJson(null, content);
				***REMOVED***);
			***REMOVED*** else ***REMOVED***
				resolver.fileSystem.readFile(descriptionFilePath, function(err, content) ***REMOVED***
					if(err) return callback();
					try ***REMOVED***
						var json = JSON.parse(content);
					***REMOVED*** catch(e) ***REMOVED***
						onJson(e);
					***REMOVED***
					onJson(null, json);
				***REMOVED***);
			***REMOVED***

			function onJson(err, content) ***REMOVED***
				if(err) ***REMOVED***
					if(callback.log)
						callback.log(descriptionFilePath + " (directory description file): " + err);
					else
						err.message = descriptionFilePath + " (directory description file): " + err;
					return callback(err);
				***REMOVED***
				callback(null, ***REMOVED***
					content: content,
					directory: directory,
					path: descriptionFilePath
				***REMOVED***);
			***REMOVED***
		***REMOVED***, function(err, result) ***REMOVED***
			if(err) return callback(err);
			if(result) ***REMOVED***
				return callback(null, result);
			***REMOVED*** else ***REMOVED***
				directory = cdUp(directory);
				if(!directory) ***REMOVED***
					return callback();
				***REMOVED*** else ***REMOVED***
					return findDescriptionFile();
				***REMOVED***
			***REMOVED***
		***REMOVED***);
	***REMOVED***());
***REMOVED***

function getField(content, field) ***REMOVED***
	if(!content) return undefined;
	if(Array.isArray(field)) ***REMOVED***
		var current = content;
		for(var j = 0; j < field.length; j++) ***REMOVED***
			if(current === null || typeof current !== "object") ***REMOVED***
				current = null;
				break;
			***REMOVED***
			current = current[field[j]];
		***REMOVED***
		if(typeof current === "object") ***REMOVED***
			return current;
		***REMOVED***
	***REMOVED*** else ***REMOVED***
		if(typeof content[field] === "object") ***REMOVED***
			return content[field];
		***REMOVED***
	***REMOVED***
***REMOVED***

function cdUp(directory) ***REMOVED***
	if(directory === "/") return null;
	var i = directory.lastIndexOf("/"),
		j = directory.lastIndexOf("\\");
	var p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
	if(p < 0) return null;
	return directory.substr(0, p || 1);
***REMOVED***

exports.loadDescriptionFile = loadDescriptionFile;
exports.getField = getField;
exports.cdUp = cdUp;
