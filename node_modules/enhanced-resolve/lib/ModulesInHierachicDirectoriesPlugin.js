/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var createInnerCallback = require("./createInnerCallback");
var forEachBail = require("./forEachBail");
var getPaths = require("./getPaths");

function ModulesInHierachicDirectoriesPlugin(source, directories, target) ***REMOVED***
	this.source = source;
	this.directories = [].concat(directories);
	this.target = target;
***REMOVED***
module.exports = ModulesInHierachicDirectoriesPlugin;

ModulesInHierachicDirectoriesPlugin.prototype.apply = function(resolver) ***REMOVED***
	var directories = this.directories;
	var target = this.target;
	resolver.plugin(this.source, function(request, callback) ***REMOVED***
		var fs = this.fileSystem;
		var topLevelCallback = callback;
		var addrs = getPaths(request.path).paths.map(function(p) ***REMOVED***
			return directories.map(function(d) ***REMOVED***
				return this.join(p, d);
			***REMOVED***, this);
		***REMOVED***, this).reduce(function(array, p) ***REMOVED***
			array.push.apply(array, p);
			return array;
		***REMOVED***, []);
		forEachBail(addrs, function(addr, callback) ***REMOVED***
			fs.stat(addr, function(err, stat) ***REMOVED***
				if(!err && stat && stat.isDirectory()) ***REMOVED***
					var obj = Object.assign(***REMOVED******REMOVED***, request, ***REMOVED***
						path: addr,
						request: "./" + request.request
					***REMOVED***);
					var message = "looking for modules in " + addr;
					return resolver.doResolve(target, obj, message, createInnerCallback(callback, topLevelCallback));
				***REMOVED***
				if(topLevelCallback.log) topLevelCallback.log(addr + " doesn't exist or is not a directory");
				if(topLevelCallback.missing) topLevelCallback.missing.push(addr);
				return callback();
			***REMOVED***);
		***REMOVED***, callback);
	***REMOVED***);
***REMOVED***;
