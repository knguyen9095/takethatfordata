/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var ResolverFactory = require("./ResolverFactory");

var NodeJsInputFileSystem = require("./NodeJsInputFileSystem");
var CachedInputFileSystem = require("./CachedInputFileSystem");

var nodeFileSystem = new CachedInputFileSystem(new NodeJsInputFileSystem(), 4000);

var nodeContext = ***REMOVED***
	environments: [
		"node+es3+es5+process+native"
	]
***REMOVED***;

var asyncResolver = ResolverFactory.createResolver(***REMOVED***
	extensions: [".js", ".json", ".node"],
	fileSystem: nodeFileSystem
***REMOVED***);
module.exports = function resolve(context, path, request, callback) ***REMOVED***
	if(typeof context === "string") ***REMOVED***
		callback = request;
		request = path;
		path = context;
		context = nodeContext;
	***REMOVED***
	asyncResolver.resolve(context, path, request, callback);
***REMOVED***;

var syncResolver = ResolverFactory.createResolver(***REMOVED***
	extensions: [".js", ".json", ".node"],
	useSyncFileSystemCalls: true,
	fileSystem: nodeFileSystem
***REMOVED***);
module.exports.sync = function resolveSync(context, path, request) ***REMOVED***
	if(typeof context === "string") ***REMOVED***
		request = path;
		path = context;
		context = nodeContext;
	***REMOVED***
	return syncResolver.resolveSync(context, path, request);
***REMOVED***;

var asyncContextResolver = ResolverFactory.createResolver(***REMOVED***
	extensions: [".js", ".json", ".node"],
	resolveToContext: true,
	fileSystem: nodeFileSystem
***REMOVED***);
module.exports.context = function resolveContext(context, path, request, callback) ***REMOVED***
	if(typeof context === "string") ***REMOVED***
		callback = request;
		request = path;
		path = context;
		context = nodeContext;
	***REMOVED***
	asyncContextResolver.resolve(context, path, request, callback);
***REMOVED***;

var syncContextResolver = ResolverFactory.createResolver(***REMOVED***
	extensions: [".js", ".json", ".node"],
	resolveToContext: true,
	useSyncFileSystemCalls: true,
	fileSystem: nodeFileSystem
***REMOVED***);
module.exports.context.sync = function resolveContextSync(context, path, request) ***REMOVED***
	if(typeof context === "string") ***REMOVED***
		request = path;
		path = context;
		context = nodeContext;
	***REMOVED***
	return syncContextResolver.resolveSync(context, path, request);
***REMOVED***;

var asyncLoaderResolver = ResolverFactory.createResolver(***REMOVED***
	extensions: [".js", ".json", ".node"],
	moduleExtensions: ["-loader"],
	mainFields: ["loader", "main"],
	fileSystem: nodeFileSystem
***REMOVED***);
module.exports.loader = function resolveLoader(context, path, request, callback) ***REMOVED***
	if(typeof context === "string") ***REMOVED***
		callback = request;
		request = path;
		path = context;
		context = nodeContext;
	***REMOVED***
	asyncLoaderResolver.resolve(context, path, request, callback);
***REMOVED***;

var syncLoaderResolver = ResolverFactory.createResolver(***REMOVED***
	extensions: [".js", ".json", ".node"],
	moduleExtensions: ["-loader"],
	mainFields: ["loader", "main"],
	useSyncFileSystemCalls: true,
	fileSystem: nodeFileSystem
***REMOVED***);
module.exports.loader.sync = function resolveLoaderSync(context, path, request) ***REMOVED***
	if(typeof context === "string") ***REMOVED***
		request = path;
		path = context;
		context = nodeContext;
	***REMOVED***
	return syncLoaderResolver.resolveSync(context, path, request);
***REMOVED***;

module.exports.create = function create(options) ***REMOVED***
	options = Object.assign(***REMOVED***
		fileSystem: nodeFileSystem
	***REMOVED***, options);
	var resolver = ResolverFactory.createResolver(options);
	return function(context, path, request, callback) ***REMOVED***
		if(typeof context === "string") ***REMOVED***
			callback = request;
			request = path;
			path = context;
			context = nodeContext;
		***REMOVED***
		resolver.resolve(context, path, request, callback);
	***REMOVED***;
***REMOVED***;

module.exports.create.sync = function createSync(options) ***REMOVED***
	options = Object.assign(***REMOVED***
		useSyncFileSystemCalls: true,
		fileSystem: nodeFileSystem
	***REMOVED***, options);
	var resolver = ResolverFactory.createResolver(options);
	return function(context, path, request) ***REMOVED***
		if(typeof context === "string") ***REMOVED***
			request = path;
			path = context;
			context = nodeContext;
		***REMOVED***
		return resolver.resolveSync(context, path, request);
	***REMOVED***;
***REMOVED***;

// Export Resolver, FileSystems and Plugins
module.exports.ResolverFactory = ResolverFactory;

module.exports.NodeJsInputFileSystem = NodeJsInputFileSystem;
module.exports.CachedInputFileSystem = CachedInputFileSystem;
