/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var createInnerCallback = require("./createInnerCallback");

function startsWith(string, searchString) ***REMOVED***
	var stringLength = string.length;
	var searchLength = searchString.length;

	// early out if the search length is greater than the search string
	if(searchLength > stringLength) ***REMOVED***
		return false;
	***REMOVED***
	var index = -1;
	while(++index < searchLength) ***REMOVED***
		if(string.charCodeAt(index) !== searchString.charCodeAt(index)) ***REMOVED***
			return false;
		***REMOVED***
	***REMOVED***
	return true;
***REMOVED***

function AliasPlugin(source, options, target) ***REMOVED***
	this.source = source;
	this.name = options.name;
	this.alias = options.alias;
	this.onlyModule = options.onlyModule;
	this.target = target;
***REMOVED***
module.exports = AliasPlugin;

AliasPlugin.prototype.apply = function(resolver) ***REMOVED***
	var target = this.target;
	var name = this.name;
	var alias = this.alias;
	var onlyModule = this.onlyModule;
	resolver.plugin(this.source, function(request, callback) ***REMOVED***
		var innerRequest = request.request;
		if(!innerRequest) return callback();
		if(innerRequest === name || (!onlyModule && startsWith(innerRequest, name + "/"))) ***REMOVED***
			if(innerRequest !== alias && !startsWith(innerRequest, alias + "/")) ***REMOVED***
				var newRequestStr = alias + innerRequest.substr(name.length);
				var obj = Object.assign(***REMOVED******REMOVED***, request, ***REMOVED***
					request: newRequestStr
				***REMOVED***);
				return resolver.doResolve(target, obj, "aliased with mapping '" + name + "': '" + alias + "' to '" + newRequestStr + "'", createInnerCallback(function(err, result) ***REMOVED***
					if(arguments.length > 0) return callback(err, result);

					// don't allow other aliasing or raw request
					callback(null, null);
				***REMOVED***, callback));
			***REMOVED***
		***REMOVED***
		return callback();
	***REMOVED***);
***REMOVED***;
