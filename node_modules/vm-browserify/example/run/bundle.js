var require = function (file, cwd) ***REMOVED***
    var resolved = require.resolve(file, cwd || '/');
    var mod = require.modules[resolved];
    if (!mod) throw new Error(
        'Failed to resolve module ' + file + ', tried ' + resolved
    );
    var res = mod._cached ? mod._cached : mod();
    return res;
***REMOVED***

require.paths = [];
require.modules = ***REMOVED******REMOVED***;
require.extensions = [".js",".coffee"];

require._core = ***REMOVED***
    'assert': true,
    'events': true,
    'fs': true,
    'path': true,
    'vm': true
***REMOVED***;

require.resolve = (function () ***REMOVED***
    return function (x, cwd) ***REMOVED***
        if (!cwd) cwd = '/';
        
        if (require._core[x]) return x;
        var path = require.modules.path();
        var y = cwd || '.';
        
        if (x.match(/^(?:\.\.?\/|\/)/)) ***REMOVED***
            var m = loadAsFileSync(path.resolve(y, x))
                || loadAsDirectorySync(path.resolve(y, x));
            if (m) return m;
        ***REMOVED***
        
        var n = loadNodeModulesSync(x, y);
        if (n) return n;
        
        throw new Error("Cannot find module '" + x + "'");
        
        function loadAsFileSync (x) ***REMOVED***
            if (require.modules[x]) ***REMOVED***
                return x;
            ***REMOVED***
            
            for (var i = 0; i < require.extensions.length; i++) ***REMOVED***
                var ext = require.extensions[i];
                if (require.modules[x + ext]) return x + ext;
            ***REMOVED***
        ***REMOVED***
        
        function loadAsDirectorySync (x) ***REMOVED***
            x = x.replace(/\/+$/, '');
            var pkgfile = x + '/package.json';
            if (require.modules[pkgfile]) ***REMOVED***
                var pkg = require.modules[pkgfile]();
                var b = pkg.browserify;
                if (typeof b === 'object' && b.main) ***REMOVED***
                    var m = loadAsFileSync(path.resolve(x, b.main));
                    if (m) return m;
                ***REMOVED***
                else if (typeof b === 'string') ***REMOVED***
                    var m = loadAsFileSync(path.resolve(x, b));
                    if (m) return m;
                ***REMOVED***
                else if (pkg.main) ***REMOVED***
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                ***REMOVED***
            ***REMOVED***
            
            return loadAsFileSync(x + '/index');
        ***REMOVED***
        
        function loadNodeModulesSync (x, start) ***REMOVED***
            var dirs = nodeModulesPathsSync(start);
            for (var i = 0; i < dirs.length; i++) ***REMOVED***
                var dir = dirs[i];
                var m = loadAsFileSync(dir + '/' + x);
                if (m) return m;
                var n = loadAsDirectorySync(dir + '/' + x);
                if (n) return n;
            ***REMOVED***
            
            var m = loadAsFileSync(x);
            if (m) return m;
        ***REMOVED***
        
        function nodeModulesPathsSync (start) ***REMOVED***
            var parts;
            if (start === '/') parts = [ '' ];
            else parts = path.normalize(start).split('/');
            
            var dirs = [];
            for (var i = parts.length - 1; i >= 0; i--) ***REMOVED***
                if (parts[i] === 'node_modules') continue;
                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';
                dirs.push(dir);
            ***REMOVED***
            
            return dirs;
        ***REMOVED***
    ***REMOVED***;
***REMOVED***)();

require.alias = function (from, to) ***REMOVED***
    var path = require.modules.path();
    var res = null;
    try ***REMOVED***
        res = require.resolve(from + '/package.json', '/');
    ***REMOVED***
    catch (err) ***REMOVED***
        res = require.resolve(from, '/');
    ***REMOVED***
    var basedir = path.dirname(res);
    
    var keys = (Object.keys || function (obj) ***REMOVED***
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    ***REMOVED***)(require.modules);
    
    for (var i = 0; i < keys.length; i++) ***REMOVED***
        var key = keys[i];
        if (key.slice(0, basedir.length + 1) === basedir + '/') ***REMOVED***
            var f = key.slice(basedir.length);
            require.modules[to + f] = require.modules[basedir + f];
        ***REMOVED***
        else if (key === basedir) ***REMOVED***
            require.modules[to] = require.modules[basedir];
        ***REMOVED***
    ***REMOVED***
***REMOVED***;

require.define = function (filename, fn) ***REMOVED***
    var dirname = require._core[filename]
        ? ''
        : require.modules.path().dirname(filename)
    ;
    
    var require_ = function (file) ***REMOVED***
        return require(file, dirname)
    ***REMOVED***;
    require_.resolve = function (name) ***REMOVED***
        return require.resolve(name, dirname);
    ***REMOVED***;
    require_.modules = require.modules;
    require_.define = require.define;
    var module_ = ***REMOVED*** exports : ***REMOVED******REMOVED*** ***REMOVED***;
    
    require.modules[filename] = function () ***REMOVED***
        require.modules[filename]._cached = module_.exports;
        fn.call(
            module_.exports,
            require_,
            module_,
            module_.exports,
            dirname,
            filename
        );
        require.modules[filename]._cached = module_.exports;
        return module_.exports;
    ***REMOVED***;
***REMOVED***;

if (typeof process === 'undefined') process = ***REMOVED******REMOVED***;

if (!process.nextTick) process.nextTick = (function () ***REMOVED***
    var queue = [];
    var canPost = typeof window !== 'undefined'
        && window.postMessage && window.addEventListener
    ;
    
    if (canPost) ***REMOVED***
        window.addEventListener('message', function (ev) ***REMOVED***
            if (ev.source === window && ev.data === 'browserify-tick') ***REMOVED***
                ev.stopPropagation();
                if (queue.length > 0) ***REMOVED***
                    var fn = queue.shift();
                    fn();
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***, true);
    ***REMOVED***
    
    return function (fn) ***REMOVED***
        if (canPost) ***REMOVED***
            queue.push(fn);
            window.postMessage('browserify-tick', '*');
        ***REMOVED***
        else setTimeout(fn, 0);
    ***REMOVED***;
***REMOVED***)();

if (!process.title) process.title = 'browser';

if (!process.binding) process.binding = function (name) ***REMOVED***
    if (name === 'evals') return require('vm')
    else throw new Error('No such module')
***REMOVED***;

if (!process.cwd) process.cwd = function () ***REMOVED*** return '.' ***REMOVED***;

require.define("path", function (require, module, exports, __dirname, __filename) ***REMOVED***
function filter (xs, fn) ***REMOVED***
    var res = [];
    for (var i = 0; i < xs.length; i++) ***REMOVED***
        if (fn(xs[i], i, xs)) res.push(xs[i]);
    ***REMOVED***
    return res;
***REMOVED***

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) ***REMOVED***
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length; i >= 0; i--) ***REMOVED***
    var last = parts[i];
    if (last == '.') ***REMOVED***
      parts.splice(i, 1);
    ***REMOVED*** else if (last === '..') ***REMOVED***
      parts.splice(i, 1);
      up++;
    ***REMOVED*** else if (up) ***REMOVED***
      parts.splice(i, 1);
      up--;
    ***REMOVED***
  ***REMOVED***

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) ***REMOVED***
    for (; up--; up) ***REMOVED***
      parts.unshift('..');
    ***REMOVED***
  ***REMOVED***

  return parts;
***REMOVED***

// Regex to split a filename into [*, dir, basename, ext]
// posix version
var splitPathRe = /^(.+\/(?!$)|\/)?((?:.+?)?(\.[^.]*)?)$/;

// path.resolve([from ...], to)
// posix version
exports.resolve = function() ***REMOVED***
var resolvedPath = '',
    resolvedAbsolute = false;

for (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) ***REMOVED***
  var path = (i >= 0)
      ? arguments[i]
      : process.cwd();

  // Skip empty and invalid entries
  if (typeof path !== 'string' || !path) ***REMOVED***
    continue;
  ***REMOVED***

  resolvedPath = path + '/' + resolvedPath;
  resolvedAbsolute = path.charAt(0) === '/';
***REMOVED***

// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)

// Normalize the path
resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) ***REMOVED***
    return !!p;
  ***REMOVED***), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
***REMOVED***;

// path.normalize(path)
// posix version
exports.normalize = function(path) ***REMOVED***
var isAbsolute = path.charAt(0) === '/',
    trailingSlash = path.slice(-1) === '/';

// Normalize the path
path = normalizeArray(filter(path.split('/'), function(p) ***REMOVED***
    return !!p;
  ***REMOVED***), !isAbsolute).join('/');

  if (!path && !isAbsolute) ***REMOVED***
    path = '.';
  ***REMOVED***
  if (path && trailingSlash) ***REMOVED***
    path += '/';
  ***REMOVED***
  
  return (isAbsolute ? '/' : '') + path;
***REMOVED***;


// posix version
exports.join = function() ***REMOVED***
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) ***REMOVED***
    return p && typeof p === 'string';
  ***REMOVED***).join('/'));
***REMOVED***;


exports.dirname = function(path) ***REMOVED***
  var dir = splitPathRe.exec(path)[1] || '';
  var isWindows = false;
  if (!dir) ***REMOVED***
    // No dirname
    return '.';
  ***REMOVED*** else if (dir.length === 1 ||
      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) ***REMOVED***
    // It is just a slash or a drive letter with a slash
    return dir;
  ***REMOVED*** else ***REMOVED***
    // It is a full dirname, strip trailing slash
    return dir.substring(0, dir.length - 1);
  ***REMOVED***
***REMOVED***;


exports.basename = function(path, ext) ***REMOVED***
  var f = splitPathRe.exec(path)[2] || '';
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) ***REMOVED***
    f = f.substr(0, f.length - ext.length);
  ***REMOVED***
  return f;
***REMOVED***;


exports.extname = function(path) ***REMOVED***
  return splitPathRe.exec(path)[3] || '';
***REMOVED***;

***REMOVED***);

require.define("vm", function (require, module, exports, __dirname, __filename) ***REMOVED***
var Object_keys = function (obj) ***REMOVED***
    if (Object.keys) return Object.keys(obj)
    else ***REMOVED***
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    ***REMOVED***
***REMOVED***;

var forEach = function (xs, fn) ***REMOVED***
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) ***REMOVED***
        fn(xs[i], i, xs);
    ***REMOVED***
***REMOVED***;

var Script = exports.Script = function NodeScript (code) ***REMOVED***
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
***REMOVED***;

var iframe = document.createElement('iframe');
if (!iframe.style) iframe.style = ***REMOVED******REMOVED***;
iframe.style.display = 'none';

var iframeCapable = true; // until proven otherwise
if (navigator.appName === 'Microsoft Internet Explorer') ***REMOVED***
    var m = navigator.appVersion.match(/\bMSIE (\d+\.\d+);/);
    if (m && parseFloat(m[1]) <= 9.0) ***REMOVED***
        iframeCapable = false;
    ***REMOVED***
***REMOVED***

Script.prototype.runInNewContext = function (context) ***REMOVED***
    if (!context) context = ***REMOVED******REMOVED***;
    
    if (!iframeCapable) ***REMOVED***
        var keys = Object_keys(context);
        var args = [];
        for (var i = 0; i < keys.length; i++) ***REMOVED***
            args.push(context[keys[i]]);
        ***REMOVED***
        
        var fn = new Function(keys, 'return ' + this.code);
        return fn.apply(null, args);
    ***REMOVED***
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow
        || (window.frames && window.frames[window.frames.length - 1])
        || window[window.length - 1]
    ;
    
    forEach(Object_keys(context), function (key) ***REMOVED***
        win[key] = context[key];
        iframe[key] = context[key];
    ***REMOVED***);
     
    if (win.eval) ***REMOVED***
        // chrome and ff can just .eval()
        var res = win.eval(this.code);
    ***REMOVED***
    else ***REMOVED***
        // this works in IE9 but not anything newer
        iframe.setAttribute('src',
            'javascript:__browserifyVmResult=(' + this.code + ')'
        );
        if ('__browserifyVmResult' in win) ***REMOVED***
            var res = win.__browserifyVmResult;
        ***REMOVED***
        else ***REMOVED***
            iframeCapable = false;
            res = this.runInThisContext(context);
        ***REMOVED***
    ***REMOVED***
    
    forEach(Object_keys(win), function (key) ***REMOVED***
        context[key] = win[key];
    ***REMOVED***);
    
    document.body.removeChild(iframe);
    
    return res;
***REMOVED***;

Script.prototype.runInThisContext = function () ***REMOVED***
    return eval(this.code); // maybe...
***REMOVED***;

Script.prototype.runInContext = function (context) ***REMOVED***
    // seems to be just runInNewContext on magical context objects which are
    // otherwise indistinguishable from objects except plain old objects
    // for the parameter segfaults node
    return this.runInNewContext(context);
***REMOVED***;

forEach(Object_keys(Script.prototype), function (name) ***REMOVED***
    exports[name] = Script[name] = function (code) ***REMOVED***
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    ***REMOVED***;
***REMOVED***);

exports.createScript = function (code) ***REMOVED***
    return exports.Script(code);
***REMOVED***;

exports.createContext = Script.createContext = function (context) ***REMOVED***
    // not really sure what this one does
    // seems to just make a shallow copy
    var copy = ***REMOVED******REMOVED***;
    forEach(Object_keys(context), function (key) ***REMOVED***
        copy[key] = context[key];
    ***REMOVED***);
    return copy;
***REMOVED***;

***REMOVED***);

require.define("/entry.js", function (require, module, exports, __dirname, __filename) ***REMOVED***
    var vm = require('vm');

$(function () ***REMOVED***
    var res = vm.runInNewContext('a + 5', ***REMOVED*** a : 100 ***REMOVED***);
    $('#res').text(res);
***REMOVED***);

***REMOVED***);
require("/entry.js");
