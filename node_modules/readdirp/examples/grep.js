'use strict';
var readdirp =  require('..')
  , util     =  require('util')
  , fs       =  require('fs')
  , path     =  require('path')
  , es       =  require('event-stream')
  ;

function findLinesMatching (searchTerm) ***REMOVED***

  return es.through(function (entry) ***REMOVED***
    var lineno = 0
      , matchingLines = []
      , fileStream = this;

    function filter () ***REMOVED***
      return es.mapSync(function (line) ***REMOVED***
        lineno++;
        return ~line.indexOf(searchTerm) ? lineno + ': ' + line : undefined;
      ***REMOVED***);
    ***REMOVED***

    function aggregate () ***REMOVED***
      return es.through(
          function write (data) ***REMOVED*** 
            matchingLines.push(data); 
          ***REMOVED***
        , function end () ***REMOVED***

            // drop files that had no matches
            if (matchingLines.length) ***REMOVED***
              var result = ***REMOVED*** file: entry, lines: matchingLines ***REMOVED***;

              // pass result on to file stream
              fileStream.emit('data', result);
            ***REMOVED***
            this.emit('end');
          ***REMOVED***
      );
    ***REMOVED***

    fs.createReadStream(entry.fullPath, ***REMOVED*** encoding: 'utf-8' ***REMOVED***)

      // handle file contents line by line
      .pipe(es.split('\n'))

      // keep only the lines that matched the term
      .pipe(filter())

      // aggregate all matching lines and delegate control back to the file stream
      .pipe(aggregate())
      ;
  ***REMOVED***);
***REMOVED***

console.log('grepping for "arguments"');

// create a stream of all javascript files found in this and all sub directories
readdirp(***REMOVED*** root: path.join(__dirname), fileFilter: '*.js' ***REMOVED***)

  // find all lines matching the term for each file (if none found, that file is ignored)
  .pipe(findLinesMatching('arguments'))

  // format the results and output
  .pipe(
    es.mapSync(function (res) ***REMOVED***
      return '\n\n' + res.file.path + '\n\t' + res.lines.join('\n\t');
    ***REMOVED***)
  )
  .pipe(process.stdout)
  ;
