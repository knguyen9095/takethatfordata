"use strict";

module.exports = function (t, a) ***REMOVED***
	var o, o1, o2, x, y = ***REMOVED******REMOVED***, z = ***REMOVED******REMOVED***;
	o = ***REMOVED*** inherited: true ***REMOVED***;
	o1 = Object.create(o);
	o1.visible = z;
	o1.nonremovable = "raz";
	Object.defineProperty(o1, "hidden", ***REMOVED*** value: "hidden" ***REMOVED***);

	o2 = Object.defineProperties(***REMOVED******REMOVED***, ***REMOVED*** nonremovable: ***REMOVED*** value: y ***REMOVED*** ***REMOVED***);
	o2.other = "other";

	try ***REMOVED***
 t(o2, o1);
***REMOVED*** catch (ignore) ***REMOVED******REMOVED***

	a(o2.visible, z, "Enumerable");
	a(o1.hidden, "hidden", "Not Enumerable");
	a(o2.propertyIsEnumerable("visible"), true, "Enumerable is enumerable");
	a(o2.propertyIsEnumerable("hidden"), false,
		"Not enumerable is not enumerable");

	a(o2.hasOwnProperty("inherited"), false, "Extend only own");
	a(o2.inherited, undefined, "Extend ony own: value");

	a(o2.nonremovable, y, "Do not overwrite non configurable");
	a(o2.other, "other", "Own kept");

	x = ***REMOVED******REMOVED***;
	t(x, o2);
	try ***REMOVED***
 t(x, o1);
***REMOVED*** catch (ignore) ***REMOVED******REMOVED***

	a(x.visible, z, "Enumerable");
	a(x.hidden, "hidden", "Not Enumerable");
	a(x.propertyIsEnumerable("visible"), true, "Enumerable is enumerable");
	a(x.propertyIsEnumerable("hidden"), false,
		"Not enumerable is not enumerable");

	a(x.hasOwnProperty("inherited"), false, "Extend only own");
	a(x.inherited, undefined, "Extend ony own: value");

	a(x.nonremovable, y, "Ignored non configurable");
	a(x.other, "other", "Other");

	x.visible = 3;
	a(x.visible, 3, "Writable is writable");

	x = ***REMOVED******REMOVED***;
	t(x, o1);
	a.throws(function () ***REMOVED***
		x.hidden = 3;
	***REMOVED***, "Not writable is not writable");

	x = ***REMOVED******REMOVED***;
	t(x, o1);
	delete x.visible;
	a.ok(!x.hasOwnProperty("visible"), "Configurable is configurable");

	x = ***REMOVED******REMOVED***;
	t(x, o1);
	a.throws(function () ***REMOVED***
		delete x.hidden;
	***REMOVED***, "Not configurable is not configurable");

	x = Object.defineProperty(***REMOVED******REMOVED***, "foo",
		***REMOVED*** configurable: false, writable: true, enumerable: false, value: "bar" ***REMOVED***);

	try ***REMOVED***
 t(x, ***REMOVED*** foo: "lorem" ***REMOVED***);
***REMOVED*** catch (ignore) ***REMOVED******REMOVED***
	a(x.foo, "bar", "Writable, not enumerable");
***REMOVED***;
