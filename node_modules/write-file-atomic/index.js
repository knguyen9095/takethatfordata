'use strict'
module.exports = writeFile
module.exports.sync = writeFileSync
module.exports._getTmpname = getTmpname // for testing
module.exports._cleanupOnExit = cleanupOnExit

var fs = require('graceful-fs')
var MurmurHash3 = require('imurmurhash')
var onExit = require('signal-exit')
var path = require('path')
var activeFiles = ***REMOVED******REMOVED***

var invocations = 0
function getTmpname (filename) ***REMOVED***
  return filename + '.' +
    MurmurHash3(__filename)
      .hash(String(process.pid))
      .hash(String(++invocations))
      .result()
***REMOVED***

function cleanupOnExit (tmpfile) ***REMOVED***
  return function () ***REMOVED***
    try ***REMOVED***
      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile)
    ***REMOVED*** catch (_) ***REMOVED******REMOVED***
  ***REMOVED***
***REMOVED***

function writeFile (filename, data, options, callback) ***REMOVED***
  if (options instanceof Function) ***REMOVED***
    callback = options
    options = null
  ***REMOVED***
  if (!options) options = ***REMOVED******REMOVED***

  var Promise = options.Promise || global.Promise
  var truename
  var fd
  var tmpfile
  var removeOnExit = cleanupOnExit(() => tmpfile)
  var absoluteName = path.resolve(filename)

  new Promise(function serializeSameFile (resolve) ***REMOVED***
    // make a queue if it doesn't already exist
    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = []

    activeFiles[absoluteName].push(resolve) // add this job to the queue
    if (activeFiles[absoluteName].length === 1) resolve() // kick off the first one
  ***REMOVED***).then(function getRealPath () ***REMOVED***
    return new Promise(function (resolve) ***REMOVED***
      fs.realpath(filename, function (_, realname) ***REMOVED***
        truename = realname || filename
        tmpfile = getTmpname(truename)
        resolve()
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***).then(function stat () ***REMOVED***
    return new Promise(function stat (resolve) ***REMOVED***
      if (options.mode && options.chown) resolve()
      else ***REMOVED***
        // Either mode or chown is not explicitly set
        // Default behavior is to copy it from original file
        fs.stat(truename, function (err, stats) ***REMOVED***
          if (err || !stats) resolve()
          else ***REMOVED***
            options = Object.assign(***REMOVED******REMOVED***, options)

            if (!options.mode) ***REMOVED***
              options.mode = stats.mode
            ***REMOVED***
            if (!options.chown && process.getuid) ***REMOVED***
              options.chown = ***REMOVED*** uid: stats.uid, gid: stats.gid ***REMOVED***
            ***REMOVED***
            resolve()
          ***REMOVED***
        ***REMOVED***)
      ***REMOVED***
    ***REMOVED***)
  ***REMOVED***).then(function thenWriteFile () ***REMOVED***
    return new Promise(function (resolve, reject) ***REMOVED***
      fs.open(tmpfile, 'w', options.mode, function (err, _fd) ***REMOVED***
        fd = _fd
        if (err) reject(err)
        else resolve()
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***).then(function write () ***REMOVED***
    return new Promise(function (resolve, reject) ***REMOVED***
      if (Buffer.isBuffer(data)) ***REMOVED***
        fs.write(fd, data, 0, data.length, 0, function (err) ***REMOVED***
          if (err) reject(err)
          else resolve()
        ***REMOVED***)
      ***REMOVED*** else if (data != null) ***REMOVED***
        fs.write(fd, String(data), 0, String(options.encoding || 'utf8'), function (err) ***REMOVED***
          if (err) reject(err)
          else resolve()
        ***REMOVED***)
      ***REMOVED*** else resolve()
    ***REMOVED***)
  ***REMOVED***).then(function syncAndClose () ***REMOVED***
    if (options.fsync !== false) ***REMOVED***
      return new Promise(function (resolve, reject) ***REMOVED***
        fs.fsync(fd, function (err) ***REMOVED***
          if (err) reject(err)
          else fs.close(fd, resolve)
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***).then(function chown () ***REMOVED***
    if (options.chown) ***REMOVED***
      return new Promise(function (resolve, reject) ***REMOVED***
        fs.chown(tmpfile, options.chown.uid, options.chown.gid, function (err) ***REMOVED***
          if (err) reject(err)
          else resolve()
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***).then(function chmod () ***REMOVED***
    if (options.mode) ***REMOVED***
      return new Promise(function (resolve, reject) ***REMOVED***
        fs.chmod(tmpfile, options.mode, function (err) ***REMOVED***
          if (err) reject(err)
          else resolve()
        ***REMOVED***)
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***).then(function rename () ***REMOVED***
    return new Promise(function (resolve, reject) ***REMOVED***
      fs.rename(tmpfile, truename, function (err) ***REMOVED***
        if (err) reject(err)
        else resolve()
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***).then(function success () ***REMOVED***
    removeOnExit()
    callback()
  ***REMOVED***).catch(function fail (err) ***REMOVED***
    removeOnExit()
    fs.unlink(tmpfile, function () ***REMOVED***
      callback(err)
    ***REMOVED***)
  ***REMOVED***).then(function checkQueue () ***REMOVED***
    activeFiles[absoluteName].shift() // remove the element added by serializeSameFile
    if (activeFiles[absoluteName].length > 0) ***REMOVED***
      activeFiles[absoluteName][0]() // start next job if one is pending
    ***REMOVED*** else delete activeFiles[absoluteName]
  ***REMOVED***)
***REMOVED***

function writeFileSync (filename, data, options) ***REMOVED***
  if (!options) options = ***REMOVED******REMOVED***
  try ***REMOVED***
    filename = fs.realpathSync(filename)
  ***REMOVED*** catch (ex) ***REMOVED***
    // it's ok, it'll happen on a not yet existing file
  ***REMOVED***
  var tmpfile = getTmpname(filename)

  try ***REMOVED***
    if (!options.mode || !options.chown) ***REMOVED***
      // Either mode or chown is not explicitly set
      // Default behavior is to copy it from original file
      try ***REMOVED***
        var stats = fs.statSync(filename)
        options = Object.assign(***REMOVED******REMOVED***, options)
        if (!options.mode) ***REMOVED***
          options.mode = stats.mode
        ***REMOVED***
        if (!options.chown && process.getuid) ***REMOVED***
          options.chown = ***REMOVED*** uid: stats.uid, gid: stats.gid ***REMOVED***
        ***REMOVED***
      ***REMOVED*** catch (ex) ***REMOVED***
        // ignore stat errors
      ***REMOVED***
    ***REMOVED***

    var removeOnExit = onExit(cleanupOnExit(tmpfile))
    var fd = fs.openSync(tmpfile, 'w', options.mode)
    if (Buffer.isBuffer(data)) ***REMOVED***
      fs.writeSync(fd, data, 0, data.length, 0)
    ***REMOVED*** else if (data != null) ***REMOVED***
      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))
    ***REMOVED***
    if (options.fsync !== false) ***REMOVED***
      fs.fsyncSync(fd)
    ***REMOVED***
    fs.closeSync(fd)
    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)
    if (options.mode) fs.chmodSync(tmpfile, options.mode)
    fs.renameSync(tmpfile, filename)
    removeOnExit()
  ***REMOVED*** catch (err) ***REMOVED***
    removeOnExit()
    try ***REMOVED*** fs.unlinkSync(tmpfile) ***REMOVED*** catch (e) ***REMOVED******REMOVED***
    throw err
  ***REMOVED***
***REMOVED***
