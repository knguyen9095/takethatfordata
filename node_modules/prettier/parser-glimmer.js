"use strict";

var _createClass = function () ***REMOVED*** function defineProperties(target, props) ***REMOVED*** for (var i = 0; i < props.length; i++) ***REMOVED*** var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); ***REMOVED*** ***REMOVED*** return function (Constructor, protoProps, staticProps) ***REMOVED*** if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; ***REMOVED***; ***REMOVED***();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) ***REMOVED*** return typeof obj; ***REMOVED*** : function (obj) ***REMOVED*** return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; ***REMOVED***;

function _possibleConstructorReturn(self, call) ***REMOVED*** if (!self) ***REMOVED*** throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); ***REMOVED*** return call && (typeof call === "object" || typeof call === "function") ? call : self; ***REMOVED***

function _inherits(subClass, superClass) ***REMOVED*** if (typeof superClass !== "function" && superClass !== null) ***REMOVED*** throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); ***REMOVED*** subClass.prototype = Object.create(superClass && superClass.prototype, ***REMOVED*** constructor: ***REMOVED*** value: subClass, enumerable: false, writable: true, configurable: true ***REMOVED*** ***REMOVED***); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; ***REMOVED***

function _classCallCheck(instance, Constructor) ***REMOVED*** if (!(instance instanceof Constructor)) ***REMOVED*** throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***

function _toConsumableArray(arr) ***REMOVED*** if (Array.isArray(arr)) ***REMOVED*** for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) ***REMOVED*** arr2[i] = arr[i]; ***REMOVED*** return arr2; ***REMOVED*** else ***REMOVED*** return Array.from(arr); ***REMOVED*** ***REMOVED***

function _interopDefault(t) ***REMOVED***
  return t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && "default" in t ? t.default : t;
***REMOVED***function createError(t, e) ***REMOVED***
  var r = new SyntaxError(t + " (" + e.start.line + ":" + e.start.column + ")");return r.loc = e, r;
***REMOVED***function isCall(t) ***REMOVED***
  return "SubExpression" === t.type || "MustacheStatement" === t.type && "PathExpression" === t.path.type;
***REMOVED***function isLiteral(t) ***REMOVED***
  return !("object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) || !t.type.match(/Literal$/));
***REMOVED***function buildMustache(t, e, r, a, i) ***REMOVED***
  return isLiteral(t) || (t = buildPath(t)), ***REMOVED*** type: "MustacheStatement", path: t, params: e || [], hash: r || buildHash([]), escaped: !a, loc: buildLoc(i || null) ***REMOVED***;
***REMOVED***function buildBlock(t, e, r, a, i, n) ***REMOVED***
  return ***REMOVED*** type: "BlockStatement", path: buildPath(t), params: e || [], hash: r || buildHash([]), program: a || null, inverse: i || null, loc: buildLoc(n || null) ***REMOVED***;
***REMOVED***function buildElementModifier(t, e, r, a) ***REMOVED***
  return ***REMOVED*** type: "ElementModifierStatement", path: buildPath(t), params: e || [], hash: r || buildHash([]), loc: buildLoc(a || null) ***REMOVED***;
***REMOVED***function buildPartial(t, e, r, a, i) ***REMOVED***
  return ***REMOVED*** type: "PartialStatement", name: t, params: e || [], hash: r || buildHash([]), indent: a || "", strip: ***REMOVED*** open: !1, close: !1 ***REMOVED***, loc: buildLoc(i || null) ***REMOVED***;
***REMOVED***function buildComment(t, e) ***REMOVED***
  return ***REMOVED*** type: "CommentStatement", value: t, loc: buildLoc(e || null) ***REMOVED***;
***REMOVED***function buildMustacheComment(t, e) ***REMOVED***
  return ***REMOVED*** type: "MustacheCommentStatement", value: t, loc: buildLoc(e || null) ***REMOVED***;
***REMOVED***function buildConcat(t, e) ***REMOVED***
  return ***REMOVED*** type: "ConcatStatement", parts: t || [], loc: buildLoc(e || null) ***REMOVED***;
***REMOVED***function buildElement(t, e, r, a, i, n) ***REMOVED***
  return Array.isArray(i) || (n = i, i = []), ***REMOVED*** type: "ElementNode", tag: t || "", attributes: e || [], blockParams: [], modifiers: r || [], comments: i || [], children: a || [], loc: buildLoc(n || null) ***REMOVED***;
***REMOVED***function buildAttr(t, e, r) ***REMOVED***
  return ***REMOVED*** type: "AttrNode", name: t, value: e, loc: buildLoc(r || null) ***REMOVED***;
***REMOVED***function buildText(t, e) ***REMOVED***
  return ***REMOVED*** type: "TextNode", chars: t || "", loc: buildLoc(e || null) ***REMOVED***;
***REMOVED***function buildSexpr(t, e, r, a) ***REMOVED***
  return ***REMOVED*** type: "SubExpression", path: buildPath(t), params: e || [], hash: r || buildHash([]), loc: buildLoc(a || null) ***REMOVED***;
***REMOVED***function buildPath(t, e) ***REMOVED***
  if ("string" != typeof t) return t;var r = t.split("."),
      a = !1;return "this" === r[0] && (a = !0, r = r.slice(1)), ***REMOVED*** type: "PathExpression", original: t, this: a, parts: r, data: !1, loc: buildLoc(e || null) ***REMOVED***;
***REMOVED***function buildLiteral(t, e, r) ***REMOVED***
  return ***REMOVED*** type: t, value: e, original: e, loc: buildLoc(r || null) ***REMOVED***;
***REMOVED***function buildHash(t, e) ***REMOVED***
  return ***REMOVED*** type: "Hash", pairs: t || [], loc: buildLoc(e || null) ***REMOVED***;
***REMOVED***function buildPair(t, e, r) ***REMOVED***
  return ***REMOVED*** type: "HashPair", key: t, value: e, loc: buildLoc(r || null) ***REMOVED***;
***REMOVED***function buildProgram(t, e, r) ***REMOVED***
  return ***REMOVED*** type: "Program", body: t || [], blockParams: e || [], loc: buildLoc(r || null) ***REMOVED***;
***REMOVED***function buildSource(t) ***REMOVED***
  return t || null;
***REMOVED***function buildPosition(t, e) ***REMOVED***
  return ***REMOVED*** line: t, column: e ***REMOVED***;
***REMOVED***function buildLoc() ***REMOVED***
  for (var _len = arguments.length, t = Array(_len), _key = 0; _key < _len; _key++) ***REMOVED***
    t[_key] = arguments[_key];
  ***REMOVED***

  if (1 === t.length) ***REMOVED***
    var e = t[0];return e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? ***REMOVED*** source: buildSource(e.source), start: buildPosition(e.start.line, e.start.column), end: buildPosition(e.end.line, e.end.column) ***REMOVED*** : SYNTHETIC;
  ***REMOVED******REMOVED***
    var _e = t[0],
        r = t[1],
        a = t[2],
        i = t[3],
        n = t[4];
    return ***REMOVED*** source: buildSource(n), start: buildPosition(_e, r), end: buildPosition(a, i) ***REMOVED***;
  ***REMOVED***
***REMOVED***function literal(t) ***REMOVED***
  return function (e) ***REMOVED***
    return buildLiteral(t, e);
  ***REMOVED***;
***REMOVED***function parseElementBlockParams(t) ***REMOVED***
  var e = parseBlockParams(t);e && (t.blockParams = e);
***REMOVED***function parseBlockParams(t) ***REMOVED***
  var e = t.attributes.length,
      r = [];for (var _a = 0; _a < e; _a++) ***REMOVED***
    r.push(t.attributes[_a].name);
  ***REMOVED***var a = r.indexOf("as");if (-1 !== a && e > a && "|" === r[a + 1].charAt(0)) ***REMOVED***
    var i = r.slice(a).join(" ");if ("|" !== i.charAt(i.length - 1) || 2 !== i.match(/\|/g).length) throw new SyntaxError$1("Invalid block parameters syntax: '" + i + "'", t.loc);var n = [];for (var s = a + 1; s < e; s++) ***REMOVED***
      var _e2 = r[s].replace(/\|/g, "");if ("" !== _e2) ***REMOVED***
        if (ID_INVERSE_PATTERN.test(_e2)) throw new SyntaxError$1("Invalid identifier for block parameters: '" + _e2 + "' in '" + i + "'", t.loc);n.push(_e2);
      ***REMOVED***
    ***REMOVED***if (0 === n.length) throw new SyntaxError$1("Cannot use zero block parameters: '" + i + "'", t.loc);return t.attributes = t.attributes.slice(0, a), n;
  ***REMOVED***return null;
***REMOVED***function childrenFor(t) ***REMOVED***
  switch (t.type) ***REMOVED***case "Program":
      return t.body;case "ElementNode":
      return t.children;***REMOVED***
***REMOVED***function appendChild(t, e) ***REMOVED***
  childrenFor(t).push(e);
***REMOVED***function isLiteral$1(t) ***REMOVED***
  return "StringLiteral" === t.type || "BooleanLiteral" === t.type || "NumberLiteral" === t.type || "NullLiteral" === t.type || "UndefinedLiteral" === t.type;
***REMOVED***function printLiteral(t) ***REMOVED***
  return "UndefinedLiteral" === t.type ? "undefined" : JSON.stringify(t.value);
***REMOVED***function isSpace(t) ***REMOVED***
  return WSP.test(t);
***REMOVED***function isAlpha(t) ***REMOVED***
  return ALPHA.test(t);
***REMOVED***function preprocessInput(t) ***REMOVED***
  return t.replace(CRLF, "\n");
***REMOVED***function unwrap(t, e) ***REMOVED***
  if (!t) throw new Error((e || "value") + " was null");return t;
***REMOVED***function debugAssert(t, e) ***REMOVED***
  if (!t) throw new Error(e || "assertion failure");
***REMOVED***function assign(t) ***REMOVED***
  for (var e = 1; e < arguments.length; e++) ***REMOVED***
    var r = arguments[e];if (null === r || "object" != (typeof r === "undefined" ? "undefined" : _typeof(r))) continue;var a = objKeys(r);for (var _e3 = 0; _e3 < a.length; _e3++) ***REMOVED***
      var i = a[_e3];t[i] = r[i];
    ***REMOVED***
  ***REMOVED***return t;
***REMOVED***function calculateRightStrippedOffsets(t, e) ***REMOVED***
  if ("" === e) return ***REMOVED*** lines: t.split("\n").length - 1, columns: 0 ***REMOVED***;var r = t.split(e)[0].split(/\n/),
      a = r.length - 1;return ***REMOVED*** lines: a, columns: r[a].length ***REMOVED***;
***REMOVED***function updateTokenizerLocation(t, e) ***REMOVED***
  var r = e.loc.start.line,
      a = e.loc.start.column,
      i = calculateRightStrippedOffsets(e.original, e.value);r += i.lines, i.lines ? a = i.columns : a += i.columns, t.line = r, t.column = a;
***REMOVED***function acceptCallNodes(t, e) ***REMOVED***
  return ***REMOVED*** path: t.PathExpression(e.path), params: e.params ? e.params.map(function (e) ***REMOVED***
      return t.acceptNode(e);
    ***REMOVED***) : [], hash: e.hash ? t.Hash(e.hash) : b.hash() ***REMOVED***;
***REMOVED***function addElementModifier(t, e) ***REMOVED***
  var r = e.path,
      a = e.params,
      i = e.hash,
      n = e.loc;
  if (isLiteral$1(r)) ***REMOVED***
    var _a2 = "***REMOVED******REMOVED***" + printLiteral(r) + "***REMOVED******REMOVED***",
        _i = "<" + t.name + " ... " + _a2 + " ...";throw new SyntaxError$1("In " + _i + ", " + _a2 + " is not a valid modifier: \"" + r.original + "\" on line " + (n && n.start.line) + ".", e.loc);
  ***REMOVED***var s = b.elementModifier(r, a, i, n);t.modifiers.push(s);
***REMOVED***function addInElementHash(t, e, r) ***REMOVED***
  var a = !1;e.pairs.forEach(function (t) ***REMOVED***
    if ("guid" === t.key) throw new SyntaxError$1("Cannot pass `guid` from user space", r);"nextSibling" === t.key && (a = !0);
  ***REMOVED***);var i = b.literal("StringLiteral", t),
      n = b.pair("guid", i);if (e.pairs.unshift(n), !a) ***REMOVED***
    var _t = b.literal("NullLiteral", null),
        _r = b.pair("nextSibling", _t);e.pairs.push(_r);
  ***REMOVED***return e;
***REMOVED***function appendDynamicAttributeValuePart(t, e) ***REMOVED***
  t.isDynamic = !0, t.parts.push(e);
***REMOVED***function cannotRemoveNode(t, e, r) ***REMOVED***
  return new TraversalError("Cannot remove a node unless it is part of an array", t, e, r);
***REMOVED***function cannotReplaceNode(t, e, r) ***REMOVED***
  return new TraversalError("Cannot replace a node with multiple nodes unless it is part of an array", t, e, r);
***REMOVED***function cannotReplaceOrRemoveInKeyHandlerYet(t, e) ***REMOVED***
  return new TraversalError("Replacing and removing in key handlers is not yet supported.", t, null, e);
***REMOVED***function visitNode(t, e) ***REMOVED***
  var r = void 0,
      a = t[e.type] || t.All || null;if (a && a.enter && (r = a.enter.call(null, e)), void 0 !== r && null !== r) ***REMOVED***
    if (JSON.stringify(e) !== JSON.stringify(r)) return Array.isArray(r) ? visitArray(t, r) || r : visitNode(t, r) || r;r = void 0;
  ***REMOVED***if (void 0 === r) ***REMOVED***
    var i = visitorKeys[e.type];for (var _r2 = 0; _r2 < i.length; _r2++) ***REMOVED***
      visitKey(t, a, e, i[_r2]);
    ***REMOVED***a && a.exit && (r = a.exit.call(null, e));
  ***REMOVED***return r;
***REMOVED***function visitKey(t, e, r, a) ***REMOVED***
  var i = r[a];if (!i) return;var n = void 0,
      s = e && (e.keys[a] || e.keys.All);if (s && s.enter && void 0 !== (n = s.enter.call(null, r, a))) throw cannotReplaceOrRemoveInKeyHandlerYet(r, a);if (Array.isArray(i)) visitArray(t, i);else ***REMOVED***
    var _e4 = visitNode(t, i);void 0 !== _e4 && assignKey(r, a, _e4);
  ***REMOVED***if (s && s.exit && void 0 !== (n = s.exit.call(null, r, a))) throw cannotReplaceOrRemoveInKeyHandlerYet(r, a);
***REMOVED***function visitArray(t, e) ***REMOVED***
  for (var r = 0; r < e.length; r++) ***REMOVED***
    var a = visitNode(t, e[r]);void 0 !== a && (r += spliceArray(e, r, a) - 1);
  ***REMOVED***
***REMOVED***function assignKey(t, e, r) ***REMOVED***
  if (null === r) throw cannotRemoveNode(t[e], t, e);if (Array.isArray(r)) ***REMOVED***
    if (1 !== r.length) throw 0 === r.length ? cannotRemoveNode(t[e], t, e) : cannotReplaceNode(t[e], t, e);t[e] = r[0];
  ***REMOVED*** else t[e] = r;
***REMOVED***function spliceArray(t, e, r) ***REMOVED***
  return null === r ? (t.splice(e, 1), 0) : Array.isArray(r) ? (t.splice.apply(t, [e, 1].concat(_toConsumableArray(r))), r.length) : (t.splice(e, 1, r), 1);
***REMOVED***function traverse(t, e) ***REMOVED***
  visitNode(normalizeVisitor(e), t);
***REMOVED***function normalizeVisitor(t) ***REMOVED***
  var e = ***REMOVED******REMOVED***;for (var r in t) ***REMOVED***
    var a = t[r] || t.All,
        i = ***REMOVED******REMOVED***;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) ***REMOVED***
      var _t2 = a.keys;if (_t2) for (var _e5 in _t2) ***REMOVED***
        var _r3 = _t2[_e5];"object" == (typeof _r3 === "undefined" ? "undefined" : _typeof(_r3)) ? i[_e5] = ***REMOVED*** enter: "function" == typeof _r3.enter ? _r3.enter : null, exit: "function" == typeof _r3.exit ? _r3.exit : null ***REMOVED*** : "function" == typeof _r3 && (i[_e5] = ***REMOVED*** enter: _r3, exit: null ***REMOVED***);
      ***REMOVED***e[r] = ***REMOVED*** enter: "function" == typeof a.enter ? a.enter : null, exit: "function" == typeof a.exit ? a.exit : null, keys: i ***REMOVED***;
    ***REMOVED*** else "function" == typeof a && (e[r] = ***REMOVED*** enter: a, exit: null, keys: i ***REMOVED***);
  ***REMOVED***return e;
***REMOVED***function unreachable$1() ***REMOVED***
  throw new Error("unreachable");
***REMOVED***function build(t) ***REMOVED***
  if (!t) return "";var e = [];switch (t.type) ***REMOVED***case "Program":
      ***REMOVED***
        var _r4 = t.chained && t.body[0];_r4 && (_r4.chained = !0);var a = buildEach(t.body).join("");e.push(a);
      ***REMOVED***break;case "ElementNode":
      e.push("<", t.tag), t.attributes.length && e.push(" ", buildEach(t.attributes).join(" ")), t.modifiers.length && e.push(" ", buildEach(t.modifiers).join(" ")), t.comments.length && e.push(" ", buildEach(t.comments).join(" ")), e.push(">"), e.push.apply(e, buildEach(t.children)), e.push("</", t.tag, ">");break;case "AttrNode":
      e.push(t.name, "=");var r = build(t.value);"TextNode" === t.value.type ? e.push('"', r, '"') : e.push(r);break;case "ConcatStatement":
      e.push('"'), t.parts.forEach(function (t) ***REMOVED***
        "StringLiteral" === t.type ? e.push(t.original) : e.push(build(t));
      ***REMOVED***), e.push('"');break;case "TextNode":
      e.push(t.chars);break;case "MustacheStatement":
      e.push(compactJoin(["***REMOVED******REMOVED***", pathParams(t), "***REMOVED******REMOVED***"]));break;case "MustacheCommentStatement":
      e.push(compactJoin(["***REMOVED******REMOVED***!--", t.value, "--***REMOVED******REMOVED***"]));break;case "ElementModifierStatement":
      e.push(compactJoin(["***REMOVED******REMOVED***", pathParams(t), "***REMOVED******REMOVED***"]));break;case "PathExpression":
      e.push(t.original);break;case "SubExpression":
      e.push("(", pathParams(t), ")");break;case "BooleanLiteral":
      e.push(t.value ? "true" : "false");break;case "BlockStatement":
      ***REMOVED***
        var _r5 = [];t.chained ? _r5.push(["***REMOVED******REMOVED***else ", pathParams(t), "***REMOVED******REMOVED***"].join("")) : _r5.push(openBlock(t)), _r5.push(build(t.program)), t.inverse && (t.inverse.chained || _r5.push("***REMOVED******REMOVED***else***REMOVED******REMOVED***"), _r5.push(build(t.inverse))), t.chained || _r5.push(closeBlock(t)), e.push(_r5.join(""));
      ***REMOVED***break;case "PartialStatement":
      e.push(compactJoin(["***REMOVED******REMOVED***>", pathParams(t), "***REMOVED******REMOVED***"]));break;case "CommentStatement":
      e.push(compactJoin(["\x3c!--", t.value, "--\x3e"]));break;case "StringLiteral":
      e.push("\"" + t.value + "\"");break;case "NumberLiteral":
      e.push(String(t.value));break;case "UndefinedLiteral":
      e.push("undefined");break;case "NullLiteral":
      e.push("null");break;case "Hash":
      e.push(t.pairs.map(function (t) ***REMOVED***
        return build(t);
      ***REMOVED***).join(" "));break;case "HashPair":
      e.push(t.key + "=" + build(t.value));***REMOVED***return e.join("");
***REMOVED***function compact(t) ***REMOVED***
  var e = [];return t.forEach(function (t) ***REMOVED***
    void 0 !== t && null !== t && "" !== t && e.push(t);
  ***REMOVED***), e;
***REMOVED***function buildEach(t) ***REMOVED***
  return t.map(build);
***REMOVED***function pathParams(t) ***REMOVED***
  var e = void 0;switch (t.type) ***REMOVED***case "MustacheStatement":case "SubExpression":case "ElementModifierStatement":case "BlockStatement":
      if (isLiteral(t.path)) return String(t.path.value);e = build(t.path);break;case "PartialStatement":
      e = build(t.name);break;default:
      return unreachable$1();***REMOVED***return compactJoin([e, buildEach(t.params).join(" "), build(t.hash)], " ");
***REMOVED***function compactJoin(t, e) ***REMOVED***
  return compact(t).join(e || "");
***REMOVED***function blockParams(t) ***REMOVED***
  var e = t.program.blockParams;return e.length ? " as |" + e.join(" ") + "|" : null;
***REMOVED***function openBlock(t) ***REMOVED***
  return ["***REMOVED******REMOVED***#", pathParams(t), blockParams(t), "***REMOVED******REMOVED***"].join("");
***REMOVED***function closeBlock(t) ***REMOVED***
  return ["***REMOVED******REMOVED***/", build(t.path), "***REMOVED******REMOVED***"].join("");
***REMOVED***function unwrapExports(t) ***REMOVED***
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
***REMOVED***function createCommonjsModule(t, e) ***REMOVED***
  return e = ***REMOVED*** exports: ***REMOVED******REMOVED*** ***REMOVED***, t(e, e.exports), e.exports;
***REMOVED***function extension(t, e) ***REMOVED***
  var r = fs.readFileSync(e, "utf8");t.exports = handlebars.compile(r);
***REMOVED***function assembleAttributeValue(t, e, r, a) ***REMOVED***
  if (r) ***REMOVED***
    if (e) return assembleConcatenatedValue(t);if (1 === t.length || 2 === t.length && "TextNode" === t[1].type && "/" === t[1].chars) return t[0];throw new SyntaxError$1("An unquoted attribute value must be a string or a mustache, preceeded by whitespace or a '=' character, and " + ("followed by whitespace, a '>' character, or '/>' (on line " + a + ")"), b.loc(a, 0));
  ***REMOVED***return t.length > 0 ? t[0] : b.text("");
***REMOVED***function assembleConcatenatedValue(t) ***REMOVED***
  for (var e = 0; e < t.length; e++) ***REMOVED***
    var r = t[e];if ("MustacheStatement" !== r.type && "TextNode" !== r.type) throw new SyntaxError$1("Unsupported node in quoted attribute value: " + r.type, r.loc);
  ***REMOVED***return b.concat(t);
***REMOVED***function validateEndTag(t, e, r) ***REMOVED***
  var a = void 0;if (voidMap[t.name] && !r ? a = "Invalid end tag " + formatEndTagInfo(t) + " (void elements cannot have end tags)." : void 0 === e.tag ? a = "Closing tag " + formatEndTagInfo(t) + " without an open tag." : e.tag !== t.name && (a = "Closing tag " + formatEndTagInfo(t) + " did not match last open tag `" + e.tag + "` (on line " + e.loc.start.line + ")."), a) throw new SyntaxError$1(a, e.loc);
***REMOVED***function formatEndTagInfo(t) ***REMOVED***
  return "`" + t.name + "` (on line " + t.loc.end.line + ")";
***REMOVED***function preprocess(t, e) ***REMOVED***
  var r = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t : lib_1(t),
      a = new TokenizerEventHandlers(t, e).acceptNode(r);if (e && e.plugins && e.plugins.ast) for (var _t3 = 0, _r6 = e.plugins.ast.length; _t3 < _r6; _t3++) ***REMOVED***
    traverse(a, (0, e.plugins.ast[_t3])(assign(***REMOVED******REMOVED***, e, ***REMOVED*** syntax: syntax ***REMOVED***, ***REMOVED*** plugins: void 0 ***REMOVED***)).visitor);
  ***REMOVED***return a;
***REMOVED***function removeEmptyNodes(t) ***REMOVED***
  return "TextNode" !== t.type || "TextNode" === t.type && "" !== t.chars.replace(/^\s+/, "").replace(/\s+$/, "");
***REMOVED***function removeWhiteSpace() ***REMOVED***
  return ***REMOVED*** visitor: ***REMOVED***
      Program: function Program(t) ***REMOVED***
        t.body = t.body.filter(removeEmptyNodes);
      ***REMOVED***,
      ElementNode: function ElementNode(t) ***REMOVED***
        t.children = t.children.filter(removeEmptyNodes);
      ***REMOVED***
    ***REMOVED*** ***REMOVED***;
***REMOVED***function parse(t) ***REMOVED***
  try ***REMOVED***
    return (0, es2017.preprocess)(t, ***REMOVED*** plugins: ***REMOVED*** ast: [removeWhiteSpace] ***REMOVED*** ***REMOVED***);
  ***REMOVED*** catch (t) ***REMOVED***
    var e = t.message.match(/on line (\d+)/);throw e ? parserCreateError(t.message, ***REMOVED*** start: ***REMOVED*** line: +e[1], column: 0 ***REMOVED***, end: ***REMOVED*** line: +e[1], column: 80 ***REMOVED*** ***REMOVED***) : t;
  ***REMOVED***
***REMOVED***var fs = _interopDefault(require("fs")),
    parserCreateError = createError,
    nodes = Object.freeze(***REMOVED*** isCall: isCall, isLiteral: isLiteral ***REMOVED***);var SYNTHETIC = ***REMOVED*** source: "(synthetic)", start: ***REMOVED*** line: 1, column: 0 ***REMOVED***, end: ***REMOVED*** line: 1, column: 0 ***REMOVED*** ***REMOVED***;var b = ***REMOVED*** mustache: buildMustache, block: buildBlock, partial: buildPartial, comment: buildComment, mustacheComment: buildMustacheComment, element: buildElement, elementModifier: buildElementModifier, attr: buildAttr, text: buildText, sexpr: buildSexpr, path: buildPath, concat: buildConcat, hash: buildHash, pair: buildPair, literal: buildLiteral, program: buildProgram, loc: buildLoc, pos: buildPosition, string: literal("StringLiteral"), boolean: literal("BooleanLiteral"), number: literal("NumberLiteral"), undefined: function undefined() ***REMOVED***
    return buildLiteral("UndefinedLiteral", void 0);
  ***REMOVED***, null: function _null() ***REMOVED***
    return buildLiteral("NullLiteral", null);
  ***REMOVED*** ***REMOVED***;var SyntaxError$1 = function () ***REMOVED***
  function t(t, e) ***REMOVED***
    var r = Error.call(this, t);this.message = t, this.stack = r.stack, this.location = e;
  ***REMOVED***return t.prototype = Object.create(Error.prototype), t.prototype.constructor = t, t;
***REMOVED***();var ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\***REMOVED***-~]/;var namedCharRefs = ***REMOVED*** Aacute: "Á", aacute: "á", Abreve: "Ă", abreve: "ă", ac: "∾", acd: "∿", acE: "∾̳", Acirc: "Â", acirc: "â", acute: "´", Acy: "А", acy: "а", AElig: "Æ", aelig: "æ", af: "⁡", Afr: "𝔄", afr: "𝔞", Agrave: "À", agrave: "à", alefsym: "ℵ", aleph: "ℵ", Alpha: "Α", alpha: "α", Amacr: "Ā", amacr: "ā", amalg: "⨿", AMP: "&", amp: "&", And: "⩓", and: "∧", andand: "⩕", andd: "⩜", andslope: "⩘", andv: "⩚", ang: "∠", ange: "⦤", angle: "∠", angmsd: "∡", angmsdaa: "⦨", angmsdab: "⦩", angmsdac: "⦪", angmsdad: "⦫", angmsdae: "⦬", angmsdaf: "⦭", angmsdag: "⦮", angmsdah: "⦯", angrt: "∟", angrtvb: "⊾", angrtvbd: "⦝", angsph: "∢", angst: "Å", angzarr: "⍼", Aogon: "Ą", aogon: "ą", Aopf: "𝔸", aopf: "𝕒", ap: "≈", apacir: "⩯", apE: "⩰", ape: "≊", apid: "≋", apos: "'", ApplyFunction: "⁡", approx: "≈", approxeq: "≊", Aring: "Å", aring: "å", Ascr: "𝒜", ascr: "𝒶", Assign: "≔", ast: "*", asymp: "≈", asympeq: "≍", Atilde: "Ã", atilde: "ã", Auml: "Ä", auml: "ä", awconint: "∳", awint: "⨑", backcong: "≌", backepsilon: "϶", backprime: "‵", backsim: "∽", backsimeq: "⋍", Backslash: "∖", Barv: "⫧", barvee: "⊽", Barwed: "⌆", barwed: "⌅", barwedge: "⌅", bbrk: "⎵", bbrktbrk: "⎶", bcong: "≌", Bcy: "Б", bcy: "б", bdquo: "„", becaus: "∵", Because: "∵", because: "∵", bemptyv: "⦰", bepsi: "϶", bernou: "ℬ", Bernoullis: "ℬ", Beta: "Β", beta: "β", beth: "ℶ", between: "≬", Bfr: "𝔅", bfr: "𝔟", bigcap: "⋂", bigcirc: "◯", bigcup: "⋃", bigodot: "⨀", bigoplus: "⨁", bigotimes: "⨂", bigsqcup: "⨆", bigstar: "★", bigtriangledown: "▽", bigtriangleup: "△", biguplus: "⨄", bigvee: "⋁", bigwedge: "⋀", bkarow: "⤍", blacklozenge: "⧫", blacksquare: "▪", blacktriangle: "▴", blacktriangledown: "▾", blacktriangleleft: "◂", blacktriangleright: "▸", blank: "␣", blk12: "▒", blk14: "░", blk34: "▓", block: "█", bne: "=⃥", bnequiv: "≡⃥", bNot: "⫭", bnot: "⌐", Bopf: "𝔹", bopf: "𝕓", bot: "⊥", bottom: "⊥", bowtie: "⋈", boxbox: "⧉", boxDL: "╗", boxDl: "╖", boxdL: "╕", boxdl: "┐", boxDR: "╔", boxDr: "╓", boxdR: "╒", boxdr: "┌", boxH: "═", boxh: "─", boxHD: "╦", boxHd: "╤", boxhD: "╥", boxhd: "┬", boxHU: "╩", boxHu: "╧", boxhU: "╨", boxhu: "┴", boxminus: "⊟", boxplus: "⊞", boxtimes: "⊠", boxUL: "╝", boxUl: "╜", boxuL: "╛", boxul: "┘", boxUR: "╚", boxUr: "╙", boxuR: "╘", boxur: "└", boxV: "║", boxv: "│", boxVH: "╬", boxVh: "╫", boxvH: "╪", boxvh: "┼", boxVL: "╣", boxVl: "╢", boxvL: "╡", boxvl: "┤", boxVR: "╠", boxVr: "╟", boxvR: "╞", boxvr: "├", bprime: "‵", Breve: "˘", breve: "˘", brvbar: "¦", Bscr: "ℬ", bscr: "𝒷", bsemi: "⁏", bsim: "∽", bsime: "⋍", bsol: "\\", bsolb: "⧅", bsolhsub: "⟈", bull: "•", bullet: "•", bump: "≎", bumpE: "⪮", bumpe: "≏", Bumpeq: "≎", bumpeq: "≏", Cacute: "Ć", cacute: "ć", Cap: "⋒", cap: "∩", capand: "⩄", capbrcup: "⩉", capcap: "⩋", capcup: "⩇", capdot: "⩀", CapitalDifferentialD: "ⅅ", caps: "∩︀", caret: "⁁", caron: "ˇ", Cayleys: "ℭ", ccaps: "⩍", Ccaron: "Č", ccaron: "č", Ccedil: "Ç", ccedil: "ç", Ccirc: "Ĉ", ccirc: "ĉ", Cconint: "∰", ccups: "⩌", ccupssm: "⩐", Cdot: "Ċ", cdot: "ċ", cedil: "¸", Cedilla: "¸", cemptyv: "⦲", cent: "¢", CenterDot: "·", centerdot: "·", Cfr: "ℭ", cfr: "𝔠", CHcy: "Ч", chcy: "ч", check: "✓", checkmark: "✓", Chi: "Χ", chi: "χ", cir: "○", circ: "ˆ", circeq: "≗", circlearrowleft: "↺", circlearrowright: "↻", circledast: "⊛", circledcirc: "⊚", circleddash: "⊝", CircleDot: "⊙", circledR: "®", circledS: "Ⓢ", CircleMinus: "⊖", CirclePlus: "⊕", CircleTimes: "⊗", cirE: "⧃", cire: "≗", cirfnint: "⨐", cirmid: "⫯", cirscir: "⧂", ClockwiseContourIntegral: "∲", CloseCurlyDoubleQuote: "”", CloseCurlyQuote: "’", clubs: "♣", clubsuit: "♣", Colon: "∷", colon: ":", Colone: "⩴", colone: "≔", coloneq: "≔", comma: ",", commat: "@", comp: "∁", compfn: "∘", complement: "∁", complexes: "ℂ", cong: "≅", congdot: "⩭", Congruent: "≡", Conint: "∯", conint: "∮", ContourIntegral: "∮", Copf: "ℂ", copf: "𝕔", coprod: "∐", Coproduct: "∐", COPY: "©", copy: "©", copysr: "℗", CounterClockwiseContourIntegral: "∳", crarr: "↵", Cross: "⨯", cross: "✗", Cscr: "𝒞", cscr: "𝒸", csub: "⫏", csube: "⫑", csup: "⫐", csupe: "⫒", ctdot: "⋯", cudarrl: "⤸", cudarrr: "⤵", cuepr: "⋞", cuesc: "⋟", cularr: "↶", cularrp: "⤽", Cup: "⋓", cup: "∪", cupbrcap: "⩈", CupCap: "≍", cupcap: "⩆", cupcup: "⩊", cupdot: "⊍", cupor: "⩅", cups: "∪︀", curarr: "↷", curarrm: "⤼", curlyeqprec: "⋞", curlyeqsucc: "⋟", curlyvee: "⋎", curlywedge: "⋏", curren: "¤", curvearrowleft: "↶", curvearrowright: "↷", cuvee: "⋎", cuwed: "⋏", cwconint: "∲", cwint: "∱", cylcty: "⌭", Dagger: "‡", dagger: "†", daleth: "ℸ", Darr: "↡", dArr: "⇓", darr: "↓", dash: "‐", Dashv: "⫤", dashv: "⊣", dbkarow: "⤏", dblac: "˝", Dcaron: "Ď", dcaron: "ď", Dcy: "Д", dcy: "д", DD: "ⅅ", dd: "ⅆ", ddagger: "‡", ddarr: "⇊", DDotrahd: "⤑", ddotseq: "⩷", deg: "°", Del: "∇", Delta: "Δ", delta: "δ", demptyv: "⦱", dfisht: "⥿", Dfr: "𝔇", dfr: "𝔡", dHar: "⥥", dharl: "⇃", dharr: "⇂", DiacriticalAcute: "´", DiacriticalDot: "˙", DiacriticalDoubleAcute: "˝", DiacriticalGrave: "`", DiacriticalTilde: "˜", diam: "⋄", Diamond: "⋄", diamond: "⋄", diamondsuit: "♦", diams: "♦", die: "¨", DifferentialD: "ⅆ", digamma: "ϝ", disin: "⋲", div: "÷", divide: "÷", divideontimes: "⋇", divonx: "⋇", DJcy: "Ђ", djcy: "ђ", dlcorn: "⌞", dlcrop: "⌍", dollar: "$", Dopf: "𝔻", dopf: "𝕕", Dot: "¨", dot: "˙", DotDot: "⃜", doteq: "≐", doteqdot: "≑", DotEqual: "≐", dotminus: "∸", dotplus: "∔", dotsquare: "⊡", doublebarwedge: "⌆", DoubleContourIntegral: "∯", DoubleDot: "¨", DoubleDownArrow: "⇓", DoubleLeftArrow: "⇐", DoubleLeftRightArrow: "⇔", DoubleLeftTee: "⫤", DoubleLongLeftArrow: "⟸", DoubleLongLeftRightArrow: "⟺", DoubleLongRightArrow: "⟹", DoubleRightArrow: "⇒", DoubleRightTee: "⊨", DoubleUpArrow: "⇑", DoubleUpDownArrow: "⇕", DoubleVerticalBar: "∥", DownArrow: "↓", Downarrow: "⇓", downarrow: "↓", DownArrowBar: "⤓", DownArrowUpArrow: "⇵", DownBreve: "̑", downdownarrows: "⇊", downharpoonleft: "⇃", downharpoonright: "⇂", DownLeftRightVector: "⥐", DownLeftTeeVector: "⥞", DownLeftVector: "↽", DownLeftVectorBar: "⥖", DownRightTeeVector: "⥟", DownRightVector: "⇁", DownRightVectorBar: "⥗", DownTee: "⊤", DownTeeArrow: "↧", drbkarow: "⤐", drcorn: "⌟", drcrop: "⌌", Dscr: "𝒟", dscr: "𝒹", DScy: "Ѕ", dscy: "ѕ", dsol: "⧶", Dstrok: "Đ", dstrok: "đ", dtdot: "⋱", dtri: "▿", dtrif: "▾", duarr: "⇵", duhar: "⥯", dwangle: "⦦", DZcy: "Џ", dzcy: "џ", dzigrarr: "⟿", Eacute: "É", eacute: "é", easter: "⩮", Ecaron: "Ě", ecaron: "ě", ecir: "≖", Ecirc: "Ê", ecirc: "ê", ecolon: "≕", Ecy: "Э", ecy: "э", eDDot: "⩷", Edot: "Ė", eDot: "≑", edot: "ė", ee: "ⅇ", efDot: "≒", Efr: "𝔈", efr: "𝔢", eg: "⪚", Egrave: "È", egrave: "è", egs: "⪖", egsdot: "⪘", el: "⪙", Element: "∈", elinters: "⏧", ell: "ℓ", els: "⪕", elsdot: "⪗", Emacr: "Ē", emacr: "ē", empty: "∅", emptyset: "∅", EmptySmallSquare: "◻", emptyv: "∅", EmptyVerySmallSquare: "▫", emsp: " ", emsp13: " ", emsp14: " ", ENG: "Ŋ", eng: "ŋ", ensp: " ", Eogon: "Ę", eogon: "ę", Eopf: "𝔼", eopf: "𝕖", epar: "⋕", eparsl: "⧣", eplus: "⩱", epsi: "ε", Epsilon: "Ε", epsilon: "ε", epsiv: "ϵ", eqcirc: "≖", eqcolon: "≕", eqsim: "≂", eqslantgtr: "⪖", eqslantless: "⪕", Equal: "⩵", equals: "=", EqualTilde: "≂", equest: "≟", Equilibrium: "⇌", equiv: "≡", equivDD: "⩸", eqvparsl: "⧥", erarr: "⥱", erDot: "≓", Escr: "ℰ", escr: "ℯ", esdot: "≐", Esim: "⩳", esim: "≂", Eta: "Η", eta: "η", ETH: "Ð", eth: "ð", Euml: "Ë", euml: "ë", euro: "€", excl: "!", exist: "∃", Exists: "∃", expectation: "ℰ", ExponentialE: "ⅇ", exponentiale: "ⅇ", fallingdotseq: "≒", Fcy: "Ф", fcy: "ф", female: "♀", ffilig: "ﬃ", fflig: "ﬀ", ffllig: "ﬄ", Ffr: "𝔉", ffr: "𝔣", filig: "ﬁ", FilledSmallSquare: "◼", FilledVerySmallSquare: "▪", fjlig: "fj", flat: "♭", fllig: "ﬂ", fltns: "▱", fnof: "ƒ", Fopf: "𝔽", fopf: "𝕗", ForAll: "∀", forall: "∀", fork: "⋔", forkv: "⫙", Fouriertrf: "ℱ", fpartint: "⨍", frac12: "½", frac13: "⅓", frac14: "¼", frac15: "⅕", frac16: "⅙", frac18: "⅛", frac23: "⅔", frac25: "⅖", frac34: "¾", frac35: "⅗", frac38: "⅜", frac45: "⅘", frac56: "⅚", frac58: "⅝", frac78: "⅞", frasl: "⁄", frown: "⌢", Fscr: "ℱ", fscr: "𝒻", gacute: "ǵ", Gamma: "Γ", gamma: "γ", Gammad: "Ϝ", gammad: "ϝ", gap: "⪆", Gbreve: "Ğ", gbreve: "ğ", Gcedil: "Ģ", Gcirc: "Ĝ", gcirc: "ĝ", Gcy: "Г", gcy: "г", Gdot: "Ġ", gdot: "ġ", gE: "≧", ge: "≥", gEl: "⪌", gel: "⋛", geq: "≥", geqq: "≧", geqslant: "⩾", ges: "⩾", gescc: "⪩", gesdot: "⪀", gesdoto: "⪂", gesdotol: "⪄", gesl: "⋛︀", gesles: "⪔", Gfr: "𝔊", gfr: "𝔤", Gg: "⋙", gg: "≫", ggg: "⋙", gimel: "ℷ", GJcy: "Ѓ", gjcy: "ѓ", gl: "≷", gla: "⪥", glE: "⪒", glj: "⪤", gnap: "⪊", gnapprox: "⪊", gnE: "≩", gne: "⪈", gneq: "⪈", gneqq: "≩", gnsim: "⋧", Gopf: "𝔾", gopf: "𝕘", grave: "`", GreaterEqual: "≥", GreaterEqualLess: "⋛", GreaterFullEqual: "≧", GreaterGreater: "⪢", GreaterLess: "≷", GreaterSlantEqual: "⩾", GreaterTilde: "≳", Gscr: "𝒢", gscr: "ℊ", gsim: "≳", gsime: "⪎", gsiml: "⪐", GT: ">", Gt: "≫", gt: ">", gtcc: "⪧", gtcir: "⩺", gtdot: "⋗", gtlPar: "⦕", gtquest: "⩼", gtrapprox: "⪆", gtrarr: "⥸", gtrdot: "⋗", gtreqless: "⋛", gtreqqless: "⪌", gtrless: "≷", gtrsim: "≳", gvertneqq: "≩︀", gvnE: "≩︀", Hacek: "ˇ", hairsp: " ", half: "½", hamilt: "ℋ", HARDcy: "Ъ", hardcy: "ъ", hArr: "⇔", harr: "↔", harrcir: "⥈", harrw: "↭", Hat: "^", hbar: "ℏ", Hcirc: "Ĥ", hcirc: "ĥ", hearts: "♥", heartsuit: "♥", hellip: "…", hercon: "⊹", Hfr: "ℌ", hfr: "𝔥", HilbertSpace: "ℋ", hksearow: "⤥", hkswarow: "⤦", hoarr: "⇿", homtht: "∻", hookleftarrow: "↩", hookrightarrow: "↪", Hopf: "ℍ", hopf: "𝕙", horbar: "―", HorizontalLine: "─", Hscr: "ℋ", hscr: "𝒽", hslash: "ℏ", Hstrok: "Ħ", hstrok: "ħ", HumpDownHump: "≎", HumpEqual: "≏", hybull: "⁃", hyphen: "‐", Iacute: "Í", iacute: "í", ic: "⁣", Icirc: "Î", icirc: "î", Icy: "И", icy: "и", Idot: "İ", IEcy: "Е", iecy: "е", iexcl: "¡", iff: "⇔", Ifr: "ℑ", ifr: "𝔦", Igrave: "Ì", igrave: "ì", ii: "ⅈ", iiiint: "⨌", iiint: "∭", iinfin: "⧜", iiota: "℩", IJlig: "Ĳ", ijlig: "ĳ", Im: "ℑ", Imacr: "Ī", imacr: "ī", image: "ℑ", ImaginaryI: "ⅈ", imagline: "ℐ", imagpart: "ℑ", imath: "ı", imof: "⊷", imped: "Ƶ", Implies: "⇒", in: "∈", incare: "℅", infin: "∞", infintie: "⧝", inodot: "ı", Int: "∬", int: "∫", intcal: "⊺", integers: "ℤ", Integral: "∫", intercal: "⊺", Intersection: "⋂", intlarhk: "⨗", intprod: "⨼", InvisibleComma: "⁣", InvisibleTimes: "⁢", IOcy: "Ё", iocy: "ё", Iogon: "Į", iogon: "į", Iopf: "𝕀", iopf: "𝕚", Iota: "Ι", iota: "ι", iprod: "⨼", iquest: "¿", Iscr: "ℐ", iscr: "𝒾", isin: "∈", isindot: "⋵", isinE: "⋹", isins: "⋴", isinsv: "⋳", isinv: "∈", it: "⁢", Itilde: "Ĩ", itilde: "ĩ", Iukcy: "І", iukcy: "і", Iuml: "Ï", iuml: "ï", Jcirc: "Ĵ", jcirc: "ĵ", Jcy: "Й", jcy: "й", Jfr: "𝔍", jfr: "𝔧", jmath: "ȷ", Jopf: "𝕁", jopf: "𝕛", Jscr: "𝒥", jscr: "𝒿", Jsercy: "Ј", jsercy: "ј", Jukcy: "Є", jukcy: "є", Kappa: "Κ", kappa: "κ", kappav: "ϰ", Kcedil: "Ķ", kcedil: "ķ", Kcy: "К", kcy: "к", Kfr: "𝔎", kfr: "𝔨", kgreen: "ĸ", KHcy: "Х", khcy: "х", KJcy: "Ќ", kjcy: "ќ", Kopf: "𝕂", kopf: "𝕜", Kscr: "𝒦", kscr: "𝓀", lAarr: "⇚", Lacute: "Ĺ", lacute: "ĺ", laemptyv: "⦴", lagran: "ℒ", Lambda: "Λ", lambda: "λ", Lang: "⟪", lang: "⟨", langd: "⦑", langle: "⟨", lap: "⪅", Laplacetrf: "ℒ", laquo: "«", Larr: "↞", lArr: "⇐", larr: "←", larrb: "⇤", larrbfs: "⤟", larrfs: "⤝", larrhk: "↩", larrlp: "↫", larrpl: "⤹", larrsim: "⥳", larrtl: "↢", lat: "⪫", lAtail: "⤛", latail: "⤙", late: "⪭", lates: "⪭︀", lBarr: "⤎", lbarr: "⤌", lbbrk: "❲", lbrace: "***REMOVED***", lbrack: "[", lbrke: "⦋", lbrksld: "⦏", lbrkslu: "⦍", Lcaron: "Ľ", lcaron: "ľ", Lcedil: "Ļ", lcedil: "ļ", lceil: "⌈", lcub: "***REMOVED***", Lcy: "Л", lcy: "л", ldca: "⤶", ldquo: "“", ldquor: "„", ldrdhar: "⥧", ldrushar: "⥋", ldsh: "↲", lE: "≦", le: "≤", LeftAngleBracket: "⟨", LeftArrow: "←", Leftarrow: "⇐", leftarrow: "←", LeftArrowBar: "⇤", LeftArrowRightArrow: "⇆", leftarrowtail: "↢", LeftCeiling: "⌈", LeftDoubleBracket: "⟦", LeftDownTeeVector: "⥡", LeftDownVector: "⇃", LeftDownVectorBar: "⥙", LeftFloor: "⌊", leftharpoondown: "↽", leftharpoonup: "↼", leftleftarrows: "⇇", LeftRightArrow: "↔", Leftrightarrow: "⇔", leftrightarrow: "↔", leftrightarrows: "⇆", leftrightharpoons: "⇋", leftrightsquigarrow: "↭", LeftRightVector: "⥎", LeftTee: "⊣", LeftTeeArrow: "↤", LeftTeeVector: "⥚", leftthreetimes: "⋋", LeftTriangle: "⊲", LeftTriangleBar: "⧏", LeftTriangleEqual: "⊴", LeftUpDownVector: "⥑", LeftUpTeeVector: "⥠", LeftUpVector: "↿", LeftUpVectorBar: "⥘", LeftVector: "↼", LeftVectorBar: "⥒", lEg: "⪋", leg: "⋚", leq: "≤", leqq: "≦", leqslant: "⩽", les: "⩽", lescc: "⪨", lesdot: "⩿", lesdoto: "⪁", lesdotor: "⪃", lesg: "⋚︀", lesges: "⪓", lessapprox: "⪅", lessdot: "⋖", lesseqgtr: "⋚", lesseqqgtr: "⪋", LessEqualGreater: "⋚", LessFullEqual: "≦", LessGreater: "≶", lessgtr: "≶", LessLess: "⪡", lesssim: "≲", LessSlantEqual: "⩽", LessTilde: "≲", lfisht: "⥼", lfloor: "⌊", Lfr: "𝔏", lfr: "𝔩", lg: "≶", lgE: "⪑", lHar: "⥢", lhard: "↽", lharu: "↼", lharul: "⥪", lhblk: "▄", LJcy: "Љ", ljcy: "љ", Ll: "⋘", ll: "≪", llarr: "⇇", llcorner: "⌞", Lleftarrow: "⇚", llhard: "⥫", lltri: "◺", Lmidot: "Ŀ", lmidot: "ŀ", lmoust: "⎰", lmoustache: "⎰", lnap: "⪉", lnapprox: "⪉", lnE: "≨", lne: "⪇", lneq: "⪇", lneqq: "≨", lnsim: "⋦", loang: "⟬", loarr: "⇽", lobrk: "⟦", LongLeftArrow: "⟵", Longleftarrow: "⟸", longleftarrow: "⟵", LongLeftRightArrow: "⟷", Longleftrightarrow: "⟺", longleftrightarrow: "⟷", longmapsto: "⟼", LongRightArrow: "⟶", Longrightarrow: "⟹", longrightarrow: "⟶", looparrowleft: "↫", looparrowright: "↬", lopar: "⦅", Lopf: "𝕃", lopf: "𝕝", loplus: "⨭", lotimes: "⨴", lowast: "∗", lowbar: "_", LowerLeftArrow: "↙", LowerRightArrow: "↘", loz: "◊", lozenge: "◊", lozf: "⧫", lpar: "(", lparlt: "⦓", lrarr: "⇆", lrcorner: "⌟", lrhar: "⇋", lrhard: "⥭", lrm: "‎", lrtri: "⊿", lsaquo: "‹", Lscr: "ℒ", lscr: "𝓁", Lsh: "↰", lsh: "↰", lsim: "≲", lsime: "⪍", lsimg: "⪏", lsqb: "[", lsquo: "‘", lsquor: "‚", Lstrok: "Ł", lstrok: "ł", LT: "<", Lt: "≪", lt: "<", ltcc: "⪦", ltcir: "⩹", ltdot: "⋖", lthree: "⋋", ltimes: "⋉", ltlarr: "⥶", ltquest: "⩻", ltri: "◃", ltrie: "⊴", ltrif: "◂", ltrPar: "⦖", lurdshar: "⥊", luruhar: "⥦", lvertneqq: "≨︀", lvnE: "≨︀", macr: "¯", male: "♂", malt: "✠", maltese: "✠", Map: "⤅", map: "↦", mapsto: "↦", mapstodown: "↧", mapstoleft: "↤", mapstoup: "↥", marker: "▮", mcomma: "⨩", Mcy: "М", mcy: "м", mdash: "—", mDDot: "∺", measuredangle: "∡", MediumSpace: " ", Mellintrf: "ℳ", Mfr: "𝔐", mfr: "𝔪", mho: "℧", micro: "µ", mid: "∣", midast: "*", midcir: "⫰", middot: "·", minus: "−", minusb: "⊟", minusd: "∸", minusdu: "⨪", MinusPlus: "∓", mlcp: "⫛", mldr: "…", mnplus: "∓", models: "⊧", Mopf: "𝕄", mopf: "𝕞", mp: "∓", Mscr: "ℳ", mscr: "𝓂", mstpos: "∾", Mu: "Μ", mu: "μ", multimap: "⊸", mumap: "⊸", nabla: "∇", Nacute: "Ń", nacute: "ń", nang: "∠⃒", nap: "≉", napE: "⩰̸", napid: "≋̸", napos: "ŉ", napprox: "≉", natur: "♮", natural: "♮", naturals: "ℕ", nbsp: " ", nbump: "≎̸", nbumpe: "≏̸", ncap: "⩃", Ncaron: "Ň", ncaron: "ň", Ncedil: "Ņ", ncedil: "ņ", ncong: "≇", ncongdot: "⩭̸", ncup: "⩂", Ncy: "Н", ncy: "н", ndash: "–", ne: "≠", nearhk: "⤤", neArr: "⇗", nearr: "↗", nearrow: "↗", nedot: "≐̸", NegativeMediumSpace: "​", NegativeThickSpace: "​", NegativeThinSpace: "​", NegativeVeryThinSpace: "​", nequiv: "≢", nesear: "⤨", nesim: "≂̸", NestedGreaterGreater: "≫", NestedLessLess: "≪", NewLine: "\n", nexist: "∄", nexists: "∄", Nfr: "𝔑", nfr: "𝔫", ngE: "≧̸", nge: "≱", ngeq: "≱", ngeqq: "≧̸", ngeqslant: "⩾̸", nges: "⩾̸", nGg: "⋙̸", ngsim: "≵", nGt: "≫⃒", ngt: "≯", ngtr: "≯", nGtv: "≫̸", nhArr: "⇎", nharr: "↮", nhpar: "⫲", ni: "∋", nis: "⋼", nisd: "⋺", niv: "∋", NJcy: "Њ", njcy: "њ", nlArr: "⇍", nlarr: "↚", nldr: "‥", nlE: "≦̸", nle: "≰", nLeftarrow: "⇍", nleftarrow: "↚", nLeftrightarrow: "⇎", nleftrightarrow: "↮", nleq: "≰", nleqq: "≦̸", nleqslant: "⩽̸", nles: "⩽̸", nless: "≮", nLl: "⋘̸", nlsim: "≴", nLt: "≪⃒", nlt: "≮", nltri: "⋪", nltrie: "⋬", nLtv: "≪̸", nmid: "∤", NoBreak: "⁠", NonBreakingSpace: " ", Nopf: "ℕ", nopf: "𝕟", Not: "⫬", not: "¬", NotCongruent: "≢", NotCupCap: "≭", NotDoubleVerticalBar: "∦", NotElement: "∉", NotEqual: "≠", NotEqualTilde: "≂̸", NotExists: "∄", NotGreater: "≯", NotGreaterEqual: "≱", NotGreaterFullEqual: "≧̸", NotGreaterGreater: "≫̸", NotGreaterLess: "≹", NotGreaterSlantEqual: "⩾̸", NotGreaterTilde: "≵", NotHumpDownHump: "≎̸", NotHumpEqual: "≏̸", notin: "∉", notindot: "⋵̸", notinE: "⋹̸", notinva: "∉", notinvb: "⋷", notinvc: "⋶", NotLeftTriangle: "⋪", NotLeftTriangleBar: "⧏̸", NotLeftTriangleEqual: "⋬", NotLess: "≮", NotLessEqual: "≰", NotLessGreater: "≸", NotLessLess: "≪̸", NotLessSlantEqual: "⩽̸", NotLessTilde: "≴", NotNestedGreaterGreater: "⪢̸", NotNestedLessLess: "⪡̸", notni: "∌", notniva: "∌", notnivb: "⋾", notnivc: "⋽", NotPrecedes: "⊀", NotPrecedesEqual: "⪯̸", NotPrecedesSlantEqual: "⋠", NotReverseElement: "∌", NotRightTriangle: "⋫", NotRightTriangleBar: "⧐̸", NotRightTriangleEqual: "⋭", NotSquareSubset: "⊏̸", NotSquareSubsetEqual: "⋢", NotSquareSuperset: "⊐̸", NotSquareSupersetEqual: "⋣", NotSubset: "⊂⃒", NotSubsetEqual: "⊈", NotSucceeds: "⊁", NotSucceedsEqual: "⪰̸", NotSucceedsSlantEqual: "⋡", NotSucceedsTilde: "≿̸", NotSuperset: "⊃⃒", NotSupersetEqual: "⊉", NotTilde: "≁", NotTildeEqual: "≄", NotTildeFullEqual: "≇", NotTildeTilde: "≉", NotVerticalBar: "∤", npar: "∦", nparallel: "∦", nparsl: "⫽⃥", npart: "∂̸", npolint: "⨔", npr: "⊀", nprcue: "⋠", npre: "⪯̸", nprec: "⊀", npreceq: "⪯̸", nrArr: "⇏", nrarr: "↛", nrarrc: "⤳̸", nrarrw: "↝̸", nRightarrow: "⇏", nrightarrow: "↛", nrtri: "⋫", nrtrie: "⋭", nsc: "⊁", nsccue: "⋡", nsce: "⪰̸", Nscr: "𝒩", nscr: "𝓃", nshortmid: "∤", nshortparallel: "∦", nsim: "≁", nsime: "≄", nsimeq: "≄", nsmid: "∤", nspar: "∦", nsqsube: "⋢", nsqsupe: "⋣", nsub: "⊄", nsubE: "⫅̸", nsube: "⊈", nsubset: "⊂⃒", nsubseteq: "⊈", nsubseteqq: "⫅̸", nsucc: "⊁", nsucceq: "⪰̸", nsup: "⊅", nsupE: "⫆̸", nsupe: "⊉", nsupset: "⊃⃒", nsupseteq: "⊉", nsupseteqq: "⫆̸", ntgl: "≹", Ntilde: "Ñ", ntilde: "ñ", ntlg: "≸", ntriangleleft: "⋪", ntrianglelefteq: "⋬", ntriangleright: "⋫", ntrianglerighteq: "⋭", Nu: "Ν", nu: "ν", num: "#", numero: "№", numsp: " ", nvap: "≍⃒", nVDash: "⊯", nVdash: "⊮", nvDash: "⊭", nvdash: "⊬", nvge: "≥⃒", nvgt: ">⃒", nvHarr: "⤄", nvinfin: "⧞", nvlArr: "⤂", nvle: "≤⃒", nvlt: "<⃒", nvltrie: "⊴⃒", nvrArr: "⤃", nvrtrie: "⊵⃒", nvsim: "∼⃒", nwarhk: "⤣", nwArr: "⇖", nwarr: "↖", nwarrow: "↖", nwnear: "⤧", Oacute: "Ó", oacute: "ó", oast: "⊛", ocir: "⊚", Ocirc: "Ô", ocirc: "ô", Ocy: "О", ocy: "о", odash: "⊝", Odblac: "Ő", odblac: "ő", odiv: "⨸", odot: "⊙", odsold: "⦼", OElig: "Œ", oelig: "œ", ofcir: "⦿", Ofr: "𝔒", ofr: "𝔬", ogon: "˛", Ograve: "Ò", ograve: "ò", ogt: "⧁", ohbar: "⦵", ohm: "Ω", oint: "∮", olarr: "↺", olcir: "⦾", olcross: "⦻", oline: "‾", olt: "⧀", Omacr: "Ō", omacr: "ō", Omega: "Ω", omega: "ω", Omicron: "Ο", omicron: "ο", omid: "⦶", ominus: "⊖", Oopf: "𝕆", oopf: "𝕠", opar: "⦷", OpenCurlyDoubleQuote: "“", OpenCurlyQuote: "‘", operp: "⦹", oplus: "⊕", Or: "⩔", or: "∨", orarr: "↻", ord: "⩝", order: "ℴ", orderof: "ℴ", ordf: "ª", ordm: "º", origof: "⊶", oror: "⩖", orslope: "⩗", orv: "⩛", oS: "Ⓢ", Oscr: "𝒪", oscr: "ℴ", Oslash: "Ø", oslash: "ø", osol: "⊘", Otilde: "Õ", otilde: "õ", Otimes: "⨷", otimes: "⊗", otimesas: "⨶", Ouml: "Ö", ouml: "ö", ovbar: "⌽", OverBar: "‾", OverBrace: "⏞", OverBracket: "⎴", OverParenthesis: "⏜", par: "∥", para: "¶", parallel: "∥", parsim: "⫳", parsl: "⫽", part: "∂", PartialD: "∂", Pcy: "П", pcy: "п", percnt: "%", period: ".", permil: "‰", perp: "⊥", pertenk: "‱", Pfr: "𝔓", pfr: "𝔭", Phi: "Φ", phi: "φ", phiv: "ϕ", phmmat: "ℳ", phone: "☎", Pi: "Π", pi: "π", pitchfork: "⋔", piv: "ϖ", planck: "ℏ", planckh: "ℎ", plankv: "ℏ", plus: "+", plusacir: "⨣", plusb: "⊞", pluscir: "⨢", plusdo: "∔", plusdu: "⨥", pluse: "⩲", PlusMinus: "±", plusmn: "±", plussim: "⨦", plustwo: "⨧", pm: "±", Poincareplane: "ℌ", pointint: "⨕", Popf: "ℙ", popf: "𝕡", pound: "£", Pr: "⪻", pr: "≺", prap: "⪷", prcue: "≼", prE: "⪳", pre: "⪯", prec: "≺", precapprox: "⪷", preccurlyeq: "≼", Precedes: "≺", PrecedesEqual: "⪯", PrecedesSlantEqual: "≼", PrecedesTilde: "≾", preceq: "⪯", precnapprox: "⪹", precneqq: "⪵", precnsim: "⋨", precsim: "≾", Prime: "″", prime: "′", primes: "ℙ", prnap: "⪹", prnE: "⪵", prnsim: "⋨", prod: "∏", Product: "∏", profalar: "⌮", profline: "⌒", profsurf: "⌓", prop: "∝", Proportion: "∷", Proportional: "∝", propto: "∝", prsim: "≾", prurel: "⊰", Pscr: "𝒫", pscr: "𝓅", Psi: "Ψ", psi: "ψ", puncsp: " ", Qfr: "𝔔", qfr: "𝔮", qint: "⨌", Qopf: "ℚ", qopf: "𝕢", qprime: "⁗", Qscr: "𝒬", qscr: "𝓆", quaternions: "ℍ", quatint: "⨖", quest: "?", questeq: "≟", QUOT: '"', quot: '"', rAarr: "⇛", race: "∽̱", Racute: "Ŕ", racute: "ŕ", radic: "√", raemptyv: "⦳", Rang: "⟫", rang: "⟩", rangd: "⦒", range: "⦥", rangle: "⟩", raquo: "»", Rarr: "↠", rArr: "⇒", rarr: "→", rarrap: "⥵", rarrb: "⇥", rarrbfs: "⤠", rarrc: "⤳", rarrfs: "⤞", rarrhk: "↪", rarrlp: "↬", rarrpl: "⥅", rarrsim: "⥴", Rarrtl: "⤖", rarrtl: "↣", rarrw: "↝", rAtail: "⤜", ratail: "⤚", ratio: "∶", rationals: "ℚ", RBarr: "⤐", rBarr: "⤏", rbarr: "⤍", rbbrk: "❳", rbrace: "***REMOVED***", rbrack: "]", rbrke: "⦌", rbrksld: "⦎", rbrkslu: "⦐", Rcaron: "Ř", rcaron: "ř", Rcedil: "Ŗ", rcedil: "ŗ", rceil: "⌉", rcub: "***REMOVED***", Rcy: "Р", rcy: "р", rdca: "⤷", rdldhar: "⥩", rdquo: "”", rdquor: "”", rdsh: "↳", Re: "ℜ", real: "ℜ", realine: "ℛ", realpart: "ℜ", reals: "ℝ", rect: "▭", REG: "®", reg: "®", ReverseElement: "∋", ReverseEquilibrium: "⇋", ReverseUpEquilibrium: "⥯", rfisht: "⥽", rfloor: "⌋", Rfr: "ℜ", rfr: "𝔯", rHar: "⥤", rhard: "⇁", rharu: "⇀", rharul: "⥬", Rho: "Ρ", rho: "ρ", rhov: "ϱ", RightAngleBracket: "⟩", RightArrow: "→", Rightarrow: "⇒", rightarrow: "→", RightArrowBar: "⇥", RightArrowLeftArrow: "⇄", rightarrowtail: "↣", RightCeiling: "⌉", RightDoubleBracket: "⟧", RightDownTeeVector: "⥝", RightDownVector: "⇂", RightDownVectorBar: "⥕", RightFloor: "⌋", rightharpoondown: "⇁", rightharpoonup: "⇀", rightleftarrows: "⇄", rightleftharpoons: "⇌", rightrightarrows: "⇉", rightsquigarrow: "↝", RightTee: "⊢", RightTeeArrow: "↦", RightTeeVector: "⥛", rightthreetimes: "⋌", RightTriangle: "⊳", RightTriangleBar: "⧐", RightTriangleEqual: "⊵", RightUpDownVector: "⥏", RightUpTeeVector: "⥜", RightUpVector: "↾", RightUpVectorBar: "⥔", RightVector: "⇀", RightVectorBar: "⥓", ring: "˚", risingdotseq: "≓", rlarr: "⇄", rlhar: "⇌", rlm: "‏", rmoust: "⎱", rmoustache: "⎱", rnmid: "⫮", roang: "⟭", roarr: "⇾", robrk: "⟧", ropar: "⦆", Ropf: "ℝ", ropf: "𝕣", roplus: "⨮", rotimes: "⨵", RoundImplies: "⥰", rpar: ")", rpargt: "⦔", rppolint: "⨒", rrarr: "⇉", Rrightarrow: "⇛", rsaquo: "›", Rscr: "ℛ", rscr: "𝓇", Rsh: "↱", rsh: "↱", rsqb: "]", rsquo: "’", rsquor: "’", rthree: "⋌", rtimes: "⋊", rtri: "▹", rtrie: "⊵", rtrif: "▸", rtriltri: "⧎", RuleDelayed: "⧴", ruluhar: "⥨", rx: "℞", Sacute: "Ś", sacute: "ś", sbquo: "‚", Sc: "⪼", sc: "≻", scap: "⪸", Scaron: "Š", scaron: "š", sccue: "≽", scE: "⪴", sce: "⪰", Scedil: "Ş", scedil: "ş", Scirc: "Ŝ", scirc: "ŝ", scnap: "⪺", scnE: "⪶", scnsim: "⋩", scpolint: "⨓", scsim: "≿", Scy: "С", scy: "с", sdot: "⋅", sdotb: "⊡", sdote: "⩦", searhk: "⤥", seArr: "⇘", searr: "↘", searrow: "↘", sect: "§", semi: ";", seswar: "⤩", setminus: "∖", setmn: "∖", sext: "✶", Sfr: "𝔖", sfr: "𝔰", sfrown: "⌢", sharp: "♯", SHCHcy: "Щ", shchcy: "щ", SHcy: "Ш", shcy: "ш", ShortDownArrow: "↓", ShortLeftArrow: "←", shortmid: "∣", shortparallel: "∥", ShortRightArrow: "→", ShortUpArrow: "↑", shy: "­", Sigma: "Σ", sigma: "σ", sigmaf: "ς", sigmav: "ς", sim: "∼", simdot: "⩪", sime: "≃", simeq: "≃", simg: "⪞", simgE: "⪠", siml: "⪝", simlE: "⪟", simne: "≆", simplus: "⨤", simrarr: "⥲", slarr: "←", SmallCircle: "∘", smallsetminus: "∖", smashp: "⨳", smeparsl: "⧤", smid: "∣", smile: "⌣", smt: "⪪", smte: "⪬", smtes: "⪬︀", SOFTcy: "Ь", softcy: "ь", sol: "/", solb: "⧄", solbar: "⌿", Sopf: "𝕊", sopf: "𝕤", spades: "♠", spadesuit: "♠", spar: "∥", sqcap: "⊓", sqcaps: "⊓︀", sqcup: "⊔", sqcups: "⊔︀", Sqrt: "√", sqsub: "⊏", sqsube: "⊑", sqsubset: "⊏", sqsubseteq: "⊑", sqsup: "⊐", sqsupe: "⊒", sqsupset: "⊐", sqsupseteq: "⊒", squ: "□", Square: "□", square: "□", SquareIntersection: "⊓", SquareSubset: "⊏", SquareSubsetEqual: "⊑", SquareSuperset: "⊐", SquareSupersetEqual: "⊒", SquareUnion: "⊔", squarf: "▪", squf: "▪", srarr: "→", Sscr: "𝒮", sscr: "𝓈", ssetmn: "∖", ssmile: "⌣", sstarf: "⋆", Star: "⋆", star: "☆", starf: "★", straightepsilon: "ϵ", straightphi: "ϕ", strns: "¯", Sub: "⋐", sub: "⊂", subdot: "⪽", subE: "⫅", sube: "⊆", subedot: "⫃", submult: "⫁", subnE: "⫋", subne: "⊊", subplus: "⪿", subrarr: "⥹", Subset: "⋐", subset: "⊂", subseteq: "⊆", subseteqq: "⫅", SubsetEqual: "⊆", subsetneq: "⊊", subsetneqq: "⫋", subsim: "⫇", subsub: "⫕", subsup: "⫓", succ: "≻", succapprox: "⪸", succcurlyeq: "≽", Succeeds: "≻", SucceedsEqual: "⪰", SucceedsSlantEqual: "≽", SucceedsTilde: "≿", succeq: "⪰", succnapprox: "⪺", succneqq: "⪶", succnsim: "⋩", succsim: "≿", SuchThat: "∋", Sum: "∑", sum: "∑", sung: "♪", Sup: "⋑", sup: "⊃", sup1: "¹", sup2: "²", sup3: "³", supdot: "⪾", supdsub: "⫘", supE: "⫆", supe: "⊇", supedot: "⫄", Superset: "⊃", SupersetEqual: "⊇", suphsol: "⟉", suphsub: "⫗", suplarr: "⥻", supmult: "⫂", supnE: "⫌", supne: "⊋", supplus: "⫀", Supset: "⋑", supset: "⊃", supseteq: "⊇", supseteqq: "⫆", supsetneq: "⊋", supsetneqq: "⫌", supsim: "⫈", supsub: "⫔", supsup: "⫖", swarhk: "⤦", swArr: "⇙", swarr: "↙", swarrow: "↙", swnwar: "⤪", szlig: "ß", Tab: "\t", target: "⌖", Tau: "Τ", tau: "τ", tbrk: "⎴", Tcaron: "Ť", tcaron: "ť", Tcedil: "Ţ", tcedil: "ţ", Tcy: "Т", tcy: "т", tdot: "⃛", telrec: "⌕", Tfr: "𝔗", tfr: "𝔱", there4: "∴", Therefore: "∴", therefore: "∴", Theta: "Θ", theta: "θ", thetasym: "ϑ", thetav: "ϑ", thickapprox: "≈", thicksim: "∼", ThickSpace: "  ", thinsp: " ", ThinSpace: " ", thkap: "≈", thksim: "∼", THORN: "Þ", thorn: "þ", Tilde: "∼", tilde: "˜", TildeEqual: "≃", TildeFullEqual: "≅", TildeTilde: "≈", times: "×", timesb: "⊠", timesbar: "⨱", timesd: "⨰", tint: "∭", toea: "⤨", top: "⊤", topbot: "⌶", topcir: "⫱", Topf: "𝕋", topf: "𝕥", topfork: "⫚", tosa: "⤩", tprime: "‴", TRADE: "™", trade: "™", triangle: "▵", triangledown: "▿", triangleleft: "◃", trianglelefteq: "⊴", triangleq: "≜", triangleright: "▹", trianglerighteq: "⊵", tridot: "◬", trie: "≜", triminus: "⨺", TripleDot: "⃛", triplus: "⨹", trisb: "⧍", tritime: "⨻", trpezium: "⏢", Tscr: "𝒯", tscr: "𝓉", TScy: "Ц", tscy: "ц", TSHcy: "Ћ", tshcy: "ћ", Tstrok: "Ŧ", tstrok: "ŧ", twixt: "≬", twoheadleftarrow: "↞", twoheadrightarrow: "↠", Uacute: "Ú", uacute: "ú", Uarr: "↟", uArr: "⇑", uarr: "↑", Uarrocir: "⥉", Ubrcy: "Ў", ubrcy: "ў", Ubreve: "Ŭ", ubreve: "ŭ", Ucirc: "Û", ucirc: "û", Ucy: "У", ucy: "у", udarr: "⇅", Udblac: "Ű", udblac: "ű", udhar: "⥮", ufisht: "⥾", Ufr: "𝔘", ufr: "𝔲", Ugrave: "Ù", ugrave: "ù", uHar: "⥣", uharl: "↿", uharr: "↾", uhblk: "▀", ulcorn: "⌜", ulcorner: "⌜", ulcrop: "⌏", ultri: "◸", Umacr: "Ū", umacr: "ū", uml: "¨", UnderBar: "_", UnderBrace: "⏟", UnderBracket: "⎵", UnderParenthesis: "⏝", Union: "⋃", UnionPlus: "⊎", Uogon: "Ų", uogon: "ų", Uopf: "𝕌", uopf: "𝕦", UpArrow: "↑", Uparrow: "⇑", uparrow: "↑", UpArrowBar: "⤒", UpArrowDownArrow: "⇅", UpDownArrow: "↕", Updownarrow: "⇕", updownarrow: "↕", UpEquilibrium: "⥮", upharpoonleft: "↿", upharpoonright: "↾", uplus: "⊎", UpperLeftArrow: "↖", UpperRightArrow: "↗", Upsi: "ϒ", upsi: "υ", upsih: "ϒ", Upsilon: "Υ", upsilon: "υ", UpTee: "⊥", UpTeeArrow: "↥", upuparrows: "⇈", urcorn: "⌝", urcorner: "⌝", urcrop: "⌎", Uring: "Ů", uring: "ů", urtri: "◹", Uscr: "𝒰", uscr: "𝓊", utdot: "⋰", Utilde: "Ũ", utilde: "ũ", utri: "▵", utrif: "▴", uuarr: "⇈", Uuml: "Ü", uuml: "ü", uwangle: "⦧", vangrt: "⦜", varepsilon: "ϵ", varkappa: "ϰ", varnothing: "∅", varphi: "ϕ", varpi: "ϖ", varpropto: "∝", vArr: "⇕", varr: "↕", varrho: "ϱ", varsigma: "ς", varsubsetneq: "⊊︀", varsubsetneqq: "⫋︀", varsupsetneq: "⊋︀", varsupsetneqq: "⫌︀", vartheta: "ϑ", vartriangleleft: "⊲", vartriangleright: "⊳", Vbar: "⫫", vBar: "⫨", vBarv: "⫩", Vcy: "В", vcy: "в", VDash: "⊫", Vdash: "⊩", vDash: "⊨", vdash: "⊢", Vdashl: "⫦", Vee: "⋁", vee: "∨", veebar: "⊻", veeeq: "≚", vellip: "⋮", Verbar: "‖", verbar: "|", Vert: "‖", vert: "|", VerticalBar: "∣", VerticalLine: "|", VerticalSeparator: "❘", VerticalTilde: "≀", VeryThinSpace: " ", Vfr: "𝔙", vfr: "𝔳", vltri: "⊲", vnsub: "⊂⃒", vnsup: "⊃⃒", Vopf: "𝕍", vopf: "𝕧", vprop: "∝", vrtri: "⊳", Vscr: "𝒱", vscr: "𝓋", vsubnE: "⫋︀", vsubne: "⊊︀", vsupnE: "⫌︀", vsupne: "⊋︀", Vvdash: "⊪", vzigzag: "⦚", Wcirc: "Ŵ", wcirc: "ŵ", wedbar: "⩟", Wedge: "⋀", wedge: "∧", wedgeq: "≙", weierp: "℘", Wfr: "𝔚", wfr: "𝔴", Wopf: "𝕎", wopf: "𝕨", wp: "℘", wr: "≀", wreath: "≀", Wscr: "𝒲", wscr: "𝓌", xcap: "⋂", xcirc: "◯", xcup: "⋃", xdtri: "▽", Xfr: "𝔛", xfr: "𝔵", xhArr: "⟺", xharr: "⟷", Xi: "Ξ", xi: "ξ", xlArr: "⟸", xlarr: "⟵", xmap: "⟼", xnis: "⋻", xodot: "⨀", Xopf: "𝕏", xopf: "𝕩", xoplus: "⨁", xotime: "⨂", xrArr: "⟹", xrarr: "⟶", Xscr: "𝒳", xscr: "𝓍", xsqcup: "⨆", xuplus: "⨄", xutri: "△", xvee: "⋁", xwedge: "⋀", Yacute: "Ý", yacute: "ý", YAcy: "Я", yacy: "я", Ycirc: "Ŷ", ycirc: "ŷ", Ycy: "Ы", ycy: "ы", yen: "¥", Yfr: "𝔜", yfr: "𝔶", YIcy: "Ї", yicy: "ї", Yopf: "𝕐", yopf: "𝕪", Yscr: "𝒴", yscr: "𝓎", YUcy: "Ю", yucy: "ю", Yuml: "Ÿ", yuml: "ÿ", Zacute: "Ź", zacute: "ź", Zcaron: "Ž", zcaron: "ž", Zcy: "З", zcy: "з", Zdot: "Ż", zdot: "ż", zeetrf: "ℨ", ZeroWidthSpace: "​", Zeta: "Ζ", zeta: "ζ", Zfr: "ℨ", zfr: "𝔷", ZHcy: "Ж", zhcy: "ж", zigrarr: "⇝", Zopf: "ℤ", zopf: "𝕫", Zscr: "𝒵", zscr: "𝓏", zwj: "‍", zwnj: "‌" ***REMOVED***,
    HEXCHARCODE = /^#[xX]([A-Fa-f0-9]+)$/,
    CHARCODE = /^#([0-9]+)$/,
    NAMED = /^([A-Za-z0-9]+)$/,
    EntityParser = function () ***REMOVED***
  function t(t) ***REMOVED***
    this.named = t;
  ***REMOVED***return t.prototype.parse = function (t) ***REMOVED***
    if (t) ***REMOVED***
      var e = t.match(HEXCHARCODE);return e ? String.fromCharCode(parseInt(e[1], 16)) : (e = t.match(CHARCODE)) ? String.fromCharCode(parseInt(e[1], 10)) : (e = t.match(NAMED)) ? this.named[e[1]] : void 0;
    ***REMOVED***
  ***REMOVED***, t;
***REMOVED***(),
    WSP = /[\t\n\f ]/,
    ALPHA = /[A-Za-z]/,
    CRLF = /\r\n?/g,
    EventedTokenizer = function () ***REMOVED***
  function t(t, e) ***REMOVED***
    this.delegate = t, this.entityParser = e, this.state = null, this.input = null, this.index = -1, this.tagLine = -1, this.tagColumn = -1, this.line = -1, this.column = -1, this.states = ***REMOVED*** beforeData: function beforeData() ***REMOVED***
        "<" === this.peek() ? (this.state = "tagOpen", this.markTagStart(), this.consume()) : (this.state = "data", this.delegate.beginData());
      ***REMOVED***, data: function data() ***REMOVED***
        var t = this.peek();"<" === t ? (this.delegate.finishData(), this.state = "tagOpen", this.markTagStart(), this.consume()) : "&" === t ? (this.consume(), this.delegate.appendToData(this.consumeCharRef() || "&")) : (this.consume(), this.delegate.appendToData(t));
      ***REMOVED***, tagOpen: function tagOpen() ***REMOVED***
        var t = this.consume();"!" === t ? this.state = "markupDeclaration" : "/" === t ? this.state = "endTagOpen" : isAlpha(t) && (this.state = "tagName", this.delegate.beginStartTag(), this.delegate.appendToTagName(t.toLowerCase()));
      ***REMOVED***, markupDeclaration: function markupDeclaration() ***REMOVED***
        "-" === this.consume() && "-" === this.input.charAt(this.index) && (this.consume(), this.state = "commentStart", this.delegate.beginComment());
      ***REMOVED***, commentStart: function commentStart() ***REMOVED***
        var t = this.consume();"-" === t ? this.state = "commentStartDash" : ">" === t ? (this.delegate.finishComment(), this.state = "beforeData") : (this.delegate.appendToCommentData(t), this.state = "comment");
      ***REMOVED***, commentStartDash: function commentStartDash() ***REMOVED***
        var t = this.consume();"-" === t ? this.state = "commentEnd" : ">" === t ? (this.delegate.finishComment(), this.state = "beforeData") : (this.delegate.appendToCommentData("-"), this.state = "comment");
      ***REMOVED***, comment: function comment() ***REMOVED***
        var t = this.consume();"-" === t ? this.state = "commentEndDash" : this.delegate.appendToCommentData(t);
      ***REMOVED***, commentEndDash: function commentEndDash() ***REMOVED***
        var t = this.consume();"-" === t ? this.state = "commentEnd" : (this.delegate.appendToCommentData("-" + t), this.state = "comment");
      ***REMOVED***, commentEnd: function commentEnd() ***REMOVED***
        var t = this.consume();">" === t ? (this.delegate.finishComment(), this.state = "beforeData") : (this.delegate.appendToCommentData("--" + t), this.state = "comment");
      ***REMOVED***, tagName: function tagName() ***REMOVED***
        var t = this.consume();isSpace(t) ? this.state = "beforeAttributeName" : "/" === t ? this.state = "selfClosingStartTag" : ">" === t ? (this.delegate.finishTag(), this.state = "beforeData") : this.delegate.appendToTagName(t);
      ***REMOVED***, beforeAttributeName: function beforeAttributeName() ***REMOVED***
        var t = this.peek();isSpace(t) ? this.consume() : "/" === t ? (this.state = "selfClosingStartTag", this.consume()) : ">" === t ? (this.consume(), this.delegate.finishTag(), this.state = "beforeData") : "=" === t ? (this.delegate.reportSyntaxError("attribute name cannot start with equals sign"), this.state = "attributeName", this.delegate.beginAttribute(), this.consume(), this.delegate.appendToAttributeName(t)) : (this.state = "attributeName", this.delegate.beginAttribute());
      ***REMOVED***, attributeName: function attributeName() ***REMOVED***
        var t = this.peek();isSpace(t) ? (this.state = "afterAttributeName", this.consume()) : "/" === t ? (this.delegate.beginAttributeValue(!1), this.delegate.finishAttributeValue(), this.consume(), this.state = "selfClosingStartTag") : "=" === t ? (this.state = "beforeAttributeValue", this.consume()) : ">" === t ? (this.delegate.beginAttributeValue(!1), this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.state = "beforeData") : '"' === t || "'" === t || "<" === t ? (this.delegate.reportSyntaxError(t + " is not a valid character within attribute names"), this.consume(), this.delegate.appendToAttributeName(t)) : (this.consume(), this.delegate.appendToAttributeName(t));
      ***REMOVED***, afterAttributeName: function afterAttributeName() ***REMOVED***
        var t = this.peek();isSpace(t) ? this.consume() : "/" === t ? (this.delegate.beginAttributeValue(!1), this.delegate.finishAttributeValue(), this.consume(), this.state = "selfClosingStartTag") : "=" === t ? (this.consume(), this.state = "beforeAttributeValue") : ">" === t ? (this.delegate.beginAttributeValue(!1), this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.state = "beforeData") : (this.delegate.beginAttributeValue(!1), this.delegate.finishAttributeValue(), this.consume(), this.state = "attributeName", this.delegate.beginAttribute(), this.delegate.appendToAttributeName(t));
      ***REMOVED***, beforeAttributeValue: function beforeAttributeValue() ***REMOVED***
        var t = this.peek();isSpace(t) ? this.consume() : '"' === t ? (this.state = "attributeValueDoubleQuoted", this.delegate.beginAttributeValue(!0), this.consume()) : "'" === t ? (this.state = "attributeValueSingleQuoted", this.delegate.beginAttributeValue(!0), this.consume()) : ">" === t ? (this.delegate.beginAttributeValue(!1), this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.state = "beforeData") : (this.state = "attributeValueUnquoted", this.delegate.beginAttributeValue(!1), this.consume(), this.delegate.appendToAttributeValue(t));
      ***REMOVED***, attributeValueDoubleQuoted: function attributeValueDoubleQuoted() ***REMOVED***
        var t = this.consume();'"' === t ? (this.delegate.finishAttributeValue(), this.state = "afterAttributeValueQuoted") : "&" === t ? this.delegate.appendToAttributeValue(this.consumeCharRef('"') || "&") : this.delegate.appendToAttributeValue(t);
      ***REMOVED***, attributeValueSingleQuoted: function attributeValueSingleQuoted() ***REMOVED***
        var t = this.consume();"'" === t ? (this.delegate.finishAttributeValue(), this.state = "afterAttributeValueQuoted") : "&" === t ? this.delegate.appendToAttributeValue(this.consumeCharRef("'") || "&") : this.delegate.appendToAttributeValue(t);
      ***REMOVED***, attributeValueUnquoted: function attributeValueUnquoted() ***REMOVED***
        var t = this.peek();isSpace(t) ? (this.delegate.finishAttributeValue(), this.consume(), this.state = "beforeAttributeName") : "&" === t ? (this.consume(), this.delegate.appendToAttributeValue(this.consumeCharRef(">") || "&")) : ">" === t ? (this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.state = "beforeData") : (this.consume(), this.delegate.appendToAttributeValue(t));
      ***REMOVED***, afterAttributeValueQuoted: function afterAttributeValueQuoted() ***REMOVED***
        var t = this.peek();isSpace(t) ? (this.consume(), this.state = "beforeAttributeName") : "/" === t ? (this.consume(), this.state = "selfClosingStartTag") : ">" === t ? (this.consume(), this.delegate.finishTag(), this.state = "beforeData") : this.state = "beforeAttributeName";
      ***REMOVED***, selfClosingStartTag: function selfClosingStartTag() ***REMOVED***
        ">" === this.peek() ? (this.consume(), this.delegate.markTagAsSelfClosing(), this.delegate.finishTag(), this.state = "beforeData") : this.state = "beforeAttributeName";
      ***REMOVED***, endTagOpen: function endTagOpen() ***REMOVED***
        var t = this.consume();isAlpha(t) && (this.state = "tagName", this.delegate.beginEndTag(), this.delegate.appendToTagName(t.toLowerCase()));
      ***REMOVED*** ***REMOVED***, this.reset();
  ***REMOVED***return t.prototype.reset = function () ***REMOVED***
    this.state = "beforeData", this.input = "", this.index = 0, this.line = 1, this.column = 0, this.tagLine = -1, this.tagColumn = -1, this.delegate.reset();
  ***REMOVED***, t.prototype.tokenize = function (t) ***REMOVED***
    this.reset(), this.tokenizePart(t), this.tokenizeEOF();
  ***REMOVED***, t.prototype.tokenizePart = function (t) ***REMOVED***
    for (this.input += preprocessInput(t); this.index < this.input.length;) ***REMOVED***
      this.states[this.state].call(this);
    ***REMOVED***
  ***REMOVED***, t.prototype.tokenizeEOF = function () ***REMOVED***
    this.flushData();
  ***REMOVED***, t.prototype.flushData = function () ***REMOVED***
    "data" === this.state && (this.delegate.finishData(), this.state = "beforeData");
  ***REMOVED***, t.prototype.peek = function () ***REMOVED***
    return this.input.charAt(this.index);
  ***REMOVED***, t.prototype.consume = function () ***REMOVED***
    var t = this.peek();return this.index++, "\n" === t ? (this.line++, this.column = 0) : this.column++, t;
  ***REMOVED***, t.prototype.consumeCharRef = function () ***REMOVED***
    var t = this.input.indexOf(";", this.index);if (-1 !== t) ***REMOVED***
      var e = this.input.slice(this.index, t),
          r = this.entityParser.parse(e);if (r) ***REMOVED***
        for (var a = e.length; a;) ***REMOVED***
          this.consume(), a--;
        ***REMOVED***return this.consume(), r;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***, t.prototype.markTagStart = function () ***REMOVED***
    this.tagLine = this.line, this.tagColumn = this.column, this.delegate.tagOpen && this.delegate.tagOpen();
  ***REMOVED***, t;
***REMOVED***(),
    Tokenizer = function () ***REMOVED***
  function t(t, e) ***REMOVED***
    void 0 === e && (e = ***REMOVED******REMOVED***), this.options = e, this._token = null, this.startLine = 1, this.startColumn = 0, this.tokens = [], this.currentAttribute = null, this.tokenizer = new EventedTokenizer(this, t);
  ***REMOVED***return Object.defineProperty(t.prototype, "token", ***REMOVED*** get: function get() ***REMOVED***
      return unwrap(this._token);
    ***REMOVED***, set: function set(t) ***REMOVED***
      this._token = t;
    ***REMOVED***, enumerable: !0, configurable: !0 ***REMOVED***), t.prototype.tokenize = function (t) ***REMOVED***
    return this.tokens = [], this.tokenizer.tokenize(t), this.tokens;
  ***REMOVED***, t.prototype.tokenizePart = function (t) ***REMOVED***
    return this.tokens = [], this.tokenizer.tokenizePart(t), this.tokens;
  ***REMOVED***, t.prototype.tokenizeEOF = function () ***REMOVED***
    return this.tokens = [], this.tokenizer.tokenizeEOF(), this.tokens[0];
  ***REMOVED***, t.prototype.reset = function () ***REMOVED***
    this._token = null, this.startLine = 1, this.startColumn = 0;
  ***REMOVED***, t.prototype.addLocInfo = function () ***REMOVED***
    this.options.loc && (this.token.loc = ***REMOVED*** start: ***REMOVED*** line: this.startLine, column: this.startColumn ***REMOVED***, end: ***REMOVED*** line: this.tokenizer.line, column: this.tokenizer.column ***REMOVED*** ***REMOVED***), this.startLine = this.tokenizer.line, this.startColumn = this.tokenizer.column;
  ***REMOVED***, t.prototype.beginData = function () ***REMOVED***
    this.token = ***REMOVED*** type: "Chars", chars: "" ***REMOVED***, this.tokens.push(this.token);
  ***REMOVED***, t.prototype.appendToData = function (t) ***REMOVED***
    this.token.chars += t;
  ***REMOVED***, t.prototype.finishData = function () ***REMOVED***
    this.addLocInfo();
  ***REMOVED***, t.prototype.beginComment = function () ***REMOVED***
    this.token = ***REMOVED*** type: "Comment", chars: "" ***REMOVED***, this.tokens.push(this.token);
  ***REMOVED***, t.prototype.appendToCommentData = function (t) ***REMOVED***
    this.token.chars += t;
  ***REMOVED***, t.prototype.finishComment = function () ***REMOVED***
    this.addLocInfo();
  ***REMOVED***, t.prototype.beginStartTag = function () ***REMOVED***
    this.token = ***REMOVED*** type: "StartTag", tagName: "", attributes: [], selfClosing: !1 ***REMOVED***, this.tokens.push(this.token);
  ***REMOVED***, t.prototype.beginEndTag = function () ***REMOVED***
    this.token = ***REMOVED*** type: "EndTag", tagName: "" ***REMOVED***, this.tokens.push(this.token);
  ***REMOVED***, t.prototype.finishTag = function () ***REMOVED***
    this.addLocInfo();
  ***REMOVED***, t.prototype.markTagAsSelfClosing = function () ***REMOVED***
    this.token.selfClosing = !0;
  ***REMOVED***, t.prototype.appendToTagName = function (t) ***REMOVED***
    this.token.tagName += t;
  ***REMOVED***, t.prototype.beginAttribute = function () ***REMOVED***
    var t = unwrap(this.token.attributes, "current token's attributs");this.currentAttribute = ["", "", !1], t.push(this.currentAttribute);
  ***REMOVED***, t.prototype.appendToAttributeName = function (t) ***REMOVED***
    unwrap(this.currentAttribute)[0] += t;
  ***REMOVED***, t.prototype.beginAttributeValue = function (t) ***REMOVED***
    unwrap(this.currentAttribute)[2] = t;
  ***REMOVED***, t.prototype.appendToAttributeValue = function (t) ***REMOVED***
    var e = unwrap(this.currentAttribute);e[1] = e[1] || "", e[1] += t;
  ***REMOVED***, t.prototype.finishAttributeValue = function () ***REMOVED******REMOVED***, t.prototype.reportSyntaxError = function (t) ***REMOVED***
    this.token.syntaxError = t;
  ***REMOVED***, t;
***REMOVED***();var objKeys = Object.keys;

var ListSlice = function () ***REMOVED***
  function ListSlice(t, e) ***REMOVED***
    _classCallCheck(this, ListSlice);

    this._head = t, this._tail = e;
  ***REMOVED***

  _createClass(ListSlice, [***REMOVED***
    key: "forEachNode",
    value: function forEachNode(t) ***REMOVED***
      var e = this._head;for (; null !== e;) ***REMOVED***
        t(e), e = this.nextNode(e);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "head",
    value: function head() ***REMOVED***
      return this._head;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "tail",
    value: function tail() ***REMOVED***
      return this._tail;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "toArray",
    value: function toArray() ***REMOVED***
      var t = [];return this.forEachNode(function (e) ***REMOVED***
        return t.push(e);
      ***REMOVED***), t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "nextNode",
    value: function nextNode(t) ***REMOVED***
      return t === this._tail ? null : t.next;
    ***REMOVED***
  ***REMOVED***]);

  return ListSlice;
***REMOVED***();

var EMPTY_SLICE = new ListSlice(null, null),
    EMPTY_ARRAY = Object.freeze([]),
    entityParser = new EntityParser(namedCharRefs);
var Parser = function () ***REMOVED***
  function Parser(t) ***REMOVED***
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ***REMOVED******REMOVED***;

    _classCallCheck(this, Parser);

    this.elementStack = [], this.currentAttribute = null, this.currentNode = null, this.tokenizer = new EventedTokenizer(this, entityParser), this.options = e, this.tokenizer.states.tagOpen = function () ***REMOVED***
      var t = this.consume();"!" === t ? this.state = "markupDeclaration" : "/" === t ? this.state = "endTagOpen" : /[A-Za-z]/.test(t) && (this.state = "tagName", this.delegate.beginStartTag(), this.delegate.appendToTagName(t));
    ***REMOVED***, this.tokenizer.states.endTagOpen = function () ***REMOVED***
      var t = this.consume();/[A-Za-z]/.test(t) && (this.state = "tagName", this.delegate.beginEndTag(), this.delegate.appendToTagName(t));
    ***REMOVED***, this.source = t.split(/(?:\r\n?|\n)/g);
  ***REMOVED***

  _createClass(Parser, [***REMOVED***
    key: "acceptNode",
    value: function acceptNode(t) ***REMOVED***
      return this[t.type](t);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "currentElement",
    value: function currentElement() ***REMOVED***
      return this.elementStack[this.elementStack.length - 1];
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "sourceForNode",
    value: function sourceForNode(t, e) ***REMOVED***
      var r = void 0,
          a = void 0,
          i = void 0,
          n = t.loc.start.line - 1,
          s = n - 1,
          o = t.loc.start.column,
          l = [];for (e ? (a = e.loc.end.line - 1, i = e.loc.end.column) : (a = t.loc.end.line - 1, i = t.loc.end.column); s < a;) ***REMOVED***
        s++, r = this.source[s], s === n ? n === a ? l.push(r.slice(o, i)) : l.push(r.slice(o)) : s === a ? l.push(r.slice(0, i)) : l.push(r);
      ***REMOVED***return l.join("\n");
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "currentAttr",
    get: function get() ***REMOVED***
      return this.currentAttribute;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "currentTag",
    get: function get() ***REMOVED***
      var t = this.currentNode;return t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "currentStartTag",
    get: function get() ***REMOVED***
      var t = this.currentNode;return t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "currentEndTag",
    get: function get() ***REMOVED***
      var t = this.currentNode;return t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "currentComment",
    get: function get() ***REMOVED***
      var t = this.currentNode;return t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "currentData",
    get: function get() ***REMOVED***
      var t = this.currentNode;return t;
    ***REMOVED***
  ***REMOVED***]);

  return Parser;
***REMOVED***();

var HandlebarsNodeVisitors = function (_Parser) ***REMOVED***
  _inherits(HandlebarsNodeVisitors, _Parser);

  function HandlebarsNodeVisitors() ***REMOVED***
    var _this;

    _classCallCheck(this, HandlebarsNodeVisitors);

    (_this = _possibleConstructorReturn(this, (HandlebarsNodeVisitors.__proto__ || Object.getPrototypeOf(HandlebarsNodeVisitors)).apply(this, arguments)), _this), _this.cursorCount = 0;return _this;
  ***REMOVED***

  _createClass(HandlebarsNodeVisitors, [***REMOVED***
    key: "cursor",
    value: function cursor() ***REMOVED***
      return "%cursor:" + this.cursorCount++ + "%";
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "Program",
    value: function Program(t) ***REMOVED***
      var e = [];this.cursorCount = 0;var r = void 0,
          a = b.program(e, t.blockParams, t.loc),
          i = t.body.length;if (this.elementStack.push(a), 0 === i) return this.elementStack.pop();for (r = 0; r < i; r++) ***REMOVED***
        this.acceptNode(t.body[r]);
      ***REMOVED***var n = this.elementStack.pop();if (n !== a) ***REMOVED***
        var _t4 = n;throw new SyntaxError$1("Unclosed element `" + _t4.tag + "` (on line " + _t4.loc.start.line + ").", _t4.loc);
      ***REMOVED***return a;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "BlockStatement",
    value: function BlockStatement(t) ***REMOVED***
      if ("comment" === this.tokenizer.state) return void this.appendToCommentData(this.sourceForNode(t));if ("comment" !== this.tokenizer.state && "data" !== this.tokenizer.state && "beforeData" !== this.tokenizer.state) throw new SyntaxError$1("A block may only be used inside an HTML element or another block.", t.loc);
      var _acceptCallNodes = acceptCallNodes(this, t),
          e = _acceptCallNodes.path,
          r = _acceptCallNodes.params,
          a = _acceptCallNodes.hash,
          i = this.Program(t.program),
          n = t.inverse ? this.Program(t.inverse) : null;

      "in-element" === e.original && (a = addInElementHash(this.cursor(), a, t.loc));var s = b.block(e, r, a, i, n, t.loc);appendChild(this.currentElement(), s);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "MustacheStatement",
    value: function MustacheStatement(t) ***REMOVED***
      var e = this.tokenizer;
      if ("comment" === e.state) return void this.appendToCommentData(this.sourceForNode(t));var r = void 0,
          a = t.escaped,
          i = t.loc;if (t.path.type.match(/Literal$/)) r = ***REMOVED*** type: "MustacheStatement", path: this.acceptNode(t.path), params: [], hash: b.hash(), escaped: a, loc: i ***REMOVED***;else ***REMOVED***
        var _acceptCallNodes2 = acceptCallNodes(this, t),
            _e6 = _acceptCallNodes2.path,
            n = _acceptCallNodes2.params,
            s = _acceptCallNodes2.hash;

        r = b.mustache(_e6, n, s, !a, i);
      ***REMOVED***switch (e.state) ***REMOVED***case "tagName":
          addElementModifier(this.currentStartTag, r), e.state = "beforeAttributeName";break;case "beforeAttributeName":
          addElementModifier(this.currentStartTag, r);break;case "attributeName":case "afterAttributeName":
          this.beginAttributeValue(!1), this.finishAttributeValue(), addElementModifier(this.currentStartTag, r), e.state = "beforeAttributeName";break;case "afterAttributeValueQuoted":
          addElementModifier(this.currentStartTag, r), e.state = "beforeAttributeName";break;case "beforeAttributeValue":
          this.beginAttributeValue(!1), appendDynamicAttributeValuePart(this.currentAttribute, r), e.state = "attributeValueUnquoted";break;case "attributeValueDoubleQuoted":case "attributeValueSingleQuoted":case "attributeValueUnquoted":
          appendDynamicAttributeValuePart(this.currentAttribute, r);break;default:
          appendChild(this.currentElement(), r);***REMOVED***return r;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "ContentStatement",
    value: function ContentStatement(t) ***REMOVED***
      updateTokenizerLocation(this.tokenizer, t), this.tokenizer.tokenizePart(t.value), this.tokenizer.flushData();
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "CommentStatement",
    value: function CommentStatement(t) ***REMOVED***
      var e = this.tokenizer;
      if ("comment" === e.state) return this.appendToCommentData(this.sourceForNode(t)), null;var r = t.value,
          a = t.loc,
          i = b.mustacheComment(r, a);
      switch (e.state) ***REMOVED***case "beforeAttributeName":
          this.currentStartTag.comments.push(i);break;case "beforeData":case "data":
          appendChild(this.currentElement(), i);break;default:
          throw new SyntaxError$1("Using a Handlebars comment when in the `" + e.state + "` state is not supported: \"" + i.value + "\" on line " + a.start.line + ":" + a.start.column, t.loc);***REMOVED***return i;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "PartialStatement",
    value: function PartialStatement(t) ***REMOVED***
      var e = t.loc;
      throw new SyntaxError$1("Handlebars partials are not supported: \"" + this.sourceForNode(t, t.name) + "\" at L" + e.start.line + ":C" + e.start.column, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "PartialBlockStatement",
    value: function PartialBlockStatement(t) ***REMOVED***
      var e = t.loc;
      throw new SyntaxError$1("Handlebars partial blocks are not supported: \"" + this.sourceForNode(t, t.name) + "\" at L" + e.start.line + ":C" + e.start.column, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "Decorator",
    value: function Decorator(t) ***REMOVED***
      var e = t.loc;
      throw new SyntaxError$1("Handlebars decorators are not supported: \"" + this.sourceForNode(t, t.path) + "\" at L" + e.start.line + ":C" + e.start.column, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "DecoratorBlock",
    value: function DecoratorBlock(t) ***REMOVED***
      var e = t.loc;
      throw new SyntaxError$1("Handlebars decorator blocks are not supported: \"" + this.sourceForNode(t, t.path) + "\" at L" + e.start.line + ":C" + e.start.column, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "SubExpression",
    value: function SubExpression(t) ***REMOVED***
      var _acceptCallNodes3 = acceptCallNodes(this, t),
          e = _acceptCallNodes3.path,
          r = _acceptCallNodes3.params,
          a = _acceptCallNodes3.hash;

      return b.sexpr(e, r, a, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "PathExpression",
    value: function PathExpression(t) ***REMOVED***
      var e = void 0,
          r = t.original,
          a = t.loc;if (-1 !== r.indexOf("/")) ***REMOVED***
        if ("./" === r.slice(0, 2)) throw new SyntaxError$1("Using \"./\" is not supported in Glimmer and unnecessary: \"" + t.original + "\" on line " + a.start.line + ".", t.loc);if ("../" === r.slice(0, 3)) throw new SyntaxError$1("Changing context using \"../\" is not supported in Glimmer: \"" + t.original + "\" on line " + a.start.line + ".", t.loc);if (-1 !== r.indexOf(".")) throw new SyntaxError$1("Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths: \"" + t.original + "\" on line " + a.start.line + ".", t.loc);e = [t.parts.join("/")];
      ***REMOVED*** else e = t.parts;var i = !1;return r.match(/^this(\..+)?$/) && (i = !0), ***REMOVED*** type: "PathExpression", original: t.original, this: i, parts: e, data: t.data, loc: t.loc ***REMOVED***;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "Hash",
    value: function Hash(t) ***REMOVED***
      var e = [];for (var r = 0; r < t.pairs.length; r++) ***REMOVED***
        var a = t.pairs[r];e.push(b.pair(a.key, this.acceptNode(a.value), a.loc));
      ***REMOVED***return b.hash(e, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "StringLiteral",
    value: function StringLiteral(t) ***REMOVED***
      return b.literal("StringLiteral", t.value, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "BooleanLiteral",
    value: function BooleanLiteral(t) ***REMOVED***
      return b.literal("BooleanLiteral", t.value, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "NumberLiteral",
    value: function NumberLiteral(t) ***REMOVED***
      return b.literal("NumberLiteral", t.value, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "UndefinedLiteral",
    value: function UndefinedLiteral(t) ***REMOVED***
      return b.literal("UndefinedLiteral", void 0, t.loc);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "NullLiteral",
    value: function NullLiteral(t) ***REMOVED***
      return b.literal("NullLiteral", null, t.loc);
    ***REMOVED***
  ***REMOVED***]);

  return HandlebarsNodeVisitors;
***REMOVED***(Parser);

var visitorKeys = ***REMOVED*** Program: ["body"], MustacheStatement: ["path", "params", "hash"], BlockStatement: ["path", "params", "hash", "program", "inverse"], ElementModifierStatement: ["path", "params", "hash"], PartialStatement: ["name", "params", "hash"], CommentStatement: [], MustacheCommentStatement: [], ElementNode: ["attributes", "modifiers", "children", "comments"], AttrNode: ["value"], TextNode: [], ConcatStatement: ["parts"], SubExpression: ["path", "params", "hash"], PathExpression: [], StringLiteral: [], BooleanLiteral: [], NumberLiteral: [], NullLiteral: [], UndefinedLiteral: [], Hash: ["pairs"], HashPair: ["value"] ***REMOVED***;var TraversalError = function () ***REMOVED***
  function t(t, e, r, a) ***REMOVED***
    var i = Error.call(this, t);this.key = a, this.message = t, this.node = e, this.parent = r, this.stack = i.stack;
  ***REMOVED***return t.prototype = Object.create(Error.prototype), t.prototype.constructor = t, t;
***REMOVED***();
var Walker = function () ***REMOVED***
  function Walker(t) ***REMOVED***
    _classCallCheck(this, Walker);

    this.order = t, this.stack = [];
  ***REMOVED***

  _createClass(Walker, [***REMOVED***
    key: "visit",
    value: function visit(t, e) ***REMOVED***
      t && (this.stack.push(t), "post" === this.order ? (this.children(t, e), e(t, this)) : (e(t, this), this.children(t, e)), this.stack.pop());
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "children",
    value: function children(t, e) ***REMOVED***
      var r = visitors[t.type];r && r(this, t, e);
    ***REMOVED***
  ***REMOVED***]);

  return Walker;
***REMOVED***();

var visitors = ***REMOVED***
  Program: function Program(t, e, r) ***REMOVED***
    for (var a = 0; a < e.body.length; a++) ***REMOVED***
      t.visit(e.body[a], r);
    ***REMOVED***
  ***REMOVED***,
  ElementNode: function ElementNode(t, e, r) ***REMOVED***
    for (var a = 0; a < e.children.length; a++) ***REMOVED***
      t.visit(e.children[a], r);
    ***REMOVED***
  ***REMOVED***,
  BlockStatement: function BlockStatement(t, e, r) ***REMOVED***
    t.visit(e.program, r), t.visit(e.inverse || null, r);
  ***REMOVED***
***REMOVED***;var commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : ***REMOVED******REMOVED***,
    utils = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return i[t];
  ***REMOVED***function a(t) ***REMOVED***
    for (var e = 1; e < arguments.length; e++) ***REMOVED***
      for (var r in arguments[e]) ***REMOVED***
        Object.prototype.hasOwnProperty.call(arguments[e], r) && (t[r] = arguments[e][r]);
      ***REMOVED***
    ***REMOVED***return t;
  ***REMOVED***e.__esModule = !0, e.extend = a, e.indexOf = function (t, e) ***REMOVED***
    for (var r = 0, a = t.length; r < a; r++) ***REMOVED***
      if (t[r] === e) return r;
    ***REMOVED***return -1;
  ***REMOVED***, e.escapeExpression = function (t) ***REMOVED***
    if ("string" != typeof t) ***REMOVED***
      if (t && t.toHTML) return t.toHTML();if (null == t) return "";if (!t) return t + "";t = "" + t;
    ***REMOVED***return s.test(t) ? t.replace(n, r) : t;
  ***REMOVED***, e.isEmpty = function (t) ***REMOVED***
    return !t && 0 !== t || !(!c(t) || 0 !== t.length);
  ***REMOVED***, e.createFrame = function (t) ***REMOVED***
    var e = a(***REMOVED******REMOVED***, t);return e._parent = t, e;
  ***REMOVED***, e.blockParams = function (t, e) ***REMOVED***
    return t.path = e, t;
  ***REMOVED***, e.appendContextPath = function (t, e) ***REMOVED***
    return (t ? t + "." : "") + e;
  ***REMOVED***;var i = ***REMOVED*** "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;", "=": "&#x3D;" ***REMOVED***,
      n = /[&<>"'`=]/g,
      s = /[&<>"'`=]/,
      o = Object.prototype.toString;e.toString = o;var l = function l(t) ***REMOVED***
    return "function" == typeof t;
  ***REMOVED***;l(/x/) && (e.isFunction = l = function l(t) ***REMOVED***
    return "function" == typeof t && "[object Function]" === o.call(t);
  ***REMOVED***), e.isFunction = l;var c = Array.isArray || function (t) ***REMOVED***
    return !(!t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t))) && "[object Array]" === o.call(t);
  ***REMOVED***;e.isArray = c;
***REMOVED***);unwrapExports(utils);var exception = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t, e) ***REMOVED***
    var i = e && e.loc,
        n = void 0,
        s = void 0;i && (t += " - " + (n = i.start.line) + ":" + (s = i.start.column));for (var o = Error.prototype.constructor.call(this, t), l = 0; l < a.length; l++) ***REMOVED***
      this[a[l]] = o[a[l]];
    ***REMOVED***Error.captureStackTrace && Error.captureStackTrace(this, r);try ***REMOVED***
      i && (this.lineNumber = n, Object.defineProperty ? Object.defineProperty(this, "column", ***REMOVED*** value: s, enumerable: !0 ***REMOVED***) : this.column = s);
    ***REMOVED*** catch (t) ***REMOVED******REMOVED***
  ***REMOVED***e.__esModule = !0;var a = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];r.prototype = new Error(), e.default = r, t.exports = e.default;
***REMOVED***);unwrapExports(exception);var blockHelperMissing = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.default = function (t) ***REMOVED***
    t.registerHelper("blockHelperMissing", function (e, r) ***REMOVED***
      var a = r.inverse,
          i = r.fn;if (!0 === e) return i(this);if (!1 === e || null == e) return a(this);if (utils.isArray(e)) return e.length > 0 ? (r.ids && (r.ids = [r.name]), t.helpers.each(e, r)) : a(this);if (r.data && r.ids) ***REMOVED***
        var n = utils.createFrame(r.data);n.contextPath = utils.appendContextPath(r.data.contextPath, r.name), r = ***REMOVED*** data: n ***REMOVED***;
      ***REMOVED***return i(e, r);
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(blockHelperMissing);var each = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0;var r = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(exception);e.default = function (t) ***REMOVED***
    t.registerHelper("each", function (t, e) ***REMOVED***
      function a(e, r, a) ***REMOVED***
        l && (l.key = e, l.index = r, l.first = 0 === r, l.last = !!a, c && (l.contextPath = c + e)), o += i(t[e], ***REMOVED*** data: l, blockParams: utils.blockParams([t[e], e], [c + e, null]) ***REMOVED***);
      ***REMOVED***if (!e) throw new r.default("Must pass iterator to #each");var i = e.fn,
          n = e.inverse,
          s = 0,
          o = "",
          l = void 0,
          c = void 0;if (e.data && e.ids && (c = utils.appendContextPath(e.data.contextPath, e.ids[0]) + "."), utils.isFunction(t) && (t = t.call(this)), e.data && (l = utils.createFrame(e.data)), t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t))) if (utils.isArray(t)) for (var u = t.length; s < u; s++) ***REMOVED***
        s in t && a(s, s, s === t.length - 1);
      ***REMOVED*** else ***REMOVED***
        var p = void 0;for (var h in t) ***REMOVED***
          t.hasOwnProperty(h) && (void 0 !== p && a(p, s - 1), p = h, s++);
        ***REMOVED***void 0 !== p && a(p, s - 1, !0);
      ***REMOVED***return 0 === s && (o = n(this)), o;
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(each);var helperMissing = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0;var r = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(exception);e.default = function (t) ***REMOVED***
    t.registerHelper("helperMissing", function () ***REMOVED***
      if (1 !== arguments.length) throw new r.default('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(helperMissing);var _if = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.default = function (t) ***REMOVED***
    t.registerHelper("if", function (t, e) ***REMOVED***
      return utils.isFunction(t) && (t = t.call(this)), !e.hash.includeZero && !t || utils.isEmpty(t) ? e.inverse(this) : e.fn(this);
    ***REMOVED***), t.registerHelper("unless", function (e, r) ***REMOVED***
      return t.helpers.if.call(this, e, ***REMOVED*** fn: r.inverse, inverse: r.fn, hash: r.hash ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(_if);var log = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.default = function (t) ***REMOVED***
    t.registerHelper("log", function () ***REMOVED***
      for (var e = [void 0], r = arguments[arguments.length - 1], a = 0; a < arguments.length - 1; a++) ***REMOVED***
        e.push(arguments[a]);
      ***REMOVED***var i = 1;null != r.hash.level ? i = r.hash.level : r.data && null != r.data.level && (i = r.data.level), e[0] = i, t.log.apply(t, e);
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(log);var lookup = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.default = function (t) ***REMOVED***
    t.registerHelper("lookup", function (t, e) ***REMOVED***
      return t && t[e];
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(lookup);var _with = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.default = function (t) ***REMOVED***
    t.registerHelper("with", function (t, e) ***REMOVED***
      utils.isFunction(t) && (t = t.call(this));var r = e.fn;if (utils.isEmpty(t)) return e.inverse(this);var a = e.data;return e.data && e.ids && ((a = utils.createFrame(e.data)).contextPath = utils.appendContextPath(e.data.contextPath, e.ids[0])), r(t, ***REMOVED*** data: a, blockParams: utils.blockParams([t], [a && a.contextPath]) ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(_with);var helpers = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***e.__esModule = !0, e.registerDefaultHelpers = function (t) ***REMOVED***
    a.default(t), i.default(t), n.default(t), s.default(t), o.default(t), l.default(t), c.default(t);
  ***REMOVED***;var a = r(blockHelperMissing),
      i = r(each),
      n = r(helperMissing),
      s = r(_if),
      o = r(log),
      l = r(lookup),
      c = r(_with);
***REMOVED***);unwrapExports(helpers);var inline = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.default = function (t) ***REMOVED***
    t.registerDecorator("inline", function (t, e, r, a) ***REMOVED***
      var i = t;return e.partials || (e.partials = ***REMOVED******REMOVED***, i = function i(a, _i2) ***REMOVED***
        var n = r.partials;r.partials = utils.extend(***REMOVED******REMOVED***, n, e.partials);var s = t(a, _i2);return r.partials = n, s;
      ***REMOVED***), e.partials[a.args[0]] = a.fn, i;
    ***REMOVED***);
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(inline);var decorators = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.registerDefaultDecorators = function (t) ***REMOVED***
    r.default(t);
  ***REMOVED***;var r = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(inline);
***REMOVED***);unwrapExports(decorators);var logger_1 = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0;var r = ***REMOVED*** methodMap: ["debug", "info", "warn", "error"], level: "info", lookupLevel: function lookupLevel(t) ***REMOVED***
      if ("string" == typeof t) ***REMOVED***
        var e = utils.indexOf(r.methodMap, t.toLowerCase());t = e >= 0 ? e : parseInt(t, 10);
      ***REMOVED***return t;
    ***REMOVED***, log: function log(t) ***REMOVED***
      if (t = r.lookupLevel(t), "undefined" != typeof console && r.lookupLevel(r.level) <= t) ***REMOVED***
        var e = r.methodMap[t];console[e] || (e = "log");for (var a = arguments.length, i = Array(a > 1 ? a - 1 : 0), n = 1; n < a; n++) ***REMOVED***
          i[n - 1] = arguments[n];
        ***REMOVED***console[e].apply(console, i);
      ***REMOVED***
    ***REMOVED*** ***REMOVED***;e.default = r, t.exports = e.default;
***REMOVED***);unwrapExports(logger_1);var base = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***function a(t, e, r) ***REMOVED***
    this.helpers = t || ***REMOVED******REMOVED***, this.partials = e || ***REMOVED******REMOVED***, this.decorators = r || ***REMOVED******REMOVED***, helpers.registerDefaultHelpers(this), decorators.registerDefaultDecorators(this);
  ***REMOVED***e.__esModule = !0, e.HandlebarsEnvironment = a;var i = r(exception),
      n = r(logger_1);e.VERSION = "4.0.10";e.COMPILER_REVISION = 7;var s = ***REMOVED*** 1: "<= 1.0.rc.2", 2: "== 1.0.0-rc.3", 3: "== 1.0.0-rc.4", 4: "== 1.x.x", 5: "== 2.0.0-alpha.x", 6: ">= 2.0.0-beta.1", 7: ">= 4.0.0" ***REMOVED***;e.REVISION_CHANGES = s;a.prototype = ***REMOVED*** constructor: a, logger: n.default, log: n.default.log, registerHelper: function registerHelper(t, e) ***REMOVED***
      if ("[object Object]" === utils.toString.call(t)) ***REMOVED***
        if (e) throw new i.default("Arg not supported with multiple helpers");utils.extend(this.helpers, t);
      ***REMOVED*** else this.helpers[t] = e;
    ***REMOVED***, unregisterHelper: function unregisterHelper(t) ***REMOVED***
      delete this.helpers[t];
    ***REMOVED***, registerPartial: function registerPartial(t, e) ***REMOVED***
      if ("[object Object]" === utils.toString.call(t)) utils.extend(this.partials, t);else ***REMOVED***
        if (void 0 === e) throw new i.default('Attempting to register a partial called "' + t + '" as undefined');this.partials[t] = e;
      ***REMOVED***
    ***REMOVED***, unregisterPartial: function unregisterPartial(t) ***REMOVED***
      delete this.partials[t];
    ***REMOVED***, registerDecorator: function registerDecorator(t, e) ***REMOVED***
      if ("[object Object]" === utils.toString.call(t)) ***REMOVED***
        if (e) throw new i.default("Arg not supported with multiple decorators");utils.extend(this.decorators, t);
      ***REMOVED*** else this.decorators[t] = e;
    ***REMOVED***, unregisterDecorator: function unregisterDecorator(t) ***REMOVED***
      delete this.decorators[t];
    ***REMOVED*** ***REMOVED***;var o = n.default.log;e.log = o, e.createFrame = utils.createFrame, e.logger = n.default;
***REMOVED***);unwrapExports(base);var safeString = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    this.string = t;
  ***REMOVED***e.__esModule = !0, r.prototype.toString = r.prototype.toHTML = function () ***REMOVED***
    return "" + this.string;
  ***REMOVED***, e.default = r, t.exports = e.default;
***REMOVED***);unwrapExports(safeString);var runtime = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t, e, r, a, i, s, o) ***REMOVED***
    function l(e) ***REMOVED***
      var i = arguments.length <= 1 || void 0 === arguments[1] ? ***REMOVED******REMOVED*** : arguments[1],
          n = o;return !o || e == o[0] || e === t.nullContext && null === o[0] || (n = [e].concat(o)), r(t, e, t.helpers, t.partials, i.data || a, s && [i.blockParams].concat(s), n);
    ***REMOVED***return l = n(r, l, t, o, a, s), l.program = e, l.depth = o ? o.length : 0, l.blockParams = i || 0, l;
  ***REMOVED***function a() ***REMOVED***
    return "";
  ***REMOVED***function i(t, e) ***REMOVED***
    return e && "root" in e || ((e = e ? base.createFrame(e) : ***REMOVED******REMOVED***).root = t), e;
  ***REMOVED***function n(t, e, r, a, i, n) ***REMOVED***
    if (t.decorator) ***REMOVED***
      var o = ***REMOVED******REMOVED***;e = t.decorator(e, o, r, a && a[0], i, n, a), s.extend(e, o);
    ***REMOVED***return e;
  ***REMOVED***e.__esModule = !0, e.checkRevision = function (t) ***REMOVED***
    var e = t && t[0] || 1,
        r = base.COMPILER_REVISION;if (e !== r) ***REMOVED***
      if (e < r) ***REMOVED***
        var a = base.REVISION_CHANGES[r],
            i = base.REVISION_CHANGES[e];throw new o.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + a + ") or downgrade your runtime to an older version (" + i + ").");
      ***REMOVED***throw new o.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + t[1] + ").");
    ***REMOVED***
  ***REMOVED***, e.template = function (t, e) ***REMOVED***
    function a(e) ***REMOVED***
      function r(e) ***REMOVED***
        return "" + t.main(l, e, l.helpers, l.partials, o, u, c);
      ***REMOVED***var s = arguments.length <= 1 || void 0 === arguments[1] ? ***REMOVED******REMOVED*** : arguments[1],
          o = s.data;a._setup(s), !s.partial && t.useData && (o = i(e, o));var c = void 0,
          u = t.useBlockParams ? [] : void 0;return t.useDepths && (c = s.depths ? e != s.depths[0] ? [e].concat(s.depths) : s.depths : [e]), (r = n(t.main, r, l, s.depths || [], o, u))(e, s);
    ***REMOVED***if (!e) throw new o.default("No environment passed to template");if (!t || !t.main) throw new o.default("Unknown template object: " + (typeof t === "undefined" ? "undefined" : _typeof(t)));t.main.decorator = t.main_d, e.VM.checkRevision(t.compiler);var l = ***REMOVED*** strict: function strict(t, e) ***REMOVED***
        if (!(e in t)) throw new o.default('"' + e + '" not defined in ' + t);return t[e];
      ***REMOVED***, lookup: function lookup(t, e) ***REMOVED***
        for (var r = t.length, a = 0; a < r; a++) ***REMOVED***
          if (t[a] && null != t[a][e]) return t[a][e];
        ***REMOVED***
      ***REMOVED***, lambda: function lambda(t, e) ***REMOVED***
        return "function" == typeof t ? t.call(e) : t;
      ***REMOVED***, escapeExpression: s.escapeExpression, invokePartial: function invokePartial(r, a, i) ***REMOVED***
        i.hash && (a = s.extend(***REMOVED******REMOVED***, a, i.hash), i.ids && (i.ids[0] = !0)), r = e.VM.resolvePartial.call(this, r, a, i);var n = e.VM.invokePartial.call(this, r, a, i);if (null == n && e.compile && (i.partials[i.name] = e.compile(r, t.compilerOptions, e), n = i.partials[i.name](a, i)), null != n) ***REMOVED***
          if (i.indent) ***REMOVED***
            for (var l = n.split("\n"), c = 0, u = l.length; c < u && (l[c] || c + 1 !== u); c++) ***REMOVED***
              l[c] = i.indent + l[c];
            ***REMOVED***n = l.join("\n");
          ***REMOVED***return n;
        ***REMOVED***throw new o.default("The partial " + i.name + " could not be compiled when running in runtime-only mode");
      ***REMOVED***, fn: function fn(e) ***REMOVED***
        var r = t[e];return r.decorator = t[e + "_d"], r;
      ***REMOVED***, programs: [], program: function program(t, e, a, i, n) ***REMOVED***
        var s = this.programs[t],
            o = this.fn(t);return e || n || i || a ? s = r(this, t, o, e, a, i, n) : s || (s = this.programs[t] = r(this, t, o)), s;
      ***REMOVED***, data: function data(t, e) ***REMOVED***
        for (; t && e--;) ***REMOVED***
          t = t._parent;
        ***REMOVED***return t;
      ***REMOVED***, merge: function merge(t, e) ***REMOVED***
        var r = t || e;return t && e && t !== e && (r = s.extend(***REMOVED******REMOVED***, e, t)), r;
      ***REMOVED***, nullContext: Object.seal(***REMOVED******REMOVED***), noop: e.VM.noop, compilerInfo: t.compiler ***REMOVED***;return a.isTop = !0, a._setup = function (r) ***REMOVED***
      r.partial ? (l.helpers = r.helpers, l.partials = r.partials, l.decorators = r.decorators) : (l.helpers = l.merge(r.helpers, e.helpers), t.usePartial && (l.partials = l.merge(r.partials, e.partials)), (t.usePartial || t.useDecorators) && (l.decorators = l.merge(r.decorators, e.decorators)));
    ***REMOVED***, a._child = function (e, a, i, n) ***REMOVED***
      if (t.useBlockParams && !i) throw new o.default("must pass block params");if (t.useDepths && !n) throw new o.default("must pass parent depths");return r(l, e, t[e], a, 0, i, n);
    ***REMOVED***, a;
  ***REMOVED***, e.wrapProgram = r, e.resolvePartial = function (t, e, r) ***REMOVED***
    return t ? t.call || r.name || (r.name = t, t = r.partials[t]) : t = "@partial-block" === r.name ? r.data["partial-block"] : r.partials[r.name], t;
  ***REMOVED***, e.invokePartial = function (t, e, r) ***REMOVED***
    var i = r.data && r.data["partial-block"];r.partial = !0, r.ids && (r.data.contextPath = r.ids[0] || r.data.contextPath);var n = void 0;if (r.fn && r.fn !== a && function () ***REMOVED***
      r.data = base.createFrame(r.data);var t = r.fn;n = r.data["partial-block"] = function (e) ***REMOVED***
        var r = arguments.length <= 1 || void 0 === arguments[1] ? ***REMOVED******REMOVED*** : arguments[1];return r.data = base.createFrame(r.data), r.data["partial-block"] = i, t(e, r);
      ***REMOVED***, t.partials && (r.partials = s.extend(***REMOVED******REMOVED***, r.partials, t.partials));
    ***REMOVED***(), void 0 === t && n && (t = n), void 0 === t) throw new o.default("The partial " + r.name + " could not be found");if (t instanceof Function) return t(e, r);
  ***REMOVED***, e.noop = a;var s = function (t) ***REMOVED***
    if (t && t.__esModule) return t;var e = ***REMOVED******REMOVED***;if (null != t) for (var r in t) ***REMOVED***
      Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
    ***REMOVED***return e.default = t, e;
  ***REMOVED***(utils),
      o = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(exception);
***REMOVED***);unwrapExports(runtime);var noConflict = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0, e.default = function (t) ***REMOVED***
    var e = void 0 !== commonjsGlobal ? commonjsGlobal : window,
        r = e.Handlebars;t.noConflict = function () ***REMOVED***
      return e.Handlebars === t && (e.Handlebars = r), t;
    ***REMOVED***;
  ***REMOVED***, t.exports = e.default;
***REMOVED***);unwrapExports(noConflict);var handlebars_runtime = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***function a(t) ***REMOVED***
    if (t && t.__esModule) return t;var e = ***REMOVED******REMOVED***;if (null != t) for (var r in t) ***REMOVED***
      Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
    ***REMOVED***return e.default = t, e;
  ***REMOVED***function i() ***REMOVED***
    var t = new n.HandlebarsEnvironment();return l.extend(t, n), t.SafeString = s.default, t.Exception = o.default, t.Utils = l, t.escapeExpression = l.escapeExpression, t.VM = c, t.template = function (e) ***REMOVED***
      return c.template(e, t);
    ***REMOVED***, t;
  ***REMOVED***e.__esModule = !0;var n = a(base),
      s = r(safeString),
      o = r(exception),
      l = a(utils),
      c = a(runtime),
      u = r(noConflict),
      p = i();p.create = i, u.default(p), p.default = p, e.default = p, t.exports = e.default;
***REMOVED***);unwrapExports(handlebars_runtime);var ast = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0;var r = ***REMOVED*** helpers: ***REMOVED*** helperExpression: function helperExpression(t) ***REMOVED***
        return "SubExpression" === t.type || ("MustacheStatement" === t.type || "BlockStatement" === t.type) && !!(t.params && t.params.length || t.hash);
      ***REMOVED***, scopedId: function scopedId(t) ***REMOVED***
        return (/^\.|this\b/.test(t.original)
        );
      ***REMOVED***, simpleId: function simpleId(t) ***REMOVED***
        return 1 === t.parts.length && !r.helpers.scopedId(t) && !t.depth;
      ***REMOVED*** ***REMOVED*** ***REMOVED***;e.default = r, t.exports = e.default;
***REMOVED***);unwrapExports(ast);var parser = createCommonjsModule(function (t, e) ***REMOVED***
  e.__esModule = !0;var r = function () ***REMOVED***
    function t() ***REMOVED***
      this.yy = ***REMOVED******REMOVED***;
    ***REMOVED***var e = ***REMOVED*** trace: function trace() ***REMOVED******REMOVED***, yy: ***REMOVED******REMOVED***, symbols_: ***REMOVED*** error: 2, root: 3, program: 4, EOF: 5, program_repetition0: 6, statement: 7, mustache: 8, block: 9, rawBlock: 10, partial: 11, partialBlock: 12, content: 13, COMMENT: 14, CONTENT: 15, openRawBlock: 16, rawBlock_repetition_plus0: 17, END_RAW_BLOCK: 18, OPEN_RAW_BLOCK: 19, helperName: 20, openRawBlock_repetition0: 21, openRawBlock_option0: 22, CLOSE_RAW_BLOCK: 23, openBlock: 24, block_option0: 25, closeBlock: 26, openInverse: 27, block_option1: 28, OPEN_BLOCK: 29, openBlock_repetition0: 30, openBlock_option0: 31, openBlock_option1: 32, CLOSE: 33, OPEN_INVERSE: 34, openInverse_repetition0: 35, openInverse_option0: 36, openInverse_option1: 37, openInverseChain: 38, OPEN_INVERSE_CHAIN: 39, openInverseChain_repetition0: 40, openInverseChain_option0: 41, openInverseChain_option1: 42, inverseAndProgram: 43, INVERSE: 44, inverseChain: 45, inverseChain_option0: 46, OPEN_ENDBLOCK: 47, OPEN: 48, mustache_repetition0: 49, mustache_option0: 50, OPEN_UNESCAPED: 51, mustache_repetition1: 52, mustache_option1: 53, CLOSE_UNESCAPED: 54, OPEN_PARTIAL: 55, partialName: 56, partial_repetition0: 57, partial_option0: 58, openPartialBlock: 59, OPEN_PARTIAL_BLOCK: 60, openPartialBlock_repetition0: 61, openPartialBlock_option0: 62, param: 63, sexpr: 64, OPEN_SEXPR: 65, sexpr_repetition0: 66, sexpr_option0: 67, CLOSE_SEXPR: 68, hash: 69, hash_repetition_plus0: 70, hashSegment: 71, ID: 72, EQUALS: 73, blockParams: 74, OPEN_BLOCK_PARAMS: 75, blockParams_repetition_plus0: 76, CLOSE_BLOCK_PARAMS: 77, path: 78, dataName: 79, STRING: 80, NUMBER: 81, BOOLEAN: 82, UNDEFINED: 83, NULL: 84, DATA: 85, pathSegments: 86, SEP: 87, $accept: 0, $end: 1 ***REMOVED***, terminals_: ***REMOVED*** 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" ***REMOVED***, productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]], performAction: function performAction(t, e, r, a, i, n, s) ***REMOVED***
        var o = n.length - 1;switch (i) ***REMOVED***case 1:
            return n[o - 1];case 2:
            this.$ = a.prepareProgram(n[o]);break;case 3:case 4:case 5:case 6:case 7:case 8:
            this.$ = n[o];break;case 9:
            this.$ = ***REMOVED*** type: "CommentStatement", value: a.stripComment(n[o]), strip: a.stripFlags(n[o], n[o]), loc: a.locInfo(this._$) ***REMOVED***;break;case 10:
            this.$ = ***REMOVED*** type: "ContentStatement", original: n[o], value: n[o], loc: a.locInfo(this._$) ***REMOVED***;break;case 11:
            this.$ = a.prepareRawBlock(n[o - 2], n[o - 1], n[o], this._$);break;case 12:
            this.$ = ***REMOVED*** path: n[o - 3], params: n[o - 2], hash: n[o - 1] ***REMOVED***;break;case 13:
            this.$ = a.prepareBlock(n[o - 3], n[o - 2], n[o - 1], n[o], !1, this._$);break;case 14:
            this.$ = a.prepareBlock(n[o - 3], n[o - 2], n[o - 1], n[o], !0, this._$);break;case 15:
            this.$ = ***REMOVED*** open: n[o - 5], path: n[o - 4], params: n[o - 3], hash: n[o - 2], blockParams: n[o - 1], strip: a.stripFlags(n[o - 5], n[o]) ***REMOVED***;break;case 16:case 17:
            this.$ = ***REMOVED*** path: n[o - 4], params: n[o - 3], hash: n[o - 2], blockParams: n[o - 1], strip: a.stripFlags(n[o - 5], n[o]) ***REMOVED***;break;case 18:
            this.$ = ***REMOVED*** strip: a.stripFlags(n[o - 1], n[o - 1]), program: n[o] ***REMOVED***;break;case 19:
            var l = a.prepareBlock(n[o - 2], n[o - 1], n[o], n[o], !1, this._$),
                c = a.prepareProgram([l], n[o - 1].loc);c.chained = !0, this.$ = ***REMOVED*** strip: n[o - 2].strip, program: c, chain: !0 ***REMOVED***;break;case 20:
            this.$ = n[o];break;case 21:
            this.$ = ***REMOVED*** path: n[o - 1], strip: a.stripFlags(n[o - 2], n[o]) ***REMOVED***;break;case 22:case 23:
            this.$ = a.prepareMustache(n[o - 3], n[o - 2], n[o - 1], n[o - 4], a.stripFlags(n[o - 4], n[o]), this._$);break;case 24:
            this.$ = ***REMOVED*** type: "PartialStatement", name: n[o - 3], params: n[o - 2], hash: n[o - 1], indent: "", strip: a.stripFlags(n[o - 4], n[o]), loc: a.locInfo(this._$) ***REMOVED***;break;case 25:
            this.$ = a.preparePartialBlock(n[o - 2], n[o - 1], n[o], this._$);break;case 26:
            this.$ = ***REMOVED*** path: n[o - 3], params: n[o - 2], hash: n[o - 1], strip: a.stripFlags(n[o - 4], n[o]) ***REMOVED***;break;case 27:case 28:
            this.$ = n[o];break;case 29:
            this.$ = ***REMOVED*** type: "SubExpression", path: n[o - 3], params: n[o - 2], hash: n[o - 1], loc: a.locInfo(this._$) ***REMOVED***;break;case 30:
            this.$ = ***REMOVED*** type: "Hash", pairs: n[o], loc: a.locInfo(this._$) ***REMOVED***;break;case 31:
            this.$ = ***REMOVED*** type: "HashPair", key: a.id(n[o - 2]), value: n[o], loc: a.locInfo(this._$) ***REMOVED***;break;case 32:
            this.$ = a.id(n[o - 1]);break;case 33:case 34:
            this.$ = n[o];break;case 35:
            this.$ = ***REMOVED*** type: "StringLiteral", value: n[o], original: n[o], loc: a.locInfo(this._$) ***REMOVED***;break;case 36:
            this.$ = ***REMOVED*** type: "NumberLiteral", value: Number(n[o]), original: Number(n[o]), loc: a.locInfo(this._$) ***REMOVED***;break;case 37:
            this.$ = ***REMOVED*** type: "BooleanLiteral", value: "true" === n[o], original: "true" === n[o], loc: a.locInfo(this._$) ***REMOVED***;break;case 38:
            this.$ = ***REMOVED*** type: "UndefinedLiteral", original: void 0, value: void 0, loc: a.locInfo(this._$) ***REMOVED***;break;case 39:
            this.$ = ***REMOVED*** type: "NullLiteral", original: null, value: null, loc: a.locInfo(this._$) ***REMOVED***;break;case 40:case 41:
            this.$ = n[o];break;case 42:
            this.$ = a.preparePath(!0, n[o], this._$);break;case 43:
            this.$ = a.preparePath(!1, n[o], this._$);break;case 44:
            n[o - 2].push(***REMOVED*** part: a.id(n[o]), original: n[o], separator: n[o - 1] ***REMOVED***), this.$ = n[o - 2];break;case 45:
            this.$ = [***REMOVED*** part: a.id(n[o]), original: n[o] ***REMOVED***];break;case 46:
            this.$ = [];break;case 47:
            n[o - 1].push(n[o]);break;case 48:
            this.$ = [n[o]];break;case 49:
            n[o - 1].push(n[o]);break;case 50:
            this.$ = [];break;case 51:
            n[o - 1].push(n[o]);break;case 58:
            this.$ = [];break;case 59:
            n[o - 1].push(n[o]);break;case 64:
            this.$ = [];break;case 65:
            n[o - 1].push(n[o]);break;case 70:
            this.$ = [];break;case 71:
            n[o - 1].push(n[o]);break;case 78:
            this.$ = [];break;case 79:
            n[o - 1].push(n[o]);break;case 82:
            this.$ = [];break;case 83:
            n[o - 1].push(n[o]);break;case 86:
            this.$ = [];break;case 87:
            n[o - 1].push(n[o]);break;case 90:
            this.$ = [];break;case 91:
            n[o - 1].push(n[o]);break;case 94:
            this.$ = [];break;case 95:
            n[o - 1].push(n[o]);break;case 98:
            this.$ = [n[o]];break;case 99:
            n[o - 1].push(n[o]);break;case 100:
            this.$ = [n[o]];break;case 101:
            n[o - 1].push(n[o]);***REMOVED***
      ***REMOVED***, table: [***REMOVED*** 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] ***REMOVED***, ***REMOVED*** 1: [3] ***REMOVED***, ***REMOVED*** 5: [1, 4] ***REMOVED***, ***REMOVED*** 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] ***REMOVED***, ***REMOVED*** 1: [2, 1] ***REMOVED***, ***REMOVED*** 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] ***REMOVED***, ***REMOVED*** 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] ***REMOVED***, ***REMOVED*** 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] ***REMOVED***, ***REMOVED*** 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] ***REMOVED***, ***REMOVED*** 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] ***REMOVED***, ***REMOVED*** 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] ***REMOVED***, ***REMOVED*** 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] ***REMOVED***, ***REMOVED*** 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] ***REMOVED***, ***REMOVED*** 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] ***REMOVED***, ***REMOVED*** 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] ***REMOVED***, ***REMOVED*** 13: 40, 15: [1, 20], 17: 39 ***REMOVED***, ***REMOVED*** 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] ***REMOVED***, ***REMOVED*** 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] ***REMOVED***, ***REMOVED*** 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] ***REMOVED***, ***REMOVED*** 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] ***REMOVED***, ***REMOVED*** 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] ***REMOVED***, ***REMOVED*** 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] ***REMOVED***, ***REMOVED*** 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] ***REMOVED***, ***REMOVED*** 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] ***REMOVED***, ***REMOVED*** 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] ***REMOVED***, ***REMOVED*** 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] ***REMOVED***, ***REMOVED*** 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] ***REMOVED***, ***REMOVED*** 72: [1, 35], 86: 52 ***REMOVED***, ***REMOVED*** 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] ***REMOVED***, ***REMOVED*** 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] ***REMOVED***, ***REMOVED*** 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] ***REMOVED***, ***REMOVED*** 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] ***REMOVED***, ***REMOVED*** 13: 63, 15: [1, 20], 18: [1, 62] ***REMOVED***, ***REMOVED*** 15: [2, 48], 18: [2, 48] ***REMOVED***, ***REMOVED*** 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] ***REMOVED***, ***REMOVED*** 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] ***REMOVED***, ***REMOVED*** 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] ***REMOVED***, ***REMOVED*** 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 26: 66, 47: [1, 67] ***REMOVED***, ***REMOVED*** 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] ***REMOVED***, ***REMOVED*** 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] ***REMOVED***, ***REMOVED*** 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] ***REMOVED***, ***REMOVED*** 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] ***REMOVED***, ***REMOVED*** 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 72: [1, 80] ***REMOVED***, ***REMOVED*** 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] ***REMOVED***, ***REMOVED*** 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 26: 84, 47: [1, 67] ***REMOVED***, ***REMOVED*** 47: [2, 55] ***REMOVED***, ***REMOVED*** 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] ***REMOVED***, ***REMOVED*** 47: [2, 20] ***REMOVED***, ***REMOVED*** 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] ***REMOVED***, ***REMOVED*** 26: 88, 47: [1, 67] ***REMOVED***, ***REMOVED*** 47: [2, 57] ***REMOVED***, ***REMOVED*** 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] ***REMOVED***, ***REMOVED*** 15: [2, 49], 18: [2, 49] ***REMOVED***, ***REMOVED*** 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] ***REMOVED***, ***REMOVED*** 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] ***REMOVED***, ***REMOVED*** 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 33: [1, 106] ***REMOVED***, ***REMOVED*** 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] ***REMOVED***, ***REMOVED*** 33: [2, 81] ***REMOVED***, ***REMOVED*** 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] ***REMOVED***, ***REMOVED*** 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] ***REMOVED***, ***REMOVED*** 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] ***REMOVED***, ***REMOVED*** 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] ***REMOVED***, ***REMOVED*** 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] ***REMOVED***, ***REMOVED*** 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] ***REMOVED***, ***REMOVED*** 54: [1, 110] ***REMOVED***, ***REMOVED*** 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] ***REMOVED***, ***REMOVED*** 54: [2, 85] ***REMOVED***, ***REMOVED*** 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] ***REMOVED***, ***REMOVED*** 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] ***REMOVED***, ***REMOVED*** 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] ***REMOVED***, ***REMOVED*** 47: [2, 18] ***REMOVED***, ***REMOVED*** 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] ***REMOVED***, ***REMOVED*** 33: [1, 114] ***REMOVED***, ***REMOVED*** 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] ***REMOVED***, ***REMOVED*** 33: [2, 89] ***REMOVED***, ***REMOVED*** 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 33: [1, 118] ***REMOVED***, ***REMOVED*** 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] ***REMOVED***, ***REMOVED*** 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] ***REMOVED***, ***REMOVED*** 33: [2, 61], 75: [2, 61] ***REMOVED***, ***REMOVED*** 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] ***REMOVED***, ***REMOVED*** 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] ***REMOVED***, ***REMOVED*** 33: [2, 67], 75: [2, 67] ***REMOVED***, ***REMOVED*** 23: [1, 124] ***REMOVED***, ***REMOVED*** 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] ***REMOVED***, ***REMOVED*** 23: [2, 53] ***REMOVED***, ***REMOVED*** 33: [1, 125] ***REMOVED***, ***REMOVED*** 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] ***REMOVED***, ***REMOVED*** 33: [2, 93] ***REMOVED***, ***REMOVED*** 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] ***REMOVED***, ***REMOVED*** 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] ***REMOVED***, ***REMOVED*** 73: [1, 109] ***REMOVED***, ***REMOVED*** 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] ***REMOVED***, ***REMOVED*** 47: [2, 19] ***REMOVED***, ***REMOVED*** 47: [2, 77] ***REMOVED***, ***REMOVED*** 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 ***REMOVED***, ***REMOVED*** 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] ***REMOVED***, ***REMOVED*** 68: [1, 130] ***REMOVED***, ***REMOVED*** 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] ***REMOVED***, ***REMOVED*** 68: [2, 97] ***REMOVED***, ***REMOVED*** 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] ***REMOVED***, ***REMOVED*** 33: [1, 131] ***REMOVED***, ***REMOVED*** 33: [2, 63] ***REMOVED***, ***REMOVED*** 72: [1, 133], 76: 132 ***REMOVED***, ***REMOVED*** 33: [1, 134] ***REMOVED***, ***REMOVED*** 33: [2, 69] ***REMOVED***, ***REMOVED*** 15: [2, 12] ***REMOVED***, ***REMOVED*** 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] ***REMOVED***, ***REMOVED*** 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] ***REMOVED***, ***REMOVED*** 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] ***REMOVED***, ***REMOVED*** 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] ***REMOVED***, ***REMOVED*** 33: [2, 73], 75: [2, 73] ***REMOVED***, ***REMOVED*** 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] ***REMOVED***, ***REMOVED*** 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] ***REMOVED***, ***REMOVED*** 72: [1, 138], 77: [1, 137] ***REMOVED***, ***REMOVED*** 72: [2, 100], 77: [2, 100] ***REMOVED***, ***REMOVED*** 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] ***REMOVED***, ***REMOVED*** 33: [1, 139] ***REMOVED***, ***REMOVED*** 33: [2, 75] ***REMOVED***, ***REMOVED*** 33: [2, 32] ***REMOVED***, ***REMOVED*** 72: [2, 101], 77: [2, 101] ***REMOVED***, ***REMOVED*** 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] ***REMOVED***], defaultActions: ***REMOVED*** 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] ***REMOVED***, parseError: function parseError(t, e) ***REMOVED***
        throw new Error(t);
      ***REMOVED***, parse: function parse(t) ***REMOVED***
        var e = this,
            r = [0],
            a = [null],
            i = [],
            n = this.table,
            s = "",
            o = 0,
            l = 0,
            c = 0;this.lexer.setInput(t), this.lexer.yy = this.yy, this.yy.lexer = this.lexer, this.yy.parser = this, void 0 === this.lexer.yylloc && (this.lexer.yylloc = ***REMOVED******REMOVED***);var u = this.lexer.yylloc;i.push(u);var p = this.lexer.options && this.lexer.options.ranges;"function" == typeof this.yy.parseError && (this.parseError = this.yy.parseError);for (var h, d, m, f, g, b, v, y, k, S = ***REMOVED******REMOVED***;;) ***REMOVED***
          if (m = r[r.length - 1], this.defaultActions[m] ? f = this.defaultActions[m] : (null !== h && void 0 !== h || (h = function () ***REMOVED***
            var t;return "number" != typeof (t = e.lexer.lex() || 1) && (t = e.symbols_[t] || t), t;
          ***REMOVED***()), f = n[m] && n[m][h]), void 0 === f || !f.length || !f[0]) ***REMOVED***
            var w = "";if (!c) ***REMOVED***
              k = [];for (b in n[m]) ***REMOVED***
                this.terminals_[b] && b > 2 && k.push("'" + this.terminals_[b] + "'");
              ***REMOVED***w = this.lexer.showPosition ? "Parse error on line " + (o + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + k.join(", ") + ", got '" + (this.terminals_[h] || h) + "'" : "Parse error on line " + (o + 1) + ": Unexpected " + (1 == h ? "end of input" : "'" + (this.terminals_[h] || h) + "'"), this.parseError(w, ***REMOVED*** text: this.lexer.match, token: this.terminals_[h] || h, line: this.lexer.yylineno, loc: u, expected: k ***REMOVED***);
            ***REMOVED***
          ***REMOVED***if (f[0] instanceof Array && f.length > 1) throw new Error("Parse Error: multiple actions possible at state: " + m + ", token: " + h);switch (f[0]) ***REMOVED***case 1:
              r.push(h), a.push(this.lexer.yytext), i.push(this.lexer.yylloc), r.push(f[1]), h = null, d ? (h = d, d = null) : (l = this.lexer.yyleng, s = this.lexer.yytext, o = this.lexer.yylineno, u = this.lexer.yylloc, c > 0 && c--);break;case 2:
              if (v = this.productions_[f[1]][1], S.$ = a[a.length - v], S._$ = ***REMOVED*** first_line: i[i.length - (v || 1)].first_line, last_line: i[i.length - 1].last_line, first_column: i[i.length - (v || 1)].first_column, last_column: i[i.length - 1].last_column ***REMOVED***, p && (S._$.range = [i[i.length - (v || 1)].range[0], i[i.length - 1].range[1]]), void 0 !== (g = this.performAction.call(S, s, l, o, this.yy, f[1], a, i))) return g;v && (r = r.slice(0, -1 * v * 2), a = a.slice(0, -1 * v), i = i.slice(0, -1 * v)), r.push(this.productions_[f[1]][0]), a.push(S.$), i.push(S._$), y = n[r[r.length - 2]][r[r.length - 1]], r.push(y);break;case 3:
              return !0;***REMOVED***
        ***REMOVED***return !0;
      ***REMOVED*** ***REMOVED***,
        r = function () ***REMOVED***
      var t = ***REMOVED*** EOF: 1, parseError: function parseError(t, e) ***REMOVED***
          if (!this.yy.parser) throw new Error(t);this.yy.parser.parseError(t, e);
        ***REMOVED***, setInput: function setInput(t) ***REMOVED***
          return this._input = t, this._more = this._less = this.done = !1, this.yylineno = this.yyleng = 0, this.yytext = this.matched = this.match = "", this.conditionStack = ["INITIAL"], this.yylloc = ***REMOVED*** first_line: 1, first_column: 0, last_line: 1, last_column: 0 ***REMOVED***, this.options.ranges && (this.yylloc.range = [0, 0]), this.offset = 0, this;
        ***REMOVED***, input: function input() ***REMOVED***
          var t = this._input[0];return this.yytext += t, this.yyleng++, this.offset++, this.match += t, this.matched += t, t.match(/(?:\r\n?|\n).*/g) ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++, this.options.ranges && this.yylloc.range[1]++, this._input = this._input.slice(1), t;
        ***REMOVED***, unput: function unput(t) ***REMOVED***
          var e = t.length,
              r = t.split(/(?:\r\n?|\n)/g);this._input = t + this._input, this.yytext = this.yytext.substr(0, this.yytext.length - e - 1), this.offset -= e;var a = this.match.split(/(?:\r\n?|\n)/g);this.match = this.match.substr(0, this.match.length - 1), this.matched = this.matched.substr(0, this.matched.length - 1), r.length - 1 && (this.yylineno -= r.length - 1);var i = this.yylloc.range;return this.yylloc = ***REMOVED*** first_line: this.yylloc.first_line, last_line: this.yylineno + 1, first_column: this.yylloc.first_column, last_column: r ? (r.length === a.length ? this.yylloc.first_column : 0) + a[a.length - r.length].length - r[0].length : this.yylloc.first_column - e ***REMOVED***, this.options.ranges && (this.yylloc.range = [i[0], i[0] + this.yyleng - e]), this;
        ***REMOVED***, more: function more() ***REMOVED***
          return this._more = !0, this;
        ***REMOVED***, less: function less(t) ***REMOVED***
          this.unput(this.match.slice(t));
        ***REMOVED***, pastInput: function pastInput() ***REMOVED***
          var t = this.matched.substr(0, this.matched.length - this.match.length);return (t.length > 20 ? "..." : "") + t.substr(-20).replace(/\n/g, "");
        ***REMOVED***, upcomingInput: function upcomingInput() ***REMOVED***
          var t = this.match;return t.length < 20 && (t += this._input.substr(0, 20 - t.length)), (t.substr(0, 20) + (t.length > 20 ? "..." : "")).replace(/\n/g, "");
        ***REMOVED***, showPosition: function showPosition() ***REMOVED***
          var t = this.pastInput(),
              e = new Array(t.length + 1).join("-");return t + this.upcomingInput() + "\n" + e + "^";
        ***REMOVED***, next: function next() ***REMOVED***
          if (this.done) return this.EOF;this._input || (this.done = !0);var t, e, r, a, i;this._more || (this.yytext = "", this.match = "");for (var n = this._currentRules(), s = 0; s < n.length && (!(r = this._input.match(this.rules[n[s]])) || e && !(r[0].length > e[0].length) || (e = r, a = s, this.options.flex)); s++) ***REMOVED******REMOVED***return e ? ((i = e[0].match(/(?:\r\n?|\n).*/g)) && (this.yylineno += i.length), this.yylloc = ***REMOVED*** first_line: this.yylloc.last_line, last_line: this.yylineno + 1, first_column: this.yylloc.last_column, last_column: i ? i[i.length - 1].length - i[i.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + e[0].length ***REMOVED***, this.yytext += e[0], this.match += e[0], this.matches = e, this.yyleng = this.yytext.length, this.options.ranges && (this.yylloc.range = [this.offset, this.offset += this.yyleng]), this._more = !1, this._input = this._input.slice(e[0].length), this.matched += e[0], t = this.performAction.call(this, this.yy, this, n[a], this.conditionStack[this.conditionStack.length - 1]), this.done && this._input && (this.done = !1), t || void 0) : "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), ***REMOVED*** text: "", token: null, line: this.yylineno ***REMOVED***);
        ***REMOVED***, lex: function lex() ***REMOVED***
          var t = this.next();return void 0 !== t ? t : this.lex();
        ***REMOVED***, begin: function begin(t) ***REMOVED***
          this.conditionStack.push(t);
        ***REMOVED***, popState: function popState() ***REMOVED***
          return this.conditionStack.pop();
        ***REMOVED***, _currentRules: function _currentRules() ***REMOVED***
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        ***REMOVED***, topState: function topState() ***REMOVED***
          return this.conditionStack[this.conditionStack.length - 2];
        ***REMOVED***, pushState: function pushState(t) ***REMOVED***
          this.begin(t);
        ***REMOVED*** ***REMOVED***;return t.options = ***REMOVED******REMOVED***, t.performAction = function (t, e, r, a) ***REMOVED***
        function i(t, r) ***REMOVED***
          return e.yytext = e.yytext.substr(t, e.yyleng - r);
        ***REMOVED***switch (r) ***REMOVED***case 0:
            if ("\\\\" === e.yytext.slice(-2) ? (i(0, 1), this.begin("mu")) : "\\" === e.yytext.slice(-1) ? (i(0, 1), this.begin("emu")) : this.begin("mu"), e.yytext) return 15;break;case 1:
            return 15;case 2:
            return this.popState(), 15;case 3:
            return this.begin("raw"), 15;case 4:
            return this.popState(), "raw" === this.conditionStack[this.conditionStack.length - 1] ? 15 : (e.yytext = e.yytext.substr(5, e.yyleng - 9), "END_RAW_BLOCK");case 5:
            return 15;case 6:
            return this.popState(), 14;case 7:
            return 65;case 8:
            return 68;case 9:
            return 19;case 10:
            return this.popState(), this.begin("raw"), 23;case 11:
            return 55;case 12:
            return 60;case 13:
            return 29;case 14:
            return 47;case 15:case 16:
            return this.popState(), 44;case 17:
            return 34;case 18:
            return 39;case 19:
            return 51;case 20:
            return 48;case 21:
            this.unput(e.yytext), this.popState(), this.begin("com");break;case 22:
            return this.popState(), 14;case 23:
            return 48;case 24:
            return 73;case 25:case 26:
            return 72;case 27:
            return 87;case 28:
            break;case 29:
            return this.popState(), 54;case 30:
            return this.popState(), 33;case 31:
            return e.yytext = i(1, 2).replace(/\\"/g, '"'), 80;case 32:
            return e.yytext = i(1, 2).replace(/\\'/g, "'"), 80;case 33:
            return 85;case 34:case 35:
            return 82;case 36:
            return 83;case 37:
            return 84;case 38:
            return 81;case 39:
            return 75;case 40:
            return 77;case 41:
            return 72;case 42:
            return e.yytext = e.yytext.replace(/\\([\\\]])/g, "$1"), 72;case 43:
            return "INVALID";case 44:
            return 5;***REMOVED***
      ***REMOVED***, t.rules = [/^(?:[^\x00]*?(?=(\***REMOVED***\***REMOVED***)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]***REMOVED***2,***REMOVED***?(?=(\***REMOVED***\***REMOVED***|\\\***REMOVED***\***REMOVED***|\\\\\***REMOVED***\***REMOVED***|$)))/, /^(?:\***REMOVED***\***REMOVED***\***REMOVED***\***REMOVED***(?=[^\/]))/, /^(?:\***REMOVED***\***REMOVED***\***REMOVED***\***REMOVED***\/[^\s!"#%-,\.\/;->@\[-\^`\***REMOVED***-~]+(?=[=***REMOVED***\s\/.])\***REMOVED***\***REMOVED***\***REMOVED***\***REMOVED***)/, /^(?:[^\x00]*?(?=(\***REMOVED***\***REMOVED***\***REMOVED***\***REMOVED***)))/, /^(?:[\s\S]*?--(~)?\***REMOVED***\***REMOVED***)/, /^(?:\()/, /^(?:\))/, /^(?:\***REMOVED***\***REMOVED***\***REMOVED***\***REMOVED***)/, /^(?:\***REMOVED***\***REMOVED***\***REMOVED***\***REMOVED***)/, /^(?:\***REMOVED***\***REMOVED***(~)?>)/, /^(?:\***REMOVED***\***REMOVED***(~)?#>)/, /^(?:\***REMOVED***\***REMOVED***(~)?#\*?)/, /^(?:\***REMOVED***\***REMOVED***(~)?\/)/, /^(?:\***REMOVED***\***REMOVED***(~)?\^\s*(~)?\***REMOVED***\***REMOVED***)/, /^(?:\***REMOVED***\***REMOVED***(~)?\s*else\s*(~)?\***REMOVED***\***REMOVED***)/, /^(?:\***REMOVED***\***REMOVED***(~)?\^)/, /^(?:\***REMOVED***\***REMOVED***(~)?\s*else\b)/, /^(?:\***REMOVED***\***REMOVED***(~)?\***REMOVED***)/, /^(?:\***REMOVED***\***REMOVED***(~)?&)/, /^(?:\***REMOVED***\***REMOVED***(~)?!--)/, /^(?:\***REMOVED***\***REMOVED***(~)?![\s\S]*?\***REMOVED***\***REMOVED***)/, /^(?:\***REMOVED***\***REMOVED***(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~***REMOVED***\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\***REMOVED***(~)?\***REMOVED***\***REMOVED***)/, /^(?:(~)?\***REMOVED***\***REMOVED***)/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~***REMOVED***\s)])))/, /^(?:false(?=([~***REMOVED***\s)])))/, /^(?:undefined(?=([~***REMOVED***\s)])))/, /^(?:null(?=([~***REMOVED***\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~***REMOVED***\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\***REMOVED***-~]+(?=([=~***REMOVED***\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/], t.conditions = ***REMOVED*** mu: ***REMOVED*** rules: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], inclusive: !1 ***REMOVED***, emu: ***REMOVED*** rules: [2], inclusive: !1 ***REMOVED***, com: ***REMOVED*** rules: [6], inclusive: !1 ***REMOVED***, raw: ***REMOVED*** rules: [3, 4, 5], inclusive: !1 ***REMOVED***, INITIAL: ***REMOVED*** rules: [0, 1, 44], inclusive: !0 ***REMOVED*** ***REMOVED***, t;
    ***REMOVED***();return e.lexer = r, t.prototype = e, e.Parser = t, new t();
  ***REMOVED***();e.default = r, t.exports = e.default;
***REMOVED***);unwrapExports(parser);var visitor = createCommonjsModule(function (t, e) ***REMOVED***
  function r() ***REMOVED***
    this.parents = [];
  ***REMOVED***function a(t) ***REMOVED***
    this.acceptRequired(t, "path"), this.acceptArray(t.params), this.acceptKey(t, "hash");
  ***REMOVED***function i(t) ***REMOVED***
    a.call(this, t), this.acceptKey(t, "program"), this.acceptKey(t, "inverse");
  ***REMOVED***function n(t) ***REMOVED***
    this.acceptRequired(t, "name"), this.acceptArray(t.params), this.acceptKey(t, "hash");
  ***REMOVED***e.__esModule = !0;var s = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(exception);r.prototype = ***REMOVED*** constructor: r, mutating: !1, acceptKey: function acceptKey(t, e) ***REMOVED***
      var a = this.accept(t[e]);if (this.mutating) ***REMOVED***
        if (a && !r.prototype[a.type]) throw new s.default('Unexpected node type "' + a.type + '" found when accepting ' + e + " on " + t.type);t[e] = a;
      ***REMOVED***
    ***REMOVED***, acceptRequired: function acceptRequired(t, e) ***REMOVED***
      if (this.acceptKey(t, e), !t[e]) throw new s.default(t.type + " requires " + e);
    ***REMOVED***, acceptArray: function acceptArray(t) ***REMOVED***
      for (var e = 0, r = t.length; e < r; e++) ***REMOVED***
        this.acceptKey(t, e), t[e] || (t.splice(e, 1), e--, r--);
      ***REMOVED***
    ***REMOVED***, accept: function accept(t) ***REMOVED***
      if (t) ***REMOVED***
        if (!this[t.type]) throw new s.default("Unknown type: " + t.type, t);this.current && this.parents.unshift(this.current), this.current = t;var e = this[t.type](t);return this.current = this.parents.shift(), !this.mutating || e ? e : !1 !== e ? t : void 0;
      ***REMOVED***
    ***REMOVED***, Program: function Program(t) ***REMOVED***
      this.acceptArray(t.body);
    ***REMOVED***, MustacheStatement: a, Decorator: a, BlockStatement: i, DecoratorBlock: i, PartialStatement: n, PartialBlockStatement: function PartialBlockStatement(t) ***REMOVED***
      n.call(this, t), this.acceptKey(t, "program");
    ***REMOVED***, ContentStatement: function ContentStatement() ***REMOVED******REMOVED***, CommentStatement: function CommentStatement() ***REMOVED******REMOVED***, SubExpression: a, PathExpression: function PathExpression() ***REMOVED******REMOVED***, StringLiteral: function StringLiteral() ***REMOVED******REMOVED***, NumberLiteral: function NumberLiteral() ***REMOVED******REMOVED***, BooleanLiteral: function BooleanLiteral() ***REMOVED******REMOVED***, UndefinedLiteral: function UndefinedLiteral() ***REMOVED******REMOVED***, NullLiteral: function NullLiteral() ***REMOVED******REMOVED***, Hash: function Hash(t) ***REMOVED***
      this.acceptArray(t.pairs);
    ***REMOVED***, HashPair: function HashPair(t) ***REMOVED***
      this.acceptRequired(t, "value");
    ***REMOVED*** ***REMOVED***, e.default = r, t.exports = e.default;
***REMOVED***);unwrapExports(visitor);var whitespaceControl = createCommonjsModule(function (t, e) ***REMOVED***
  function r() ***REMOVED***
    var t = arguments.length <= 0 || void 0 === arguments[0] ? ***REMOVED******REMOVED*** : arguments[0];this.options = t;
  ***REMOVED***function a(t, e, r) ***REMOVED***
    void 0 === e && (e = t.length);var a = t[e - 1],
        i = t[e - 2];return a ? "ContentStatement" === a.type ? (i || !r ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(a.original) : void 0 : r;
  ***REMOVED***function i(t, e, r) ***REMOVED***
    void 0 === e && (e = -1);var a = t[e + 1],
        i = t[e + 2];return a ? "ContentStatement" === a.type ? (i || !r ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(a.original) : void 0 : r;
  ***REMOVED***function n(t, e, r) ***REMOVED***
    var a = t[null == e ? 0 : e + 1];if (a && "ContentStatement" === a.type && (r || !a.rightStripped)) ***REMOVED***
      var i = a.value;a.value = a.value.replace(r ? /^\s+/ : /^[ \t]*\r?\n?/, ""), a.rightStripped = a.value !== i;
    ***REMOVED***
  ***REMOVED***function s(t, e, r) ***REMOVED***
    var a = t[null == e ? t.length - 1 : e - 1];if (a && "ContentStatement" === a.type && (r || !a.leftStripped)) ***REMOVED***
      var i = a.value;return a.value = a.value.replace(r ? /\s+$/ : /[ \t]+$/, ""), a.leftStripped = a.value !== i, a.leftStripped;
    ***REMOVED***
  ***REMOVED***e.__esModule = !0;var o = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(visitor);(r.prototype = new o.default()).Program = function (t) ***REMOVED***
    var e = !this.options.ignoreStandalone,
        r = !this.isRootSeen;this.isRootSeen = !0;for (var o = t.body, l = 0, c = o.length; l < c; l++) ***REMOVED***
      var u = o[l],
          p = this.accept(u);if (p) ***REMOVED***
        var h = a(o, l, r),
            d = i(o, l, r),
            m = p.openStandalone && h,
            f = p.closeStandalone && d,
            g = p.inlineStandalone && h && d;p.close && n(o, l, !0), p.open && s(o, l, !0), e && g && (n(o, l), s(o, l) && "PartialStatement" === u.type && (u.indent = /([ \t]+$)/.exec(o[l - 1].original)[1])), e && m && (n((u.program || u.inverse).body), s(o, l)), e && f && (n(o, l), s((u.inverse || u.program).body));
      ***REMOVED***
    ***REMOVED***return t;
  ***REMOVED***, r.prototype.BlockStatement = r.prototype.DecoratorBlock = r.prototype.PartialBlockStatement = function (t) ***REMOVED***
    this.accept(t.program), this.accept(t.inverse);var e = t.program || t.inverse,
        r = t.program && t.inverse,
        o = r,
        l = r;if (r && r.chained) for (o = r.body[0].program; l.chained;) ***REMOVED***
      l = l.body[l.body.length - 1].program;
    ***REMOVED***var c = ***REMOVED*** open: t.openStrip.open, close: t.closeStrip.close, openStandalone: i(e.body), closeStandalone: a((o || e).body) ***REMOVED***;if (t.openStrip.close && n(e.body, null, !0), r) ***REMOVED***
      var u = t.inverseStrip;u.open && s(e.body, null, !0), u.close && n(o.body, null, !0), t.closeStrip.open && s(l.body, null, !0), !this.options.ignoreStandalone && a(e.body) && i(o.body) && (s(e.body), n(o.body));
    ***REMOVED*** else t.closeStrip.open && s(e.body, null, !0);return c;
  ***REMOVED***, r.prototype.Decorator = r.prototype.MustacheStatement = function (t) ***REMOVED***
    return t.strip;
  ***REMOVED***, r.prototype.PartialStatement = r.prototype.CommentStatement = function (t) ***REMOVED***
    var e = t.strip || ***REMOVED******REMOVED***;return ***REMOVED*** inlineStandalone: !0, open: e.open, close: e.close ***REMOVED***;
  ***REMOVED***, e.default = r, t.exports = e.default;
***REMOVED***);unwrapExports(whitespaceControl);var helpers$2 = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t, e) ***REMOVED***
    if (e = e.path ? e.path.original : e, t.path.original !== e) ***REMOVED***
      var r = ***REMOVED*** loc: t.path.loc ***REMOVED***;throw new a.default(t.path.original + " doesn't match " + e, r);
    ***REMOVED***
  ***REMOVED***e.__esModule = !0, e.SourceLocation = function (t, e) ***REMOVED***
    this.source = t, this.start = ***REMOVED*** line: e.first_line, column: e.first_column ***REMOVED***, this.end = ***REMOVED*** line: e.last_line, column: e.last_column ***REMOVED***;
  ***REMOVED***, e.id = function (t) ***REMOVED***
    return (/^\[.*\]$/.test(t) ? t.substr(1, t.length - 2) : t
    );
  ***REMOVED***, e.stripFlags = function (t, e) ***REMOVED***
    return ***REMOVED*** open: "~" === t.charAt(2), close: "~" === e.charAt(e.length - 3) ***REMOVED***;
  ***REMOVED***, e.stripComment = function (t) ***REMOVED***
    return t.replace(/^\***REMOVED***\***REMOVED***~?\!-?-?/, "").replace(/-?-?~?\***REMOVED***\***REMOVED***$/, "");
  ***REMOVED***, e.preparePath = function (t, e, r) ***REMOVED***
    r = this.locInfo(r);for (var i = t ? "@" : "", n = [], s = 0, o = 0, l = e.length; o < l; o++) ***REMOVED***
      var c = e[o].part,
          u = e[o].original !== c;if (i += (e[o].separator || "") + c, u || ".." !== c && "." !== c && "this" !== c) n.push(c);else ***REMOVED***
        if (n.length > 0) throw new a.default("Invalid path: " + i, ***REMOVED*** loc: r ***REMOVED***);".." === c && s++;
      ***REMOVED***
    ***REMOVED***return ***REMOVED*** type: "PathExpression", data: t, depth: s, parts: n, original: i, loc: r ***REMOVED***;
  ***REMOVED***, e.prepareMustache = function (t, e, r, a, i, n) ***REMOVED***
    var s = a.charAt(3) || a.charAt(2),
        o = "***REMOVED***" !== s && "&" !== s;return ***REMOVED*** type: /\*/.test(a) ? "Decorator" : "MustacheStatement", path: t, params: e, hash: r, escaped: o, strip: i, loc: this.locInfo(n) ***REMOVED***;
  ***REMOVED***, e.prepareRawBlock = function (t, e, a, i) ***REMOVED***
    r(t, a);var n = ***REMOVED*** type: "Program", body: e, strip: ***REMOVED******REMOVED***, loc: i = this.locInfo(i) ***REMOVED***;return ***REMOVED*** type: "BlockStatement", path: t.path, params: t.params, hash: t.hash, program: n, openStrip: ***REMOVED******REMOVED***, inverseStrip: ***REMOVED******REMOVED***, closeStrip: ***REMOVED******REMOVED***, loc: i ***REMOVED***;
  ***REMOVED***, e.prepareBlock = function (t, e, i, n, s, o) ***REMOVED***
    n && n.path && r(t, n);var l = /\*/.test(t.open);e.blockParams = t.blockParams;var c = void 0,
        u = void 0;if (i) ***REMOVED***
      if (l) throw new a.default("Unexpected inverse block on decorator", i);i.chain && (i.program.body[0].closeStrip = n.strip), u = i.strip, c = i.program;
    ***REMOVED***return s && (s = c, c = e, e = s), ***REMOVED*** type: l ? "DecoratorBlock" : "BlockStatement", path: t.path, params: t.params, hash: t.hash, program: e, inverse: c, openStrip: t.strip, inverseStrip: u, closeStrip: n && n.strip, loc: this.locInfo(o) ***REMOVED***;
  ***REMOVED***, e.prepareProgram = function (t, e) ***REMOVED***
    if (!e && t.length) ***REMOVED***
      var r = t[0].loc,
          a = t[t.length - 1].loc;r && a && (e = ***REMOVED*** source: r.source, start: ***REMOVED*** line: r.start.line, column: r.start.column ***REMOVED***, end: ***REMOVED*** line: a.end.line, column: a.end.column ***REMOVED*** ***REMOVED***);
    ***REMOVED***return ***REMOVED*** type: "Program", body: t, strip: ***REMOVED******REMOVED***, loc: e ***REMOVED***;
  ***REMOVED***, e.preparePartialBlock = function (t, e, a, i) ***REMOVED***
    return r(t, a), ***REMOVED*** type: "PartialBlockStatement", name: t.path, params: t.params, hash: t.hash, program: e, openStrip: t.strip, closeStrip: a && a.strip, loc: this.locInfo(i) ***REMOVED***;
  ***REMOVED***;var a = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(exception);
***REMOVED***);unwrapExports(helpers$2);var base$2 = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***e.__esModule = !0, e.parse = function (t, e) ***REMOVED***
    return "Program" === t.type ? t : (a.default.yy = s, s.locInfo = function (t) ***REMOVED***
      return new s.SourceLocation(e && e.srcName, t);
    ***REMOVED***, new i.default(e).accept(a.default.parse(t)));
  ***REMOVED***;var a = r(parser),
      i = r(whitespaceControl),
      n = function (t) ***REMOVED***
    if (t && t.__esModule) return t;var e = ***REMOVED******REMOVED***;if (null != t) for (var r in t) ***REMOVED***
      Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
    ***REMOVED***return e.default = t, e;
  ***REMOVED***(helpers$2);e.parser = a.default;var s = ***REMOVED******REMOVED***;utils.extend(s, n);
***REMOVED***);unwrapExports(base$2);var compiler = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***function a() ***REMOVED******REMOVED***function i(t, e) ***REMOVED***
    if (t === e) return !0;if (utils.isArray(t) && utils.isArray(e) && t.length === e.length) ***REMOVED***
      for (var r = 0; r < t.length; r++) ***REMOVED***
        if (!i(t[r], e[r])) return !1;
      ***REMOVED***return !0;
    ***REMOVED***
  ***REMOVED***function n(t) ***REMOVED***
    if (!t.path.parts) ***REMOVED***
      var e = t.path;t.path = ***REMOVED*** type: "PathExpression", data: !1, depth: 0, parts: [e.original + ""], original: e.original + "", loc: e.loc ***REMOVED***;
    ***REMOVED***
  ***REMOVED***e.__esModule = !0, e.Compiler = a, e.precompile = function (t, e, r) ***REMOVED***
    if (null == t || "string" != typeof t && "Program" !== t.type) throw new s.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + t);"data" in (e = e || ***REMOVED******REMOVED***) || (e.data = !0), e.compat && (e.useDepths = !0);var a = r.parse(t, e),
        i = new r.Compiler().compile(a, e);return new r.JavaScriptCompiler().compile(i, e);
  ***REMOVED***, e.compile = function (t, e, r) ***REMOVED***
    function a() ***REMOVED***
      var a = r.parse(t, e),
          i = new r.Compiler().compile(a, e),
          n = new r.JavaScriptCompiler().compile(i, e, void 0, !0);return r.template(n);
    ***REMOVED***function i(t, e) ***REMOVED***
      return n || (n = a()), n.call(this, t, e);
    ***REMOVED***if (void 0 === e && (e = ***REMOVED******REMOVED***), null == t || "string" != typeof t && "Program" !== t.type) throw new s.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + t);"data" in (e = utils.extend(***REMOVED******REMOVED***, e)) || (e.data = !0), e.compat && (e.useDepths = !0);var n = void 0;return i._setup = function (t) ***REMOVED***
      return n || (n = a()), n._setup(t);
    ***REMOVED***, i._child = function (t, e, r, i) ***REMOVED***
      return n || (n = a()), n._child(t, e, r, i);
    ***REMOVED***, i;
  ***REMOVED***;var s = r(exception),
      o = r(ast),
      l = [].slice;a.prototype = ***REMOVED*** compiler: a, equals: function equals(t) ***REMOVED***
      var e = this.opcodes.length;if (t.opcodes.length !== e) return !1;for (n = 0; n < e; n++) ***REMOVED***
        var r = this.opcodes[n],
            a = t.opcodes[n];if (r.opcode !== a.opcode || !i(r.args, a.args)) return !1;
      ***REMOVED***e = this.children.length;for (var n = 0; n < e; n++) ***REMOVED***
        if (!this.children[n].equals(t.children[n])) return !1;
      ***REMOVED***return !0;
    ***REMOVED***, guid: 0, compile: function compile(t, e) ***REMOVED***
      this.sourceNode = [], this.opcodes = [], this.children = [], this.options = e, this.stringParams = e.stringParams, this.trackIds = e.trackIds, e.blockParams = e.blockParams || [];var r = e.knownHelpers;if (e.knownHelpers = ***REMOVED*** helperMissing: !0, blockHelperMissing: !0, each: !0, if: !0, unless: !0, with: !0, log: !0, lookup: !0 ***REMOVED***, r) for (var a in r) ***REMOVED***
        a in r && (this.options.knownHelpers[a] = r[a]);
      ***REMOVED***return this.accept(t);
    ***REMOVED***, compileProgram: function compileProgram(t) ***REMOVED***
      var e = new this.compiler().compile(t, this.options),
          r = this.guid++;return this.usePartial = this.usePartial || e.usePartial, this.children[r] = e, this.useDepths = this.useDepths || e.useDepths, r;
    ***REMOVED***, accept: function accept(t) ***REMOVED***
      if (!this[t.type]) throw new s.default("Unknown type: " + t.type, t);this.sourceNode.unshift(t);var e = this[t.type](t);return this.sourceNode.shift(), e;
    ***REMOVED***, Program: function Program(t) ***REMOVED***
      this.options.blockParams.unshift(t.blockParams);for (var e = t.body, r = e.length, a = 0; a < r; a++) ***REMOVED***
        this.accept(e[a]);
      ***REMOVED***return this.options.blockParams.shift(), this.isSimple = 1 === r, this.blockParams = t.blockParams ? t.blockParams.length : 0, this;
    ***REMOVED***, BlockStatement: function BlockStatement(t) ***REMOVED***
      n(t);var e = t.program,
          r = t.inverse;e = e && this.compileProgram(e), r = r && this.compileProgram(r);var a = this.classifySexpr(t);"helper" === a ? this.helperSexpr(t, e, r) : "simple" === a ? (this.simpleSexpr(t), this.opcode("pushProgram", e), this.opcode("pushProgram", r), this.opcode("emptyHash"), this.opcode("blockValue", t.path.original)) : (this.ambiguousSexpr(t, e, r), this.opcode("pushProgram", e), this.opcode("pushProgram", r), this.opcode("emptyHash"), this.opcode("ambiguousBlockValue")), this.opcode("append");
    ***REMOVED***, DecoratorBlock: function DecoratorBlock(t) ***REMOVED***
      var e = t.program && this.compileProgram(t.program),
          r = this.setupFullMustacheParams(t, e, void 0),
          a = t.path;this.useDecorators = !0, this.opcode("registerDecorator", r.length, a.original);
    ***REMOVED***, PartialStatement: function PartialStatement(t) ***REMOVED***
      this.usePartial = !0;var e = t.program;e && (e = this.compileProgram(t.program));var r = t.params;if (r.length > 1) throw new s.default("Unsupported number of partial arguments: " + r.length, t);r.length || (this.options.explicitPartialContext ? this.opcode("pushLiteral", "undefined") : r.push(***REMOVED*** type: "PathExpression", parts: [], depth: 0 ***REMOVED***));var a = t.name.original,
          i = "SubExpression" === t.name.type;i && this.accept(t.name), this.setupFullMustacheParams(t, e, void 0, !0);var n = t.indent || "";this.options.preventIndent && n && (this.opcode("appendContent", n), n = ""), this.opcode("invokePartial", i, a, n), this.opcode("append");
    ***REMOVED***, PartialBlockStatement: function PartialBlockStatement(t) ***REMOVED***
      this.PartialStatement(t);
    ***REMOVED***, MustacheStatement: function MustacheStatement(t) ***REMOVED***
      this.SubExpression(t), t.escaped && !this.options.noEscape ? this.opcode("appendEscaped") : this.opcode("append");
    ***REMOVED***, Decorator: function Decorator(t) ***REMOVED***
      this.DecoratorBlock(t);
    ***REMOVED***, ContentStatement: function ContentStatement(t) ***REMOVED***
      t.value && this.opcode("appendContent", t.value);
    ***REMOVED***, CommentStatement: function CommentStatement() ***REMOVED******REMOVED***, SubExpression: function SubExpression(t) ***REMOVED***
      n(t);var e = this.classifySexpr(t);"simple" === e ? this.simpleSexpr(t) : "helper" === e ? this.helperSexpr(t) : this.ambiguousSexpr(t);
    ***REMOVED***, ambiguousSexpr: function ambiguousSexpr(t, e, r) ***REMOVED***
      var a = t.path,
          i = a.parts[0],
          n = null != e || null != r;this.opcode("getContext", a.depth), this.opcode("pushProgram", e), this.opcode("pushProgram", r), a.strict = !0, this.accept(a), this.opcode("invokeAmbiguous", i, n);
    ***REMOVED***, simpleSexpr: function simpleSexpr(t) ***REMOVED***
      var e = t.path;e.strict = !0, this.accept(e), this.opcode("resolvePossibleLambda");
    ***REMOVED***, helperSexpr: function helperSexpr(t, e, r) ***REMOVED***
      var a = this.setupFullMustacheParams(t, e, r),
          i = t.path,
          n = i.parts[0];if (this.options.knownHelpers[n]) this.opcode("invokeKnownHelper", a.length, n);else ***REMOVED***
        if (this.options.knownHelpersOnly) throw new s.default("You specified knownHelpersOnly, but used the unknown helper " + n, t);i.strict = !0, i.falsy = !0, this.accept(i), this.opcode("invokeHelper", a.length, i.original, o.default.helpers.simpleId(i));
      ***REMOVED***
    ***REMOVED***, PathExpression: function PathExpression(t) ***REMOVED***
      this.addDepth(t.depth), this.opcode("getContext", t.depth);var e = t.parts[0],
          r = o.default.helpers.scopedId(t),
          a = !t.depth && !r && this.blockParamIndex(e);a ? this.opcode("lookupBlockParam", a, t.parts) : e ? t.data ? (this.options.data = !0, this.opcode("lookupData", t.depth, t.parts, t.strict)) : this.opcode("lookupOnContext", t.parts, t.falsy, t.strict, r) : this.opcode("pushContext");
    ***REMOVED***, StringLiteral: function StringLiteral(t) ***REMOVED***
      this.opcode("pushString", t.value);
    ***REMOVED***, NumberLiteral: function NumberLiteral(t) ***REMOVED***
      this.opcode("pushLiteral", t.value);
    ***REMOVED***, BooleanLiteral: function BooleanLiteral(t) ***REMOVED***
      this.opcode("pushLiteral", t.value);
    ***REMOVED***, UndefinedLiteral: function UndefinedLiteral() ***REMOVED***
      this.opcode("pushLiteral", "undefined");
    ***REMOVED***, NullLiteral: function NullLiteral() ***REMOVED***
      this.opcode("pushLiteral", "null");
    ***REMOVED***, Hash: function Hash(t) ***REMOVED***
      var e = t.pairs,
          r = 0,
          a = e.length;for (this.opcode("pushHash"); r < a; r++) ***REMOVED***
        this.pushParam(e[r].value);
      ***REMOVED***for (; r--;) ***REMOVED***
        this.opcode("assignToHash", e[r].key);
      ***REMOVED***this.opcode("popHash");
    ***REMOVED***, opcode: function opcode(t) ***REMOVED***
      this.opcodes.push(***REMOVED*** opcode: t, args: l.call(arguments, 1), loc: this.sourceNode[0].loc ***REMOVED***);
    ***REMOVED***, addDepth: function addDepth(t) ***REMOVED***
      t && (this.useDepths = !0);
    ***REMOVED***, classifySexpr: function classifySexpr(t) ***REMOVED***
      var e = o.default.helpers.simpleId(t.path),
          r = e && !!this.blockParamIndex(t.path.parts[0]),
          a = !r && o.default.helpers.helperExpression(t),
          i = !r && (a || e);if (i && !a) ***REMOVED***
        var n = t.path.parts[0],
            s = this.options;s.knownHelpers[n] ? a = !0 : s.knownHelpersOnly && (i = !1);
      ***REMOVED***return a ? "helper" : i ? "ambiguous" : "simple";
    ***REMOVED***, pushParams: function pushParams(t) ***REMOVED***
      for (var e = 0, r = t.length; e < r; e++) ***REMOVED***
        this.pushParam(t[e]);
      ***REMOVED***
    ***REMOVED***, pushParam: function pushParam(t) ***REMOVED***
      var e = null != t.value ? t.value : t.original || "";if (this.stringParams) e.replace && (e = e.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".")), t.depth && this.addDepth(t.depth), this.opcode("getContext", t.depth || 0), this.opcode("pushStringParam", e, t.type), "SubExpression" === t.type && this.accept(t);else ***REMOVED***
        if (this.trackIds) ***REMOVED***
          var r = void 0;if (!t.parts || o.default.helpers.scopedId(t) || t.depth || (r = this.blockParamIndex(t.parts[0])), r) ***REMOVED***
            var a = t.parts.slice(1).join(".");this.opcode("pushId", "BlockParam", r, a);
          ***REMOVED*** else (e = t.original || e).replace && (e = e.replace(/^this(?:\.|$)/, "").replace(/^\.\//, "").replace(/^\.$/, "")), this.opcode("pushId", t.type, e);
        ***REMOVED***this.accept(t);
      ***REMOVED***
    ***REMOVED***, setupFullMustacheParams: function setupFullMustacheParams(t, e, r, a) ***REMOVED***
      var i = t.params;return this.pushParams(i), this.opcode("pushProgram", e), this.opcode("pushProgram", r), t.hash ? this.accept(t.hash) : this.opcode("emptyHash", a), i;
    ***REMOVED***, blockParamIndex: function blockParamIndex(t) ***REMOVED***
      for (var e = 0, r = this.options.blockParams.length; e < r; e++) ***REMOVED***
        var a = this.options.blockParams[e],
            i = a && utils.indexOf(a, t);if (a && i >= 0) return [e, i];
      ***REMOVED***
    ***REMOVED*** ***REMOVED***;
***REMOVED***);unwrapExports(compiler);var codeGen = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t, e, r) ***REMOVED***
    if (utils.isArray(t)) ***REMOVED***
      for (var a = [], i = 0, n = t.length; i < n; i++) ***REMOVED***
        a.push(e.wrap(t[i], r));
      ***REMOVED***return a;
    ***REMOVED***return "boolean" == typeof t || "number" == typeof t ? t + "" : t;
  ***REMOVED***function a(t) ***REMOVED***
    this.srcFile = t, this.source = [];
  ***REMOVED***e.__esModule = !0;var i = void 0;try ***REMOVED***
    var n = require("source-map");i = n.SourceNode;
  ***REMOVED*** catch (t) ***REMOVED******REMOVED***i || ((i = function i(t, e, r, a) ***REMOVED***
    this.src = "", a && this.add(a);
  ***REMOVED***).prototype = ***REMOVED*** add: function add(t) ***REMOVED***
      utils.isArray(t) && (t = t.join("")), this.src += t;
    ***REMOVED***, prepend: function prepend(t) ***REMOVED***
      utils.isArray(t) && (t = t.join("")), this.src = t + this.src;
    ***REMOVED***, toStringWithSourceMap: function toStringWithSourceMap() ***REMOVED***
      return ***REMOVED*** code: this.toString() ***REMOVED***;
    ***REMOVED***, toString: function toString() ***REMOVED***
      return this.src;
    ***REMOVED*** ***REMOVED***), a.prototype = ***REMOVED*** isEmpty: function isEmpty() ***REMOVED***
      return !this.source.length;
    ***REMOVED***, prepend: function prepend(t, e) ***REMOVED***
      this.source.unshift(this.wrap(t, e));
    ***REMOVED***, push: function push(t, e) ***REMOVED***
      this.source.push(this.wrap(t, e));
    ***REMOVED***, merge: function merge() ***REMOVED***
      var t = this.empty();return this.each(function (e) ***REMOVED***
        t.add(["  ", e, "\n"]);
      ***REMOVED***), t;
    ***REMOVED***, each: function each(t) ***REMOVED***
      for (var e = 0, r = this.source.length; e < r; e++) ***REMOVED***
        t(this.source[e]);
      ***REMOVED***
    ***REMOVED***, empty: function empty() ***REMOVED***
      var t = this.currentLocation || ***REMOVED*** start: ***REMOVED******REMOVED*** ***REMOVED***;return new i(t.start.line, t.start.column, this.srcFile);
    ***REMOVED***, wrap: function wrap(t) ***REMOVED***
      var e = arguments.length <= 1 || void 0 === arguments[1] ? this.currentLocation || ***REMOVED*** start: ***REMOVED******REMOVED*** ***REMOVED*** : arguments[1];return t instanceof i ? t : (t = r(t, this, e), new i(e.start.line, e.start.column, this.srcFile, t));
    ***REMOVED***, functionCall: function functionCall(t, e, r) ***REMOVED***
      return r = this.generateList(r), this.wrap([t, e ? "." + e + "(" : "(", r, ")"]);
    ***REMOVED***, quotedString: function quotedString(t) ***REMOVED***
      return '"' + (t + "").replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
    ***REMOVED***, objectLiteral: function objectLiteral(t) ***REMOVED***
      var e = [];for (var a in t) ***REMOVED***
        if (t.hasOwnProperty(a)) ***REMOVED***
          var i = r(t[a], this);"undefined" !== i && e.push([this.quotedString(a), ":", i]);
        ***REMOVED***
      ***REMOVED***var n = this.generateList(e);return n.prepend("***REMOVED***"), n.add("***REMOVED***"), n;
    ***REMOVED***, generateList: function generateList(t) ***REMOVED***
      for (var e = this.empty(), a = 0, i = t.length; a < i; a++) ***REMOVED***
        a && e.add(","), e.add(r(t[a], this));
      ***REMOVED***return e;
    ***REMOVED***, generateArray: function generateArray(t) ***REMOVED***
      var e = this.generateList(t);return e.prepend("["), e.add("]"), e;
    ***REMOVED*** ***REMOVED***, e.default = a, t.exports = e.default;
***REMOVED***);unwrapExports(codeGen);var javascriptCompiler = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***function a(t) ***REMOVED***
    this.value = t;
  ***REMOVED***function i() ***REMOVED******REMOVED***function n(t, e, r, a) ***REMOVED***
    var i = e.popStack(),
        n = 0,
        s = r.length;for (t && s--; n < s; n++) ***REMOVED***
      i = e.nameLookup(i, r[n], a);
    ***REMOVED***return t ? [e.aliasable("container.strict"), "(", i, ", ", e.quotedString(r[n]), ")"] : i;
  ***REMOVED***e.__esModule = !0;var s = r(exception),
      o = r(codeGen);i.prototype = ***REMOVED*** nameLookup: function nameLookup(t, e) ***REMOVED***
      return i.isValidJavaScriptVariableName(e) ? [t, ".", e] : [t, "[", JSON.stringify(e), "]"];
    ***REMOVED***, depthedLookup: function depthedLookup(t) ***REMOVED***
      return [this.aliasable("container.lookup"), '(depths, "', t, '")'];
    ***REMOVED***, compilerInfo: function compilerInfo() ***REMOVED***
      var t = base.COMPILER_REVISION;return [t, base.REVISION_CHANGES[t]];
    ***REMOVED***, appendToBuffer: function appendToBuffer(t, e, r) ***REMOVED***
      return utils.isArray(t) || (t = [t]), t = this.source.wrap(t, e), this.environment.isSimple ? ["return ", t, ";"] : r ? ["buffer += ", t, ";"] : (t.appendToBuffer = !0, t);
    ***REMOVED***, initializeBuffer: function initializeBuffer() ***REMOVED***
      return this.quotedString("");
    ***REMOVED***, compile: function compile(t, e, r, a) ***REMOVED***
      this.environment = t, this.options = e, this.stringParams = this.options.stringParams, this.trackIds = this.options.trackIds, this.precompile = !a, this.name = this.environment.name, this.isChild = !!r, this.context = r || ***REMOVED*** decorators: [], programs: [], environments: [] ***REMOVED***, this.preamble(), this.stackSlot = 0, this.stackVars = [], this.aliases = ***REMOVED******REMOVED***, this.registers = ***REMOVED*** list: [] ***REMOVED***, this.hashes = [], this.compileStack = [], this.inlineStack = [], this.blockParams = [], this.compileChildren(t, e), this.useDepths = this.useDepths || t.useDepths || t.useDecorators || this.options.compat, this.useBlockParams = this.useBlockParams || t.useBlockParams;var i = t.opcodes,
          n = void 0,
          o = void 0,
          l = void 0,
          c = void 0;for (l = 0, c = i.length; l < c; l++) ***REMOVED***
        n = i[l], this.source.currentLocation = n.loc, o = o || n.loc, this[n.opcode].apply(this, n.args);
      ***REMOVED***if (this.source.currentLocation = o, this.pushSource(""), this.stackSlot || this.inlineStack.length || this.compileStack.length) throw new s.default("Compile completed with content left on stack");this.decorators.isEmpty() ? this.decorators = void 0 : (this.useDecorators = !0, this.decorators.prepend("var decorators = container.decorators;\n"), this.decorators.push("return fn;"), a ? this.decorators = Function.apply(this, ["fn", "props", "container", "depth0", "data", "blockParams", "depths", this.decorators.merge()]) : (this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) ***REMOVED***\n"), this.decorators.push("***REMOVED***\n"), this.decorators = this.decorators.merge()));var u = this.createFunctionContext(a);if (this.isChild) return u;var p = ***REMOVED*** compiler: this.compilerInfo(), main: u ***REMOVED***;this.decorators && (p.main_d = this.decorators, p.useDecorators = !0);var h = this.context,
          d = h.programs,
          m = h.decorators;for (l = 0, c = d.length; l < c; l++) ***REMOVED***
        d[l] && (p[l] = d[l], m[l] && (p[l + "_d"] = m[l], p.useDecorators = !0));
      ***REMOVED***return this.environment.usePartial && (p.usePartial = !0), this.options.data && (p.useData = !0), this.useDepths && (p.useDepths = !0), this.useBlockParams && (p.useBlockParams = !0), this.options.compat && (p.compat = !0), a ? p.compilerOptions = this.options : (p.compiler = JSON.stringify(p.compiler), this.source.currentLocation = ***REMOVED*** start: ***REMOVED*** line: 1, column: 0 ***REMOVED*** ***REMOVED***, p = this.objectLiteral(p), e.srcName ? (p = p.toStringWithSourceMap(***REMOVED*** file: e.destName ***REMOVED***)).map = p.map && p.map.toString() : p = p.toString()), p;
    ***REMOVED***, preamble: function preamble() ***REMOVED***
      this.lastContext = 0, this.source = new o.default(this.options.srcName), this.decorators = new o.default(this.options.srcName);
    ***REMOVED***, createFunctionContext: function createFunctionContext(t) ***REMOVED***
      var e = "",
          r = this.stackVars.concat(this.registers.list);r.length > 0 && (e += ", " + r.join(", "));var a = 0;for (var i in this.aliases) ***REMOVED***
        var n = this.aliases[i];this.aliases.hasOwnProperty(i) && n.children && n.referenceCount > 1 && (e += ", alias" + ++a + "=" + i, n.children[0] = "alias" + a);
      ***REMOVED***var s = ["container", "depth0", "helpers", "partials", "data"];(this.useBlockParams || this.useDepths) && s.push("blockParams"), this.useDepths && s.push("depths");var o = this.mergeSource(e);return t ? (s.push(o), Function.apply(this, s)) : this.source.wrap(["function(", s.join(","), ") ***REMOVED***\n  ", o, "***REMOVED***"]);
    ***REMOVED***, mergeSource: function mergeSource(t) ***REMOVED***
      var e = this.environment.isSimple,
          r = !this.forceBuffer,
          a = void 0,
          i = void 0,
          n = void 0,
          s = void 0;return this.source.each(function (t) ***REMOVED***
        t.appendToBuffer ? (n ? t.prepend("  + ") : n = t, s = t) : (n && (i ? n.prepend("buffer += ") : a = !0, s.add(";"), n = s = void 0), i = !0, e || (r = !1));
      ***REMOVED***), r ? n ? (n.prepend("return "), s.add(";")) : i || this.source.push('return "";') : (t += ", buffer = " + (a ? "" : this.initializeBuffer()), n ? (n.prepend("return buffer + "), s.add(";")) : this.source.push("return buffer;")), t && this.source.prepend("var " + t.substring(2) + (a ? "" : ";\n")), this.source.merge();
    ***REMOVED***, blockValue: function blockValue(t) ***REMOVED***
      var e = this.aliasable("helpers.blockHelperMissing"),
          r = [this.contextName(0)];this.setupHelperArgs(t, 0, r);var a = this.popStack();r.splice(1, 0, a), this.push(this.source.functionCall(e, "call", r));
    ***REMOVED***, ambiguousBlockValue: function ambiguousBlockValue() ***REMOVED***
      var t = this.aliasable("helpers.blockHelperMissing"),
          e = [this.contextName(0)];this.setupHelperArgs("", 0, e, !0), this.flushInline();var r = this.topStack();e.splice(1, 0, r), this.pushSource(["if (!", this.lastHelper, ") ***REMOVED*** ", r, " = ", this.source.functionCall(t, "call", e), "***REMOVED***"]);
    ***REMOVED***, appendContent: function appendContent(t) ***REMOVED***
      this.pendingContent ? t = this.pendingContent + t : this.pendingLocation = this.source.currentLocation, this.pendingContent = t;
    ***REMOVED***, append: function append() ***REMOVED***
      if (this.isInline()) this.replaceStack(function (t) ***REMOVED***
        return [" != null ? ", t, ' : ""'];
      ***REMOVED***), this.pushSource(this.appendToBuffer(this.popStack()));else ***REMOVED***
        var t = this.popStack();this.pushSource(["if (", t, " != null) ***REMOVED*** ", this.appendToBuffer(t, void 0, !0), " ***REMOVED***"]), this.environment.isSimple && this.pushSource(["else ***REMOVED*** ", this.appendToBuffer("''", void 0, !0), " ***REMOVED***"]);
      ***REMOVED***
    ***REMOVED***, appendEscaped: function appendEscaped() ***REMOVED***
      this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"), "(", this.popStack(), ")"]));
    ***REMOVED***, getContext: function getContext(t) ***REMOVED***
      this.lastContext = t;
    ***REMOVED***, pushContext: function pushContext() ***REMOVED***
      this.pushStackLiteral(this.contextName(this.lastContext));
    ***REMOVED***, lookupOnContext: function lookupOnContext(t, e, r, a) ***REMOVED***
      var i = 0;a || !this.options.compat || this.lastContext ? this.pushContext() : this.push(this.depthedLookup(t[i++])), this.resolvePath("context", t, i, e, r);
    ***REMOVED***, lookupBlockParam: function lookupBlockParam(t, e) ***REMOVED***
      this.useBlockParams = !0, this.push(["blockParams[", t[0], "][", t[1], "]"]), this.resolvePath("context", e, 1);
    ***REMOVED***, lookupData: function lookupData(t, e, r) ***REMOVED***
      t ? this.pushStackLiteral("container.data(data, " + t + ")") : this.pushStackLiteral("data"), this.resolvePath("data", e, 0, !0, r);
    ***REMOVED***, resolvePath: function resolvePath(t, e, r, a, i) ***REMOVED***
      var s = this;if (this.options.strict || this.options.assumeObjects) this.push(n(this.options.strict && i, this, e, t));else for (var o = e.length; r < o; r++) ***REMOVED***
        this.replaceStack(function (i) ***REMOVED***
          var n = s.nameLookup(i, e[r], t);return a ? [" && ", n] : [" != null ? ", n, " : ", i];
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***, resolvePossibleLambda: function resolvePossibleLambda() ***REMOVED***
      this.push([this.aliasable("container.lambda"), "(", this.popStack(), ", ", this.contextName(0), ")"]);
    ***REMOVED***, pushStringParam: function pushStringParam(t, e) ***REMOVED***
      this.pushContext(), this.pushString(e), "SubExpression" !== e && ("string" == typeof t ? this.pushString(t) : this.pushStackLiteral(t));
    ***REMOVED***, emptyHash: function emptyHash(t) ***REMOVED***
      this.trackIds && this.push("***REMOVED******REMOVED***"), this.stringParams && (this.push("***REMOVED******REMOVED***"), this.push("***REMOVED******REMOVED***")), this.pushStackLiteral(t ? "undefined" : "***REMOVED******REMOVED***");
    ***REMOVED***, pushHash: function pushHash() ***REMOVED***
      this.hash && this.hashes.push(this.hash), this.hash = ***REMOVED*** values: [], types: [], contexts: [], ids: [] ***REMOVED***;
    ***REMOVED***, popHash: function popHash() ***REMOVED***
      var t = this.hash;this.hash = this.hashes.pop(), this.trackIds && this.push(this.objectLiteral(t.ids)), this.stringParams && (this.push(this.objectLiteral(t.contexts)), this.push(this.objectLiteral(t.types))), this.push(this.objectLiteral(t.values));
    ***REMOVED***, pushString: function pushString(t) ***REMOVED***
      this.pushStackLiteral(this.quotedString(t));
    ***REMOVED***, pushLiteral: function pushLiteral(t) ***REMOVED***
      this.pushStackLiteral(t);
    ***REMOVED***, pushProgram: function pushProgram(t) ***REMOVED***
      null != t ? this.pushStackLiteral(this.programExpression(t)) : this.pushStackLiteral(null);
    ***REMOVED***, registerDecorator: function registerDecorator(t, e) ***REMOVED***
      var r = this.nameLookup("decorators", e, "decorator"),
          a = this.setupHelperArgs(e, t);this.decorators.push(["fn = ", this.decorators.functionCall(r, "", ["fn", "props", "container", a]), " || fn;"]);
    ***REMOVED***, invokeHelper: function invokeHelper(t, e, r) ***REMOVED***
      var a = this.popStack(),
          i = this.setupHelper(t, e),
          n = r ? [i.name, " || "] : "",
          s = ["("].concat(n, a);this.options.strict || s.push(" || ", this.aliasable("helpers.helperMissing")), s.push(")"), this.push(this.source.functionCall(s, "call", i.callParams));
    ***REMOVED***, invokeKnownHelper: function invokeKnownHelper(t, e) ***REMOVED***
      var r = this.setupHelper(t, e);this.push(this.source.functionCall(r.name, "call", r.callParams));
    ***REMOVED***, invokeAmbiguous: function invokeAmbiguous(t, e) ***REMOVED***
      this.useRegister("helper");var r = this.popStack();this.emptyHash();var a = this.setupHelper(0, t, e),
          i = ["(", "(helper = ", this.lastHelper = this.nameLookup("helpers", t, "helper"), " || ", r, ")"];this.options.strict || (i[0] = "(helper = ", i.push(" != null ? helper : ", this.aliasable("helpers.helperMissing"))), this.push(["(", i, a.paramsInit ? ["),(", a.paramsInit] : [], "),", "(typeof helper === ", this.aliasable('"function"'), " ? ", this.source.functionCall("helper", "call", a.callParams), " : helper))"]);
    ***REMOVED***, invokePartial: function invokePartial(t, e, r) ***REMOVED***
      var a = [],
          i = this.setupParams(e, 1, a);t && (e = this.popStack(), delete i.name), r && (i.indent = JSON.stringify(r)), i.helpers = "helpers", i.partials = "partials", i.decorators = "container.decorators", t ? a.unshift(e) : a.unshift(this.nameLookup("partials", e, "partial")), this.options.compat && (i.depths = "depths"), i = this.objectLiteral(i), a.push(i), this.push(this.source.functionCall("container.invokePartial", "", a));
    ***REMOVED***, assignToHash: function assignToHash(t) ***REMOVED***
      var e = this.popStack(),
          r = void 0,
          a = void 0,
          i = void 0;this.trackIds && (i = this.popStack()), this.stringParams && (a = this.popStack(), r = this.popStack());var n = this.hash;r && (n.contexts[t] = r), a && (n.types[t] = a), i && (n.ids[t] = i), n.values[t] = e;
    ***REMOVED***, pushId: function pushId(t, e, r) ***REMOVED***
      "BlockParam" === t ? this.pushStackLiteral("blockParams[" + e[0] + "].path[" + e[1] + "]" + (r ? " + " + JSON.stringify("." + r) : "")) : "PathExpression" === t ? this.pushString(e) : "SubExpression" === t ? this.pushStackLiteral("true") : this.pushStackLiteral("null");
    ***REMOVED***, compiler: i, compileChildren: function compileChildren(t, e) ***REMOVED***
      for (var r = t.children, a = void 0, i = void 0, n = 0, s = r.length; n < s; n++) ***REMOVED***
        a = r[n], i = new this.compiler();var o = this.matchExistingProgram(a);if (null == o) ***REMOVED***
          this.context.programs.push("");var l = this.context.programs.length;a.index = l, a.name = "program" + l, this.context.programs[l] = i.compile(a, e, this.context, !this.precompile), this.context.decorators[l] = i.decorators, this.context.environments[l] = a, this.useDepths = this.useDepths || i.useDepths, this.useBlockParams = this.useBlockParams || i.useBlockParams, a.useDepths = this.useDepths, a.useBlockParams = this.useBlockParams;
        ***REMOVED*** else a.index = o.index, a.name = "program" + o.index, this.useDepths = this.useDepths || o.useDepths, this.useBlockParams = this.useBlockParams || o.useBlockParams;
      ***REMOVED***
    ***REMOVED***, matchExistingProgram: function matchExistingProgram(t) ***REMOVED***
      for (var e = 0, r = this.context.environments.length; e < r; e++) ***REMOVED***
        var a = this.context.environments[e];if (a && a.equals(t)) return a;
      ***REMOVED***
    ***REMOVED***, programExpression: function programExpression(t) ***REMOVED***
      var e = this.environment.children[t],
          r = [e.index, "data", e.blockParams];return (this.useBlockParams || this.useDepths) && r.push("blockParams"), this.useDepths && r.push("depths"), "container.program(" + r.join(", ") + ")";
    ***REMOVED***, useRegister: function useRegister(t) ***REMOVED***
      this.registers[t] || (this.registers[t] = !0, this.registers.list.push(t));
    ***REMOVED***, push: function push(t) ***REMOVED***
      return t instanceof a || (t = this.source.wrap(t)), this.inlineStack.push(t), t;
    ***REMOVED***, pushStackLiteral: function pushStackLiteral(t) ***REMOVED***
      this.push(new a(t));
    ***REMOVED***, pushSource: function pushSource(t) ***REMOVED***
      this.pendingContent && (this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation)), this.pendingContent = void 0), t && this.source.push(t);
    ***REMOVED***, replaceStack: function replaceStack(t) ***REMOVED***
      var e = ["("],
          r = void 0,
          i = void 0,
          n = void 0;if (!this.isInline()) throw new s.default("replaceStack on non-inline");var o = this.popStack(!0);if (o instanceof a) e = ["(", r = [o.value]], n = !0;else ***REMOVED***
        i = !0;var l = this.incrStack();e = ["((", this.push(l), " = ", o, ")"], r = this.topStack();
      ***REMOVED***var c = t.call(this, r);n || this.popStack(), i && this.stackSlot--, this.push(e.concat(c, ")"));
    ***REMOVED***, incrStack: function incrStack() ***REMOVED***
      return ++this.stackSlot > this.stackVars.length && this.stackVars.push("stack" + this.stackSlot), this.topStackName();
    ***REMOVED***, topStackName: function topStackName() ***REMOVED***
      return "stack" + this.stackSlot;
    ***REMOVED***, flushInline: function flushInline() ***REMOVED***
      var t = this.inlineStack;this.inlineStack = [];for (var e = 0, r = t.length; e < r; e++) ***REMOVED***
        var i = t[e];if (i instanceof a) this.compileStack.push(i);else ***REMOVED***
          var n = this.incrStack();this.pushSource([n, " = ", i, ";"]), this.compileStack.push(n);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***, isInline: function isInline() ***REMOVED***
      return this.inlineStack.length;
    ***REMOVED***, popStack: function popStack(t) ***REMOVED***
      var e = this.isInline(),
          r = (e ? this.inlineStack : this.compileStack).pop();if (!t && r instanceof a) return r.value;if (!e) ***REMOVED***
        if (!this.stackSlot) throw new s.default("Invalid stack pop");this.stackSlot--;
      ***REMOVED***return r;
    ***REMOVED***, topStack: function topStack() ***REMOVED***
      var t = this.isInline() ? this.inlineStack : this.compileStack,
          e = t[t.length - 1];return e instanceof a ? e.value : e;
    ***REMOVED***, contextName: function contextName(t) ***REMOVED***
      return this.useDepths && t ? "depths[" + t + "]" : "depth" + t;
    ***REMOVED***, quotedString: function quotedString(t) ***REMOVED***
      return this.source.quotedString(t);
    ***REMOVED***, objectLiteral: function objectLiteral(t) ***REMOVED***
      return this.source.objectLiteral(t);
    ***REMOVED***, aliasable: function aliasable(t) ***REMOVED***
      var e = this.aliases[t];return e ? (e.referenceCount++, e) : (e = this.aliases[t] = this.source.wrap(t), e.aliasable = !0, e.referenceCount = 1, e);
    ***REMOVED***, setupHelper: function setupHelper(t, e, r) ***REMOVED***
      var a = [];return ***REMOVED*** params: a, paramsInit: this.setupHelperArgs(e, t, a, r), name: this.nameLookup("helpers", e, "helper"), callParams: [this.aliasable(this.contextName(0) + " != null ? " + this.contextName(0) + " : (container.nullContext || ***REMOVED******REMOVED***)")].concat(a) ***REMOVED***;
    ***REMOVED***, setupParams: function setupParams(t, e, r) ***REMOVED***
      var a = ***REMOVED******REMOVED***,
          i = [],
          n = [],
          s = [],
          o = !r,
          l = void 0;o && (r = []), a.name = this.quotedString(t), a.hash = this.popStack(), this.trackIds && (a.hashIds = this.popStack()), this.stringParams && (a.hashTypes = this.popStack(), a.hashContexts = this.popStack());var c = this.popStack(),
          u = this.popStack();(u || c) && (a.fn = u || "container.noop", a.inverse = c || "container.noop");for (var p = e; p--;) ***REMOVED***
        l = this.popStack(), r[p] = l, this.trackIds && (s[p] = this.popStack()), this.stringParams && (n[p] = this.popStack(), i[p] = this.popStack());
      ***REMOVED***return o && (a.args = this.source.generateArray(r)), this.trackIds && (a.ids = this.source.generateArray(s)), this.stringParams && (a.types = this.source.generateArray(n), a.contexts = this.source.generateArray(i)), this.options.data && (a.data = "data"), this.useBlockParams && (a.blockParams = "blockParams"), a;
    ***REMOVED***, setupHelperArgs: function setupHelperArgs(t, e, r, a) ***REMOVED***
      var i = this.setupParams(t, e, r);return i = this.objectLiteral(i), a ? (this.useRegister("options"), r.push("options"), ["options=", i]) : r ? (r.push(i), "") : i;
    ***REMOVED*** ***REMOVED***, function () ***REMOVED***
    for (var t = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "), e = i.RESERVED_WORDS = ***REMOVED******REMOVED***, r = 0, a = t.length; r < a; r++) ***REMOVED***
      e[t[r]] = !0;
    ***REMOVED***
  ***REMOVED***(), i.isValidJavaScriptVariableName = function (t) ***REMOVED***
    return !i.RESERVED_WORDS[t] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(t);
  ***REMOVED***, e.default = i, t.exports = e.default;
***REMOVED***);unwrapExports(javascriptCompiler);var handlebars$1 = createCommonjsModule(function (t, e) ***REMOVED***
  function r(t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***function a() ***REMOVED***
    var t = c();return t.compile = function (e, r) ***REMOVED***
      return compiler.compile(e, r, t);
    ***REMOVED***, t.precompile = function (e, r) ***REMOVED***
      return compiler.precompile(e, r, t);
    ***REMOVED***, t.AST = n.default, t.Compiler = compiler.Compiler, t.JavaScriptCompiler = s.default, t.Parser = base$2.parser, t.parse = base$2.parse, t;
  ***REMOVED***e.__esModule = !0;var i = r(handlebars_runtime),
      n = r(ast),
      s = r(javascriptCompiler),
      o = r(visitor),
      l = r(noConflict),
      c = i.default.create,
      u = a();u.create = a, l.default(u), u.Visitor = o.default, u.default = u, e.default = u, t.exports = e.default;
***REMOVED***);unwrapExports(handlebars$1);var printer = createCommonjsModule(function (t, e) ***REMOVED***
  function r() ***REMOVED***
    this.padding = 0;
  ***REMOVED***e.__esModule = !0, e.print = function (t) ***REMOVED***
    return new r().accept(t);
  ***REMOVED***, e.PrintVisitor = r;var a = function (t) ***REMOVED***
    return t && t.__esModule ? t : ***REMOVED*** default: t ***REMOVED***;
  ***REMOVED***(visitor);(r.prototype = new a.default()).pad = function (t) ***REMOVED***
    for (var e = "", r = 0, a = this.padding; r < a; r++) ***REMOVED***
      e += "  ";
    ***REMOVED***return e += t + "\n";
  ***REMOVED***, r.prototype.Program = function (t) ***REMOVED***
    var e = "",
        r = t.body,
        a = void 0,
        i = void 0;if (t.blockParams) ***REMOVED***
      var n = "BLOCK PARAMS: [";for (a = 0, i = t.blockParams.length; a < i; a++) ***REMOVED***
        n += " " + t.blockParams[a];
      ***REMOVED***n += " ]", e += this.pad(n);
    ***REMOVED***for (a = 0, i = r.length; a < i; a++) ***REMOVED***
      e += this.accept(r[a]);
    ***REMOVED***return this.padding--, e;
  ***REMOVED***, r.prototype.MustacheStatement = function (t) ***REMOVED***
    return this.pad("***REMOVED******REMOVED*** " + this.SubExpression(t) + " ***REMOVED******REMOVED***");
  ***REMOVED***, r.prototype.Decorator = function (t) ***REMOVED***
    return this.pad("***REMOVED******REMOVED*** DIRECTIVE " + this.SubExpression(t) + " ***REMOVED******REMOVED***");
  ***REMOVED***, r.prototype.BlockStatement = r.prototype.DecoratorBlock = function (t) ***REMOVED***
    var e = "";return e += this.pad(("DecoratorBlock" === t.type ? "DIRECTIVE " : "") + "BLOCK:"), this.padding++, e += this.pad(this.SubExpression(t)), t.program && (e += this.pad("PROGRAM:"), this.padding++, e += this.accept(t.program), this.padding--), t.inverse && (t.program && this.padding++, e += this.pad("***REMOVED******REMOVED***^***REMOVED******REMOVED***"), this.padding++, e += this.accept(t.inverse), this.padding--, t.program && this.padding--), this.padding--, e;
  ***REMOVED***, r.prototype.PartialStatement = function (t) ***REMOVED***
    var e = "PARTIAL:" + t.name.original;return t.params[0] && (e += " " + this.accept(t.params[0])), t.hash && (e += " " + this.accept(t.hash)), this.pad("***REMOVED******REMOVED***> " + e + " ***REMOVED******REMOVED***");
  ***REMOVED***, r.prototype.PartialBlockStatement = function (t) ***REMOVED***
    var e = "PARTIAL BLOCK:" + t.name.original;return t.params[0] && (e += " " + this.accept(t.params[0])), t.hash && (e += " " + this.accept(t.hash)), e += " " + this.pad("PROGRAM:"), this.padding++, e += this.accept(t.program), this.padding--, this.pad("***REMOVED******REMOVED***> " + e + " ***REMOVED******REMOVED***");
  ***REMOVED***, r.prototype.ContentStatement = function (t) ***REMOVED***
    return this.pad("CONTENT[ '" + t.value + "' ]");
  ***REMOVED***, r.prototype.CommentStatement = function (t) ***REMOVED***
    return this.pad("***REMOVED******REMOVED***! '" + t.value + "' ***REMOVED******REMOVED***");
  ***REMOVED***, r.prototype.SubExpression = function (t) ***REMOVED***
    for (var e = t.params, r = [], a = void 0, i = 0, n = e.length; i < n; i++) ***REMOVED***
      r.push(this.accept(e[i]));
    ***REMOVED***return e = "[" + r.join(", ") + "]", a = t.hash ? " " + this.accept(t.hash) : "", this.accept(t.path) + " " + e + a;
  ***REMOVED***, r.prototype.PathExpression = function (t) ***REMOVED***
    var e = t.parts.join("/");return (t.data ? "@" : "") + "PATH:" + e;
  ***REMOVED***, r.prototype.StringLiteral = function (t) ***REMOVED***
    return '"' + t.value + '"';
  ***REMOVED***, r.prototype.NumberLiteral = function (t) ***REMOVED***
    return "NUMBER***REMOVED***" + t.value + "***REMOVED***";
  ***REMOVED***, r.prototype.BooleanLiteral = function (t) ***REMOVED***
    return "BOOLEAN***REMOVED***" + t.value + "***REMOVED***";
  ***REMOVED***, r.prototype.UndefinedLiteral = function () ***REMOVED***
    return "UNDEFINED";
  ***REMOVED***, r.prototype.NullLiteral = function () ***REMOVED***
    return "NULL";
  ***REMOVED***, r.prototype.Hash = function (t) ***REMOVED***
    for (var e = t.pairs, r = [], a = 0, i = e.length; a < i; a++) ***REMOVED***
      r.push(this.accept(e[a]));
    ***REMOVED***return "HASH***REMOVED***" + r.join(", ") + "***REMOVED***";
  ***REMOVED***, r.prototype.HashPair = function (t) ***REMOVED***
    return t.key + "=" + this.accept(t.value);
  ***REMOVED***;
***REMOVED***);unwrapExports(printer);var handlebars = handlebars$1.default;handlebars.PrintVisitor = printer.PrintVisitor, handlebars.print = printer.print;var lib = handlebars;"undefined" != typeof require && require.extensions && (require.extensions[".handlebars"] = extension, require.extensions[".hbs"] = extension);var lib_1 = lib.parse;var voidMap = Object.create(null);var voidTagNames = "area base br col command embed hr img input keygen link meta param source track wbr";voidTagNames.split(" ").forEach(function (t) ***REMOVED***
  voidMap[t] = !0;
***REMOVED***);
var TokenizerEventHandlers = function (_HandlebarsNodeVisito) ***REMOVED***
  _inherits(TokenizerEventHandlers, _HandlebarsNodeVisito);

  function TokenizerEventHandlers() ***REMOVED***
    var _this2;

    _classCallCheck(this, TokenizerEventHandlers);

    (_this2 = _possibleConstructorReturn(this, (TokenizerEventHandlers.__proto__ || Object.getPrototypeOf(TokenizerEventHandlers)).apply(this, arguments)), _this2), _this2.tagOpenLine = 0, _this2.tagOpenColumn = 0;return _this2;
  ***REMOVED***

  _createClass(TokenizerEventHandlers, [***REMOVED***
    key: "reset",
    value: function reset() ***REMOVED***
      this.currentNode = null;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "beginComment",
    value: function beginComment() ***REMOVED***
      this.currentNode = b.comment(""), this.currentNode.loc = ***REMOVED*** source: null, start: b.pos(this.tagOpenLine, this.tagOpenColumn), end: null ***REMOVED***;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "appendToCommentData",
    value: function appendToCommentData(t) ***REMOVED***
      this.currentComment.value += t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "finishComment",
    value: function finishComment() ***REMOVED***
      this.currentComment.loc.end = b.pos(this.tokenizer.line, this.tokenizer.column), appendChild(this.currentElement(), this.currentComment);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "beginData",
    value: function beginData() ***REMOVED***
      this.currentNode = b.text(), this.currentNode.loc = ***REMOVED*** source: null, start: b.pos(this.tokenizer.line, this.tokenizer.column), end: null ***REMOVED***;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "appendToData",
    value: function appendToData(t) ***REMOVED***
      this.currentData.chars += t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "finishData",
    value: function finishData() ***REMOVED***
      this.currentData.loc.end = b.pos(this.tokenizer.line, this.tokenizer.column), appendChild(this.currentElement(), this.currentData);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "tagOpen",
    value: function tagOpen() ***REMOVED***
      this.tagOpenLine = this.tokenizer.line, this.tagOpenColumn = this.tokenizer.column;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "beginStartTag",
    value: function beginStartTag() ***REMOVED***
      this.currentNode = ***REMOVED*** type: "StartTag", name: "", attributes: [], modifiers: [], comments: [], selfClosing: !1, loc: SYNTHETIC ***REMOVED***;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "beginEndTag",
    value: function beginEndTag() ***REMOVED***
      this.currentNode = ***REMOVED*** type: "EndTag", name: "", attributes: [], modifiers: [], comments: [], selfClosing: !1, loc: SYNTHETIC ***REMOVED***;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "finishTag",
    value: function finishTag() ***REMOVED***
      var _tokenizer = this.tokenizer,
          t = _tokenizer.line,
          e = _tokenizer.column,
          r = this.currentTag;
      r.loc = b.loc(this.tagOpenLine, this.tagOpenColumn, t, e), "StartTag" === r.type ? (this.finishStartTag(), (voidMap[r.name] || r.selfClosing) && this.finishEndTag(!0)) : "EndTag" === r.type && this.finishEndTag(!1);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "finishStartTag",
    value: function finishStartTag() ***REMOVED***
      var _currentStartTag = this.currentStartTag,
          t = _currentStartTag.name,
          e = _currentStartTag.attributes,
          r = _currentStartTag.modifiers,
          a = _currentStartTag.comments,
          i = b.loc(this.tagOpenLine, this.tagOpenColumn),
          n = b.element(t, e, r, [], a, i);
      this.elementStack.push(n);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "finishEndTag",
    value: function finishEndTag(t) ***REMOVED***
      var e = this.currentTag,
          r = this.elementStack.pop(),
          a = this.currentElement();validateEndTag(e, r, t), r.loc.end.line = this.tokenizer.line, r.loc.end.column = this.tokenizer.column, parseElementBlockParams(r), appendChild(a, r);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "markTagAsSelfClosing",
    value: function markTagAsSelfClosing() ***REMOVED***
      this.currentTag.selfClosing = !0;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "appendToTagName",
    value: function appendToTagName(t) ***REMOVED***
      this.currentTag.name += t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "beginAttribute",
    value: function beginAttribute() ***REMOVED***
      var t = this.currentTag;if ("EndTag" === t.type) throw new SyntaxError$1("Invalid end tag: closing tag must not have attributes, " + ("in `" + t.name + "` (on line " + this.tokenizer.line + ")."), t.loc);this.currentAttribute = ***REMOVED*** name: "", parts: [], isQuoted: !1, isDynamic: !1, start: b.pos(this.tokenizer.line, this.tokenizer.column), valueStartLine: 0, valueStartColumn: 0 ***REMOVED***;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "appendToAttributeName",
    value: function appendToAttributeName(t) ***REMOVED***
      this.currentAttr.name += t;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "beginAttributeValue",
    value: function beginAttributeValue(t) ***REMOVED***
      this.currentAttr.isQuoted = t, this.currentAttr.valueStartLine = this.tokenizer.line, this.currentAttr.valueStartColumn = this.tokenizer.column;
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "appendToAttributeValue",
    value: function appendToAttributeValue(t) ***REMOVED***
      var e = this.currentAttr.parts,
          r = e[e.length - 1];if (r && "TextNode" === r.type) r.chars += t, r.loc.end.line = this.tokenizer.line, r.loc.end.column = this.tokenizer.column;else ***REMOVED***
        var a = b.loc(this.tokenizer.line, this.tokenizer.column, this.tokenizer.line, this.tokenizer.column);"\n" === t && (a.start.line -= 1, a.start.column = r ? r.loc.end.column : this.currentAttr.valueStartColumn);var i = b.text(t, a);e.push(i);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "finishAttributeValue",
    value: function finishAttributeValue() ***REMOVED***
      var _currentAttr = this.currentAttr,
          t = _currentAttr.name,
          e = _currentAttr.parts,
          r = _currentAttr.isQuoted,
          a = _currentAttr.isDynamic,
          i = _currentAttr.valueStartLine,
          n = _currentAttr.valueStartColumn,
          s = assembleAttributeValue(e, r, a, this.tokenizer.line);
      s.loc = b.loc(i, n, this.tokenizer.line, this.tokenizer.column);var o = b.loc(this.currentAttr.start.line, this.currentAttr.start.column, this.tokenizer.line, this.tokenizer.column),
          l = b.attr(t, s, o);this.currentStartTag.attributes.push(l);
    ***REMOVED***
  ***REMOVED***, ***REMOVED***
    key: "reportSyntaxError",
    value: function reportSyntaxError(t) ***REMOVED***
      throw new SyntaxError$1("Syntax error at line " + this.tokenizer.line + " col " + this.tokenizer.column + ": " + t, b.loc(this.tokenizer.line, this.tokenizer.column));
    ***REMOVED***
  ***REMOVED***]);

  return TokenizerEventHandlers;
***REMOVED***(HandlebarsNodeVisitors);

var syntax = ***REMOVED*** parse: preprocess, builders: b, print: build, traverse: traverse, Walker: Walker ***REMOVED***;var es2017 = Object.freeze(***REMOVED*** AST: nodes, preprocess: preprocess, builders: b, TraversalError: TraversalError, cannotRemoveNode: cannotRemoveNode, cannotReplaceNode: cannotReplaceNode, cannotReplaceOrRemoveInKeyHandlerYet: cannotReplaceOrRemoveInKeyHandlerYet, traverse: traverse, Walker: Walker, print: build, SyntaxError: SyntaxError$1, isLiteral: isLiteral$1, printLiteral: printLiteral ***REMOVED***),
    parserGlimmer = parse;module.exports = parserGlimmer;
