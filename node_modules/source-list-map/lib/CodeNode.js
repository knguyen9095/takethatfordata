/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const getNumberOfLines = require("./helpers").getNumberOfLines;
const getUnfinishedLine = require("./helpers").getUnfinishedLine;

class CodeNode ***REMOVED***
	constructor(generatedCode) ***REMOVED***
		this.generatedCode = generatedCode;
	***REMOVED***

	clone() ***REMOVED***
		return new CodeNode(this.generatedCode);
	***REMOVED***

	getGeneratedCode() ***REMOVED***
		return this.generatedCode;
	***REMOVED***

	getMappings(mappingsContext) ***REMOVED***
		const lines = getNumberOfLines(this.generatedCode);
		const mapping = Array(lines+1).join(";");
		if(lines > 0) ***REMOVED***
			mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);
			if(mappingsContext.unfinishedGeneratedLine > 0) ***REMOVED***
				return mapping + "A";
			***REMOVED*** else ***REMOVED***
				return mapping;
			***REMOVED***
		***REMOVED*** else ***REMOVED***
			const prevUnfinished = mappingsContext.unfinishedGeneratedLine;
			mappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);
			if(prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) ***REMOVED***
				return "A";
			***REMOVED*** else ***REMOVED***
				return "";
			***REMOVED***
		***REMOVED***
	***REMOVED***

	addGeneratedCode(generatedCode) ***REMOVED***
		this.generatedCode += generatedCode;
	***REMOVED***

	mapGeneratedCode(fn) ***REMOVED***
		const generatedCode = fn(this.generatedCode);
		return new CodeNode(generatedCode);
	***REMOVED***

	getNormalizedNodes() ***REMOVED***
		return [this];
	***REMOVED***

	merge(otherNode) ***REMOVED***
		if(otherNode instanceof CodeNode) ***REMOVED***
			this.generatedCode += otherNode.generatedCode;
			return this;
		***REMOVED***
		return false;
	***REMOVED***
***REMOVED***

module.exports = CodeNode;
