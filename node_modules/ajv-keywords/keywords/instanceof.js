'use strict';

var CONSTRUCTORS = ***REMOVED***
  Object: Object,
  Array: Array,
  Function: Function,
  Number: Number,
  String: String,
  Date: Date,
  RegExp: RegExp
***REMOVED***;

module.exports = function defFunc(ajv) ***REMOVED***
  /* istanbul ignore else */
  if (typeof Buffer != 'undefined')
    CONSTRUCTORS.Buffer = Buffer;

  defFunc.definition = ***REMOVED***
    compile: function (schema) ***REMOVED***
      if (typeof schema == 'string') ***REMOVED***
        var Constructor = getConstructor(schema);
        return function (data) ***REMOVED***
          return data instanceof Constructor;
        ***REMOVED***;
      ***REMOVED***

      var constructors = schema.map(getConstructor);
      return function (data) ***REMOVED***
        for (var i=0; i<constructors.length; i++)
          if (data instanceof constructors[i]) return true;
        return false;
      ***REMOVED***;
    ***REMOVED***,
    CONSTRUCTORS: CONSTRUCTORS,
    metaSchema: ***REMOVED***
      anyOf: [
        ***REMOVED*** type: 'string' ***REMOVED***,
        ***REMOVED***
          type: 'array',
          items: ***REMOVED*** type: 'string' ***REMOVED***
        ***REMOVED***
      ]
    ***REMOVED***
  ***REMOVED***;

  ajv.addKeyword('instanceof', defFunc.definition);
  return ajv;

  function getConstructor(c) ***REMOVED***
    var Constructor = CONSTRUCTORS[c];
    if (Constructor) return Constructor;
    throw new Error('invalid "instanceof" keyword value ' + c);
  ***REMOVED***
***REMOVED***;
