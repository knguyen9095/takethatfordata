'use strict';

var util = require('./_util');

module.exports = function defFunc(ajv) ***REMOVED***
  defFunc.definition = ***REMOVED***
    type: 'object',
    macro: function (schema) ***REMOVED***
      var schemas = [];
      for (var pointer in schema)
        schemas.push(getSchema(pointer, schema[pointer]));
      return ***REMOVED*** 'allOf': schemas ***REMOVED***;
    ***REMOVED***,
    metaSchema: ***REMOVED***
      type: 'object',
      propertyNames: ***REMOVED***
        type: 'string',
        format: 'json-pointer'
      ***REMOVED***,
      additionalProperties: util.metaSchemaRef(ajv)
    ***REMOVED***
  ***REMOVED***;

  ajv.addKeyword('deepProperties', defFunc.definition);
  return ajv;
***REMOVED***;


function getSchema(jsonPointer, schema) ***REMOVED***
  var segments = jsonPointer.split('/');
  var rootSchema = ***REMOVED******REMOVED***;
  var pointerSchema = rootSchema;
  for (var i=1; i<segments.length; i++) ***REMOVED***
    var segment = segments[i];
    var isLast = i == segments.length - 1;
    segment = unescapeJsonPointer(segment);
    var properties = pointerSchema.properties = ***REMOVED******REMOVED***;
    var items = undefined;
    if (/[0-9]+/.test(segment)) ***REMOVED***
      var count = +segment;
      items = pointerSchema.items = [];
      while (count--) items.push(***REMOVED******REMOVED***);
    ***REMOVED***
    pointerSchema = isLast ? schema : ***REMOVED******REMOVED***;
    properties[segment] = pointerSchema;
    if (items) items.push(pointerSchema);
  ***REMOVED***
  return rootSchema;
***REMOVED***


function unescapeJsonPointer(str) ***REMOVED***
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
***REMOVED***
