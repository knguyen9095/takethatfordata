module.exports = function loadLoader(loader, callback) ***REMOVED***
	if(typeof System === "object" && typeof System.import === "function") ***REMOVED***
		System.import(loader.path).catch(callback).then(function(module) ***REMOVED***
			loader.normal = typeof module === "function" ? module : module.default;
			loader.pitch = module.pitch;
			loader.raw = module.raw;
			if(typeof loader.normal !== "function" && typeof loader.pitch !== "function")
				throw new Error("Module '" + loader.path + "' is not a loader (must have normal or pitch function)");
			callback();
		***REMOVED***);
	***REMOVED*** else ***REMOVED***
		try ***REMOVED***
			var module = require(loader.path);
		***REMOVED*** catch(e) ***REMOVED***
			// it is possible for node to choke on a require if the FD descriptor
			// limit has been reached. give it a chance to recover.
			if(e instanceof Error && e.code === "EMFILE") ***REMOVED***
				var retry = loadLoader.bind(null, loader, callback);
				if(typeof setImmediate === "function") ***REMOVED***
					// node >= 0.9.0
					return setImmediate(retry);
				***REMOVED*** else ***REMOVED***
					// node < 0.9.0
					return process.nextTick(retry);
				***REMOVED***
			***REMOVED***
			return callback(e);
		***REMOVED***
		if(typeof loader !== "function" && typeof loader !== "object")
			throw new Error("Module '" + loader.path + "' is not a loader (export function or es6 module))");
		loader.normal = typeof module === "function" ? module : module.default;
		loader.pitch = module.pitch;
		loader.raw = module.raw;
		if(typeof loader.normal !== "function" && typeof loader.pitch !== "function")
			throw new Error("Module '" + loader.path + "' is not a loader (must have normal or pitch function)");
		callback();
	***REMOVED***
***REMOVED***;
