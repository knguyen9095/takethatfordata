/**
 * Modules in this bundle
 * @license
 *
 * type-name:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Takuto Wada <takuto.wada@gmail.com>
 *   contributors: azu, Yosuke Furukawa, Athan, Andrew Moss
 *   homepage: https://github.com/twada/type-name
 *   version: 2.0.2
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function(f)***REMOVED***if(typeof exports==="object"&&typeof module!=="undefined")***REMOVED***module.exports=f()***REMOVED***else if(typeof define==="function"&&define.amd)***REMOVED***define([],f)***REMOVED***else***REMOVED***var g;if(typeof window!=="undefined")***REMOVED***g=window***REMOVED***else if(typeof global!=="undefined")***REMOVED***g=global***REMOVED***else if(typeof self!=="undefined")***REMOVED***g=self***REMOVED***else***REMOVED***g=this***REMOVED***g.typeName = f()***REMOVED******REMOVED***)(function()***REMOVED***var define,module,exports;return (function e(t,n,r)***REMOVED***function s(o,u)***REMOVED***if(!n[o])***REMOVED***if(!t[o])***REMOVED***var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)***REMOVED***var l=n[o]=***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;t[o][0].call(l.exports,function(e)***REMOVED***var n=t[o][1][e];return s(n?n:e)***REMOVED***,l,l.exports,e,t,n,r)***REMOVED***return n[o].exports***REMOVED***var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s***REMOVED***)(***REMOVED***1:[function(_dereq_,module,exports)***REMOVED***
/**
 * type-name - Just a reasonable typeof
 *
 * https://github.com/twada/type-name
 *
 * Copyright (c) 2014-2016 Takuto Wada
 * Licensed under the MIT license.
 *   https://github.com/twada/type-name/blob/master/LICENSE
 */
'use strict';

var toStr = Object.prototype.toString;

function funcName (f) ***REMOVED***
    if (f.name) ***REMOVED***
        return f.name;
    ***REMOVED***
    var match = /^\s*function\s*([^\(]*)/im.exec(f.toString());
    return match ? match[1] : '';
***REMOVED***

function ctorName (obj) ***REMOVED***
    var strName = toStr.call(obj).slice(8, -1);
    if ((strName === 'Object' || strName === 'Error') && obj.constructor) ***REMOVED***
        return funcName(obj.constructor);
    ***REMOVED***
    return strName;
***REMOVED***

function typeName (val) ***REMOVED***
    var type;
    if (val === null) ***REMOVED***
        return 'null';
    ***REMOVED***
    type = typeof val;
    if (type === 'object') ***REMOVED***
        return ctorName(val);
    ***REMOVED***
    return type;
***REMOVED***

module.exports = typeName;

***REMOVED***,***REMOVED******REMOVED***]***REMOVED***,***REMOVED******REMOVED***,[1])(1)
***REMOVED***);
