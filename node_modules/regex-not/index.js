'use strict';

var extend = require('extend-shallow');

/**
 * The main export is a function that takes a `pattern` string and an `options` object.
 *
 * ```js
 & var not = require('regex-not');
 & console.log(not('foo'));
 & //=> /^(?:(?!^(?:foo)$).)*$/
 * ```
 *
 * @param ***REMOVED***String***REMOVED*** `pattern`
 * @param ***REMOVED***Object***REMOVED*** `options`
 * @return ***REMOVED***RegExp***REMOVED*** Converts the given `pattern` to a regex using the specified `options`.
 * @api public
 */

function toRegex(pattern, options) ***REMOVED***
  return new RegExp(toRegex.create(pattern, options));
***REMOVED***

/**
 * Create a regex-compatible string from the given `pattern` and `options`.
 *
 * ```js
 & var not = require('regex-not');
 & console.log(not.create('foo'));
 & //=> '^(?:(?!^(?:foo)$).)*$'
 * ```
 * @param ***REMOVED***String***REMOVED*** `pattern`
 * @param ***REMOVED***Object***REMOVED*** `options`
 * @return ***REMOVED***String***REMOVED***
 * @api public
 */

toRegex.create = function(pattern, options) ***REMOVED***
  if (typeof pattern !== 'string') ***REMOVED***
    throw new TypeError('expected a string');
  ***REMOVED***

  var opts = extend(***REMOVED******REMOVED***, options);
  if (opts && opts.contains === true) ***REMOVED***
    opts.strictNegate = false;
  ***REMOVED***

  var open = opts.strictOpen !== false ? '^' : '';
  var close = opts.strictClose !== false ? '$' : '';
  var endChar = opts.endChar ? opts.endChar : '+';
  var str = pattern;

  if (opts && opts.strictNegate === false) ***REMOVED***
    str = '(?:(?!(?:' + pattern + ')).)' + endChar;
  ***REMOVED*** else ***REMOVED***
    str = '(?:(?!^(?:' + pattern + ')$).)' + endChar;
  ***REMOVED***

  return open + str + close;
***REMOVED***;

/**
 * Expose `toRegex`
 */

module.exports = toRegex;
