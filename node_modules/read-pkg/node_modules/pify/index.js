'use strict';

var processFn = function (fn, P, opts) ***REMOVED***
	return function () ***REMOVED***
		var that = this;
		var args = new Array(arguments.length);

		for (var i = 0; i < arguments.length; i++) ***REMOVED***
			args[i] = arguments[i];
		***REMOVED***

		return new P(function (resolve, reject) ***REMOVED***
			args.push(function (err, result) ***REMOVED***
				if (err) ***REMOVED***
					reject(err);
				***REMOVED*** else if (opts.multiArgs) ***REMOVED***
					var results = new Array(arguments.length - 1);

					for (var i = 1; i < arguments.length; i++) ***REMOVED***
						results[i - 1] = arguments[i];
					***REMOVED***

					resolve(results);
				***REMOVED*** else ***REMOVED***
					resolve(result);
				***REMOVED***
			***REMOVED***);

			fn.apply(that, args);
		***REMOVED***);
	***REMOVED***;
***REMOVED***;

var pify = module.exports = function (obj, P, opts) ***REMOVED***
	if (typeof P !== 'function') ***REMOVED***
		opts = P;
		P = Promise;
	***REMOVED***

	opts = opts || ***REMOVED******REMOVED***;
	opts.exclude = opts.exclude || [/.+Sync$/];

	var filter = function (key) ***REMOVED***
		var match = function (pattern) ***REMOVED***
			return typeof pattern === 'string' ? key === pattern : pattern.test(key);
		***REMOVED***;

		return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
	***REMOVED***;

	var ret = typeof obj === 'function' ? function () ***REMOVED***
		if (opts.excludeMain) ***REMOVED***
			return obj.apply(this, arguments);
		***REMOVED***

		return processFn(obj, P, opts).apply(this, arguments);
	***REMOVED*** : ***REMOVED******REMOVED***;

	return Object.keys(obj).reduce(function (ret, key) ***REMOVED***
		var x = obj[key];

		ret[key] = typeof x === 'function' && filter(key) ? processFn(x, P, opts) : x;

		return ret;
	***REMOVED***, ret);
***REMOVED***;

pify.all = pify;
