var url = require('url')
var base64 = require('./base64')

var decodeBase64 = base64.decodeBase64
var encodeBase64 = base64.encodeBase64

var tokenKey = ':_authToken'
var userKey = ':username'
var passwordKey = ':_password'

module.exports = function () ***REMOVED***
  var checkUrl
  var options
  if (arguments.length >= 2) ***REMOVED***
    checkUrl = arguments[0]
    options = arguments[1]
  ***REMOVED*** else if (typeof arguments[0] === 'string') ***REMOVED***
    checkUrl = arguments[0]
  ***REMOVED*** else ***REMOVED***
    options = arguments[0]
  ***REMOVED***
  options = options || ***REMOVED******REMOVED***
  options.npmrc = options.npmrc || require('rc')('npm', ***REMOVED***registry: 'https://registry.npmjs.org/'***REMOVED***)
  checkUrl = checkUrl || options.npmrc.registry
  return getRegistryAuthInfo(checkUrl, options) || getLegacyAuthInfo(options.npmrc)
***REMOVED***

function getRegistryAuthInfo (checkUrl, options) ***REMOVED***
  var parsed = url.parse(checkUrl, false, true)
  var pathname

  while (pathname !== '/' && parsed.pathname !== pathname) ***REMOVED***
    pathname = parsed.pathname || '/'

    var regUrl = '//' + parsed.host + pathname.replace(/\/$/, '')
    var authInfo = getAuthInfoForUrl(regUrl, options.npmrc)
    if (authInfo) ***REMOVED***
      return authInfo
    ***REMOVED***

    // break if not recursive
    if (!options.recursive) ***REMOVED***
      return /\/$/.test(checkUrl)
        ? undefined
        : getRegistryAuthInfo(url.resolve(checkUrl, '.'), options)
    ***REMOVED***

    parsed.pathname = url.resolve(normalizePath(pathname), '..') || '/'
  ***REMOVED***

  return undefined
***REMOVED***

function getLegacyAuthInfo (npmrc) ***REMOVED***
  if (npmrc._auth) ***REMOVED***
    return ***REMOVED***token: npmrc._auth, type: 'Basic'***REMOVED***
  ***REMOVED***
  return undefined
***REMOVED***

function normalizePath (path) ***REMOVED***
  return path[path.length - 1] === '/' ? path : path + '/'
***REMOVED***

function getAuthInfoForUrl (regUrl, npmrc) ***REMOVED***
  // try to get bearer token
  var bearerAuth = getBearerToken(npmrc[regUrl + tokenKey] || npmrc[regUrl + '/' + tokenKey])
  if (bearerAuth) ***REMOVED***
    return bearerAuth
  ***REMOVED***

  // try to get basic token
  var username = npmrc[regUrl + userKey] || npmrc[regUrl + '/' + userKey]
  var password = npmrc[regUrl + passwordKey] || npmrc[regUrl + '/' + passwordKey]
  var basicAuth = getTokenForUsernameAndPassword(username, password)
  if (basicAuth) ***REMOVED***
    return basicAuth
  ***REMOVED***

  return undefined
***REMOVED***

function getBearerToken (tok) ***REMOVED***
  if (!tok) ***REMOVED***
    return undefined
  ***REMOVED***

  // check if bearer token
  var token = tok.replace(/^\$\***REMOVED***?([^***REMOVED***]*)\***REMOVED***?$/, function (fullMatch, envVar) ***REMOVED***
    return process.env[envVar]
  ***REMOVED***)

  return ***REMOVED***token: token, type: 'Bearer'***REMOVED***
***REMOVED***

function getTokenForUsernameAndPassword (username, password) ***REMOVED***
  if (!username || !password) ***REMOVED***
    return undefined
  ***REMOVED***

  // passwords are base64 encoded, so we need to decode it
  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/set-credentials-by-uri.js#L26
  var pass = decodeBase64(password.replace(/^\$\***REMOVED***?([^***REMOVED***]*)\***REMOVED***?$/, function (fullMatch, envVar) ***REMOVED***
    return process.env[envVar]
  ***REMOVED***))

  // a basic auth token is base64 encoded 'username:password'
  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/get-credentials-by-uri.js#L70
  var token = encodeBase64(username + ':' + pass)

  // we found a basicToken token so let's exit the loop
  return ***REMOVED***
    token: token,
    type: 'Basic',
    password: pass,
    username: username
  ***REMOVED***
***REMOVED***
