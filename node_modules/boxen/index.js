'use strict';
const stringWidth = require('string-width');
const chalk = require('chalk');
const widestLine = require('widest-line');
const cliBoxes = require('cli-boxes');
const camelCase = require('camelcase');
const ansiAlign = require('ansi-align');
const termSize = require('term-size');

const getObject = detail => ***REMOVED***
	let obj;

	if (typeof detail === 'number') ***REMOVED***
		obj = ***REMOVED***
			top: detail,
			right: detail * 3,
			bottom: detail,
			left: detail * 3
		***REMOVED***;
	***REMOVED*** else ***REMOVED***
		obj = Object.assign(***REMOVED***
			top: 0,
			right: 0,
			bottom: 0,
			left: 0
		***REMOVED***, detail);
	***REMOVED***

	return obj;
***REMOVED***;

const getBorderChars = borderStyle => ***REMOVED***
	const sides = [
		'topLeft',
		'topRight',
		'bottomRight',
		'bottomLeft',
		'vertical',
		'horizontal'
	];

	let chars;

	if (typeof borderStyle === 'string') ***REMOVED***
		chars = cliBoxes[borderStyle];

		if (!chars) ***REMOVED***
			throw new TypeError(`Invalid border style: $***REMOVED***borderStyle***REMOVED***`);
		***REMOVED***
	***REMOVED*** else ***REMOVED***
		sides.forEach(key => ***REMOVED***
			if (!borderStyle[key] || typeof borderStyle[key] !== 'string') ***REMOVED***
				throw new TypeError(`Invalid border style: $***REMOVED***key***REMOVED***`);
			***REMOVED***
		***REMOVED***);

		chars = borderStyle;
	***REMOVED***

	return chars;
***REMOVED***;

const getBackgroundColorName = x => camelCase('bg', x);

module.exports = (text, opts) => ***REMOVED***
	opts = Object.assign(***REMOVED***
		padding: 0,
		borderStyle: 'single',
		dimBorder: false,
		align: 'left',
		float: 'left'
	***REMOVED***, opts);

	if (opts.backgroundColor) ***REMOVED***
		opts.backgroundColor = getBackgroundColorName(opts.backgroundColor);
	***REMOVED***

	if (opts.borderColor && !chalk[opts.borderColor]) ***REMOVED***
		throw new Error(`$***REMOVED***opts.borderColor***REMOVED*** is not a valid borderColor`);
	***REMOVED***

	if (opts.backgroundColor && !chalk[opts.backgroundColor]) ***REMOVED***
		throw new Error(`$***REMOVED***opts.backgroundColor***REMOVED*** is not a valid backgroundColor`);
	***REMOVED***

	const chars = getBorderChars(opts.borderStyle);
	const padding = getObject(opts.padding);
	const margin = getObject(opts.margin);

	const colorizeBorder = x => ***REMOVED***
		const ret = opts.borderColor ? chalk[opts.borderColor](x) : x;
		return opts.dimBorder ? chalk.dim(ret) : ret;
	***REMOVED***;

	const colorizeContent = x => opts.backgroundColor ? chalk[opts.backgroundColor](x) : x;

	text = ansiAlign(text, ***REMOVED***align: opts.align***REMOVED***);

	const NL = '\n';
	const PAD = ' ';

	let lines = text.split(NL);

	if (padding.top > 0) ***REMOVED***
		lines = Array(padding.top).fill('').concat(lines);
	***REMOVED***

	if (padding.bottom > 0) ***REMOVED***
		lines = lines.concat(Array(padding.bottom).fill(''));
	***REMOVED***

	const contentWidth = widestLine(text) + padding.left + padding.right;
	const paddingLeft = PAD.repeat(padding.left);
	const columns = termSize().columns;
	let marginLeft = PAD.repeat(margin.left);

	if (opts.float === 'center') ***REMOVED***
		const padWidth = Math.max((columns - contentWidth) / 2, 0);
		marginLeft = PAD.repeat(padWidth);
	***REMOVED*** else if (opts.float === 'right') ***REMOVED***
		const padWidth = Math.max(columns - contentWidth - margin.right - 2, 0);
		marginLeft = PAD.repeat(padWidth);
	***REMOVED***

	const horizontal = chars.horizontal.repeat(contentWidth);
	const top = colorizeBorder(NL.repeat(margin.top) + marginLeft + chars.topLeft + horizontal + chars.topRight);
	const bottom = colorizeBorder(marginLeft + chars.bottomLeft + horizontal + chars.bottomRight + NL.repeat(margin.bottom));
	const side = colorizeBorder(chars.vertical);

	const middle = lines.map(line => ***REMOVED***
		const paddingRight = PAD.repeat(contentWidth - stringWidth(line) - padding.left);
		return marginLeft + side + colorizeContent(paddingLeft + line + paddingRight) + side;
	***REMOVED***).join(NL);

	return top + NL + middle + NL + bottom;
***REMOVED***;

module.exports._borderStyles = cliBoxes;
