const path = require('path');
const fs = require('fs');
const existsSync = fs.existsSync;
const utils = require('../utils');

module.exports = exec;
module.exports.expandScript = expandScript;

/**
 * Reads the cwd/package.json file and looks to see if it can load a script
 * and possibly an exec first from package.main, then package.start.
 *
 * @return ***REMOVED***Object***REMOVED*** exec & script if found
 */
function execFromPackage() ***REMOVED***
  // doing a try/catch because we can't use the path.exist callback pattern
  // or we could, but the code would get messy, so this will do exactly
  // what we're after - if the file doesn't exist, it'll throw.
  try ***REMOVED***
    // note: this isn't nodemon's package, it's the user's cwd package
    var pkg = require(path.join(process.cwd(), 'package.json'));
    if (pkg.main !== undefined) ***REMOVED***
      // no app found to run - so give them a tip and get the feck out
      return ***REMOVED*** exec: null, script: pkg.main ***REMOVED***;
    ***REMOVED***

    if (pkg.scripts && pkg.scripts.start) ***REMOVED***
      return ***REMOVED*** exec: pkg.scripts.start ***REMOVED***;
    ***REMOVED***
  ***REMOVED*** catch (e) ***REMOVED*** ***REMOVED***

  return null;
***REMOVED***

function replace(map, str) ***REMOVED***
  var re = new RegExp('***REMOVED******REMOVED***(' + Object.keys(map).join('|') + ')***REMOVED******REMOVED***');
  return str.replace(re, function (all, m) ***REMOVED***
    return map[m] || all || '';
  ***REMOVED***);
***REMOVED***

function expandScript(script, ext) ***REMOVED***
  if (!ext) ***REMOVED***
    ext = '.js';
  ***REMOVED***
  if (script.indexOf(ext) !== -1) ***REMOVED***
    return script;
  ***REMOVED***

  if (existsSync(path.resolve(script))) ***REMOVED***
    return script;
  ***REMOVED***

  if (existsSync(path.resolve(script + ext))) ***REMOVED***
    return script + ext;
  ***REMOVED***

  return script;
***REMOVED***

/**
 * Discovers all the options required to run the script
 * and if a custom exec has been passed in, then it will
 * also try to work out what extensions to monitor and
 * whether there's a special way of running that script.
 *
 * @param  ***REMOVED***Object***REMOVED*** nodemonOptions
 * @param  ***REMOVED***Object***REMOVED*** execMap
 * @return ***REMOVED***Object***REMOVED*** new and updated version of nodemonOptions
 */
function exec(nodemonOptions, execMap) ***REMOVED***
  if (!execMap) ***REMOVED***
    execMap = ***REMOVED******REMOVED***;
  ***REMOVED***

  var options = utils.clone(nodemonOptions || ***REMOVED******REMOVED***);
  var script;

  // if there's no script passed, try to get it from the first argument
  if (!options.script && (options.args || []).length) ***REMOVED***
    script = expandScript(options.args[0],
      options.ext && ('.' + (options.ext || 'js').split(',')[0]));

    // if the script was found, shift it off our args
    if (script !== options.args[0]) ***REMOVED***
      options.script = script;
      options.args.shift();
    ***REMOVED***
  ***REMOVED***

  // if there's no exec found yet, then try to read it from the local
  // package.json this logic used to sit in the cli/parse, but actually the cli
  // should be parsed first, then the user options (via nodemon.json) then
  // finally default down to pot shots at the directory via package.json
  if (!options.exec && !options.script) ***REMOVED***
    var found = execFromPackage();
    if (found !== null) ***REMOVED***
      if (found.exec) ***REMOVED***
        options.exec = found.exec;
      ***REMOVED***
      if (!options.script) ***REMOVED***
        options.script = found.script;
      ***REMOVED***
      if (Array.isArray(options.args) &&
        options.scriptPosition === null) ***REMOVED***
        options.scriptPosition = options.args.length;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  // var options = utils.clone(nodemonOptions || ***REMOVED******REMOVED***);
  script = path.basename(options.script || '');

  var scriptExt = path.extname(script).slice(1);

  var extension = options.ext;
  if (extension === undefined) ***REMOVED***
    var isJS = scriptExt === 'js' || scriptExt === 'mjs';
    extension = (isJS || !scriptExt) ? 'js,mjs' : scriptExt;
    extension += ',json'; // Always watch JSON files
  ***REMOVED***

  var execDefined = !!options.exec;

  // allows the user to simplify cli usage:
  // https://github.com/remy/nodemon/issues/195
  // but always give preference to the user defined argument
  if (!options.exec && execMap[scriptExt] !== undefined) ***REMOVED***
    options.exec = execMap[scriptExt];
    execDefined = true;
  ***REMOVED***

  options.execArgs = nodemonOptions.execArgs || [];

  if (Array.isArray(options.exec)) ***REMOVED***
    options.execArgs = options.exec;
    options.exec = options.execArgs.shift();
  ***REMOVED***

  if (options.exec === undefined) ***REMOVED***
    options.exec = 'node';
  ***REMOVED*** else ***REMOVED***
    // allow variable substitution for ***REMOVED******REMOVED***filename***REMOVED******REMOVED*** and ***REMOVED******REMOVED***pwd***REMOVED******REMOVED***
    var substitution = replace.bind(null, ***REMOVED***
      filename: options.script,
      pwd: process.cwd(),
    ***REMOVED***);

    var newExec = substitution(options.exec);
    if (newExec !== options.exec &&
      options.exec.indexOf('***REMOVED******REMOVED***filename***REMOVED******REMOVED***') !== -1) ***REMOVED***
      options.script = null;
    ***REMOVED***
    options.exec = newExec;

    var newExecArgs = options.execArgs.map(substitution);
    if (newExecArgs.join('') !== options.execArgs.join('')) ***REMOVED***
      options.execArgs = newExecArgs;
      delete options.script;
    ***REMOVED***
  ***REMOVED***


  if (options.exec === 'node' && options.nodeArgs && options.nodeArgs.length) ***REMOVED***
    options.execArgs = options.execArgs.concat(options.nodeArgs);
  ***REMOVED***

  // note: indexOf('coffee') handles both .coffee and .litcoffee
  if (!execDefined && options.exec === 'node' &&
    scriptExt.indexOf('coffee') !== -1) ***REMOVED***
    options.exec = 'coffee';

    // we need to get execArgs set before the script
    // for example, in `nodemon --debug my-script.coffee --my-flag`, debug is an
    // execArg, while my-flag is a script arg
    var leadingArgs = (options.args || []).splice(0, options.scriptPosition);
    options.execArgs = options.execArgs.concat(leadingArgs);
    options.scriptPosition = 0;

    if (options.execArgs.length > 0) ***REMOVED***
      // because this is the coffee executable, we need to combine the exec args
      // into a single argument after the nodejs flag
      options.execArgs = ['--nodejs', options.execArgs.join(' ')];
    ***REMOVED***
  ***REMOVED***

  if (options.exec === 'coffee') ***REMOVED***
    // don't override user specified extension tracking
    if (options.ext === undefined) ***REMOVED***
      if (extension) ***REMOVED*** extension += ','; ***REMOVED***
      extension += 'coffee,litcoffee';
    ***REMOVED***

    // because windows can't find 'coffee', it needs the real file 'coffee.cmd'
    if (utils.isWindows) ***REMOVED***
      options.exec += '.cmd';
    ***REMOVED***
  ***REMOVED***

  // allow users to make a mistake on the extension to monitor
  // converts .js, jade => js,jade
  // BIG NOTE: user can't do this: nodemon -e *.js
  // because the terminal will automatically expand the glob against
  // the file system :(
  extension = (extension.match(/[^,*\s]+/g) || [])
    .map(ext => ext.replace(/^\./, ''))
    .join(',');

  options.ext = extension;

  if (options.script) ***REMOVED***
    options.script = expandScript(options.script,
      extension && ('.' + extension.split(',')[0]));
  ***REMOVED***

  options.env = ***REMOVED******REMOVED***;
  // make sure it's an object (and since we don't have )
  if ((***REMOVED******REMOVED***).toString.apply(nodemonOptions.env) === '[object Object]') ***REMOVED***
    options.env = utils.clone(nodemonOptions.env);
  ***REMOVED*** else if (nodemonOptions.env !== undefined) ***REMOVED***
    throw new Error('nodemon env values must be an object: ***REMOVED*** PORT: 8000 ***REMOVED***');
  ***REMOVED***

  return options;
***REMOVED***
