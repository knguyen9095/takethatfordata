module.exports = version;
module.exports.pin = pin;

var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;
var root = null;

function pin() ***REMOVED***
  return version().then(function (v) ***REMOVED***
    version.pinned = v;
  ***REMOVED***);
***REMOVED***

function version(callback) ***REMOVED***
  // first find the package.json as this will be our root
  var promise = findPackage(path.dirname(module.parent.filename))
    .then(function (dir) ***REMOVED***
      // now try to load the package
      var v = require(path.resolve(dir, 'package.json')).version;

      if (v && v !== '0.0.0-development') ***REMOVED***
        return v;
      ***REMOVED***

      root = dir;

      // else we're in development, give the commit out
      // get the last commit and whether the working dir is dirty
      var promises = [
        branch().catch(function () ***REMOVED*** return 'master'; ***REMOVED***),
        commit().catch(function () ***REMOVED*** return '<none>'; ***REMOVED***),
        dirty().catch(function () ***REMOVED*** return 0; ***REMOVED***),
      ];

      // use the cached result as the export
      return Promise.all(promises).then(function (res) ***REMOVED***
        var branch = res[0];
        var commit = res[1];
        var dirtyCount = parseInt(res[2], 10);
        var curr = branch + ': ' + commit;
        if (dirtyCount !== 0) ***REMOVED***
          curr += ' (' + dirtyCount + ' dirty files)';
        ***REMOVED***

        return curr;
      ***REMOVED***);
    ***REMOVED***).catch(function (error) ***REMOVED***
      console.log(error.stack);
      throw error;
    ***REMOVED***);

  if (callback) ***REMOVED***
    promise.then(function (res) ***REMOVED***
      callback(null, res);
    ***REMOVED***, callback);
  ***REMOVED***

  return promise;
***REMOVED***

function findPackage(dir) ***REMOVED***
  if (dir === '/') ***REMOVED***
    return Promise.reject(new Error('package not found'));
  ***REMOVED***
  return new Promise(function (resolve) ***REMOVED***
    fs.stat(path.resolve(dir, 'package.json'), function (error, exists) ***REMOVED***
      if (error || !exists) ***REMOVED***
        return resolve(findPackage(path.resolve(dir, '..')));
      ***REMOVED***

      resolve(dir);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***

function command(cmd) ***REMOVED***
  return new Promise(function (resolve, reject) ***REMOVED***
    exec(cmd, ***REMOVED*** cwd: root ***REMOVED***, function (err, stdout, stderr) ***REMOVED***
      var error = stderr.trim();
      if (error) ***REMOVED***
        return reject(new Error(error));
      ***REMOVED***
      resolve(stdout.split('\n').join(''));
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***

function commit() ***REMOVED***
  return command('git rev-parse HEAD');
***REMOVED***

function branch() ***REMOVED***
  return command('git rev-parse --abbrev-ref HEAD');
***REMOVED***

function dirty() ***REMOVED***
  return command('expr $(git status --porcelain 2>/dev/null| ' +
    'egrep "^(M| M)" | wc -l)');
***REMOVED***
