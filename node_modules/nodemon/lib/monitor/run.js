var debug = require('debug')('nodemon');
var utils = require('../utils');
var bus = utils.bus;
var childProcess = require('child_process');
var spawn = childProcess.spawn;
var exec = childProcess.exec;
var fork = childProcess.fork;
var watch = require('./watch').watch;
var config = require('../config');
var child = null; // the actual child process we spawn
var killedAfterChange = false;
var noop = function () ***REMOVED*** ***REMOVED***;
var restart = null;
var psTree = require('pstree.remy');
var path = require('path');
var signals = require('./signals');

function run(options) ***REMOVED***
  var cmd = config.command.raw;

  var runCmd = !options.runOnChangeOnly || config.lastStarted !== 0;
  if (runCmd) ***REMOVED***
    utils.log.status('starting `' + config.command.string + '`');
  ***REMOVED***

  /*jshint validthis:true*/
  restart = run.bind(this, options);
  run.restart = restart;

  config.lastStarted = Date.now();

  var stdio = ['pipe', 'pipe', 'pipe'];

  if (config.options.stdout) ***REMOVED***
    stdio = ['pipe', process.stdout, process.stderr];
  ***REMOVED***

  if (config.options.stdin === false) ***REMOVED***
    stdio = [process.stdin, process.stdout, process.stderr];
  ***REMOVED***

  var sh = 'sh';
  var shFlag = '-c';


  const spawnOptions = ***REMOVED***
    env: utils.merge(options.execOptions.env, process.env),
    stdio: stdio,
  ***REMOVED***

  if (utils.isWindows) ***REMOVED***
    // taken from npm's cli: https://git.io/vNFD4
    sh = process.env.comspec || 'cmd';
    shFlag = '/d /s /c';
    spawnOptions.windowsVerbatimArguments = true;
  ***REMOVED***

  var executable = cmd.executable;
  var args = runCmd ? utils.stringify(executable, cmd.args) : ':';
  var spawnArgs = [sh, [shFlag, args], spawnOptions];

  const firstArg = cmd.args[0] || '';

  // hasStdio allows us to correctly handle stdin piping
  // see: https://git.io/vNtX3
  const hasStdio = utils.satisfies('>= 6.4.0 || < 5');

  if (
    firstArg.indexOf('-') === -1 && // don't fork if there's a node arg
    firstArg !== 'inspect' && // don't fork it's `inspect` debugger
    executable === 'node' && // only fork if node
    utils.version.major > 4 // only fork if node version > 4
  ) ***REMOVED***
    var forkArgs = cmd.args.slice(1);
    var env = utils.merge(options.execOptions.env, process.env);
    stdio.push('ipc');
    child = fork(options.execOptions.script, forkArgs, ***REMOVED***
      env: env,
      stdio: stdio,
      silent: !hasStdio,
    ***REMOVED***);
    utils.log.detail('forking');
    debug(forkArgs);
  ***REMOVED*** else ***REMOVED***
    utils.log.detail('spawning');
    child = spawn.apply(null, spawnArgs);
    debug(spawnArgs);
  ***REMOVED***

  if (config.required) ***REMOVED***
    var emit = ***REMOVED***
      stdout: function (data) ***REMOVED***
        bus.emit('stdout', data);
      ***REMOVED***,
      stderr: function (data) ***REMOVED***
        bus.emit('stderr', data);
      ***REMOVED***,
    ***REMOVED***;

    // now work out what to bind to...
    if (config.options.stdout) ***REMOVED***
      child.on('stdout', emit.stdout).on('stderr', emit.stderr);
    ***REMOVED*** else ***REMOVED***
      child.stdout.on('data', emit.stdout);
      child.stderr.on('data', emit.stderr);

      bus.stdout = child.stdout;
      bus.stderr = child.stderr;
    ***REMOVED***
  ***REMOVED***

  bus.emit('start');

  utils.log.detail('child pid: ' + child.pid);

  child.on('error', function (error) ***REMOVED***
    bus.emit('error', error);
    if (error.code === 'ENOENT') ***REMOVED***
      utils.log.error('unable to run executable: "' + cmd.executable + '"');
      process.exit(1);
    ***REMOVED*** else ***REMOVED***
      utils.log.error('failed to start child process: ' + error.code);
      throw error;
    ***REMOVED***
  ***REMOVED***);

  child.on('exit', function (code, signal) ***REMOVED***
    if (code === 127) ***REMOVED***
      utils.log.error('failed to start process, "' + cmd.executable +
        '" exec not found');
      bus.emit('error', code);
      process.exit();
    ***REMOVED***

    if (code === 2) ***REMOVED***
      // something wrong with parsed command
      utils.log.error('process failed, unhandled exit code (2)');
      bus.emit('error', code);
      process.exit();
    ***REMOVED***

    // In case we killed the app ourselves, set the signal thusly
    if (killedAfterChange) ***REMOVED***
      killedAfterChange = false;
      signal = config.signal;
    ***REMOVED***
    // this is nasty, but it gives it windows support
    if (utils.isWindows && signal === 'SIGTERM') ***REMOVED***
      signal = config.signal;
    ***REMOVED***

    if (signal === config.signal || code === 0) ***REMOVED***
      // this was a clean exit, so emit exit, rather than crash
      debug('bus.emit(exit) via ' + config.signal);
      bus.emit('exit');

      // exit the monitor, but do it gracefully
      if (signal === config.signal) ***REMOVED***
        return restart();
      ***REMOVED***

      if (code === 0) ***REMOVED*** // clean exit - wait until file change to restart
        if (runCmd) ***REMOVED***
          utils.log.status('clean exit - waiting for changes before restart');
        ***REMOVED***
        child = null;
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      bus.emit('crash');
      if (options.exitcrash) ***REMOVED***
        utils.log.fail('app crashed');
        if (!config.required) ***REMOVED***
          process.exit(1);
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        utils.log.fail('app crashed - waiting for file changes before' +
          ' starting...');
        child = null;
      ***REMOVED***
    ***REMOVED***

    if (config.options.restartable) ***REMOVED***
      // stdin needs to kick in again to be able to listen to the
      // restart command
      process.stdin.resume();
    ***REMOVED***
  ***REMOVED***);

  run.kill = function (noRestart, callback) ***REMOVED***
    // I hate code like this :(  - Remy (author of said code)
    if (typeof noRestart === 'function') ***REMOVED***
      callback = noRestart;
      noRestart = false;
    ***REMOVED***

    if (!callback) ***REMOVED***
      callback = noop;
    ***REMOVED***

    if (child !== null) ***REMOVED***
      // if the stdin piping is on, we need to unpipe, but also close stdin on
      // the child, otherwise linux can throw EPIPE or ECONNRESET errors.
      if (options.stdin) ***REMOVED***
        process.stdin.unpipe(child.stdin);
      ***REMOVED***

      if (utils.isWindows) ***REMOVED***
        // For the on('exit', ...) handler above the following looks like a
        // crash, so we set the killedAfterChange flag
        killedAfterChange = true;
      ***REMOVED***

      /* Now kill the entire subtree of processes belonging to nodemon */
      var oldPid = child.pid;
      if (child) ***REMOVED***
        kill(child, config.signal, function () ***REMOVED***
          // this seems to fix the 0.11.x issue with the "rs" restart command,
          // though I'm unsure why. it seems like more data is streamed in to
          // stdin after we close.
          if (child && options.stdin && child.stdin && oldPid === child.pid) ***REMOVED***
            child.stdin.end();
          ***REMOVED***
          callback();
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED*** else if (!noRestart) ***REMOVED***
      // if there's no child, then we need to manually start the process
      // this is because as there was no child, the child.on('exit') event
      // handler doesn't exist which would normally trigger the restart.
      bus.once('start', callback);
      restart();
    ***REMOVED*** else ***REMOVED***
      callback();
    ***REMOVED***
  ***REMOVED***;

  // connect stdin to the child process (options.stdin is on by default)
  if (options.stdin) ***REMOVED***
    process.stdin.resume();
    // FIXME decide whether or not we need to decide the encoding
    // process.stdin.setEncoding('utf8');

    // swallow the stdin error if it happens
    // ref: https://github.com/remy/nodemon/issues/1195
    if (hasStdio) ***REMOVED***
      child.stdin.on('error', () => ***REMOVED*** ***REMOVED***);
      process.stdin.pipe(child.stdin);
    ***REMOVED*** else ***REMOVED***
      if (child.stdout) ***REMOVED***
        child.stdout.pipe(process.stdout);
      ***REMOVED*** else ***REMOVED***
        utils.log.error('running an unsupported version of node ' +
          process.version);
        utils.log.error('nodemon may not work as expected - ' +
          'please consider upgrading to LTS');
      ***REMOVED***
    ***REMOVED***

    bus.once('exit', function () ***REMOVED***
      if (child && process.stdin.unpipe) ***REMOVED*** // node > 0.8
        process.stdin.unpipe(child.stdin);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***

  debug('start watch on: %s', config.options.watch);
  if (config.options.watch !== false) ***REMOVED***
    watch();
  ***REMOVED***
***REMOVED***

function kill(child, signal, callback) ***REMOVED***
  if (!callback) ***REMOVED***
    callback = function () ***REMOVED*** ***REMOVED***;
  ***REMOVED***

  if (utils.isWindows) ***REMOVED***
    // When using CoffeeScript under Windows, child's process is not node.exe
    // Instead coffee.cmd is launched, which launches cmd.exe, which starts
    // node.exe as a child process child.kill() would only kill cmd.exe, not
    // node.exe
    // Therefore we use the Windows taskkill utility to kill the process and all
    // its children (/T for tree).
    // Force kill (/F) the whole child tree (/T) by PID (/PID 123)
    exec('taskkill /pid ' + child.pid + ' /T /F');
    callback();
  ***REMOVED*** else ***REMOVED***
    // we use psTree to kill the full subtree of nodemon, because when
    // spawning processes like `coffee` under the `--debug` flag, it'll spawn
    // it's own child, and that can't be killed by nodemon, so psTree gives us
    // an array of PIDs that have spawned under nodemon, and we send each the
    // configured signal (default: SIGUSR2) signal, which fixes #335
    // note that psTree also works if `ps` is missing by looking in /proc
    const sig = signal.replace('SIG', '');
    psTree(child.pid, function (err, kids) ***REMOVED***
      if (psTree.hasPS) ***REMOVED***
        spawn('kill', ['-s', sig, child.pid].concat(kids.map(p => p.PID)))
          .on('close', callback);
      ***REMOVED*** else ***REMOVED***
        // make sure we kill from smallest to largest
        const pids = kids.map(p => p.PID).concat(child.pid).sort();
        pids.forEach(pid => ***REMOVED***
          exec('kill -' + signals[signal] + ' ' + pid, () => ***REMOVED*** ***REMOVED***);
        ***REMOVED***);
        callback();
      ***REMOVED***
    ***REMOVED***);

  ***REMOVED***
***REMOVED***

// stubbed out for now, filled in during run
run.kill = function (flag, callback) ***REMOVED***
  if (callback) ***REMOVED***
    callback();
  ***REMOVED***
***REMOVED***;
run.restart = noop;

bus.on('quit', function onQuit() ***REMOVED***
  // remove event listener
  var exitTimer = null;
  var exit = function () ***REMOVED***
    clearTimeout(exitTimer);
    exit = noop; // null out in case of race condition
    child = null;
    if (!config.required) ***REMOVED***
      // Execute all other quit listeners.
      bus.listeners('quit').forEach(function (listener) ***REMOVED***
        if (listener !== onQuit) ***REMOVED***
          listener();
        ***REMOVED***
      ***REMOVED***);
      process.exit(0);
    ***REMOVED*** else ***REMOVED***
      bus.emit('exit');
    ***REMOVED***
  ***REMOVED***;

  // if we're not running already, don't bother with trying to kill
  if (config.run === false) ***REMOVED***
    return exit();
  ***REMOVED***

  // immediately try to stop any polling
  config.run = false;

  if (child) ***REMOVED***
    // give up waiting for the kids after 10 seconds
    exitTimer = setTimeout(exit, 10 * 1000);
    child.removeAllListeners('exit');
    child.once('exit', exit);

    kill(child, 'SIGINT');
  ***REMOVED*** else ***REMOVED***
    exit();
  ***REMOVED***
***REMOVED***);

bus.on('restart', function () ***REMOVED***
  // run.kill will send a SIGINT to the child process, which will cause it
  // to terminate, which in turn uses the 'exit' event handler to restart
  run.kill();
***REMOVED***);

// remove the flag file on exit
process.on('exit', function () ***REMOVED***
  utils.log.detail('exiting');
  if (child) ***REMOVED*** child.kill(); ***REMOVED***
***REMOVED***);

// because windows borks when listening for the SIG* events
if (!utils.isWindows) ***REMOVED***
  // usual suspect: ctrl+c exit
  process.once('SIGINT', function () ***REMOVED***
    bus.emit('quit');
  ***REMOVED***);

  process.once('SIGTERM', function () ***REMOVED***
    bus.emit('quit');
    if (child) ***REMOVED*** child.kill('SIGTERM'); ***REMOVED***
    process.exit(0);
  ***REMOVED***);
***REMOVED***


module.exports = run;
