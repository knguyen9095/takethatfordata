var noop = function () ***REMOVED*** ***REMOVED***;
var path = require('path');
const semver = require('semver');
var version = process.versions.node.split('.') || [null, null, null];

var utils = (module.exports = ***REMOVED***
  semver: semver,
  satisfies: test => semver.satisfies(process.versions.node, test),
  version: ***REMOVED***
    major: parseInt(version[0] || 0, 10),
    minor: parseInt(version[1] || 0, 10),
    patch: parseInt(version[2] || 0, 10),
  ***REMOVED***,
  clone: require('./clone'),
  merge: require('./merge'),
  bus: require('./bus'),
  isWindows: process.platform === 'win32',
  isMac: process.platform === 'darwin',
  isLinux: process.platform === 'linux',
  isRequired: (function () ***REMOVED***
    var p = module.parent;
    while (p) ***REMOVED***
      // in electron.js engine it happens
      if (p.filename === undefined) ***REMOVED***
        return true;
      ***REMOVED***
      if (p.filename.indexOf('bin' + path.sep + 'nodemon.js') !== -1) ***REMOVED***
        return false;
      ***REMOVED***
      p = p.parent;
    ***REMOVED***

    return true;
  ***REMOVED***)(),
  home: process.env.HOME || process.env.HOMEPATH,
  quiet: function () ***REMOVED***
    // nukes the logging
    if (!this.debug) ***REMOVED***
      for (var method in utils.log) ***REMOVED***
        if (typeof utils.log[method] === 'function') ***REMOVED***
          utils.log[method] = noop;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***,
  reset: function () ***REMOVED***
    if (!this.debug) ***REMOVED***
      for (var method in utils.log) ***REMOVED***
        if (typeof utils.log[method] === 'function') ***REMOVED***
          delete utils.log[method];
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
    this.debug = false;
  ***REMOVED***,
  regexpToText: function (t) ***REMOVED***
    return t
      .replace(/\.\*\\./g, '*.')
      .replace(/\\***REMOVED***2***REMOVED***/g, '^^')
      .replace(/\\/g, '')
      .replace(/\^\^/g, '\\');
  ***REMOVED***,
  stringify: function (exec, args) ***REMOVED***
    // serializes an executable string and array of arguments into a string
    args = args || [];

    return [exec]
      .concat(
      args.map(function (arg) ***REMOVED***
        // if an argument contains a space, we want to show it with quotes
        // around it to indicate that it is a single argument
        if (arg.indexOf(' ') === -1) ***REMOVED***
          return arg;
        ***REMOVED***
        // this should correctly escape nested quotes
        return JSON.stringify(arg);
      ***REMOVED***)
      )
      .join(' ')
      .trim();
  ***REMOVED***,
***REMOVED***);

utils.log = require('./log')(utils.isRequired);

Object.defineProperty(utils, 'debug', ***REMOVED***
  set: function (value) ***REMOVED***
    this.log.debug = value;
  ***REMOVED***,
  get: function () ***REMOVED***
    return this.log.debug;
  ***REMOVED***,
***REMOVED***);

Object.defineProperty(utils, 'colours', ***REMOVED***
  set: function (value) ***REMOVED***
    this.log.useColours = value;
  ***REMOVED***,
  get: function () ***REMOVED***
    return this.log.useColours;
  ***REMOVED***,
***REMOVED***);
