export = pool;

/**
 * An allocator as used by ***REMOVED***@link util.pool***REMOVED***.
 * @typedef PoolAllocator
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***number***REMOVED*** size Buffer size
 * @returns ***REMOVED***Uint8Array***REMOVED*** Buffer
 */
type PoolAllocator = (size: number) => Uint8Array;

/**
 * A slicer as used by ***REMOVED***@link util.pool***REMOVED***.
 * @typedef PoolSlicer
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***number***REMOVED*** start Start offset
 * @param ***REMOVED***number***REMOVED*** end End offset
 * @returns ***REMOVED***Uint8Array***REMOVED*** Buffer slice
 * @this ***REMOVED***Uint8Array***REMOVED***
 */
type PoolSlicer = (this: Uint8Array, start: number, end: number) => Uint8Array;

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param ***REMOVED***PoolAllocator***REMOVED*** alloc Allocator
 * @param ***REMOVED***PoolSlicer***REMOVED*** slice Slicer
 * @param ***REMOVED***number***REMOVED*** [size=8192] Slab size
 * @returns ***REMOVED***PoolAllocator***REMOVED*** Pooled allocator
 */
declare function pool(alloc: PoolAllocator, slice: PoolSlicer, size?: number): PoolAllocator;
