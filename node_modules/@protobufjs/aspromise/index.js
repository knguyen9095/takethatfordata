"use strict";
module.exports = asPromise;

/**
 * Callback as used by ***REMOVED***@link util.asPromise***REMOVED***.
 * @typedef asPromiseCallback
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***Error|null***REMOVED*** error Error, if any
 * @param ***REMOVED***...****REMOVED*** params Additional arguments
 * @returns ***REMOVED***undefined***REMOVED***
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param ***REMOVED***asPromiseCallback***REMOVED*** fn Function to call
 * @param ***REMOVED*******REMOVED*** ctx Function context
 * @param ***REMOVED***...****REMOVED*** params Function arguments
 * @returns ***REMOVED***Promise<*>***REMOVED*** Promisified function
 */
function asPromise(fn, ctx/*, varargs */) ***REMOVED***
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) ***REMOVED***
        params[offset] = function callback(err/*, varargs */) ***REMOVED***
            if (pending) ***REMOVED***
                pending = false;
                if (err)
                    reject(err);
                else ***REMOVED***
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
        try ***REMOVED***
            fn.apply(ctx || null, params);
        ***REMOVED*** catch (err) ***REMOVED***
            if (pending) ***REMOVED***
                pending = false;
                reject(err);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);
***REMOVED***
