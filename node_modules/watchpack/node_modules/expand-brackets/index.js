/*!
 * expand-brackets <https://github.com/jonschlinkert/expand-brackets>
 *
 * Copyright (c) 2015 Jon Schlinkert.
 * Licensed under the MIT license.
 */

'use strict';

var isPosixBracket = require('is-posix-bracket');

/**
 * POSIX character classes
 */

var POSIX = ***REMOVED***
  alnum: 'a-zA-Z0-9',
  alpha: 'a-zA-Z',
  blank: ' \\t',
  cntrl: '\\x00-\\x1F\\x7F',
  digit: '0-9',
  graph: '\\x21-\\x7E',
  lower: 'a-z',
  print: '\\x20-\\x7E',
  punct: '-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`***REMOVED***|***REMOVED***~',
  space: ' \\t\\r\\n\\v\\f',
  upper: 'A-Z',
  word:  'A-Za-z0-9_',
  xdigit: 'A-Fa-f0-9',
***REMOVED***;

/**
 * Expose `brackets`
 */

module.exports = brackets;

function brackets(str) ***REMOVED***
  if (!isPosixBracket(str)) ***REMOVED***
    return str;
  ***REMOVED***

  var negated = false;
  if (str.indexOf('[^') !== -1) ***REMOVED***
    negated = true;
    str = str.split('[^').join('[');
  ***REMOVED***
  if (str.indexOf('[!') !== -1) ***REMOVED***
    negated = true;
    str = str.split('[!').join('[');
  ***REMOVED***

  var a = str.split('[');
  var b = str.split(']');
  var imbalanced = a.length !== b.length;

  var parts = str.split(/(?::\]\[:|\[?\[:|:\]\]?)/);
  var len = parts.length, i = 0;
  var end = '', beg = '';
  var res = [];

  // start at the end (innermost) first
  while (len--) ***REMOVED***
    var inner = parts[i++];
    if (inner === '^[!' || inner === '[!') ***REMOVED***
      inner = '';
      negated = true;
    ***REMOVED***

    var prefix = negated ? '^' : '';
    var ch = POSIX[inner];

    if (ch) ***REMOVED***
      res.push('[' + prefix + ch + ']');
    ***REMOVED*** else if (inner) ***REMOVED***
      if (/^\[?\w-\w\]?$/.test(inner)) ***REMOVED***
        if (i === parts.length) ***REMOVED***
          res.push('[' + prefix + inner);
        ***REMOVED*** else if (i === 1) ***REMOVED***
          res.push(prefix + inner + ']');
        ***REMOVED*** else ***REMOVED***
          res.push(prefix + inner);
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        if (i === 1) ***REMOVED***
          beg += inner;
        ***REMOVED*** else if (i === parts.length) ***REMOVED***
          end += inner;
        ***REMOVED*** else ***REMOVED***
          res.push('[' + prefix + inner + ']');
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  var result = res.join('|');
  var rlen = res.length || 1;
  if (rlen > 1) ***REMOVED***
    result = '(?:' + result + ')';
    rlen = 1;
  ***REMOVED***
  if (beg) ***REMOVED***
    rlen++;
    if (beg.charAt(0) === '[') ***REMOVED***
      if (imbalanced) ***REMOVED***
        beg = '\\[' + beg.slice(1);
      ***REMOVED*** else ***REMOVED***
        beg += ']';
      ***REMOVED***
    ***REMOVED***
    result = beg + result;
  ***REMOVED***
  if (end) ***REMOVED***
    rlen++;
    if (end.slice(-1) === ']') ***REMOVED***
      if (imbalanced) ***REMOVED***
        end = end.slice(0, end.length - 1) + '\\]';
      ***REMOVED*** else ***REMOVED***
        end = '[' + end;
      ***REMOVED***
    ***REMOVED***
    result += end;
  ***REMOVED***

  if (rlen > 1) ***REMOVED***
    result = result.split('][').join(']|[');
    if (result.indexOf('|') !== -1 && !/\(\?/.test(result)) ***REMOVED***
      result = '(?:' + result + ')';
    ***REMOVED***
  ***REMOVED***

  result = result.replace(/\[+=|=\]+/g, '\\b');
  return result;
***REMOVED***

brackets.makeRe = function(pattern) ***REMOVED***
  try ***REMOVED***
    return new RegExp(brackets(pattern));
  ***REMOVED*** catch (err) ***REMOVED******REMOVED***
***REMOVED***;

brackets.isMatch = function(str, pattern) ***REMOVED***
  try ***REMOVED***
    return brackets.makeRe(pattern).test(str);
  ***REMOVED*** catch (err) ***REMOVED***
    return false;
  ***REMOVED***
***REMOVED***;

brackets.match = function(arr, pattern) ***REMOVED***
  var len = arr.length, i = 0;
  var res = arr.slice();

  var re = brackets.makeRe(pattern);
  while (i < len) ***REMOVED***
    var ele = arr[i++];
    if (!re.test(ele)) ***REMOVED***
      continue;
    ***REMOVED***
    res.splice(i, 1);
  ***REMOVED***
  return res;
***REMOVED***;
