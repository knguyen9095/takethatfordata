'use strict';

module.exports = ***REMOVED***
  setup: setupAsync,
  compile: compileAsync
***REMOVED***;


var util = require('./compile/util');

var ASYNC = ***REMOVED***
  '*': checkGenerators,
  'co*': checkGenerators,
  'es7': checkAsyncFunction
***REMOVED***;

var TRANSPILE = ***REMOVED***
  'nodent': getNodent,
  'regenerator': getRegenerator
***REMOVED***;

var MODES = [
  ***REMOVED*** async: 'co*' ***REMOVED***,
  ***REMOVED*** async: 'es7', transpile: 'nodent' ***REMOVED***,
  ***REMOVED*** async: 'co*', transpile: 'regenerator' ***REMOVED***
];


var regenerator, nodent;


function setupAsync(opts, required) ***REMOVED***
  if (required !== false) required = true;
  var async = opts.async
    , transpile = opts.transpile
    , check;

  switch (typeof transpile) ***REMOVED***
    case 'string':
      var get = TRANSPILE[transpile];
      if (!get) throw new Error('bad transpiler: ' + transpile);
      return (opts._transpileFunc = get(opts, required));
    case 'undefined':
    case 'boolean':
      if (typeof async == 'string') ***REMOVED***
        check = ASYNC[async];
        if (!check) throw new Error('bad async mode: ' + async);
        return (opts.transpile = check(opts, required));
      ***REMOVED***

      for (var i=0; i<MODES.length; i++) ***REMOVED***
        var _opts = MODES[i];
        if (setupAsync(_opts, false)) ***REMOVED***
          util.copy(_opts, opts);
          return opts.transpile;
        ***REMOVED***
      ***REMOVED***
      /* istanbul ignore next */
      throw new Error('generators, nodent and regenerator are not available');
    case 'function':
      return (opts._transpileFunc = opts.transpile);
    default:
      throw new Error('bad transpiler: ' + transpile);
  ***REMOVED***
***REMOVED***


function checkGenerators(opts, required) ***REMOVED***
  /* jshint evil: true */
  try ***REMOVED***
    (new Function('(function*()***REMOVED******REMOVED***)()'))();
    return true;
  ***REMOVED*** catch(e) ***REMOVED***
    /* istanbul ignore next */
    if (required) throw new Error('generators not supported');
  ***REMOVED***
***REMOVED***


function checkAsyncFunction(opts, required) ***REMOVED***
  /* jshint evil: true */
  try ***REMOVED***
    (new Function('(async function()***REMOVED******REMOVED***)()'))();
    /* istanbul ignore next */
    return true;
  ***REMOVED*** catch(e) ***REMOVED***
    if (required) throw new Error('es7 async functions not supported');
  ***REMOVED***
***REMOVED***


function getRegenerator(opts, required) ***REMOVED***
  try ***REMOVED***
    if (!regenerator) ***REMOVED***
      var name = 'regenerator';
      regenerator = require(name);
      regenerator.runtime();
    ***REMOVED***
    if (!opts.async || opts.async === true)
      opts.async = 'es7';
    return regeneratorTranspile;
  ***REMOVED*** catch(e) ***REMOVED***
    /* istanbul ignore next */
    if (required) throw new Error('regenerator not available');
  ***REMOVED***
***REMOVED***


function regeneratorTranspile(code) ***REMOVED***
  return regenerator.compile(code).code;
***REMOVED***


function getNodent(opts, required) ***REMOVED***
  /* jshint evil: true */
  try ***REMOVED***
    if (!nodent) ***REMOVED***
      var name = 'nodent';
      nodent = require(name)(***REMOVED*** log: false, dontInstallRequireHook: true ***REMOVED***);
    ***REMOVED***
    if (opts.async != 'es7') ***REMOVED***
      if (opts.async && opts.async !== true) console.warn('nodent transpiles only es7 async functions');
      opts.async = 'es7';
    ***REMOVED***
    return nodentTranspile;
  ***REMOVED*** catch(e) ***REMOVED***
    /* istanbul ignore next */
    if (required) throw new Error('nodent not available');
  ***REMOVED***
***REMOVED***


function nodentTranspile(code) ***REMOVED***
  return nodent.compile(code, '', ***REMOVED*** promises: true, sourcemap: false ***REMOVED***).code;
***REMOVED***


/**
 * Creates validating function for passed schema with asynchronous loading of missing schemas.
 * `loadSchema` option should be a function that accepts schema uri and node-style callback.
 * @this  Ajv
 * @param ***REMOVED***Object***REMOVED***   schema schema object
 * @param ***REMOVED***Function***REMOVED*** callback node-style callback, it is always called with 2 parameters: error (or null) and validating function.
 */
function compileAsync(schema, callback) ***REMOVED***
  /* eslint no-shadow: 0 */
  /* jshint validthis: true */
  var schemaObj;
  var self = this;
  try ***REMOVED***
    schemaObj = this._addSchema(schema);
  ***REMOVED*** catch(e) ***REMOVED***
    setTimeout(function() ***REMOVED*** callback(e); ***REMOVED***);
    return;
  ***REMOVED***
  if (schemaObj.validate) ***REMOVED***
    setTimeout(function() ***REMOVED*** callback(null, schemaObj.validate); ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    if (typeof this._opts.loadSchema != 'function')
      throw new Error('options.loadSchema should be a function');
    _compileAsync(schema, callback, true);
  ***REMOVED***


  function _compileAsync(schema, callback, firstCall) ***REMOVED***
    var validate;
    try ***REMOVED*** validate = self.compile(schema); ***REMOVED***
    catch(e) ***REMOVED***
      if (e.missingSchema) loadMissingSchema(e);
      else deferCallback(e);
      return;
    ***REMOVED***
    deferCallback(null, validate);

    function loadMissingSchema(e) ***REMOVED***
      var ref = e.missingSchema;
      if (self._refs[ref] || self._schemas[ref])
        return callback(new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved'));
      var _callbacks = self._loadingSchemas[ref];
      if (_callbacks) ***REMOVED***
        if (typeof _callbacks == 'function')
          self._loadingSchemas[ref] = [_callbacks, schemaLoaded];
        else
          _callbacks[_callbacks.length] = schemaLoaded;
      ***REMOVED*** else ***REMOVED***
        self._loadingSchemas[ref] = schemaLoaded;
        self._opts.loadSchema(ref, function (err, sch) ***REMOVED***
          var _callbacks = self._loadingSchemas[ref];
          delete self._loadingSchemas[ref];
          if (typeof _callbacks == 'function') ***REMOVED***
            _callbacks(err, sch);
          ***REMOVED*** else ***REMOVED***
            for (var i=0; i<_callbacks.length; i++)
              _callbacks[i](err, sch);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***

      function schemaLoaded(err, sch) ***REMOVED***
        if (err) return callback(err);
        if (!(self._refs[ref] || self._schemas[ref])) ***REMOVED***
          try ***REMOVED***
            self.addSchema(sch, ref);
          ***REMOVED*** catch(e) ***REMOVED***
            callback(e);
            return;
          ***REMOVED***
        ***REMOVED***
        _compileAsync(schema, callback);
      ***REMOVED***
    ***REMOVED***

    function deferCallback(err, validate) ***REMOVED***
      if (firstCall) setTimeout(function() ***REMOVED*** callback(err, validate); ***REMOVED***);
      else return callback(err, validate);
    ***REMOVED***
  ***REMOVED***
***REMOVED***
