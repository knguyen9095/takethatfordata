"use strict";

module.exports = exports = install;

exports.usage = 'Attempts to install pre-built binary for module';

var fs = require('fs');
var path = require('path');
var zlib = require('zlib');
var log = require('npmlog');
var existsAsync = fs.exists || path.exists;
var versioning = require('./util/versioning.js');

var npgVersion = 'unknown';
try ***REMOVED***
    // Read own package.json to get the current node-pre-pyp version.
    var ownPackageJSON = fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8');
    npgVersion = JSON.parse(ownPackageJSON).version;
***REMOVED*** catch (e) ***REMOVED******REMOVED***

function download(uri,opts,callback) ***REMOVED***
    log.http('GET', uri);

    var req = null;

    // Try getting version info from the currently running npm.
    var envVersionInfo = process.env.npm_config_user_agent ||
        'node ' + process.version;

    var requestOpts = ***REMOVED***
        uri: uri.replace('+','%2B'),
        headers: ***REMOVED***
          'User-Agent': 'node-pre-gyp (v' + npgVersion + ', ' + envVersionInfo + ')'
        ***REMOVED***
    ***REMOVED***;

    if (opts.cafile) ***REMOVED***
        try ***REMOVED***
            requestOpts.ca = fs.readFileSync(opts.cafile);
        ***REMOVED*** catch (e) ***REMOVED***
            return callback(e);
        ***REMOVED***
    ***REMOVED*** else if (opts.ca) ***REMOVED***
        requestOpts.ca = opts.ca;
    ***REMOVED***

    var proxyUrl = opts.proxy ||
                    process.env.http_proxy ||
                    process.env.HTTP_PROXY ||
                    process.env.npm_config_proxy;
    if (proxyUrl) ***REMOVED***
      if (/^https?:\/\//i.test(proxyUrl)) ***REMOVED***
        log.verbose('download', 'using proxy url: "%s"', proxyUrl);
        requestOpts.proxy = proxyUrl;
      ***REMOVED*** else ***REMOVED***
        log.warn('download', 'ignoring invalid "proxy" config setting: "%s"', proxyUrl);
      ***REMOVED***
    ***REMOVED***
    try ***REMOVED***
        req = require('request')(requestOpts);
    ***REMOVED*** catch (e) ***REMOVED***
        return callback(e);
    ***REMOVED***
    if (req) ***REMOVED***
      req.on('response', function (res) ***REMOVED***
        log.http(res.statusCode, uri);
      ***REMOVED***);
    ***REMOVED***
    return callback(null,req);
***REMOVED***

function place_binary(from,to,opts,callback) ***REMOVED***
    download(from,opts,function(err,req) ***REMOVED***
        if (err) return callback(err);
        if (!req) return callback(new Error("empty req"));
        var badDownload = false;
        var extractCount = 0;
        var gunzip = zlib.createGunzip();
        var extracter = require('tar').Extract(***REMOVED*** path: to, strip: 1***REMOVED***);

        function afterTarball(err) ***REMOVED***
            if (err) return callback(err);
            if (badDownload) return callback(new Error("bad download"));
            if (extractCount === 0) ***REMOVED***
                return callback(new Error('There was a fatal problem while downloading/extracting the tarball'));
            ***REMOVED***
            log.info('tarball', 'done parsing tarball');
            callback();
        ***REMOVED***

        function filter_func(entry) ***REMOVED***
            // ensure directories are +x
            // https://github.com/mapnik/node-mapnik/issues/262
            entry.props.mode |= (entry.props.mode >>> 2) & parseInt('0111',8);
            log.info('install','unpacking ' + entry.path);
            extractCount++;
        ***REMOVED***

        gunzip.on('error', callback);
        extracter.on('entry', filter_func);
        extracter.on('error', callback);
        extracter.on('end', afterTarball);

        req.on('error', function(err) ***REMOVED***
            badDownload = true;
            return callback(err);
        ***REMOVED***);

        req.on('close', function () ***REMOVED***
            if (extractCount === 0) ***REMOVED***
                return callback(new Error('Connection closed while downloading tarball file'));
            ***REMOVED***
        ***REMOVED***);

        req.on('response', function(res) ***REMOVED***
            if (res.statusCode !== 200) ***REMOVED***
                badDownload = true;
                var err = new Error(res.statusCode + ' status code downloading tarball ' + from);
                err.statusCode = res.statusCode;
                return callback(err);
            ***REMOVED***
            // start unzipping and untaring
            req.pipe(gunzip).pipe(extracter);
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***

function do_build(gyp,argv,callback) ***REMOVED***
  gyp.todo.push( ***REMOVED*** name: 'build', args: ['rebuild'] ***REMOVED*** );
  process.nextTick(callback);
***REMOVED***

function print_fallback_error(err,opts,package_json) ***REMOVED***
    var fallback_message = ' (falling back to source compile with node-gyp)';
    var full_message = "Pre-built binaries not found for " + package_json.name + "@" + package_json.version;
    full_message += " and " + opts.runtime + "@" + (opts.target || process.versions.node) + " (" + opts.node_abi + " ABI, " + opts.libc + ")";
    full_message += fallback_message;
    log.error("Tried to download(" + err.statusCode + "): " + opts.hosted_tarball);
    log.error(full_message);
    log.http(err.message);
***REMOVED***

function install(gyp, argv, callback) ***REMOVED***
    var package_json = JSON.parse(fs.readFileSync('./package.json'));
    var source_build = gyp.opts['build-from-source'] || gyp.opts.build_from_source;
    var update_binary = gyp.opts['update-binary'] || gyp.opts.update_binary;
    var should_do_source_build = source_build === package_json.name || (source_build === true || source_build === 'true');
    if (should_do_source_build) ***REMOVED***
        log.info('build','requesting source compile');
        return do_build(gyp,argv,callback);
    ***REMOVED*** else ***REMOVED***
        var fallback_to_build = gyp.opts['fallback-to-build'] || gyp.opts.fallback_to_build;
        var should_do_fallback_build = fallback_to_build === package_json.name || (fallback_to_build === true || fallback_to_build === 'true');
        // but allow override from npm
        if (process.env.npm_config_argv) ***REMOVED***
            var cooked = JSON.parse(process.env.npm_config_argv).cooked;
            var match = cooked.indexOf("--fallback-to-build");
            if (match > -1 && cooked.length > match && cooked[match+1] == "false") ***REMOVED***
                should_do_fallback_build = false;
                log.info('install','Build fallback disabled via npm flag: --fallback-to-build=false');
            ***REMOVED***
        ***REMOVED***
        var opts;
        try ***REMOVED***
            opts = versioning.evaluate(package_json, gyp.opts);
        ***REMOVED*** catch (err) ***REMOVED***
            return callback(err);
        ***REMOVED***

        opts.ca = gyp.opts.ca;
        opts.cafile = gyp.opts.cafile;

        var from = opts.hosted_tarball;
        var to = opts.module_path;
        var binary_module = path.join(to,opts.module_name + '.node');
        if (existsAsync(binary_module,function(found) ***REMOVED***
            if (found && !update_binary) ***REMOVED***
                console.log('['+package_json.name+'] Success: "' + binary_module + '" already installed');
                console.log('Pass --update-binary to reinstall or --build-from-source to recompile');
                return callback();
            ***REMOVED*** else ***REMOVED***
                if (!update_binary) log.info('check','checked for "' + binary_module + '" (not found)');
                place_binary(from,to,opts,function(err) ***REMOVED***
                    if (err && should_do_fallback_build) ***REMOVED***
                        print_fallback_error(err,opts,package_json);
                        return do_build(gyp,argv,callback);
                    ***REMOVED*** else if (err) ***REMOVED***
                        return callback(err);
                    ***REMOVED*** else ***REMOVED***
                        console.log('['+package_json.name+'] Success: "' + binary_module + '" is installed via remote');
                        return callback();
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***));
    ***REMOVED***
***REMOVED***
