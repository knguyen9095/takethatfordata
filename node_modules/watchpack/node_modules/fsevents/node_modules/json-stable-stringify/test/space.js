var test = require('tape');
var stringify = require('../');

test('space parameter', function (t) ***REMOVED***
    t.plan(1);
    var obj = ***REMOVED*** one: 1, two: 2 ***REMOVED***;
    t.equal(stringify(obj, ***REMOVED***space: '  '***REMOVED***), ''
        + '***REMOVED***\n'
        + '  "one": 1,\n'
        + '  "two": 2\n'
        + '***REMOVED***'
    );
***REMOVED***);

test('space parameter (with tabs)', function (t) ***REMOVED***
    t.plan(1);
    var obj = ***REMOVED*** one: 1, two: 2 ***REMOVED***;
    t.equal(stringify(obj, ***REMOVED***space: '\t'***REMOVED***), ''
        + '***REMOVED***\n'
        + '\t"one": 1,\n'
        + '\t"two": 2\n'
        + '***REMOVED***'
    );
***REMOVED***);

test('space parameter (with a number)', function (t) ***REMOVED***
    t.plan(1);
    var obj = ***REMOVED*** one: 1, two: 2 ***REMOVED***;
    t.equal(stringify(obj, ***REMOVED***space: 3***REMOVED***), ''
        + '***REMOVED***\n'
        + '   "one": 1,\n'
        + '   "two": 2\n'
        + '***REMOVED***'
    );
***REMOVED***);

test('space parameter (nested objects)', function (t) ***REMOVED***
    t.plan(1);
    var obj = ***REMOVED*** one: 1, two: ***REMOVED*** b: 4, a: [2,3] ***REMOVED*** ***REMOVED***;
    t.equal(stringify(obj, ***REMOVED***space: '  '***REMOVED***), ''
        + '***REMOVED***\n'
        + '  "one": 1,\n'
        + '  "two": ***REMOVED***\n'
        + '    "a": [\n'
        + '      2,\n'
        + '      3\n'
        + '    ],\n'
        + '    "b": 4\n'
        + '  ***REMOVED***\n'
        + '***REMOVED***'
    );
***REMOVED***);

test('space parameter (same as native)', function (t) ***REMOVED***
    t.plan(1);
    // for this test, properties need to be in alphabetical order
    var obj = ***REMOVED*** one: 1, two: ***REMOVED*** a: [2,3], b: 4 ***REMOVED*** ***REMOVED***;
    t.equal(stringify(obj, ***REMOVED***space: '  '***REMOVED***), JSON.stringify(obj, null, '  '));
***REMOVED***);
