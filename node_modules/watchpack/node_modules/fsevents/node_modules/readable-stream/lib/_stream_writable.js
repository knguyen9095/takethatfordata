// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = ***REMOVED***
  deprecate: require('util-deprecate')
***REMOVED***;
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() ***REMOVED******REMOVED***

function WriteReq(chunk, encoding, cb) ***REMOVED***
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
***REMOVED***

function WritableState(options, stream) ***REMOVED***
  Duplex = Duplex || require('./_stream_duplex');

  options = options || ***REMOVED******REMOVED***;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) ***REMOVED***
    onwrite(stream, er);
  ***REMOVED***;

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
***REMOVED***

WritableState.prototype.getBuffer = function getBuffer() ***REMOVED***
  var current = this.bufferedRequest;
  var out = [];
  while (current) ***REMOVED***
    out.push(current);
    current = current.next;
  ***REMOVED***
  return out;
***REMOVED***;

(function () ***REMOVED***
  try ***REMOVED***
    Object.defineProperty(WritableState.prototype, 'buffer', ***REMOVED***
      get: internalUtil.deprecate(function () ***REMOVED***
        return this.getBuffer();
      ***REMOVED***, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    ***REMOVED***);
  ***REMOVED*** catch (_) ***REMOVED******REMOVED***
***REMOVED***)();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') ***REMOVED***
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, ***REMOVED***
    value: function (object) ***REMOVED***
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    ***REMOVED***
  ***REMOVED***);
***REMOVED*** else ***REMOVED***
  realHasInstance = function (object) ***REMOVED***
    return object instanceof this;
  ***REMOVED***;
***REMOVED***

function Writable(options) ***REMOVED***
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) ***REMOVED***
    return new Writable(options);
  ***REMOVED***

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) ***REMOVED***
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  ***REMOVED***

  Stream.call(this);
***REMOVED***

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () ***REMOVED***
  this.emit('error', new Error('Cannot pipe, not readable'));
***REMOVED***;

function writeAfterEnd(stream, cb) ***REMOVED***
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
***REMOVED***

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) ***REMOVED***
  var valid = true;
  var er = false;

  if (chunk === null) ***REMOVED***
    er = new TypeError('May not write null values to stream');
  ***REMOVED*** else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) ***REMOVED***
    er = new TypeError('Invalid non-string/buffer chunk');
  ***REMOVED***
  if (er) ***REMOVED***
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  ***REMOVED***
  return valid;
***REMOVED***

Writable.prototype.write = function (chunk, encoding, cb) ***REMOVED***
  var state = this._writableState;
  var ret = false;
  var isBuf = Buffer.isBuffer(chunk);

  if (typeof encoding === 'function') ***REMOVED***
    cb = encoding;
    encoding = null;
  ***REMOVED***

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) ***REMOVED***
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  ***REMOVED***

  return ret;
***REMOVED***;

Writable.prototype.cork = function () ***REMOVED***
  var state = this._writableState;

  state.corked++;
***REMOVED***;

Writable.prototype.uncork = function () ***REMOVED***
  var state = this._writableState;

  if (state.corked) ***REMOVED***
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  ***REMOVED***
***REMOVED***;

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) ***REMOVED***
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
***REMOVED***;

function decodeChunk(state, chunk, encoding) ***REMOVED***
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') ***REMOVED***
    chunk = bufferShim.from(chunk, encoding);
  ***REMOVED***
  return chunk;
***REMOVED***

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) ***REMOVED***
  if (!isBuf) ***REMOVED***
    chunk = decodeChunk(state, chunk, encoding);
    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  ***REMOVED***
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) ***REMOVED***
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) ***REMOVED***
      last.next = state.lastBufferedRequest;
    ***REMOVED*** else ***REMOVED***
      state.bufferedRequest = state.lastBufferedRequest;
    ***REMOVED***
    state.bufferedRequestCount += 1;
  ***REMOVED*** else ***REMOVED***
    doWrite(stream, state, false, len, chunk, encoding, cb);
  ***REMOVED***

  return ret;
***REMOVED***

function doWrite(stream, state, writev, len, chunk, encoding, cb) ***REMOVED***
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
***REMOVED***

function onwriteError(stream, state, sync, er, cb) ***REMOVED***
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
***REMOVED***

function onwriteStateUpdate(state) ***REMOVED***
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
***REMOVED***

function onwrite(stream, er) ***REMOVED***
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else ***REMOVED***
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) ***REMOVED***
      clearBuffer(stream, state);
    ***REMOVED***

    if (sync) ***REMOVED***
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    ***REMOVED*** else ***REMOVED***
      afterWrite(stream, state, finished, cb);
    ***REMOVED***
  ***REMOVED***
***REMOVED***

function afterWrite(stream, state, finished, cb) ***REMOVED***
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
***REMOVED***

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) ***REMOVED***
  if (state.length === 0 && state.needDrain) ***REMOVED***
    state.needDrain = false;
    stream.emit('drain');
  ***REMOVED***
***REMOVED***

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) ***REMOVED***
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) ***REMOVED***
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) ***REMOVED***
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    ***REMOVED***

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) ***REMOVED***
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    ***REMOVED*** else ***REMOVED***
      state.corkedRequestsFree = new CorkedRequest(state);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    // Slow case, write chunks one-by-one
    while (entry) ***REMOVED***
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) ***REMOVED***
        break;
      ***REMOVED***
    ***REMOVED***

    if (entry === null) state.lastBufferedRequest = null;
  ***REMOVED***

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
***REMOVED***

Writable.prototype._write = function (chunk, encoding, cb) ***REMOVED***
  cb(new Error('_write() is not implemented'));
***REMOVED***;

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) ***REMOVED***
  var state = this._writableState;

  if (typeof chunk === 'function') ***REMOVED***
    cb = chunk;
    chunk = null;
    encoding = null;
  ***REMOVED*** else if (typeof encoding === 'function') ***REMOVED***
    cb = encoding;
    encoding = null;
  ***REMOVED***

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) ***REMOVED***
    state.corked = 1;
    this.uncork();
  ***REMOVED***

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
***REMOVED***;

function needFinish(state) ***REMOVED***
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
***REMOVED***

function prefinish(stream, state) ***REMOVED***
  if (!state.prefinished) ***REMOVED***
    state.prefinished = true;
    stream.emit('prefinish');
  ***REMOVED***
***REMOVED***

function finishMaybe(stream, state) ***REMOVED***
  var need = needFinish(state);
  if (need) ***REMOVED***
    if (state.pendingcb === 0) ***REMOVED***
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    ***REMOVED*** else ***REMOVED***
      prefinish(stream, state);
    ***REMOVED***
  ***REMOVED***
  return need;
***REMOVED***

function endWritable(stream, state, cb) ***REMOVED***
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) ***REMOVED***
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  ***REMOVED***
  state.ended = true;
  stream.writable = false;
***REMOVED***

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) ***REMOVED***
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function (err) ***REMOVED***
    var entry = _this.entry;
    _this.entry = null;
    while (entry) ***REMOVED***
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    ***REMOVED***
    if (state.corkedRequestsFree) ***REMOVED***
      state.corkedRequestsFree.next = _this;
    ***REMOVED*** else ***REMOVED***
      state.corkedRequestsFree = _this;
    ***REMOVED***
  ***REMOVED***;
***REMOVED***