// Load modules

var Code = require('code');
var Hawk = require('../lib');
var Lab = require('lab');
var Package = require('../package.json');


// Declare internals

var internals = ***REMOVED******REMOVED***;


// Test shortcuts

var lab = exports.lab = Lab.script();
var describe = lab.experiment;
var it = lab.test;
var expect = Code.expect;


describe('Utils', function () ***REMOVED***

    describe('parseHost()', function () ***REMOVED***

        it('returns port 80 for non tls node request', function (done) ***REMOVED***

            var req = ***REMOVED***
                method: 'POST',
                url: '/resource/4?filter=a',
                headers: ***REMOVED***
                    host: 'example.com',
                    'content-type': 'text/plain;x=y'
                ***REMOVED***
            ***REMOVED***;

            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(80);
            done();
        ***REMOVED***);

        it('returns port 443 for non tls node request', function (done) ***REMOVED***

            var req = ***REMOVED***
                method: 'POST',
                url: '/resource/4?filter=a',
                headers: ***REMOVED***
                    host: 'example.com',
                    'content-type': 'text/plain;x=y'
                ***REMOVED***,
                connection: ***REMOVED***
                    encrypted: true
                ***REMOVED***
            ***REMOVED***;

            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(443);
            done();
        ***REMOVED***);

        it('returns port 443 for non tls node request (IPv6)', function (done) ***REMOVED***

            var req = ***REMOVED***
                method: 'POST',
                url: '/resource/4?filter=a',
                headers: ***REMOVED***
                    host: '[123:123:123]',
                    'content-type': 'text/plain;x=y'
                ***REMOVED***,
                connection: ***REMOVED***
                    encrypted: true
                ***REMOVED***
            ***REMOVED***;

            expect(Hawk.utils.parseHost(req, 'Host').port).to.equal(443);
            done();
        ***REMOVED***);

        it('parses IPv6 headers', function (done) ***REMOVED***

            var req = ***REMOVED***
                method: 'POST',
                url: '/resource/4?filter=a',
                headers: ***REMOVED***
                    host: '[123:123:123]:8000',
                    'content-type': 'text/plain;x=y'
                ***REMOVED***,
                connection: ***REMOVED***
                    encrypted: true
                ***REMOVED***
            ***REMOVED***;

            var host = Hawk.utils.parseHost(req, 'Host');
            expect(host.port).to.equal('8000');
            expect(host.name).to.equal('[123:123:123]');
            done();
        ***REMOVED***);

        it('errors on header too long', function (done) ***REMOVED***

            var long = '';
            for (var i = 0; i < 5000; ++i) ***REMOVED***
                long += 'x';
            ***REMOVED***

            expect(Hawk.utils.parseHost(***REMOVED*** headers: ***REMOVED*** host: long ***REMOVED*** ***REMOVED***)).to.be.null();
            done();
        ***REMOVED***);
    ***REMOVED***);

    describe('parseAuthorizationHeader()', function () ***REMOVED***

        it('errors on header too long', function (done) ***REMOVED***

            var long = 'Scheme a="';
            for (var i = 0; i < 5000; ++i) ***REMOVED***
                long += 'x';
            ***REMOVED***
            long += '"';

            var err = Hawk.utils.parseAuthorizationHeader(long, ['a']);
            expect(err).to.be.instanceof(Error);
            expect(err.message).to.equal('Header length too long');
            done();
        ***REMOVED***);
    ***REMOVED***);

    describe('version()', function () ***REMOVED***

        it('returns the correct package version number', function (done) ***REMOVED***

            expect(Hawk.utils.version()).to.equal(Package.version);
            done();
        ***REMOVED***);
    ***REMOVED***);

    describe('unauthorized()', function () ***REMOVED***

        it('returns a hawk 401', function (done) ***REMOVED***

            expect(Hawk.utils.unauthorized('kaboom').output.headers['WWW-Authenticate']).to.equal('Hawk error="kaboom"');
            done();
        ***REMOVED***);

        it('supports attributes', function (done) ***REMOVED***

            expect(Hawk.utils.unauthorized('kaboom', ***REMOVED*** a: 'b' ***REMOVED***).output.headers['WWW-Authenticate']).to.equal('Hawk a="b", error="kaboom"');
            done();
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***);
