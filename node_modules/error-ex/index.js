'use strict';

var util = require('util');
var isArrayish = require('is-arrayish');

var errorEx = function errorEx(name, properties) ***REMOVED***
	if (!name || name.constructor !== String) ***REMOVED***
		properties = name || ***REMOVED******REMOVED***;
		name = Error.name;
	***REMOVED***

	var errorExError = function ErrorEXError(message) ***REMOVED***
		if (!this) ***REMOVED***
			return new ErrorEXError(message);
		***REMOVED***

		message = message instanceof Error
			? message.message
			: (message || this.message);

		Error.call(this, message);
		Error.captureStackTrace(this, errorExError);

		this.name = name;

		Object.defineProperty(this, 'message', ***REMOVED***
			configurable: true,
			enumerable: false,
			get: function () ***REMOVED***
				var newMessage = message.split(/\r?\n/g);

				for (var key in properties) ***REMOVED***
					if (!properties.hasOwnProperty(key)) ***REMOVED***
						continue;
					***REMOVED***

					var modifier = properties[key];

					if ('message' in modifier) ***REMOVED***
						newMessage = modifier.message(this[key], newMessage) || newMessage;
						if (!isArrayish(newMessage)) ***REMOVED***
							newMessage = [newMessage];
						***REMOVED***
					***REMOVED***
				***REMOVED***

				return newMessage.join('\n');
			***REMOVED***,
			set: function (v) ***REMOVED***
				message = v;
			***REMOVED***
		***REMOVED***);

		var stackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');
		var stackGetter = stackDescriptor.get;
		var stackValue = stackDescriptor.value;
		delete stackDescriptor.value;
		delete stackDescriptor.writable;

		stackDescriptor.get = function () ***REMOVED***
			var stack = (stackGetter)
				? stackGetter.call(this).split(/\r?\n+/g)
				: stackValue.split(/\r?\n+/g);

			// starting in Node 7, the stack builder caches the message.
			// just replace it.
			stack[0] = this.name + ': ' + this.message;

			var lineCount = 1;
			for (var key in properties) ***REMOVED***
				if (!properties.hasOwnProperty(key)) ***REMOVED***
					continue;
				***REMOVED***

				var modifier = properties[key];

				if ('line' in modifier) ***REMOVED***
					var line = modifier.line(this[key]);
					if (line) ***REMOVED***
						stack.splice(lineCount++, 0, '    ' + line);
					***REMOVED***
				***REMOVED***

				if ('stack' in modifier) ***REMOVED***
					modifier.stack(this[key], stack);
				***REMOVED***
			***REMOVED***

			return stack.join('\n');
		***REMOVED***;

		Object.defineProperty(this, 'stack', stackDescriptor);
	***REMOVED***;

	if (Object.setPrototypeOf) ***REMOVED***
		Object.setPrototypeOf(errorExError.prototype, Error.prototype);
		Object.setPrototypeOf(errorExError, Error);
	***REMOVED*** else ***REMOVED***
		util.inherits(errorExError, Error);
	***REMOVED***

	return errorExError;
***REMOVED***;

errorEx.append = function (str, def) ***REMOVED***
	return ***REMOVED***
		message: function (v, message) ***REMOVED***
			v = v || def;

			if (v) ***REMOVED***
				message[0] += ' ' + str.replace('%s', v.toString());
			***REMOVED***

			return message;
		***REMOVED***
	***REMOVED***;
***REMOVED***;

errorEx.line = function (str, def) ***REMOVED***
	return ***REMOVED***
		line: function (v) ***REMOVED***
			v = v || def;

			if (v) ***REMOVED***
				return str.replace('%s', v.toString());
			***REMOVED***

			return null;
		***REMOVED***
	***REMOVED***;
***REMOVED***;

module.exports = errorEx;
