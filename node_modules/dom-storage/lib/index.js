// http://www.rajdeepd.com/articles/chrome/localstrg/LocalStorageSample.htm

// NOTE:
// this varies from actual localStorage in some subtle ways

// also, there is no persistence
// TODO persist
(function () ***REMOVED***
  "use strict";

  var fs = require('fs')
    ;

  function Storage(path, opts) ***REMOVED***
    opts = opts || ***REMOVED******REMOVED***;
    var db
      ;

    Object.defineProperty(this, '___priv_bk___', ***REMOVED***
      value: ***REMOVED***
        path: path
      ***REMOVED***
    , writable: false
    , enumerable: false
    ***REMOVED***);

    Object.defineProperty(this, '___priv_strict___', ***REMOVED***
      value: !!opts.strict
    , writable: false
    , enumerable: false
    ***REMOVED***);

    Object.defineProperty(this, '___priv_ws___', ***REMOVED***
      value: opts.ws || '  '
    , writable: false
    , enumerable: false
    ***REMOVED***);

    try ***REMOVED***
      db = JSON.parse(fs.readFileSync(path));
    ***REMOVED*** catch(e) ***REMOVED***
      db = ***REMOVED******REMOVED***;
    ***REMOVED***

    Object.keys(db).forEach(function (key) ***REMOVED***
      this[key] = db[key];
    ***REMOVED***, this);
  ***REMOVED***

  Storage.prototype.getItem = function (key) ***REMOVED***
    if (this.hasOwnProperty(key)) ***REMOVED***
      if (this.___priv_strict___) ***REMOVED***
        return String(this[key]);
      ***REMOVED*** else ***REMOVED***
        return this[key];
      ***REMOVED***
    ***REMOVED***
    return null;
  ***REMOVED***;

  Storage.prototype.setItem = function (key, val) ***REMOVED***
    if (val === undefined) ***REMOVED***
      this[key] = null;
    ***REMOVED*** else if (this.___priv_strict___) ***REMOVED***
      this[key] = String(val);
    ***REMOVED*** else ***REMOVED***
      this[key] = val;
    ***REMOVED***
    this.___save___();
  ***REMOVED***;

  Storage.prototype.removeItem = function (key) ***REMOVED***
    delete this[key];
    this.___save___();
  ***REMOVED***;

  Storage.prototype.clear = function () ***REMOVED***
    var self = this;
    // filters out prototype keys
    Object.keys(self).forEach(function (key) ***REMOVED***
      self[key] = undefined;
      delete self[key];
    ***REMOVED***);
  ***REMOVED***;

  Storage.prototype.key = function (i) ***REMOVED***
    i = i || 0;
    return Object.keys(this)[i];
  ***REMOVED***;

  Storage.prototype.__defineGetter__('length', function () ***REMOVED***
    return Object.keys(this).length;
  ***REMOVED***);

  Storage.prototype.___save___ = function () ***REMOVED***
    var self = this
      ;

    if (!this.___priv_bk___.path) ***REMOVED***
      return;
    ***REMOVED***

    if (this.___priv_bk___.lock) ***REMOVED***
      this.___priv_bk___.wait = true;
      return;
    ***REMOVED***

    this.___priv_bk___.lock = true;
    fs.writeFile(
      this.___priv_bk___.path
    , JSON.stringify(this, null, this.___priv_ws___)
    , 'utf8'
    , function (e) ***REMOVED***
      self.___priv_bk___.lock = false;
      if (e) ***REMOVED***
        return;
      ***REMOVED***
      if (self.___priv_bk___.wait) ***REMOVED***
        self.___priv_bk___.wait = false;
        self.___save___();
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***;

  Object.defineProperty(Storage, 'create', ***REMOVED***
    value: function (path, opts) ***REMOVED***
      return new Storage(path, opts);
    ***REMOVED***
  , writable: false
  , enumerable: false
  ***REMOVED***);

  module.exports = Storage;
***REMOVED***());
