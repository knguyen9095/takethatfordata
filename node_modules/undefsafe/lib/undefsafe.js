'use strict';

function undefsafe(obj, path, value, __res) ***REMOVED***

  // I'm not super keen on this private function, but it's because
  // it'll also be use in the browser and I wont *one* function exposed
  function split(path) ***REMOVED***
    var res = [];
    var level = 0;
    var key = '';

    for (var i = 0; i < path.length; i++) ***REMOVED***
      var c = path.substr(i, 1);

      if (level === 0 && (c === '.' || c === '[')) ***REMOVED***
        if (c === '[') ***REMOVED***
          level++;
          i++;
          c = path.substr(i, 1);
        ***REMOVED***

        if (key) ***REMOVED*** // the first value could be a string
          res.push(key);
        ***REMOVED***
        key = '';
        continue;
      ***REMOVED***

      if (c === ']') ***REMOVED***
        level--;
        key = key.slice(0, -1);
        continue;
      ***REMOVED***

      key += c;
    ***REMOVED***

    res.push(key);

    return res;
  ***REMOVED***

  // bail if there's nothing
  if (obj === undefined || obj === null) ***REMOVED***
    return undefined;
  ***REMOVED***

  var parts = split(path);
  var key = null;
  var type = typeof obj;
  var root = obj;
  var parent = obj;

  var star = parts.filter(function (_) ***REMOVED*** return _ === '*' ***REMOVED***).length > 0;

  // we're dealing with a primative
  if (type !== 'object' && type !== 'function') ***REMOVED***
    return obj;
  ***REMOVED*** else if (path.trim() === '') ***REMOVED***
    return obj;
  ***REMOVED***

  key = parts[0];
  var i = 0;
  for (; i < parts.length; i++) ***REMOVED***
    key = parts[i];
    parent = obj;

    if (key === '*') ***REMOVED***
      // loop through each property
      var prop = '';
      var res = __res || [];

      for (prop in parent) ***REMOVED***
        var shallowObj = undefsafe(obj[prop], parts.slice(i + 1).join('.'), value, res);
        if (shallowObj && shallowObj !== res) ***REMOVED***
          if ((value && shallowObj === value) || (value === undefined)) ***REMOVED***
            if (value !== undefined) ***REMOVED***
              return shallowObj;
            ***REMOVED***

            res.push(shallowObj);
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

      if (res.length === 0) ***REMOVED***
        return undefined;
      ***REMOVED***

      return res;
    ***REMOVED***

    obj = obj[key];
    if (obj === undefined || obj === null) ***REMOVED***
      break;
    ***REMOVED***
  ***REMOVED***

  // if we have a null object, make sure it's the one the user was after,
  // if it's not (i.e. parts has a length) then give undefined back.
  if (obj === null && i !== parts.length - 1) ***REMOVED***
    obj = undefined;
  ***REMOVED*** else if (!star && value) ***REMOVED***
    key = path.split('.').pop();
    parent[key] = value;
  ***REMOVED***
  return obj;
***REMOVED***

if (typeof module !== 'undefined') ***REMOVED***
  module.exports = undefsafe;
***REMOVED***
