'use strict';
const fs = require('fs');
const path = require('path');
const glob = require('glob');
const gitIgnore = require('ignore');
const pify = require('pify');
const slash = require('slash');

const globP = pify(glob);
const readFileP = pify(fs.readFile);

const mapGitIgnorePatternTo = base => ignore => ***REMOVED***
	if (ignore.startsWith('!')) ***REMOVED***
		return '!' + path.posix.join(base, ignore.substr(1));
	***REMOVED***

	return path.posix.join(base, ignore);
***REMOVED***;

const parseGitIgnore = (content, opts) => ***REMOVED***
	const base = slash(path.relative(opts.cwd, path.dirname(opts.fileName)));

	return content
		.split(/\r?\n/)
		.filter(Boolean)
		.filter(l => l.charAt(0) !== '#')
		.map(mapGitIgnorePatternTo(base));
***REMOVED***;

const reduceIgnore = files => ***REMOVED***
	return files.reduce((ignores, file) => ***REMOVED***
		ignores.add(parseGitIgnore(file.content, ***REMOVED***
			cwd: file.cwd,
			fileName: file.filePath
		***REMOVED***));
		return ignores;
	***REMOVED***, gitIgnore());
***REMOVED***;

const getIsIgnoredPredecate = (ignores, cwd) => ***REMOVED***
	return p => ignores.ignores(slash(path.relative(cwd, p)));
***REMOVED***;

const getFile = (file, cwd) => ***REMOVED***
	const filePath = path.join(cwd, file);
	return readFileP(filePath, 'utf8')
		.then(content => (***REMOVED***
			content,
			cwd,
			filePath
		***REMOVED***));
***REMOVED***;

const getFileSync = (file, cwd) => ***REMOVED***
	const filePath = path.join(cwd, file);
	const content = fs.readFileSync(filePath, 'utf8');

	return ***REMOVED***
		content,
		cwd,
		filePath
	***REMOVED***;
***REMOVED***;

const normalizeOpts = opts => ***REMOVED***
	opts = opts || ***REMOVED******REMOVED***;
	const ignore = opts.ignore || [];
	const cwd = opts.cwd || process.cwd();
	return ***REMOVED***ignore, cwd***REMOVED***;
***REMOVED***;

module.exports = o => ***REMOVED***
	const opts = normalizeOpts(o);

	return globP('**/.gitignore', ***REMOVED***ignore: opts.ignore, cwd: opts.cwd***REMOVED***)
		.then(paths => Promise.all(paths.map(file => getFile(file, opts.cwd))))
		.then(files => reduceIgnore(files))
		.then(ignores => getIsIgnoredPredecate(ignores, opts.cwd));
***REMOVED***;

module.exports.sync = o => ***REMOVED***
	const opts = normalizeOpts(o);

	const paths = glob.sync('**/.gitignore', ***REMOVED***ignore: opts.ignore, cwd: opts.cwd***REMOVED***);
	const files = paths.map(file => getFileSync(file, opts.cwd));
	const ignores = reduceIgnore(files);
	return getIsIgnoredPredecate(ignores, opts.cwd);
***REMOVED***;
