'use strict';

var isArray = require('core-js/library/fn/array/is-array');
var objectKeys = require('core-js/library/fn/object/keys');
var indexOf = require('core-js/library/fn/array/index-of');
var reduce = require('core-js/library/fn/array/reduce');

module.exports = function cloneWithWhitelist (astWhiteList) ***REMOVED***
    var whitelist = reduce(objectKeys(astWhiteList), function (props, key) ***REMOVED***
        var propNames = astWhiteList[key];
        var prepend = (indexOf(propNames, 'type') === -1) ? ['type'] : [];
        props[key] = prepend.concat(propNames);
        return props;
    ***REMOVED***, ***REMOVED******REMOVED***);

    function cloneNodeOrObject (obj) ***REMOVED***
        var props = obj.type ? whitelist[obj.type] : null;
        if (props) ***REMOVED***
            return cloneNode(obj, props);
        ***REMOVED*** else ***REMOVED***
            return cloneObject(obj);
        ***REMOVED***
    ***REMOVED***

    function cloneArray (ary) ***REMOVED***
        var i = ary.length, clone = [];
        while (i--) ***REMOVED***
            clone[i] = cloneOf(ary[i]);
        ***REMOVED***
        return clone;
    ***REMOVED***

    function cloneNode (node, props) ***REMOVED***
        var i, len, key, clone = ***REMOVED******REMOVED***;
        for (i = 0, len = props.length; i < len; i += 1) ***REMOVED***
            key = props[i];
            if (node.hasOwnProperty(key)) ***REMOVED***
                clone[key] = cloneOf(node[key]);
            ***REMOVED***
        ***REMOVED***
        return clone;
    ***REMOVED***

    function cloneObject (obj) ***REMOVED***
        var props = objectKeys(obj);
        var i, len, key, clone = ***REMOVED******REMOVED***;
        for (i = 0, len = props.length; i < len; i += 1) ***REMOVED***
            key = props[i];
            clone[key] = cloneOf(obj[key]);
        ***REMOVED***
        return clone;
    ***REMOVED***

    function cloneOf (val) ***REMOVED***
        if (typeof val === 'object' && val !== null) ***REMOVED***
            if (val instanceof RegExp) ***REMOVED***
                return new RegExp(val);
            ***REMOVED*** else if (isArray(val)) ***REMOVED***
                return cloneArray(val);
            ***REMOVED*** else ***REMOVED***
                return cloneNodeOrObject(val);
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            return val;
        ***REMOVED***
    ***REMOVED***

    return cloneNodeOrObject;
***REMOVED***;
