'use strict';

var parser = require('acorn');
require('acorn-es7-plugin')(parser);
var estraverse = require('estraverse');
var purifyAst = require('espurify').customize(***REMOVED***extra: ['range']***REMOVED***);
var assign = require('core-js/library/fn/object/assign');

module.exports = function (powerAssertContext) ***REMOVED***
    var source = powerAssertContext.source;
    if (source.ast && source.tokens && source.visitorKeys) ***REMOVED***
        return powerAssertContext;
    ***REMOVED***
    var astAndTokens;
    try ***REMOVED***
        astAndTokens = parse(source);
    ***REMOVED*** catch (e) ***REMOVED***
        return assign(***REMOVED******REMOVED***, powerAssertContext, ***REMOVED*** source: assign(***REMOVED******REMOVED***, source, ***REMOVED*** error: e ***REMOVED***) ***REMOVED***);
    ***REMOVED***
    var newSource = assign(***REMOVED******REMOVED***, source, ***REMOVED***
        ast: purifyAst(astAndTokens.expression),
        tokens: astAndTokens.tokens,
        visitorKeys: estraverse.VisitorKeys
    ***REMOVED***);
    return assign(***REMOVED******REMOVED***, powerAssertContext, ***REMOVED*** source: newSource ***REMOVED***);
***REMOVED***;

function parserOptions(tokens) ***REMOVED***
    return ***REMOVED***
        sourceType: 'module',
        ecmaVersion: 2017,
        locations: true,
        ranges: false,
        onToken: tokens,
        plugins: ***REMOVED***asyncawait: true***REMOVED***
    ***REMOVED***;
***REMOVED***

function parse (source) ***REMOVED***
    var code = source.content;
    var ast, tokens;

    function doParse(wrapper) ***REMOVED***
        var content = wrapper ? wrapper(code) : code;
        var tokenBag = [];
        ast = parser.parse(content, parserOptions(tokenBag));
        if (wrapper) ***REMOVED***
            ast = ast.body[0].body;
            tokens = tokenBag.slice(6, -2);
        ***REMOVED*** else ***REMOVED***
            tokens = tokenBag.slice(0, -1);
        ***REMOVED***
    ***REMOVED***

    if (source.async) ***REMOVED***
        doParse(wrappedInAsync);
    ***REMOVED*** else if (source.generator) ***REMOVED***
        doParse(wrappedInGenerator);
    ***REMOVED*** else ***REMOVED***
        doParse();
    ***REMOVED***

    var exp = ast.body[0].expression;
    var columnOffset = exp.loc.start.column;
    var offsetTree = estraverse.replace(exp, ***REMOVED***
        keys: estraverse.VisitorKeys,
        enter: function (eachNode) ***REMOVED***
            if (!eachNode.loc && eachNode.range) ***REMOVED***
                // skip already visited node
                return eachNode;
            ***REMOVED***
            eachNode.range = [
                eachNode.loc.start.column - columnOffset,
                eachNode.loc.end.column - columnOffset
            ];
            delete eachNode.loc;
            return eachNode;
        ***REMOVED***
    ***REMOVED***);

    return ***REMOVED***
        tokens: offsetAndSlimDownTokens(tokens),
        expression: offsetTree
    ***REMOVED***;
***REMOVED***

function wrappedInGenerator (jsCode) ***REMOVED***
    return 'function *wrapper() ***REMOVED*** ' + jsCode + ' ***REMOVED***';
***REMOVED***

function wrappedInAsync (jsCode) ***REMOVED***
    return 'async function wrapper() ***REMOVED*** ' + jsCode + ' ***REMOVED***';
***REMOVED***

function offsetAndSlimDownTokens (tokens) ***REMOVED***
    var i, token, newToken, result = [];
    var columnOffset;
    for(i = 0; i < tokens.length; i += 1) ***REMOVED***
        token = tokens[i];
        if (i === 0) ***REMOVED***
            columnOffset = token.loc.start.column;
        ***REMOVED***
        newToken = ***REMOVED***
            type: ***REMOVED***
                label: token.type.label
            ***REMOVED***
        ***REMOVED***;
        if (typeof token.value !== 'undefined') ***REMOVED***
            newToken.value = token.value;
        ***REMOVED***
        newToken.range = [
            token.loc.start.column - columnOffset,
            token.loc.end.column - columnOffset
        ];
        result.push(newToken);
    ***REMOVED***
    return result;
***REMOVED***
