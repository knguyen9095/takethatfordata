'use strict';
// https://github.com/zenparsing/es-observable
var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;

var getMethod = function (fn) ***REMOVED***
  return fn == null ? undefined : aFunction(fn);
***REMOVED***;

var cleanupSubscription = function (subscription) ***REMOVED***
  var cleanup = subscription._c;
  if (cleanup) ***REMOVED***
    subscription._c = undefined;
    cleanup();
  ***REMOVED***
***REMOVED***;

var subscriptionClosed = function (subscription) ***REMOVED***
  return subscription._o === undefined;
***REMOVED***;

var closeSubscription = function (subscription) ***REMOVED***
  if (!subscriptionClosed(subscription)) ***REMOVED***
    subscription._o = undefined;
    cleanupSubscription(subscription);
  ***REMOVED***
***REMOVED***;

var Subscription = function (observer, subscriber) ***REMOVED***
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try ***REMOVED***
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) ***REMOVED***
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () ***REMOVED*** subscription.unsubscribe(); ***REMOVED***;
      else aFunction(cleanup);
      this._c = cleanup;
    ***REMOVED***
  ***REMOVED*** catch (e) ***REMOVED***
    observer.error(e);
    return;
  ***REMOVED*** if (subscriptionClosed(this)) cleanupSubscription(this);
***REMOVED***;

Subscription.prototype = redefineAll(***REMOVED******REMOVED***, ***REMOVED***
  unsubscribe: function unsubscribe() ***REMOVED*** closeSubscription(this); ***REMOVED***
***REMOVED***);

var SubscriptionObserver = function (subscription) ***REMOVED***
  this._s = subscription;
***REMOVED***;

SubscriptionObserver.prototype = redefineAll(***REMOVED******REMOVED***, ***REMOVED***
  next: function next(value) ***REMOVED***
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) ***REMOVED***
      var observer = subscription._o;
      try ***REMOVED***
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      ***REMOVED*** catch (e) ***REMOVED***
        try ***REMOVED***
          closeSubscription(subscription);
        ***REMOVED*** finally ***REMOVED***
          throw e;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***,
  error: function error(value) ***REMOVED***
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try ***REMOVED***
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    ***REMOVED*** catch (e) ***REMOVED***
      try ***REMOVED***
        cleanupSubscription(subscription);
      ***REMOVED*** finally ***REMOVED***
        throw e;
      ***REMOVED***
    ***REMOVED*** cleanupSubscription(subscription);
    return value;
  ***REMOVED***,
  complete: function complete(value) ***REMOVED***
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) ***REMOVED***
      var observer = subscription._o;
      subscription._o = undefined;
      try ***REMOVED***
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      ***REMOVED*** catch (e) ***REMOVED***
        try ***REMOVED***
          cleanupSubscription(subscription);
        ***REMOVED*** finally ***REMOVED***
          throw e;
        ***REMOVED***
      ***REMOVED*** cleanupSubscription(subscription);
      return value;
    ***REMOVED***
  ***REMOVED***
***REMOVED***);

var $Observable = function Observable(subscriber) ***REMOVED***
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
***REMOVED***;

redefineAll($Observable.prototype, ***REMOVED***
  subscribe: function subscribe(observer) ***REMOVED***
    return new Subscription(observer, this._f);
  ***REMOVED***,
  forEach: function forEach(fn) ***REMOVED***
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) ***REMOVED***
      aFunction(fn);
      var subscription = that.subscribe(***REMOVED***
        next: function (value) ***REMOVED***
          try ***REMOVED***
            return fn(value);
          ***REMOVED*** catch (e) ***REMOVED***
            reject(e);
            subscription.unsubscribe();
          ***REMOVED***
        ***REMOVED***,
        error: reject,
        complete: resolve
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***
***REMOVED***);

redefineAll($Observable, ***REMOVED***
  from: function from(x) ***REMOVED***
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) ***REMOVED***
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) ***REMOVED***
        return observable.subscribe(observer);
      ***REMOVED***);
    ***REMOVED***
    return new C(function (observer) ***REMOVED***
      var done = false;
      microtask(function () ***REMOVED***
        if (!done) ***REMOVED***
          try ***REMOVED***
            if (forOf(x, false, function (it) ***REMOVED***
              observer.next(it);
              if (done) return RETURN;
            ***REMOVED***) === RETURN) return;
          ***REMOVED*** catch (e) ***REMOVED***
            if (done) throw e;
            observer.error(e);
            return;
          ***REMOVED*** observer.complete();
        ***REMOVED***
      ***REMOVED***);
      return function () ***REMOVED*** done = true; ***REMOVED***;
    ***REMOVED***);
  ***REMOVED***,
  of: function of() ***REMOVED***
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) ***REMOVED***
      var done = false;
      microtask(function () ***REMOVED***
        if (!done) ***REMOVED***
          for (var j = 0; j < items.length; ++j) ***REMOVED***
            observer.next(items[j]);
            if (done) return;
          ***REMOVED*** observer.complete();
        ***REMOVED***
      ***REMOVED***);
      return function () ***REMOVED*** done = true; ***REMOVED***;
    ***REMOVED***);
  ***REMOVED***
***REMOVED***);

hide($Observable.prototype, OBSERVABLE, function () ***REMOVED*** return this; ***REMOVED***);

$export($export.G, ***REMOVED*** Observable: $Observable ***REMOVED***);

require('./_set-species')('Observable');
