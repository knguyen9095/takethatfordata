var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () ***REMOVED***
  return true;
***REMOVED***;
var FREEZE = !require('./_fails')(function () ***REMOVED***
  return isExtensible(Object.preventExtensions(***REMOVED******REMOVED***));
***REMOVED***);
var setMeta = function (it) ***REMOVED***
  setDesc(it, META, ***REMOVED*** value: ***REMOVED***
    i: 'O' + ++id, // object ID
    w: ***REMOVED******REMOVED***          // weak collections IDs
  ***REMOVED*** ***REMOVED***);
***REMOVED***;
var fastKey = function (it, create) ***REMOVED***
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) ***REMOVED***
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  ***REMOVED*** return it[META].i;
***REMOVED***;
var getWeak = function (it, create) ***REMOVED***
  if (!has(it, META)) ***REMOVED***
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  ***REMOVED*** return it[META].w;
***REMOVED***;
// add metadata on freeze-family methods calling
var onFreeze = function (it) ***REMOVED***
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
***REMOVED***;
var meta = module.exports = ***REMOVED***
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
***REMOVED***;
