var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) ***REMOVED***
  var targetMetadata = store.get(target);
  if (!targetMetadata) ***REMOVED***
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  ***REMOVED***
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) ***REMOVED***
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  ***REMOVED*** return keyMetadata;
***REMOVED***;
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) ***REMOVED***
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
***REMOVED***;
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) ***REMOVED***
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
***REMOVED***;
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) ***REMOVED***
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
***REMOVED***;
var ordinaryOwnMetadataKeys = function (target, targetKey) ***REMOVED***
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) ***REMOVED*** keys.push(key); ***REMOVED***);
  return keys;
***REMOVED***;
var toMetaKey = function (it) ***REMOVED***
  return it === undefined || typeof it == 'symbol' ? it : String(it);
***REMOVED***;
var exp = function (O) ***REMOVED***
  $export($export.S, 'Reflect', O);
***REMOVED***;

module.exports = ***REMOVED***
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
***REMOVED***;
