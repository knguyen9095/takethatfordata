'use strict';

const processFn = (fn, opts) => function () ***REMOVED***
	const P = opts.promiseModule;
	const args = new Array(arguments.length);

	for (let i = 0; i < arguments.length; i++) ***REMOVED***
		args[i] = arguments[i];
	***REMOVED***

	return new P((resolve, reject) => ***REMOVED***
		if (opts.errorFirst) ***REMOVED***
			args.push(function (err, result) ***REMOVED***
				if (opts.multiArgs) ***REMOVED***
					const results = new Array(arguments.length - 1);

					for (let i = 1; i < arguments.length; i++) ***REMOVED***
						results[i - 1] = arguments[i];
					***REMOVED***

					if (err) ***REMOVED***
						results.unshift(err);
						reject(results);
					***REMOVED*** else ***REMOVED***
						resolve(results);
					***REMOVED***
				***REMOVED*** else if (err) ***REMOVED***
					reject(err);
				***REMOVED*** else ***REMOVED***
					resolve(result);
				***REMOVED***
			***REMOVED***);
		***REMOVED*** else ***REMOVED***
			args.push(function (result) ***REMOVED***
				if (opts.multiArgs) ***REMOVED***
					const results = new Array(arguments.length - 1);

					for (let i = 0; i < arguments.length; i++) ***REMOVED***
						results[i] = arguments[i];
					***REMOVED***

					resolve(results);
				***REMOVED*** else ***REMOVED***
					resolve(result);
				***REMOVED***
			***REMOVED***);
		***REMOVED***

		fn.apply(this, args);
	***REMOVED***);
***REMOVED***;

module.exports = (obj, opts) => ***REMOVED***
	opts = Object.assign(***REMOVED***
		exclude: [/.+(Sync|Stream)$/],
		errorFirst: true,
		promiseModule: Promise
	***REMOVED***, opts);

	const filter = key => ***REMOVED***
		const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
		return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
	***REMOVED***;

	let ret;
	if (typeof obj === 'function') ***REMOVED***
		ret = function () ***REMOVED***
			if (opts.excludeMain) ***REMOVED***
				return obj.apply(this, arguments);
			***REMOVED***

			return processFn(obj, opts).apply(this, arguments);
		***REMOVED***;
	***REMOVED*** else ***REMOVED***
		ret = Object.create(Object.getPrototypeOf(obj));
	***REMOVED***

	for (const key in obj) ***REMOVED*** // eslint-disable-line guard-for-in
		const x = obj[key];
		ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
	***REMOVED***

	return ret;
***REMOVED***;
