'use strict';

var map = require('../')
  , it = require('it-is')
  , u = require('ubelt')
  , spec = require('stream-spec')
  , from = require('from')
  , Stream = require('stream')
  , es = require('event-stream')

//REFACTOR THIS TEST TO USE es.readArray and es.writeArray

function writeArray(array, stream) ***REMOVED***

  array.forEach( function (j) ***REMOVED***
    stream.write(j)
  ***REMOVED***)
  stream.end()

***REMOVED***

function readStream(stream, done) ***REMOVED***

  var array = [] 
  stream.on('data', function (data) ***REMOVED***
    array.push(data)
  ***REMOVED***)
  stream.on('error', done)
  stream.on('end', function (data) ***REMOVED***
    done(null, array)
  ***REMOVED***)

***REMOVED*** 

//call sink on each write,
//and complete when finished.

function pauseStream (prob, delay) ***REMOVED*** 
  var pauseIf = (
      'number' == typeof prob 
    ? function () ***REMOVED***
        return Math.random() < prob
      ***REMOVED*** 
    : 'function' == typeof prob 
    ? prob
    : 0.1
  )
  var delayer = ( 
      !delay 
    ? process.nextTick
    : 'number' == typeof delay 
    ? function (next) ***REMOVED*** setTimeout(next, delay) ***REMOVED***
    : delay
  )   

  return es.through(function (data) ***REMOVED***    
    if(!this.paused && pauseIf()) ***REMOVED***
      console.log('PAUSE STREAM PAUSING')
      this.pause()
      var self = this
      delayer(function () ***REMOVED***
        console.log('PAUSE STREAM RESUMING')
        self.resume()
      ***REMOVED***)
    ***REMOVED***
    console.log("emit ('data', " + data + ')')
    this.emit('data', data) 
  ***REMOVED***)
***REMOVED***

exports ['simple map applied to a stream'] = function (test) ***REMOVED***

  var input = [1,2,3,7,5,3,1,9,0,2,4,6]
  //create event stream from

  var doubler = map(function (data, cb) ***REMOVED***
    cb(null, data * 2)
  ***REMOVED***)

  spec(doubler).through().validateOnExit()

  //a map is only a middle man, so it is both readable and writable
  
  it(doubler).has(***REMOVED***
    readable: true,
    writable: true,   
  ***REMOVED***)

  readStream(doubler, function (err, output) ***REMOVED***
    it(output).deepEqual(input.map(function (j) ***REMOVED***
      return j * 2
    ***REMOVED***))
//    process.nextTick(x.validate)
    test.done()
  ***REMOVED***)
  
  writeArray(input, doubler)
  
***REMOVED***

exports ['stream comes back in the correct order'] = function (test) ***REMOVED***
  var input = [3, 2, 1]

  var delayer = map(function(data, cb)***REMOVED***
    setTimeout(function () ***REMOVED***
      cb(null, data)
    ***REMOVED***, 100 * data)
  ***REMOVED***)

  readStream(delayer, function (err, output) ***REMOVED***
    it(output).deepEqual(input)
    test.done()
  ***REMOVED***)

  writeArray(input, delayer)
***REMOVED***

exports ['continues on error event with failures `true`'] = function (test) ***REMOVED***
  var input = [1, 2, 3]

  var delayer = map(function(data, cb)***REMOVED***
    cb(new Error('Something gone wrong'), data)
  ***REMOVED***, ***REMOVED*** failures: true ***REMOVED***)

  readStream(delayer, function (err, output) ***REMOVED***
    it(output).deepEqual(input)
    test.done()
  ***REMOVED***)

  writeArray(input, delayer)
***REMOVED***

exports['pipe two maps together'] = function (test) ***REMOVED***

  var input = [1,2,3,7,5,3,1,9,0,2,4,6]
  //create event stream from
  function dd (data, cb) ***REMOVED***
    cb(null, data * 2)
  ***REMOVED***
  var doubler1 = map(dd), doubler2 = map(dd)

  doubler1.pipe(doubler2)
  
  spec(doubler1).through().validateOnExit()
  spec(doubler2).through().validateOnExit()

  readStream(doubler2, function (err, output) ***REMOVED***
    it(output).deepEqual(input.map(function (j) ***REMOVED***
      return j * 4
    ***REMOVED***))
    test.done()
  ***REMOVED***)
  
  writeArray(input, doubler1)

***REMOVED***

//next:
//
// test pause, resume and drian.
//

// then make a pipe joiner:
//
// plumber (evStr1, evStr2, evStr3, evStr4, evStr5)
//
// will return a single stream that write goes to the first 

exports ['map will not call end until the callback'] = function (test) ***REMOVED***

  var ticker = map(function (data, cb) ***REMOVED***
    process.nextTick(function () ***REMOVED***
      cb(null, data * 2)
    ***REMOVED***)
  ***REMOVED***)

  spec(ticker).through().validateOnExit()

  ticker.write('x')
  ticker.end() 

  ticker.on('end', function () ***REMOVED***
    test.done()
  ***REMOVED***)
***REMOVED***

exports ['emit failures with opts.failures === `ture`'] = function (test) ***REMOVED***

  var err = new Error('INTENSIONAL ERROR')
    , mapper = 
  map(function () ***REMOVED***
    throw err
  ***REMOVED***, ***REMOVED*** failures: true ***REMOVED***)

  mapper.on('failure', function (_err) ***REMOVED***
    it(_err).equal(err)  
    test.done()
  ***REMOVED***)

  mapper.write('hello')

***REMOVED***

exports ['emit error thrown'] = function (test) ***REMOVED***

  var err = new Error('INTENSIONAL ERROR')
    , mapper = 
  map(function () ***REMOVED***
    throw err
  ***REMOVED***)

  mapper.on('error', function (_err) ***REMOVED***
    it(_err).equal(err)  
    test.done()
  ***REMOVED***)

  mapper.write('hello')

***REMOVED***

exports ['emit error calledback'] = function (test) ***REMOVED***

  var err = new Error('INTENSIONAL ERROR')
    , mapper = 
  map(function (data, callback) ***REMOVED***
    callback(err)
  ***REMOVED***)

  mapper.on('error', function (_err) ***REMOVED***
    it(_err).equal(err)  
    test.done()
  ***REMOVED***)

  mapper.write('hello')

***REMOVED***

exports ['do not emit drain if not paused'] = function (test) ***REMOVED***

  var maps = map(function (data, callback) ***REMOVED***
    u.delay(callback)(null, 1)
    return true
  ***REMOVED***)
  
  spec(maps).through().pausable().validateOnExit()

  maps.on('drain', function () ***REMOVED***
    it(false).ok('should not emit drain unless the stream is paused')
  ***REMOVED***)

  it(maps.write('hello')).equal(true)
  it(maps.write('hello')).equal(true)
  it(maps.write('hello')).equal(true)
  setTimeout(function () ***REMOVED***maps.end()***REMOVED***,10)
  maps.on('end', test.done)
***REMOVED***

exports ['emits drain if paused, when all '] = function (test) ***REMOVED***
  var active = 0
  var drained = false
  var maps = map(function (data, callback) ***REMOVED***
    active ++
    u.delay(function () ***REMOVED***
      active --
      callback(null, 1)
    ***REMOVED***)()
    console.log('WRITE', false)
    return false
  ***REMOVED***)

  spec(maps).through().validateOnExit()

  maps.on('drain', function () ***REMOVED***
    drained = true
    it(active).equal(0, 'should emit drain when all maps are done')
  ***REMOVED***)

  it(maps.write('hello')).equal(false)
  it(maps.write('hello')).equal(false)
  it(maps.write('hello')).equal(false)

  process.nextTick(function () ***REMOVED***maps.end()***REMOVED***,10)

  maps.on('end', function () ***REMOVED***
    console.log('end')
    it(drained).ok('shoud have emitted drain before end')
    test.done() 
  ***REMOVED***)

***REMOVED***

exports ['map applied to a stream with filtering'] = function (test) ***REMOVED***

  var input = [1,2,3,7,5,3,1,9,0,2,4,6]

  var doubler = map(function (data, callback) ***REMOVED***
    if (data % 2)
      callback(null, data * 2)
    else
      callback()
  ***REMOVED***)
  
  readStream(doubler, function (err, output) ***REMOVED***
    it(output).deepEqual(input.filter(function (j) ***REMOVED***
      return j % 2
    ***REMOVED***).map(function (j) ***REMOVED***
      return j * 2
    ***REMOVED***))
    test.done()
  ***REMOVED***)
  
  spec(doubler).through().validateOnExit()

  writeArray(input, doubler)
  
***REMOVED***


