// encodings/impl/binary

/**
 * Encodes a binary JavaScript string to bytes.
 * @param ***REMOVED***string***REMOVED*** src Source string
 * @param ***REMOVED***number***REMOVED*** srcOffset Source offset
 * @param ***REMOVED***!ByteBuffer***REMOVED*** dst Destination ByteBuffer
 * @param ***REMOVED***number***REMOVED*** dstOffset Destination offset
 * @param ***REMOVED***number***REMOVED*** count Number of char codes to encode
 * @returns ***REMOVED***number***REMOVED*** Number of bytes encoded
 * @inner
 */
function binary_encode(src, srcOffset, dst, dstOffset, count) ***REMOVED***
    var n = 0;
    while (count--) ***REMOVED***
        var cc = src.charCodeAt(srcOffset++);
        if (cc > 255)
            throw Error("illegal binary char code: "+cc);
        //? SET('cc', 'dstOffset++', 'dst');
        ++n;
    ***REMOVED***
    return n;
***REMOVED***

/**
 * Decodes bytes to a binary JavaScript string.
 * @param ***REMOVED***!ByteBuffer***REMOVED*** src Source ByteBuffer
 * @param ***REMOVED***number***REMOVED*** srcOffset Source offset
 * @param ***REMOVED***number***REMOVED*** count Number of bytes to decode
 * @returns ***REMOVED***string***REMOVED*** Decoded string
 * @inner
 */
function binary_decode(src, srcOffset, count) ***REMOVED***
    if (count === 0)
        return "";
    var parts = [], // readily assembled parts
        batch = []; // char codes for batch processing
    while (count--) ***REMOVED***
        batch.push(/*? GET('srcOffset++', 'src') */);
        if (batch.length > 1023) ***REMOVED***
            parts.push(String.fromCharCode.apply(String, batch));
            batch.length = 0;
        ***REMOVED***
    ***REMOVED***
    if (batch.length > 0) ***REMOVED***
        if (parts.length === 0)
            return String.fromCharCode.apply(String, batch);
        parts.push(String.fromCharCode.apply(String, batch));
    ***REMOVED***
    return parts.join('');
***REMOVED***

/**
 * Calculates the number of bytes required to store a binary JavaScript string.
 * @param ***REMOVED***string***REMOVED*** src Source string
 * @param ***REMOVED***number***REMOVED*** srcOffset Source offset
 * @param ***REMOVED***number***REMOVED*** count Number of char codes to calculate
 * @returns ***REMOVED***number***REMOVED*** Number of bytes required
 * @inner
 */
function binary_calculate(src, srcOffset, count) ***REMOVED***
    return count;
***REMOVED***

ByteBuffer.registerEncoding("binary", binary_encode, binary_decode, binary_calculate);
