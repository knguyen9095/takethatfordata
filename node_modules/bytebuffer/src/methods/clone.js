/**
 * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for ***REMOVED***@link ByteBuffer#offset***REMOVED***,
 *  ***REMOVED***@link ByteBuffer#markedOffset***REMOVED*** and ***REMOVED***@link ByteBuffer#limit***REMOVED***.
 * @param ***REMOVED***boolean=***REMOVED*** copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
 * @returns ***REMOVED***!ByteBuffer***REMOVED*** Cloned instance
 * @expose
 */
ByteBufferPrototype.clone = function(copy) ***REMOVED***
    var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
    if (copy) ***REMOVED***
        //? if (NODE) ***REMOVED***
        var buffer = new Buffer(this.buffer.length);
        this.buffer.copy(buffer);
        bb.buffer = buffer;
        //? ***REMOVED*** else ***REMOVED***
        bb.buffer = new ArrayBuffer(this.buffer.byteLength);
        //? if (DATAVIEW) ***REMOVED***
        new Uint8Array(bb.buffer).set(this.buffer);
        bb.view = new DataView(bb.buffer);
        //? ***REMOVED*** else ***REMOVED***
        bb.view = new Uint8Array(bb.buffer);
        //? ***REMOVED***
        //? ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        bb.buffer = this.buffer;
        //? if (!NODE)
        bb.view = this.view;
    ***REMOVED***
    bb.offset = this.offset;
    bb.markedOffset = this.markedOffset;
    bb.limit = this.limit;
    return bb;
***REMOVED***;

