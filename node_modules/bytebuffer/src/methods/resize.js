/**
 * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
 *  large or larger.
 * @param ***REMOVED***number***REMOVED*** capacity Capacity required
 * @returns ***REMOVED***!ByteBuffer***REMOVED*** this
 * @throws ***REMOVED***TypeError***REMOVED*** If `capacity` is not a number
 * @throws ***REMOVED***RangeError***REMOVED*** If `capacity < 0`
 * @expose
 */
ByteBufferPrototype.resize = function(capacity) ***REMOVED***
    if (!this.noAssert) ***REMOVED***
        //? ASSERT_INTEGER('capacity');
        if (capacity < 0)
            throw RangeError("Illegal capacity: 0 <= "+capacity);
    ***REMOVED***
    //? if (NODE) ***REMOVED***
    if (this.buffer.length < capacity) ***REMOVED***
        var buffer = new Buffer(capacity);
        this.buffer.copy(buffer);
        this.buffer = buffer;
    ***REMOVED***
    //? ***REMOVED*** else ***REMOVED***
    if (this.buffer.byteLength < capacity) ***REMOVED***
        //? if (DATAVIEW) ***REMOVED***
        var buffer = new ArrayBuffer(capacity);
        new Uint8Array(buffer).set(new Uint8Array(this.buffer));
        this.buffer = buffer;
        this.view = new DataView(buffer);
        //? ***REMOVED*** else ***REMOVED***
        var buffer = new ArrayBuffer(capacity);
        var view = new Uint8Array(buffer);
        view.set(this.view);
        this.buffer = buffer;
        this.view = view;
        //? ***REMOVED***
    ***REMOVED***
    //? ***REMOVED***
    return this;
***REMOVED***;
