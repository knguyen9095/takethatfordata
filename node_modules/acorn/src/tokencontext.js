// The algorithm used to determine whether a regexp can appear at a
// given point in the program is loosely based on sweet.js' approach.
// See https://github.com/mozilla/sweet.js/wiki/design

import ***REMOVED***Parser***REMOVED*** from "./state"
import ***REMOVED***types as tt***REMOVED*** from "./tokentype"
import ***REMOVED***lineBreak***REMOVED*** from "./whitespace"

export class TokContext ***REMOVED***
  constructor(token, isExpr, preserveSpace, override) ***REMOVED***
    this.token = token
    this.isExpr = !!isExpr
    this.preserveSpace = !!preserveSpace
    this.override = override
  ***REMOVED***
***REMOVED***

export const types = ***REMOVED***
  b_stat: new TokContext("***REMOVED***", false),
  b_expr: new TokContext("***REMOVED***", true),
  b_tmpl: new TokContext("$***REMOVED***", true),
  p_stat: new TokContext("(", false),
  p_expr: new TokContext("(", true),
  q_tmpl: new TokContext("`", true, true, p => p.readTmplToken()),
  f_expr: new TokContext("function", true)
***REMOVED***

const pp = Parser.prototype

pp.initialContext = function() ***REMOVED***
  return [types.b_stat]
***REMOVED***

pp.braceIsBlock = function(prevType) ***REMOVED***
  if (prevType === tt.colon) ***REMOVED***
    let parent = this.curContext()
    if (parent === types.b_stat || parent === types.b_expr)
      return !parent.isExpr
  ***REMOVED***
  if (prevType === tt._return)
    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
  if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)
    return true
  if (prevType == tt.braceL)
    return this.curContext() === types.b_stat
  return !this.exprAllowed
***REMOVED***

pp.updateContext = function(prevType) ***REMOVED***
  let update, type = this.type
  if (type.keyword && prevType == tt.dot)
    this.exprAllowed = false
  else if (update = type.updateContext)
    update.call(this, prevType)
  else
    this.exprAllowed = type.beforeExpr
***REMOVED***

// Token-specific context update code

tt.parenR.updateContext = tt.braceR.updateContext = function() ***REMOVED***
  if (this.context.length == 1) ***REMOVED***
    this.exprAllowed = true
    return
  ***REMOVED***
  let out = this.context.pop()
  if (out === types.b_stat && this.curContext() === types.f_expr) ***REMOVED***
    this.context.pop()
    this.exprAllowed = false
  ***REMOVED*** else if (out === types.b_tmpl) ***REMOVED***
    this.exprAllowed = true
  ***REMOVED*** else ***REMOVED***
    this.exprAllowed = !out.isExpr
  ***REMOVED***
***REMOVED***

tt.braceL.updateContext = function(prevType) ***REMOVED***
  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)
  this.exprAllowed = true
***REMOVED***

tt.dollarBraceL.updateContext = function() ***REMOVED***
  this.context.push(types.b_tmpl)
  this.exprAllowed = true
***REMOVED***

tt.parenL.updateContext = function(prevType) ***REMOVED***
  let statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while
  this.context.push(statementParens ? types.p_stat : types.p_expr)
  this.exprAllowed = true
***REMOVED***

tt.incDec.updateContext = function() ***REMOVED***
  // tokExprAllowed stays unchanged
***REMOVED***

tt._function.updateContext = function(prevType) ***REMOVED***
  if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&
      !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))
    this.context.push(types.f_expr)
  this.exprAllowed = false
***REMOVED***

tt.backQuote.updateContext = function() ***REMOVED***
  if (this.curContext() === types.q_tmpl)
    this.context.pop()
  else
    this.context.push(types.q_tmpl)
  this.exprAllowed = false
***REMOVED***
