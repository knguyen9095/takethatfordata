import ***REMOVED***LooseParser***REMOVED*** from "./state"
import ***REMOVED***isDummy***REMOVED*** from "./parseutil"
import ***REMOVED***tokTypes as tt***REMOVED*** from "../index"

const lp = LooseParser.prototype

lp.checkLVal = function(expr) ***REMOVED***
  if (!expr) return expr
  switch (expr.type) ***REMOVED***
  case "Identifier":
  case "MemberExpression":
    return expr

  case "ParenthesizedExpression":
    expr.expression = this.checkLVal(expr.expression)
    return expr

  default:
    return this.dummyIdent()
  ***REMOVED***
***REMOVED***

lp.parseExpression = function(noIn) ***REMOVED***
  let start = this.storeCurrentPos()
  let expr = this.parseMaybeAssign(noIn)
  if (this.tok.type === tt.comma) ***REMOVED***
    let node = this.startNodeAt(start)
    node.expressions = [expr]
    while (this.eat(tt.comma)) node.expressions.push(this.parseMaybeAssign(noIn))
    return this.finishNode(node, "SequenceExpression")
  ***REMOVED***
  return expr
***REMOVED***

lp.parseParenExpression = function() ***REMOVED***
  this.pushCx()
  this.expect(tt.parenL)
  let val = this.parseExpression()
  this.popCx()
  this.expect(tt.parenR)
  return val
***REMOVED***

lp.parseMaybeAssign = function(noIn) ***REMOVED***
  if (this.toks.isContextual("yield")) ***REMOVED***
    let node = this.startNode()
    this.next()
    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type != tt.star && !this.tok.type.startsExpr)) ***REMOVED***
      node.delegate = false
      node.argument = null
    ***REMOVED*** else ***REMOVED***
      node.delegate = this.eat(tt.star)
      node.argument = this.parseMaybeAssign()
    ***REMOVED***
    return this.finishNode(node, "YieldExpression")
  ***REMOVED***

  let start = this.storeCurrentPos()
  let left = this.parseMaybeConditional(noIn)
  if (this.tok.type.isAssign) ***REMOVED***
    let node = this.startNodeAt(start)
    node.operator = this.tok.value
    node.left = this.tok.type === tt.eq ? this.toAssignable(left) : this.checkLVal(left)
    this.next()
    node.right = this.parseMaybeAssign(noIn)
    return this.finishNode(node, "AssignmentExpression")
  ***REMOVED***
  return left
***REMOVED***

lp.parseMaybeConditional = function(noIn) ***REMOVED***
  let start = this.storeCurrentPos()
  let expr = this.parseExprOps(noIn)
  if (this.eat(tt.question)) ***REMOVED***
    let node = this.startNodeAt(start)
    node.test = expr
    node.consequent = this.parseMaybeAssign()
    node.alternate = this.expect(tt.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()
    return this.finishNode(node, "ConditionalExpression")
  ***REMOVED***
  return expr
***REMOVED***

lp.parseExprOps = function(noIn) ***REMOVED***
  let start = this.storeCurrentPos()
  let indent = this.curIndent, line = this.curLineStart
  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)
***REMOVED***

lp.parseExprOp = function(left, start, minPrec, noIn, indent, line) ***REMOVED***
  if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) return left
  let prec = this.tok.type.binop
  if (prec != null && (!noIn || this.tok.type !== tt._in)) ***REMOVED***
    if (prec > minPrec) ***REMOVED***
      let node = this.startNodeAt(start)
      node.left = left
      node.operator = this.tok.value
      this.next()
      if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) ***REMOVED***
        node.right = this.dummyIdent()
      ***REMOVED*** else ***REMOVED***
        let rightStart = this.storeCurrentPos()
        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line)
      ***REMOVED***
      this.finishNode(node, /&&|\|\|/.test(node.operator) ? "LogicalExpression" : "BinaryExpression")
      return this.parseExprOp(node, start, minPrec, noIn, indent, line)
    ***REMOVED***
  ***REMOVED***
  return left
***REMOVED***

lp.parseMaybeUnary = function(sawUnary) ***REMOVED***
  let start = this.storeCurrentPos(), expr
  if (this.options.ecmaVersion >= 8 && this.inAsync && this.toks.isContextual("await")) ***REMOVED***
    expr = this.parseAwait()
    sawUnary = true
  ***REMOVED*** else if (this.tok.type.prefix) ***REMOVED***
    let node = this.startNode(), update = this.tok.type === tt.incDec
    if (!update) sawUnary = true
    node.operator = this.tok.value
    node.prefix = true
    this.next()
    node.argument = this.parseMaybeUnary(true)
    if (update) node.argument = this.checkLVal(node.argument)
    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression")
  ***REMOVED*** else if (this.tok.type === tt.ellipsis) ***REMOVED***
    let node = this.startNode()
    this.next()
    node.argument = this.parseMaybeUnary(sawUnary)
    expr = this.finishNode(node, "SpreadElement")
  ***REMOVED*** else ***REMOVED***
    expr = this.parseExprSubscripts()
    while (this.tok.type.postfix && !this.canInsertSemicolon()) ***REMOVED***
      let node = this.startNodeAt(start)
      node.operator = this.tok.value
      node.prefix = false
      node.argument = this.checkLVal(expr)
      this.next()
      expr = this.finishNode(node, "UpdateExpression")
    ***REMOVED***
  ***REMOVED***

  if (!sawUnary && this.eat(tt.starstar)) ***REMOVED***
    let node = this.startNodeAt(start)
    node.operator = "**"
    node.left = expr
    node.right = this.parseMaybeUnary(false)
    return this.finishNode(node, "BinaryExpression")
  ***REMOVED***

  return expr
***REMOVED***

lp.parseExprSubscripts = function() ***REMOVED***
  let start = this.storeCurrentPos()
  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)
***REMOVED***

lp.parseSubscripts = function(base, start, noCalls, startIndent, line) ***REMOVED***
  for (;;) ***REMOVED***
    if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine()) ***REMOVED***
      if (this.tok.type == tt.dot && this.curIndent == startIndent)
        --startIndent
      else
        return base
    ***REMOVED***

    let maybeAsyncArrow = base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon()

    if (this.eat(tt.dot)) ***REMOVED***
      let node = this.startNodeAt(start)
      node.object = base
      if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine())
        node.property = this.dummyIdent()
      else
        node.property = this.parsePropertyAccessor() || this.dummyIdent()
      node.computed = false
      base = this.finishNode(node, "MemberExpression")
    ***REMOVED*** else if (this.tok.type == tt.bracketL) ***REMOVED***
      this.pushCx()
      this.next()
      let node = this.startNodeAt(start)
      node.object = base
      node.property = this.parseExpression()
      node.computed = true
      this.popCx()
      this.expect(tt.bracketR)
      base = this.finishNode(node, "MemberExpression")
    ***REMOVED*** else if (!noCalls && this.tok.type == tt.parenL) ***REMOVED***
      let exprList = this.parseExprList(tt.parenR)
      if (maybeAsyncArrow && this.eat(tt.arrow))
        return this.parseArrowExpression(this.startNodeAt(start), exprList, true)
      let node = this.startNodeAt(start)
      node.callee = base
      node.arguments = exprList
      base = this.finishNode(node, "CallExpression")
    ***REMOVED*** else if (this.tok.type == tt.backQuote) ***REMOVED***
      let node = this.startNodeAt(start)
      node.tag = base
      node.quasi = this.parseTemplate()
      base = this.finishNode(node, "TaggedTemplateExpression")
    ***REMOVED*** else ***REMOVED***
      return base
    ***REMOVED***
  ***REMOVED***
***REMOVED***

lp.parseExprAtom = function() ***REMOVED***
  let node
  switch (this.tok.type) ***REMOVED***
  case tt._this:
  case tt._super:
    let type = this.tok.type === tt._this ? "ThisExpression" : "Super"
    node = this.startNode()
    this.next()
    return this.finishNode(node, type)

  case tt.name:
    let start = this.storeCurrentPos()
    let id = this.parseIdent()
    let isAsync = false
    if (id.name === "async" && !this.canInsertSemicolon()) ***REMOVED***
      if (this.eat(tt._function))
        return this.parseFunction(this.startNodeAt(start), false, true)
      if (this.tok.type === tt.name) ***REMOVED***
        id = this.parseIdent()
        isAsync = true
      ***REMOVED***
    ***REMOVED***
    return this.eat(tt.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id

  case tt.regexp:
    node = this.startNode()
    let val = this.tok.value
    node.regex = ***REMOVED***pattern: val.pattern, flags: val.flags***REMOVED***
    node.value = val.value
    node.raw = this.input.slice(this.tok.start, this.tok.end)
    this.next()
    return this.finishNode(node, "Literal")

  case tt.num: case tt.string:
    node = this.startNode()
    node.value = this.tok.value
    node.raw = this.input.slice(this.tok.start, this.tok.end)
    this.next()
    return this.finishNode(node, "Literal")

  case tt._null: case tt._true: case tt._false:
    node = this.startNode()
    node.value = this.tok.type === tt._null ? null : this.tok.type === tt._true
    node.raw = this.tok.type.keyword
    this.next()
    return this.finishNode(node, "Literal")

  case tt.parenL:
    let parenStart = this.storeCurrentPos()
    this.next()
    let inner = this.parseExpression()
    this.expect(tt.parenR)
    if (this.eat(tt.arrow)) ***REMOVED***
      // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.
      let params = inner.expressions || [inner]
      if (params.length && isDummy(params[params.length - 1]))
        params.pop()
      return this.parseArrowExpression(this.startNodeAt(parenStart), params)
    ***REMOVED***
    if (this.options.preserveParens) ***REMOVED***
      let par = this.startNodeAt(parenStart)
      par.expression = inner
      inner = this.finishNode(par, "ParenthesizedExpression")
    ***REMOVED***
    return inner

  case tt.bracketL:
    node = this.startNode()
    node.elements = this.parseExprList(tt.bracketR, true)
    return this.finishNode(node, "ArrayExpression")

  case tt.braceL:
    return this.parseObj()

  case tt._class:
    return this.parseClass(false)

  case tt._function:
    node = this.startNode()
    this.next()
    return this.parseFunction(node, false)

  case tt._new:
    return this.parseNew()

  case tt.backQuote:
    return this.parseTemplate()

  default:
    return this.dummyIdent()
  ***REMOVED***
***REMOVED***

lp.parseNew = function() ***REMOVED***
  let node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart
  let meta = this.parseIdent(true)
  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) ***REMOVED***
    node.meta = meta
    node.property = this.parseIdent(true)
    return this.finishNode(node, "MetaProperty")
  ***REMOVED***
  let start = this.storeCurrentPos()
  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)
  if (this.tok.type == tt.parenL) ***REMOVED***
    node.arguments = this.parseExprList(tt.parenR)
  ***REMOVED*** else ***REMOVED***
    node.arguments = []
  ***REMOVED***
  return this.finishNode(node, "NewExpression")
***REMOVED***

lp.parseTemplateElement = function() ***REMOVED***
  let elem = this.startNode()
  elem.value = ***REMOVED***
    raw: this.input.slice(this.tok.start, this.tok.end).replace(/\r\n?/g, '\n'),
    cooked: this.tok.value
  ***REMOVED***
  this.next()
  elem.tail = this.tok.type === tt.backQuote
  return this.finishNode(elem, "TemplateElement")
***REMOVED***

lp.parseTemplate = function() ***REMOVED***
  let node = this.startNode()
  this.next()
  node.expressions = []
  let curElt = this.parseTemplateElement()
  node.quasis = [curElt]
  while (!curElt.tail) ***REMOVED***
    this.next()
    node.expressions.push(this.parseExpression())
    if (this.expect(tt.braceR)) ***REMOVED***
      curElt = this.parseTemplateElement()
    ***REMOVED*** else ***REMOVED***
      curElt = this.startNode()
      curElt.value = ***REMOVED***cooked: '', raw: ''***REMOVED***
      curElt.tail = true
      this.finishNode(curElt, "TemplateElement")
    ***REMOVED***
    node.quasis.push(curElt)
  ***REMOVED***
  this.expect(tt.backQuote)
  return this.finishNode(node, "TemplateLiteral")
***REMOVED***

lp.parseObj = function() ***REMOVED***
  let node = this.startNode()
  node.properties = []
  this.pushCx()
  let indent = this.curIndent + 1, line = this.curLineStart
  this.eat(tt.braceL)
  if (this.curIndent + 1 < indent) ***REMOVED*** indent = this.curIndent; line = this.curLineStart ***REMOVED***
  while (!this.closes(tt.braceR, indent, line)) ***REMOVED***
    let prop = this.startNode(), isGenerator, isAsync, start
    if (this.options.ecmaVersion >= 6) ***REMOVED***
      start = this.storeCurrentPos()
      prop.method = false
      prop.shorthand = false
      isGenerator = this.eat(tt.star)
    ***REMOVED***
    this.parsePropertyName(prop)
    if (!prop.computed &&
        prop.key.type === "Identifier" && prop.key.name === "async" && this.tok.type !== tt.parenL &&
        this.tok.type !== tt.colon && !this.canInsertSemicolon()) ***REMOVED***
      this.parsePropertyName(prop)
      isAsync = true
    ***REMOVED*** else ***REMOVED***
      isAsync = false
    ***REMOVED***
    if (isDummy(prop.key)) ***REMOVED*** if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue ***REMOVED***
    if (this.eat(tt.colon)) ***REMOVED***
      prop.kind = "init"
      prop.value = this.parseMaybeAssign()
    ***REMOVED*** else if (this.options.ecmaVersion >= 6 && (this.tok.type === tt.parenL || this.tok.type === tt.braceL)) ***REMOVED***
      prop.kind = "init"
      prop.method = true
      prop.value = this.parseMethod(isGenerator, isAsync)
    ***REMOVED*** else if (this.options.ecmaVersion >= 5 && prop.key.type === "Identifier" &&
               !prop.computed && (prop.key.name === "get" || prop.key.name === "set") &&
               (this.tok.type != tt.comma && this.tok.type != tt.braceR)) ***REMOVED***
      prop.kind = prop.key.name
      this.parsePropertyName(prop)
      prop.value = this.parseMethod(false)
    ***REMOVED*** else ***REMOVED***
      prop.kind = "init"
      if (this.options.ecmaVersion >= 6) ***REMOVED***
        if (this.eat(tt.eq)) ***REMOVED***
          let assign = this.startNodeAt(start)
          assign.operator = "="
          assign.left = prop.key
          assign.right = this.parseMaybeAssign()
          prop.value = this.finishNode(assign, "AssignmentExpression")
        ***REMOVED*** else ***REMOVED***
          prop.value = prop.key
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        prop.value = this.dummyIdent()
      ***REMOVED***
      prop.shorthand = true
    ***REMOVED***
    node.properties.push(this.finishNode(prop, "Property"))
    this.eat(tt.comma)
  ***REMOVED***
  this.popCx()
  if (!this.eat(tt.braceR)) ***REMOVED***
    // If there is no closing brace, make the node span to the start
    // of the next token (this is useful for Tern)
    this.last.end = this.tok.start
    if (this.options.locations) this.last.loc.end = this.tok.loc.start
  ***REMOVED***
  return this.finishNode(node, "ObjectExpression")
***REMOVED***

lp.parsePropertyName = function(prop) ***REMOVED***
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    if (this.eat(tt.bracketL)) ***REMOVED***
      prop.computed = true
      prop.key = this.parseExpression()
      this.expect(tt.bracketR)
      return
    ***REMOVED*** else ***REMOVED***
      prop.computed = false
    ***REMOVED***
  ***REMOVED***
  let key = (this.tok.type === tt.num || this.tok.type === tt.string) ? this.parseExprAtom() : this.parseIdent()
  prop.key = key || this.dummyIdent()
***REMOVED***

lp.parsePropertyAccessor = function() ***REMOVED***
  if (this.tok.type === tt.name || this.tok.type.keyword) return this.parseIdent()
***REMOVED***

lp.parseIdent = function() ***REMOVED***
  let name = this.tok.type === tt.name ? this.tok.value : this.tok.type.keyword
  if (!name) return this.dummyIdent()
  let node = this.startNode()
  this.next()
  node.name = name
  return this.finishNode(node, "Identifier")
***REMOVED***

lp.initFunction = function(node) ***REMOVED***
  node.id = null
  node.params = []
  if (this.options.ecmaVersion >= 6) ***REMOVED***
    node.generator = false
    node.expression = false
  ***REMOVED***
  if (this.options.ecmaVersion >= 8)
    node.async = false
***REMOVED***

// Convert existing expression atom to assignable pattern
// if possible.

lp.toAssignable = function(node, binding) ***REMOVED***
  if (!node || node.type == "Identifier" || (node.type == "MemberExpression" && !binding)) ***REMOVED***
    // Okay
  ***REMOVED*** else if (node.type == "ParenthesizedExpression") ***REMOVED***
    node.expression = this.toAssignable(node.expression, binding)
  ***REMOVED*** else if (this.options.ecmaVersion < 6) ***REMOVED***
    return this.dummyIdent()
  ***REMOVED*** else if (node.type == "ObjectExpression") ***REMOVED***
    node.type = "ObjectPattern"
    let props = node.properties
    for (let i = 0; i < props.length; i++)
      props[i].value = this.toAssignable(props[i].value, binding)
  ***REMOVED*** else if (node.type == "ArrayExpression") ***REMOVED***
    node.type = "ArrayPattern"
    this.toAssignableList(node.elements, binding)
  ***REMOVED*** else if (node.type == "SpreadElement") ***REMOVED***
    node.type = "RestElement"
    node.argument = this.toAssignable(node.argument, binding)
  ***REMOVED*** else if (node.type == "AssignmentExpression") ***REMOVED***
    node.type = "AssignmentPattern"
    delete node.operator
  ***REMOVED*** else ***REMOVED***
    return this.dummyIdent()
  ***REMOVED***
  return node
***REMOVED***

lp.toAssignableList = function(exprList, binding) ***REMOVED***
  for (let i = 0; i < exprList.length; i++)
    exprList[i] = this.toAssignable(exprList[i], binding)
  return exprList
***REMOVED***

lp.parseFunctionParams = function(params) ***REMOVED***
  params = this.parseExprList(tt.parenR)
  return this.toAssignableList(params, true)
***REMOVED***

lp.parseMethod = function(isGenerator, isAsync) ***REMOVED***
  let node = this.startNode(), oldInAsync = this.inAsync
  this.initFunction(node)
  if (this.options.ecmaVersion >= 6)
    node.generator = !!isGenerator
  if (this.options.ecmaVersion >= 8)
    node.async = !!isAsync
  this.inAsync = node.async
  node.params = this.parseFunctionParams()
  node.expression = this.options.ecmaVersion >= 6 && this.tok.type !== tt.braceL
  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()
  this.inAsync = oldInAsync
  return this.finishNode(node, "FunctionExpression")
***REMOVED***

lp.parseArrowExpression = function(node, params, isAsync) ***REMOVED***
  let oldInAsync = this.inAsync
  this.initFunction(node)
  if (this.options.ecmaVersion >= 8)
    node.async = !!isAsync
  this.inAsync = node.async
  node.params = this.toAssignableList(params, true)
  node.expression = this.tok.type !== tt.braceL
  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()
  this.inAsync = oldInAsync
  return this.finishNode(node, "ArrowFunctionExpression")
***REMOVED***

lp.parseExprList = function(close, allowEmpty) ***REMOVED***
  this.pushCx()
  let indent = this.curIndent, line = this.curLineStart, elts = []
  this.next() // Opening bracket
  while (!this.closes(close, indent + 1, line)) ***REMOVED***
    if (this.eat(tt.comma)) ***REMOVED***
      elts.push(allowEmpty ? null : this.dummyIdent())
      continue
    ***REMOVED***
    let elt = this.parseMaybeAssign()
    if (isDummy(elt)) ***REMOVED***
      if (this.closes(close, indent, line)) break
      this.next()
    ***REMOVED*** else ***REMOVED***
      elts.push(elt)
    ***REMOVED***
    this.eat(tt.comma)
  ***REMOVED***
  this.popCx()
  if (!this.eat(close)) ***REMOVED***
    // If there is no closing brace, make the node span to the start
    // of the next token (this is useful for Tern)
    this.last.end = this.tok.start
    if (this.options.locations) this.last.loc.end = this.tok.loc.start
  ***REMOVED***
  return elts
***REMOVED***

lp.parseAwait = function() ***REMOVED***
  let node = this.startNode()
  this.next()
  node.argument = this.parseMaybeUnary()
  return this.finishNode(node, "AwaitExpression")
***REMOVED***
