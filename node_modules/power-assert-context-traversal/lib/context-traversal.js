'use strict';

var EventEmitter = require('events').EventEmitter;
var inherits = require('util').inherits;
var estraverse = require('estraverse');
var forEach = require('core-js/library/fn/array/for-each');
var reduce = require('core-js/library/fn/array/reduce');
var locationOf = require('./location');
var literalPattern = /^(?:String|Numeric|Null|Boolean|RegExp)?Literal$/;
var assign = require('core-js/library/fn/object/assign');

function ContextTraversal (powerAssertContext) ***REMOVED***
    this.powerAssertContext = powerAssertContext;
    EventEmitter.call(this);
***REMOVED***
inherits(ContextTraversal, EventEmitter);

ContextTraversal.prototype.traverse = function () ***REMOVED***
    var _this = this;
    var source = _this.powerAssertContext.source;
    parseIfJson(source, 'ast');
    parseIfJson(source, 'tokens');
    parseIfJson(source, 'visitorKeys');
    _this.emit('start', this.powerAssertContext);
    forEach(this.powerAssertContext.args, function (capturedArgument) ***REMOVED***
        onEachEsNode(capturedArgument, source, function (esNode) ***REMOVED***
            _this.emit('data', esNode);
        ***REMOVED***);
    ***REMOVED***);
    _this.emit('end');
***REMOVED***;

function parseIfJson (source, propName) ***REMOVED***
    if (typeof source[propName] === 'string') ***REMOVED***
        source[propName] = JSON.parse(source[propName]);
    ***REMOVED***
***REMOVED***

function onEachEsNode(capturedArgument, source, callback) ***REMOVED***
    var espathToValue = reduce(capturedArgument.events, function (accum, ev) ***REMOVED***
        accum[ev.espath] = ev.value;
        return accum;
    ***REMOVED***, ***REMOVED******REMOVED***);
    var nodeStack = [];
    estraverse.traverse(source.ast, ***REMOVED***
        keys: source.visitorKeys,
        enter: function (currentNode, parentNode) ***REMOVED***
            var parentEsNode = (0 < nodeStack.length) ? nodeStack[nodeStack.length - 1] : null;
            var esNode = createEsNode(this.path(), currentNode, espathToValue, source.content, source.tokens, parentEsNode);
            nodeStack.push(esNode);
            callback(esNode);
        ***REMOVED***,
        leave: function (currentNode, parentNode) ***REMOVED***
            nodeStack.pop();
        ***REMOVED***
    ***REMOVED***);
***REMOVED***

function isLiteral (node) ***REMOVED***
    return literalPattern.test(node.type);
***REMOVED***

function createEsNode (path, currentNode, espathToValue, jsCode, tokens, parent) ***REMOVED***
    var espath = path ? path.join('/') : '';
    return ***REMOVED***
        espath: espath,
        parent: parent,
        key: path ? path[path.length - 1] : null,
        node: currentNode,
        code: jsCode.slice(currentNode.range[0], currentNode.range[1]),
        value: isLiteral(currentNode) ? currentNode.value : espathToValue[espath],
        isCaptured: espathToValue.hasOwnProperty(espath),
        range: locationOf(currentNode, tokens)
    ***REMOVED***;
***REMOVED***

module.exports = ContextTraversal;
