'use strict';

// there's 3 implementations written in increasing order of efficiency

// 1 - no Set type is defined
function uniqNoSet(arr) ***REMOVED***
	var ret = [];

	for (var i = 0; i < arr.length; i++) ***REMOVED***
		if (ret.indexOf(arr[i]) === -1) ***REMOVED***
			ret.push(arr[i]);
		***REMOVED***
	***REMOVED***

	return ret;
***REMOVED***

// 2 - a simple Set type is defined
function uniqSet(arr) ***REMOVED***
	var seen = new Set();
	return arr.filter(function (el) ***REMOVED***
		if (!seen.has(el)) ***REMOVED***
			seen.add(el);
			return true;
		***REMOVED***

		return false;
	***REMOVED***);
***REMOVED***

// 3 - a standard Set type is defined and it has a forEach method
function uniqSetWithForEach(arr) ***REMOVED***
	var ret = [];

	(new Set(arr)).forEach(function (el) ***REMOVED***
		ret.push(el);
	***REMOVED***);

	return ret;
***REMOVED***

// V8 currently has a broken implementation
// https://github.com/joyent/node/issues/8449
function doesForEachActuallyWork() ***REMOVED***
	var ret = false;

	(new Set([true])).forEach(function (el) ***REMOVED***
		ret = el;
	***REMOVED***);

	return ret === true;
***REMOVED***

if ('Set' in global) ***REMOVED***
	if (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) ***REMOVED***
		module.exports = uniqSetWithForEach;
	***REMOVED*** else ***REMOVED***
		module.exports = uniqSet;
	***REMOVED***
***REMOVED*** else ***REMOVED***
	module.exports = uniqNoSet;
***REMOVED***
