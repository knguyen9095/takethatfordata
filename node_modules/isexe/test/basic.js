var t = require('tap')
var fs = require('fs')
var path = require('path')
var fixture = path.resolve(__dirname, 'fixtures')
var meow = fixture + '/meow.cat'
var mine = fixture + '/mine.cat'
var ours = fixture + '/ours.cat'
var fail = fixture + '/fail.false'
var noent = fixture + '/enoent.exe'
var mkdirp = require('mkdirp')
var rimraf = require('rimraf')

var isWindows = process.platform === 'win32'
var hasAccess = typeof fs.access === 'function'
var winSkip = isWindows && 'windows'
var accessSkip = !hasAccess && 'no fs.access function'
var hasPromise = typeof Promise === 'function'
var promiseSkip = !hasPromise && 'no global Promise'

function reset () ***REMOVED***
  delete require.cache[require.resolve('../')]
  return require('../')
***REMOVED***

t.test('setup fixtures', function (t) ***REMOVED***
  rimraf.sync(fixture)
  mkdirp.sync(fixture)
  fs.writeFileSync(meow, '#!/usr/bin/env cat\nmeow\n')
  fs.chmodSync(meow, parseInt('0755', 8))
  fs.writeFileSync(fail, '#!/usr/bin/env false\n')
  fs.chmodSync(fail, parseInt('0644', 8))
  fs.writeFileSync(mine, '#!/usr/bin/env cat\nmine\n')
  fs.chmodSync(mine, parseInt('0744', 8))
  fs.writeFileSync(ours, '#!/usr/bin/env cat\nours\n')
  fs.chmodSync(ours, parseInt('0754', 8))
  t.end()
***REMOVED***)

t.test('promise', ***REMOVED*** skip: promiseSkip ***REMOVED***, function (t) ***REMOVED***
  var isexe = reset()
  t.test('meow async', function (t) ***REMOVED***
    isexe(meow).then(function (is) ***REMOVED***
      t.ok(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)
  t.test('fail async', function (t) ***REMOVED***
    isexe(fail).then(function (is) ***REMOVED***
      t.notOk(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)
  t.test('noent async', function (t) ***REMOVED***
    isexe(noent).catch(function (er) ***REMOVED***
      t.ok(er)
      t.end()
    ***REMOVED***)
  ***REMOVED***)
  t.test('noent ignore async', function (t) ***REMOVED***
    isexe(noent, ***REMOVED*** ignoreErrors: true ***REMOVED***).then(function (is) ***REMOVED***
      t.notOk(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)
  t.end()
***REMOVED***)

t.test('no promise', function (t) ***REMOVED***
  global.Promise = null
  var isexe = reset()
  t.throws('try to meow a promise', function () ***REMOVED***
    isexe(meow)
  ***REMOVED***)
  t.end()
***REMOVED***)

t.test('access', ***REMOVED*** skip: accessSkip || winSkip ***REMOVED***, function (t) ***REMOVED***
  runTest(t)
***REMOVED***)

t.test('mode', ***REMOVED*** skip: winSkip ***REMOVED***, function (t) ***REMOVED***
  delete fs.access
  delete fs.accessSync
  var isexe = reset()
  t.ok(isexe.sync(ours, ***REMOVED*** uid: 0, gid: 0 ***REMOVED***))
  t.ok(isexe.sync(mine, ***REMOVED*** uid: 0, gid: 0 ***REMOVED***))
  runTest(t)
***REMOVED***)

t.test('windows', function (t) ***REMOVED***
  global.TESTING_WINDOWS = true
  var pathExt = '.EXE;.CAT;.CMD;.COM'
  t.test('pathExt option', function (t) ***REMOVED***
    runTest(t, ***REMOVED*** pathExt: '.EXE;.CAT;.CMD;.COM' ***REMOVED***)
  ***REMOVED***)
  t.test('pathExt env', function (t) ***REMOVED***
    process.env.PATHEXT = pathExt
    runTest(t)
  ***REMOVED***)
  t.test('no pathExt', function (t) ***REMOVED***
    // with a pathExt of '', any filename is fine.
    // so the "fail" one would still pass.
    runTest(t, ***REMOVED*** pathExt: '', skipFail: true ***REMOVED***)
  ***REMOVED***)
  t.test('pathext with empty entry', function (t) ***REMOVED***
    // with a pathExt of '', any filename is fine.
    // so the "fail" one would still pass.
    runTest(t, ***REMOVED*** pathExt: ';' + pathExt, skipFail: true ***REMOVED***)
  ***REMOVED***)
  t.end()
***REMOVED***)

t.test('cleanup', function (t) ***REMOVED***
  rimraf.sync(fixture)
  t.end()
***REMOVED***)

function runTest (t, options) ***REMOVED***
  var isexe = reset()

  var optionsIgnore = Object.create(options || ***REMOVED******REMOVED***)
  optionsIgnore.ignoreErrors = true

  if (!options || !options.skipFail) ***REMOVED***
    t.notOk(isexe.sync(fail, options))
  ***REMOVED***
  t.notOk(isexe.sync(noent, optionsIgnore))
  if (!options) ***REMOVED***
    t.ok(isexe.sync(meow))
  ***REMOVED*** else ***REMOVED***
    t.ok(isexe.sync(meow, options))
  ***REMOVED***

  t.ok(isexe.sync(mine, options))
  t.ok(isexe.sync(ours, options))
  t.throws(function () ***REMOVED***
    isexe.sync(noent, options)
  ***REMOVED***)

  t.test('meow async', function (t) ***REMOVED***
    if (!options) ***REMOVED***
      isexe(meow, function (er, is) ***REMOVED***
        if (er) ***REMOVED***
          throw er
        ***REMOVED***
        t.ok(is)
        t.end()
      ***REMOVED***)
    ***REMOVED*** else ***REMOVED***
      isexe(meow, options, function (er, is) ***REMOVED***
        if (er) ***REMOVED***
          throw er
        ***REMOVED***
        t.ok(is)
        t.end()
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***)

  t.test('mine async', function (t) ***REMOVED***
    isexe(mine, options, function (er, is) ***REMOVED***
      if (er) ***REMOVED***
        throw er
      ***REMOVED***
      t.ok(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)

  t.test('ours async', function (t) ***REMOVED***
    isexe(ours, options, function (er, is) ***REMOVED***
      if (er) ***REMOVED***
        throw er
      ***REMOVED***
      t.ok(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)

  if (!options || !options.skipFail) ***REMOVED***
    t.test('fail async', function (t) ***REMOVED***
      isexe(fail, options, function (er, is) ***REMOVED***
        if (er) ***REMOVED***
          throw er
        ***REMOVED***
        t.notOk(is)
        t.end()
      ***REMOVED***)
    ***REMOVED***)
  ***REMOVED***

  t.test('noent async', function (t) ***REMOVED***
    isexe(noent, options, function (er, is) ***REMOVED***
      t.ok(er)
      t.notOk(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)

  t.test('noent ignore async', function (t) ***REMOVED***
    isexe(noent, optionsIgnore, function (er, is) ***REMOVED***
      if (er) ***REMOVED***
        throw er
      ***REMOVED***
      t.notOk(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)

  t.test('directory is not executable', function (t) ***REMOVED***
    isexe(__dirname, options, function (er, is) ***REMOVED***
      if (er) ***REMOVED***
        throw er
      ***REMOVED***
      t.notOk(is)
      t.end()
    ***REMOVED***)
  ***REMOVED***)

  t.end()
***REMOVED***
