var semver = require("semver")
var validateLicense = require('validate-npm-package-license');
var hostedGitInfo = require("hosted-git-info")
var isBuiltinModule = require("is-builtin-module")
var depTypes = ["dependencies","devDependencies","optionalDependencies"]
var extractDescription = require("./extract_description")
var url = require("url")
var typos = require("./typos.json")

var fixer = module.exports = ***REMOVED***
  // default warning function
  warn: function() ***REMOVED******REMOVED***,

  fixRepositoryField: function(data) ***REMOVED***
    if (data.repositories) ***REMOVED***
      this.warn("repositories");
      data.repository = data.repositories[0]
    ***REMOVED***
    if (!data.repository) return this.warn("missingRepository")
    if (typeof data.repository === "string") ***REMOVED***
      data.repository = ***REMOVED***
        type: "git",
        url: data.repository
      ***REMOVED***
    ***REMOVED***
    var r = data.repository.url || ""
    if (r) ***REMOVED***
      var hosted = hostedGitInfo.fromUrl(r)
      if (hosted) ***REMOVED***
        r = data.repository.url
          = hosted.getDefaultRepresentation() == "shortcut" ? hosted.https() : hosted.toString()
      ***REMOVED***
    ***REMOVED***

    if (r.match(/github.com\/[^\/]+\/[^\/]+\.git\.git$/)) ***REMOVED***
      this.warn("brokenGitUrl", r)
    ***REMOVED***
  ***REMOVED***

, fixTypos: function(data) ***REMOVED***
    Object.keys(typos.topLevel).forEach(function (d) ***REMOVED***
      if (data.hasOwnProperty(d)) ***REMOVED***
        this.warn("typo", d, typos.topLevel[d])
      ***REMOVED***
    ***REMOVED***, this)
  ***REMOVED***

, fixScriptsField: function(data) ***REMOVED***
    if (!data.scripts) return
    if (typeof data.scripts !== "object") ***REMOVED***
      this.warn("nonObjectScripts")
      delete data.scripts
      return
    ***REMOVED***
    Object.keys(data.scripts).forEach(function (k) ***REMOVED***
      if (typeof data.scripts[k] !== "string") ***REMOVED***
        this.warn("nonStringScript")
        delete data.scripts[k]
      ***REMOVED*** else if (typos.script[k] && !data.scripts[typos.script[k]]) ***REMOVED***
        this.warn("typo", k, typos.script[k], "scripts")
      ***REMOVED***
    ***REMOVED***, this)
  ***REMOVED***

, fixFilesField: function(data) ***REMOVED***
    var files = data.files
    if (files && !Array.isArray(files)) ***REMOVED***
      this.warn("nonArrayFiles")
      delete data.files
    ***REMOVED*** else if (data.files) ***REMOVED***
      data.files = data.files.filter(function(file) ***REMOVED***
        if (!file || typeof file !== "string") ***REMOVED***
          this.warn("invalidFilename", file)
          return false
        ***REMOVED*** else ***REMOVED***
          return true
        ***REMOVED***
      ***REMOVED***, this)
    ***REMOVED***
  ***REMOVED***

, fixBinField: function(data) ***REMOVED***
    if (!data.bin) return;
    if (typeof data.bin === "string") ***REMOVED***
      var b = ***REMOVED******REMOVED***
      var match
      if (match = data.name.match(/^@[^/]+[/](.*)$/)) ***REMOVED***
        b[match[1]] = data.bin
      ***REMOVED*** else ***REMOVED***
        b[data.name] = data.bin
      ***REMOVED***
      data.bin = b
    ***REMOVED***
  ***REMOVED***

, fixManField: function(data) ***REMOVED***
    if (!data.man) return;
    if (typeof data.man === "string") ***REMOVED***
      data.man = [ data.man ]
    ***REMOVED***
  ***REMOVED***
, fixBundleDependenciesField: function(data) ***REMOVED***
    var bdd = "bundledDependencies"
    var bd = "bundleDependencies"
    if (data[bdd] && !data[bd]) ***REMOVED***
      data[bd] = data[bdd]
      delete data[bdd]
    ***REMOVED***
    if (data[bd] && !Array.isArray(data[bd])) ***REMOVED***
      this.warn("nonArrayBundleDependencies")
      delete data[bd]
    ***REMOVED*** else if (data[bd]) ***REMOVED***
      data[bd] = data[bd].filter(function(bd) ***REMOVED***
        if (!bd || typeof bd !== 'string') ***REMOVED***
          this.warn("nonStringBundleDependency", bd)
          return false
        ***REMOVED*** else ***REMOVED***
          if (!data.dependencies) ***REMOVED***
            data.dependencies = ***REMOVED******REMOVED***
          ***REMOVED***
          if (!data.dependencies.hasOwnProperty(bd)) ***REMOVED***
            this.warn("nonDependencyBundleDependency", bd)
            data.dependencies[bd] = "*"
          ***REMOVED***
          return true
        ***REMOVED***
      ***REMOVED***, this)
    ***REMOVED***
  ***REMOVED***

, fixDependencies: function(data, strict) ***REMOVED***
    var loose = !strict
    objectifyDeps(data, this.warn)
    addOptionalDepsToDeps(data, this.warn)
    this.fixBundleDependenciesField(data)

    ;['dependencies','devDependencies'].forEach(function(deps) ***REMOVED***
      if (!(deps in data)) return
      if (!data[deps] || typeof data[deps] !== "object") ***REMOVED***
        this.warn("nonObjectDependencies", deps)
        delete data[deps]
        return
      ***REMOVED***
      Object.keys(data[deps]).forEach(function (d) ***REMOVED***
        var r = data[deps][d]
        if (typeof r !== 'string') ***REMOVED***
          this.warn("nonStringDependency", d, JSON.stringify(r))
          delete data[deps][d]
        ***REMOVED***
        var hosted = hostedGitInfo.fromUrl(data[deps][d])
        if (hosted) data[deps][d] = hosted.toString()
      ***REMOVED***, this)
    ***REMOVED***, this)
  ***REMOVED***

, fixModulesField: function (data) ***REMOVED***
    if (data.modules) ***REMOVED***
      this.warn("deprecatedModules")
      delete data.modules
    ***REMOVED***
  ***REMOVED***

, fixKeywordsField: function (data) ***REMOVED***
    if (typeof data.keywords === "string") ***REMOVED***
      data.keywords = data.keywords.split(/,\s+/)
    ***REMOVED***
    if (data.keywords && !Array.isArray(data.keywords)) ***REMOVED***
      delete data.keywords
      this.warn("nonArrayKeywords")
    ***REMOVED*** else if (data.keywords) ***REMOVED***
      data.keywords = data.keywords.filter(function(kw) ***REMOVED***
        if (typeof kw !== "string" || !kw) ***REMOVED***
          this.warn("nonStringKeyword");
          return false
        ***REMOVED*** else ***REMOVED***
          return true
        ***REMOVED***
      ***REMOVED***, this)
    ***REMOVED***
  ***REMOVED***

, fixVersionField: function(data, strict) ***REMOVED***
    // allow "loose" semver 1.0 versions in non-strict mode
    // enforce strict semver 2.0 compliance in strict mode
    var loose = !strict
    if (!data.version) ***REMOVED***
      data.version = ""
      return true
    ***REMOVED***
    if (!semver.valid(data.version, loose)) ***REMOVED***
      throw new Error('Invalid version: "'+ data.version + '"')
    ***REMOVED***
    data.version = semver.clean(data.version, loose)
    return true
  ***REMOVED***

, fixPeople: function(data) ***REMOVED***
    modifyPeople(data, unParsePerson)
    modifyPeople(data, parsePerson)
  ***REMOVED***

, fixNameField: function(data, options) ***REMOVED***
    if (typeof options === "boolean") options = ***REMOVED***strict: options***REMOVED***
    else if (typeof options === "undefined") options = ***REMOVED******REMOVED***
    var strict = options.strict
    if (!data.name && !strict) ***REMOVED***
      data.name = ""
      return
    ***REMOVED***
    if (typeof data.name !== "string") ***REMOVED***
      throw new Error("name field must be a string.")
    ***REMOVED***
    if (!strict)
      data.name = data.name.trim()
    ensureValidName(data.name, strict, options.allowLegacyCase)
    if (isBuiltinModule(data.name))
      this.warn("conflictingName", data.name)
  ***REMOVED***


, fixDescriptionField: function (data) ***REMOVED***
    if (data.description && typeof data.description !== 'string') ***REMOVED***
      this.warn("nonStringDescription")
      delete data.description
    ***REMOVED***
    if (data.readme && !data.description)
      data.description = extractDescription(data.readme)
      if(data.description === undefined) delete data.description;
    if (!data.description) this.warn("missingDescription")
  ***REMOVED***

, fixReadmeField: function (data) ***REMOVED***
    if (!data.readme) ***REMOVED***
      this.warn("missingReadme")
      data.readme = "ERROR: No README data found!"
    ***REMOVED***
  ***REMOVED***

, fixBugsField: function(data) ***REMOVED***
    if (!data.bugs && data.repository && data.repository.url) ***REMOVED***
      var hosted = hostedGitInfo.fromUrl(data.repository.url)
      if(hosted && hosted.bugs()) ***REMOVED***
        data.bugs = ***REMOVED***url: hosted.bugs()***REMOVED***
      ***REMOVED***
    ***REMOVED***
    else if(data.bugs) ***REMOVED***
      var emailRe = /^.+@.*\..+$/
      if(typeof data.bugs == "string") ***REMOVED***
        if(emailRe.test(data.bugs))
          data.bugs = ***REMOVED***email:data.bugs***REMOVED***
        else if(url.parse(data.bugs).protocol)
          data.bugs = ***REMOVED***url: data.bugs***REMOVED***
        else
          this.warn("nonEmailUrlBugsString")
      ***REMOVED***
      else ***REMOVED***
        bugsTypos(data.bugs, this.warn)
        var oldBugs = data.bugs
        data.bugs = ***REMOVED******REMOVED***
        if(oldBugs.url) ***REMOVED***
          if(typeof(oldBugs.url) == "string" && url.parse(oldBugs.url).protocol)
            data.bugs.url = oldBugs.url
          else
            this.warn("nonUrlBugsUrlField")
        ***REMOVED***
        if(oldBugs.email) ***REMOVED***
          if(typeof(oldBugs.email) == "string" && emailRe.test(oldBugs.email))
            data.bugs.email = oldBugs.email
          else
            this.warn("nonEmailBugsEmailField")
        ***REMOVED***
      ***REMOVED***
      if(!data.bugs.email && !data.bugs.url) ***REMOVED***
        delete data.bugs
        this.warn("emptyNormalizedBugs")
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

, fixHomepageField: function(data) ***REMOVED***
    if (!data.homepage && data.repository && data.repository.url) ***REMOVED***
      var hosted = hostedGitInfo.fromUrl(data.repository.url)
      if (hosted && hosted.docs()) data.homepage = hosted.docs()
    ***REMOVED***
    if (!data.homepage) return

    if(typeof data.homepage !== "string") ***REMOVED***
      this.warn("nonUrlHomepage")
      return delete data.homepage
    ***REMOVED***
    if(!url.parse(data.homepage).protocol) ***REMOVED***
      data.homepage = "http://" + data.homepage
    ***REMOVED***
  ***REMOVED***

, fixLicenseField: function(data) ***REMOVED***
    if (!data.license) ***REMOVED***
      return this.warn("missingLicense")
    ***REMOVED*** else***REMOVED***
      if (
        typeof(data.license) !== 'string' ||
        data.license.length < 1
      ) ***REMOVED***
        this.warn("invalidLicense")
      ***REMOVED*** else ***REMOVED***
        if (!validateLicense(data.license).validForNewPackages)
          this.warn("invalidLicense")
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***

function isValidScopedPackageName(spec) ***REMOVED***
  if (spec.charAt(0) !== '@') return false

  var rest = spec.slice(1).split('/')
  if (rest.length !== 2) return false

  return rest[0] && rest[1] &&
    rest[0] === encodeURIComponent(rest[0]) &&
    rest[1] === encodeURIComponent(rest[1])
***REMOVED***

function isCorrectlyEncodedName(spec) ***REMOVED***
  return !spec.match(/[\/@\s\+%:]/) &&
    spec === encodeURIComponent(spec)
***REMOVED***

function ensureValidName (name, strict, allowLegacyCase) ***REMOVED***
  if (name.charAt(0) === "." ||
      !(isValidScopedPackageName(name) || isCorrectlyEncodedName(name)) ||
      (strict && (!allowLegacyCase) && name !== name.toLowerCase()) ||
      name.toLowerCase() === "node_modules" ||
      name.toLowerCase() === "favicon.ico") ***REMOVED***
        throw new Error("Invalid name: " + JSON.stringify(name))
  ***REMOVED***
***REMOVED***

function modifyPeople (data, fn) ***REMOVED***
  if (data.author) data.author = fn(data.author)
  ;["maintainers", "contributors"].forEach(function (set) ***REMOVED***
    if (!Array.isArray(data[set])) return;
    data[set] = data[set].map(fn)
  ***REMOVED***)
  return data
***REMOVED***

function unParsePerson (person) ***REMOVED***
  if (typeof person === "string") return person
  var name = person.name || ""
  var u = person.url || person.web
  var url = u ? (" ("+u+")") : ""
  var e = person.email || person.mail
  var email = e ? (" <"+e+">") : ""
  return name+email+url
***REMOVED***

function parsePerson (person) ***REMOVED***
  if (typeof person !== "string") return person
  var name = person.match(/^([^\(<]+)/)
  var url = person.match(/\(([^\)]+)\)/)
  var email = person.match(/<([^>]+)>/)
  var obj = ***REMOVED******REMOVED***
  if (name && name[0].trim()) obj.name = name[0].trim()
  if (email) obj.email = email[1];
  if (url) obj.url = url[1];
  return obj
***REMOVED***

function addOptionalDepsToDeps (data, warn) ***REMOVED***
  var o = data.optionalDependencies
  if (!o) return;
  var d = data.dependencies || ***REMOVED******REMOVED***
  Object.keys(o).forEach(function (k) ***REMOVED***
    d[k] = o[k]
  ***REMOVED***)
  data.dependencies = d
***REMOVED***

function depObjectify (deps, type, warn) ***REMOVED***
  if (!deps) return ***REMOVED******REMOVED***
  if (typeof deps === "string") ***REMOVED***
    deps = deps.trim().split(/[\n\r\s\t ,]+/)
  ***REMOVED***
  if (!Array.isArray(deps)) return deps
  warn("deprecatedArrayDependencies", type)
  var o = ***REMOVED******REMOVED***
  deps.filter(function (d) ***REMOVED***
    return typeof d === "string"
  ***REMOVED***).forEach(function(d) ***REMOVED***
    d = d.trim().split(/(:?[@\s><=])/)
    var dn = d.shift()
    var dv = d.join("")
    dv = dv.trim()
    dv = dv.replace(/^@/, "")
    o[dn] = dv
  ***REMOVED***)
  return o
***REMOVED***

function objectifyDeps (data, warn) ***REMOVED***
  depTypes.forEach(function (type) ***REMOVED***
    if (!data[type]) return;
    data[type] = depObjectify(data[type], type, warn)
  ***REMOVED***)
***REMOVED***

function bugsTypos(bugs, warn) ***REMOVED***
  if (!bugs) return
  Object.keys(bugs).forEach(function (k) ***REMOVED***
    if (typos.bugs[k]) ***REMOVED***
      warn("typo", k, typos.bugs[k], "bugs")
      bugs[typos.bugs[k]] = bugs[k]
      delete bugs[k]
    ***REMOVED***
  ***REMOVED***)
***REMOVED***
