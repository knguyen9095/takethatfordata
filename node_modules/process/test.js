var assert = require('assert');
var ourProcess = require('./browser');
describe('test against our process', function () ***REMOVED***
    test(ourProcess);
***REMOVED***);
if (!process.browser) ***REMOVED***
  describe('test against node', function () ***REMOVED***
    test(process);
  ***REMOVED***);
  vmtest();
***REMOVED***
function test (ourProcess) ***REMOVED***
    describe('test arguments', function () ***REMOVED***
        it ('works', function (done) ***REMOVED***
          var order = 0;


          ourProcess.nextTick(function (num) ***REMOVED***
              assert.equal(num, order++, 'first one works');
              ourProcess.nextTick(function (num) ***REMOVED***
                assert.equal(num, order++, 'recursive one is 4th');
              ***REMOVED***, 3);
          ***REMOVED***, 0);
          ourProcess.nextTick(function (num) ***REMOVED***
              assert.equal(num, order++, 'second one starts');
              ourProcess.nextTick(function (num) ***REMOVED***
                assert.equal(num, order++, 'this is third');
                ourProcess.nextTick(function (num) ***REMOVED***
                    assert.equal(num, order++, 'this is last');
                    done();
                ***REMOVED***, 5);
            ***REMOVED***, 4);
          ***REMOVED***, 1);
          ourProcess.nextTick(function (num) ***REMOVED***

              assert.equal(num, order++, '3rd schedualed happens after the error');
          ***REMOVED***, 2);
        ***REMOVED***);
    ***REMOVED***);
if (!process.browser) ***REMOVED***
    describe('test errors', function (t) ***REMOVED***
        it ('works', function (done) ***REMOVED***
        var order = 0;
        process.removeAllListeners('uncaughtException');
        process.once('uncaughtException', function(err) ***REMOVED***
            assert.equal(2, order++, 'error is third');
            ourProcess.nextTick(function () ***REMOVED***
                assert.equal(5, order++, 'schedualed in error is last');
                done();
            ***REMOVED***);
        ***REMOVED***);
        ourProcess.nextTick(function () ***REMOVED***
            assert.equal(0, order++, 'first one works');
            ourProcess.nextTick(function () ***REMOVED***
            assert.equal(4, order++, 'recursive one is 4th');
            ***REMOVED***);
        ***REMOVED***);
        ourProcess.nextTick(function () ***REMOVED***
            assert.equal(1, order++, 'second one starts');
            throw(new Error('an error is thrown'));
        ***REMOVED***);
        ourProcess.nextTick(function () ***REMOVED***
            assert.equal(3, order++, '3rd schedualed happens after the error');
        ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***
    describe('rename globals', function (t) ***REMOVED***
      var oldTimeout = setTimeout;
      var oldClear = clearTimeout;

      it('clearTimeout', function (done)***REMOVED***

        var ok = true;
        clearTimeout = function () ***REMOVED***
          ok = false;
        ***REMOVED***
        var ran = false;
        function cleanup() ***REMOVED***
          clearTimeout = oldClear;
          var err;
          try ***REMOVED***
            assert.ok(ok, 'fake clearTimeout ran');
            assert.ok(ran, 'should have run');
          ***REMOVED*** catch (e) ***REMOVED***
            err = e;
          ***REMOVED***
          done(err);
        ***REMOVED***
        setTimeout(cleanup, 1000);
        ourProcess.nextTick(function () ***REMOVED***
          ran = true;
        ***REMOVED***);
      ***REMOVED***);
      it('just setTimeout', function (done)***REMOVED***


        setTimeout = function () ***REMOVED***
          setTimeout = oldTimeout;
          try ***REMOVED***
            assert.ok(false, 'fake setTimeout called')
          ***REMOVED*** catch (e) ***REMOVED***
            done(e);
          ***REMOVED***

        ***REMOVED***

        ourProcess.nextTick(function () ***REMOVED***
          setTimeout = oldTimeout;
          done();
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***);
***REMOVED***
function vmtest() ***REMOVED***
  var vm = require('vm');
  var fs = require('fs');
  var process =  fs.readFileSync('./browser.js', ***REMOVED***encoding: 'utf8'***REMOVED***);


  describe('should work in vm in strict mode with no globals', function () ***REMOVED***
    it('should parse', function (done) ***REMOVED***
      var str = '"use strict";var module = ***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;';
      str += process;
      str += 'this.works = process.browser;';
      var script = new vm.Script(str);
      var context = ***REMOVED***
        works: false
      ***REMOVED***;
      script.runInNewContext(context);
      assert.ok(context.works);
      done();
    ***REMOVED***);
    it('setTimeout throws error', function (done) ***REMOVED***
      var str = '"use strict";var module = ***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;';
      str += process;
      str += 'try ***REMOVED***process.nextTick(function () ***REMOVED******REMOVED***)***REMOVED*** catch (e)***REMOVED***this.works = e;***REMOVED***';
      var script = new vm.Script(str);
      var context = ***REMOVED***
        works: false
      ***REMOVED***;
      script.runInNewContext(context);
      assert.ok(context.works);
      done();
    ***REMOVED***);
    it('should generally work', function (done) ***REMOVED***
      var str = '"use strict";var module = ***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;';
      str += process;
      str += 'process.nextTick(function () ***REMOVED***assert.ok(true);done();***REMOVED***)';
      var script = new vm.Script(str);
      var context = ***REMOVED***
        clearTimeout: clearTimeout,
        setTimeout: setTimeout,
        done: done,
        assert: assert
      ***REMOVED***;
      script.runInNewContext(context);
    ***REMOVED***);
    it('late defs setTimeout', function (done) ***REMOVED***
      var str = '"use strict";var module = ***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;';
      str += process;
      str += 'var setTimeout = hiddenSetTimeout;process.nextTick(function () ***REMOVED***assert.ok(true);done();***REMOVED***)';
      var script = new vm.Script(str);
      var context = ***REMOVED***
        clearTimeout: clearTimeout,
        hiddenSetTimeout: setTimeout,
        done: done,
        assert: assert
      ***REMOVED***;
      script.runInNewContext(context);
    ***REMOVED***);
    it('late defs clearTimeout', function (done) ***REMOVED***
      var str = '"use strict";var module = ***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;';
      str += process;
      str += 'var clearTimeout = hiddenClearTimeout;process.nextTick(function () ***REMOVED***assert.ok(true);done();***REMOVED***)';
      var script = new vm.Script(str);
      var context = ***REMOVED***
        hiddenClearTimeout: clearTimeout,
        setTimeout: setTimeout,
        done: done,
        assert: assert
      ***REMOVED***;
      script.runInNewContext(context);
    ***REMOVED***);
    it('late defs setTimeout and then redefine', function (done) ***REMOVED***
      var str = '"use strict";var module = ***REMOVED***exports:***REMOVED******REMOVED******REMOVED***;';
      str += process;
      str += 'var setTimeout = hiddenSetTimeout;process.nextTick(function () ***REMOVED***setTimeout = function ()***REMOVED***throw new Error("foo")***REMOVED***;hiddenSetTimeout(function()***REMOVED***process.nextTick(function ()***REMOVED***assert.ok(true);done();***REMOVED***);***REMOVED***);***REMOVED***);';
      var script = new vm.Script(str);
      var context = ***REMOVED***
        clearTimeout: clearTimeout,
        hiddenSetTimeout: setTimeout,
        done: done,
        assert: assert
      ***REMOVED***;
      script.runInNewContext(context);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***
