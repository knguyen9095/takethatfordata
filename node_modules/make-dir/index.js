'use strict';
const fs = require('fs');
const path = require('path');
const pify = require('pify');

const defaults = ***REMOVED***
	mode: 0o777 & (~process.umask()),
	fs
***REMOVED***;

// https://github.com/nodejs/node/issues/8987
// https://github.com/libuv/libuv/pull/1088
const checkPath = pth => ***REMOVED***
	if (process.platform === 'win32') ***REMOVED***
		const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path.parse(pth).root, ''));

		if (pathHasInvalidWinCharacters) ***REMOVED***
			const err = new Error(`Path contains invalid characters: $***REMOVED***pth***REMOVED***`);
			err.code = 'EINVAL';
			throw err;
		***REMOVED***
	***REMOVED***
***REMOVED***;

module.exports = (input, opts) => Promise.resolve().then(() => ***REMOVED***
	checkPath(input);
	opts = Object.assign(***REMOVED******REMOVED***, defaults, opts);
	const fsP = pify(opts.fs);

	const make = pth => ***REMOVED***
		return fsP.mkdir(pth, opts.mode)
			.then(() => pth)
			.catch(err => ***REMOVED***
				if (err.code === 'ENOENT') ***REMOVED***
					if (err.message.includes('null bytes') || path.dirname(pth) === pth) ***REMOVED***
						throw err;
					***REMOVED***

					return make(path.dirname(pth)).then(() => make(pth));
				***REMOVED***

				return fsP.stat(pth)
					.then(stats => stats.isDirectory() ? pth : Promise.reject())
					.catch(() => ***REMOVED***
						throw err;
					***REMOVED***);
			***REMOVED***);
	***REMOVED***;

	return make(path.resolve(input));
***REMOVED***);

module.exports.sync = (input, opts) => ***REMOVED***
	checkPath(input);
	opts = Object.assign(***REMOVED******REMOVED***, defaults, opts);

	const make = pth => ***REMOVED***
		try ***REMOVED***
			opts.fs.mkdirSync(pth, opts.mode);
		***REMOVED*** catch (err) ***REMOVED***
			if (err.code === 'ENOENT') ***REMOVED***
				if (err.message.includes('null bytes') || path.dirname(pth) === pth) ***REMOVED***
					throw err;
				***REMOVED***

				make(path.dirname(pth));
				return make(pth);
			***REMOVED***

			try ***REMOVED***
				if (!opts.fs.statSync(pth).isDirectory()) ***REMOVED***
					throw new Error();
				***REMOVED***
			***REMOVED*** catch (_) ***REMOVED***
				throw err;
			***REMOVED***
		***REMOVED***

		return pth;
	***REMOVED***;

	return make(path.resolve(input));
***REMOVED***;
