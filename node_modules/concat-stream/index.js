var Writable = require('readable-stream').Writable
var inherits = require('inherits')

if (typeof Uint8Array === 'undefined') ***REMOVED***
  var U8 = require('typedarray').Uint8Array
***REMOVED*** else ***REMOVED***
  var U8 = Uint8Array
***REMOVED***

function ConcatStream(opts, cb) ***REMOVED***
  if (!(this instanceof ConcatStream)) return new ConcatStream(opts, cb)

  if (typeof opts === 'function') ***REMOVED***
    cb = opts
    opts = ***REMOVED******REMOVED***
  ***REMOVED***
  if (!opts) opts = ***REMOVED******REMOVED***

  var encoding = opts.encoding
  var shouldInferEncoding = false

  if (!encoding) ***REMOVED***
    shouldInferEncoding = true
  ***REMOVED*** else ***REMOVED***
    encoding =  String(encoding).toLowerCase()
    if (encoding === 'u8' || encoding === 'uint8') ***REMOVED***
      encoding = 'uint8array'
    ***REMOVED***
  ***REMOVED***

  Writable.call(this, ***REMOVED*** objectMode: true ***REMOVED***)

  this.encoding = encoding
  this.shouldInferEncoding = shouldInferEncoding

  if (cb) this.on('finish', function () ***REMOVED*** cb(this.getBody()) ***REMOVED***)
  this.body = []
***REMOVED***

module.exports = ConcatStream
inherits(ConcatStream, Writable)

ConcatStream.prototype._write = function(chunk, enc, next) ***REMOVED***
  this.body.push(chunk)
  next()
***REMOVED***

ConcatStream.prototype.inferEncoding = function (buff) ***REMOVED***
  var firstBuffer = buff === undefined ? this.body[0] : buff;
  if (Buffer.isBuffer(firstBuffer)) return 'buffer'
  if (typeof Uint8Array !== 'undefined' && firstBuffer instanceof Uint8Array) return 'uint8array'
  if (Array.isArray(firstBuffer)) return 'array'
  if (typeof firstBuffer === 'string') return 'string'
  if (Object.prototype.toString.call(firstBuffer) === "[object Object]") return 'object'
  return 'buffer'
***REMOVED***

ConcatStream.prototype.getBody = function () ***REMOVED***
  if (!this.encoding && this.body.length === 0) return []
  if (this.shouldInferEncoding) this.encoding = this.inferEncoding()
  if (this.encoding === 'array') return arrayConcat(this.body)
  if (this.encoding === 'string') return stringConcat(this.body)
  if (this.encoding === 'buffer') return bufferConcat(this.body)
  if (this.encoding === 'uint8array') return u8Concat(this.body)
  return this.body
***REMOVED***

var isArray = Array.isArray || function (arr) ***REMOVED***
  return Object.prototype.toString.call(arr) == '[object Array]'
***REMOVED***

function isArrayish (arr) ***REMOVED***
  return /Array\]$/.test(Object.prototype.toString.call(arr))
***REMOVED***

function isBufferish (p) ***REMOVED***
  return typeof p === 'string' || isArrayish(p) || (p && typeof p.subarray === 'function')
***REMOVED***

function stringConcat (parts) ***REMOVED***
  var strings = []
  var needsToString = false
  for (var i = 0; i < parts.length; i++) ***REMOVED***
    var p = parts[i]
    if (typeof p === 'string') ***REMOVED***
      strings.push(p)
    ***REMOVED*** else if (Buffer.isBuffer(p)) ***REMOVED***
      strings.push(p)
    ***REMOVED*** else if (isBufferish(p)) ***REMOVED***
      strings.push(new Buffer(p))
    ***REMOVED*** else ***REMOVED***
      strings.push(new Buffer(String(p)))
    ***REMOVED***
  ***REMOVED***
  if (Buffer.isBuffer(parts[0])) ***REMOVED***
    strings = Buffer.concat(strings)
    strings = strings.toString('utf8')
  ***REMOVED*** else ***REMOVED***
    strings = strings.join('')
  ***REMOVED***
  return strings
***REMOVED***

function bufferConcat (parts) ***REMOVED***
  var bufs = []
  for (var i = 0; i < parts.length; i++) ***REMOVED***
    var p = parts[i]
    if (Buffer.isBuffer(p)) ***REMOVED***
      bufs.push(p)
    ***REMOVED*** else if (isBufferish(p)) ***REMOVED***
      bufs.push(new Buffer(p))
    ***REMOVED*** else ***REMOVED***
      bufs.push(new Buffer(String(p)))
    ***REMOVED***
  ***REMOVED***
  return Buffer.concat(bufs)
***REMOVED***

function arrayConcat (parts) ***REMOVED***
  var res = []
  for (var i = 0; i < parts.length; i++) ***REMOVED***
    res.push.apply(res, parts[i])
  ***REMOVED***
  return res
***REMOVED***

function u8Concat (parts) ***REMOVED***
  var len = 0
  for (var i = 0; i < parts.length; i++) ***REMOVED***
    if (typeof parts[i] === 'string') ***REMOVED***
      parts[i] = new Buffer(parts[i])
    ***REMOVED***
    len += parts[i].length
  ***REMOVED***
  var u8 = new U8(len)
  for (var i = 0, offset = 0; i < parts.length; i++) ***REMOVED***
    var part = parts[i]
    for (var j = 0; j < part.length; j++) ***REMOVED***
      u8[offset++] = part[j]
    ***REMOVED***
  ***REMOVED***
  return u8
***REMOVED***
