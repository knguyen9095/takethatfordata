var createHash = require('create-hash')
var stream = require('stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) ***REMOVED***
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
***REMOVED***)

function Sign (algorithm) ***REMOVED***
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
***REMOVED***
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) ***REMOVED***
  this._hash.update(data)
  done()
***REMOVED***

Sign.prototype.update = function update (data, enc) ***REMOVED***
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
***REMOVED***

Sign.prototype.sign = function signMethod (key, enc) ***REMOVED***
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
***REMOVED***

function Verify (algorithm) ***REMOVED***
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
***REMOVED***
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) ***REMOVED***
  this._hash.update(data)
  done()
***REMOVED***

Verify.prototype.update = function update (data, enc) ***REMOVED***
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
***REMOVED***

Verify.prototype.verify = function verifyMethod (key, sig, enc) ***REMOVED***
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
***REMOVED***

function createSign (algorithm) ***REMOVED***
  return new Sign(algorithm)
***REMOVED***

function createVerify (algorithm) ***REMOVED***
  return new Verify(algorithm)
***REMOVED***

module.exports = ***REMOVED***
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
***REMOVED***
